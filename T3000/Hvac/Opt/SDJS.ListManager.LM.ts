
import SDJS from '../../SDJS/SDJS.Index';
import HvTimer from '../../GPTimer';
import SDUI from '../../SDUI/SDUI.Index';
import SDGraphics from '../../SDGraphics/SDGraphics.Index';
import '../../SDGraphics/SDGraphics.Text.Index';
import GPP from '../../gListManager';
import $ from 'jquery';
// import '../../../app-t5/SDGraphics/SDGraphics.Text.Formatter';
import { DefaultFmtText, DefaultStyle, DefaultRuntimeText } from '../../SDGraphics/TextFormatter.Index';
// import '../../../app-t5/MouseEvent';
import {
  CalcExtendedOffsetSegment, compareAngle, CalcSegmentIntersect,
  RotatePoint, isStart, CalcExtendedOffsetSegment, joinUrlElements,
  enumToString, SDJS_StrEscapeRegExp, SDJS_StrReplaceAll, SDJS_XML2Str, SDJS_CloneToDoc,
  CalcSegmentAngle, OffsetPointAtAngle, CalcSegmentIntersect, GetSegmentCenterPoint,
  compareAngle, DeltaAngle, DeltaPoints, GetSegmentsDeltaAngle, AreSegmentsObtuse,
  AreSegmentsAjacent, InsertSegment, SegmentsInAlignment, isEmptySeg, isEnd
} from '../../Common';

import {
  Evt_WorkAreaHammerTap, Evt_WorkAreaMouseWheel,

  Evt_WorkAreaHammerPinchIn, Evt_WorkAreaHammerPinchOut, Evt_WorkAreaHammerPinchEnd,
  SDJS_LM_WorkAreaHold, Evt_WorkAreaHammerDragStart, Evt_WorkAreaHammerDrawStart,
  Evt_ShapeTapFactory,
  Evt_DrawTrackHandlerFactory, Evt_ShapeDragStartFactory,
  Evt_ShapeHoldFactory,
  Evt_ShapeDoubleTapFactory,
  Evt_RubberBandDrag,
  Evt_RubberBandDragEnd,
  SDJS_LM_WorkAreaHammerMobileDoubleTap,
  Evt_StampObjectDragEndFactory,
  Evt_StampObjectDrag,
  Evt_MouseStampObjectMove,
  Evt_MouseStampObjectDoneFactory,
  Evt_ShapeDrag,
  Evt_ShapeDragEnd

} from '../../../app-t5/MouseEvent';
import ConstantData from '../Data/ConstantData';
import Utils3 from '../Helper/Utils3';

function DeltaPoints(e, t) {
  var a,
    r;
  return (a = Math.abs(e.x - t.x)) > (r = Math.abs(e.y - t.y)) ? a : r
}

// var objectStore = GlobalData.objectStore;
SDUI.CMSContent = new SDUI.CMSContentController;

// Update objectStore to GlobalData.objectStore

ListManager.LM = function () {
};

ListManager.LM.prototype.GetStdTextureCategory = function (e) {
  var t,
    a;
  for (t = this.TextureList.Categories.length, a = 0; a < t; a++) if (e === this.TextureList.Categories[a]) return a;
  return - 1
};

ListManager.LM.prototype.GetStdTextureIndex = function (e, t) {
  var a,
    r,
    i;
  if (this.TextureList) {
    if (e < 0) return - 1;
    for (a = this.TextureList.Textures.length, r = 0; r < a; r++) if (
      e === (i = this.TextureList.Textures[r]).categoryindex &&
      t === i.name
    ) return r
  }
  return - 1
};

ListManager.LM.prototype.GetTextureFileName = function (e, t, a) {
  var r = e + '-' + t,
    i = r.replace(/ /g, '_');
  if (r = i.replace('&', '_'), a === FileParser.Image_Dir.dir_jpg) r += '.jpg';
  else r += '.png';
  return r
};

ListManager.LM.prototype.LoadStdTextures = function () {
  SDUI.CMSContent.GetTextures(
    SDUI.AppSettings.ContentSource,
    (
      function (e) {
        if (e) {
          var t = SDF.ReadTexturesFromBuffer(e);
          if (t) {
            var a,
              r,
              i;
            for (a = t.Textures.length, r = 0; r < a; r++) (i = t.Textures[r]).filename = GlobalData.optManager.GetTextureFileName(t.Categories[i.categoryindex], i.name, i.imagetype);
            GlobalData.optManager.TextureList = t,
              GlobalData.optManager.NStdTextures = a
          }
        }
      }
    )
  )
};

ListManager.LM.prototype.SD_AddRichGradient = function (e, t) {
  var a,
    r;
  for (r = e.length, a = 0; a < r; a++) if (Resources.SD_EqualRichGradient(e[a], t)) return a;
  return e.push(t),
    r
};


ListManager.LM.prototype.InitFontList = function (e) {
  var t,
    a,
    r;
  for (t = Resources.WebFonts.length, a = 0; a < t; a++) r = new SDF.FontRecord(
    a,
    Resources.WebFonts[a].Name,
    Resources.WebFonts[a].Category
  ),
    e.push(r);
  r = new SDF.FontRecord(Resources.WebFonts.length, 'Segoe UI', 'sanserif'),
    e.push(r)
};

ListManager.LM.prototype.Initialize = function () {
  console.log('ListManager.LM.prototype.Initialize ============');

  //#region

  /*
  if (!this.bIsInitialized) {
    this.theSVGDocumentID = '#svg-area',
      this.sendstate = 0,
      this.theRubberBand = null,
      this.theRubberBandStartX = 0,
      this.theRubberBandStartY = 0,
      this.theRubberBandFrame = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      this.theDragBBoxList = [],
      this.theDragElementList = [],
      this.theDragEnclosingRect = null,
      this.theDragStartX = 0,
      this.theDragStartY = 0,
      this.theDragDeltaX = 0,
      this.theDragDeltaY = 0,
      this.theDragTargetID = null,
      this.theDragTargetBBox = {},
      this.theDragGotMove = !1,
      this.theDragGotAutoResizeRight = !1,
      this.theDragGotAutoResizeBottom = !1,
      this.theDragGotAutoResizeOldX = [],
      this.theDragGotAutoResizeOldY = [],
      this.theNudgeDelta = 10,
      this.NoUndo = !1,
      this.theActionStoredObjectID = - 1,
      this.theActionSVGObject = null,
      this.theActionTriggerID = 0,
      this.theActionTriggerData = 0,
      this.theActionStartX = 0,
      this.theActionStartY = 0,
      this.theActionTableLastX = 0,
      this.theActionTableLastY = 0,
      this.theActionOldExtra = 0,
      this.theActionBBox = {},
      this.theActionNewBBox = {},
      this.theActionLockAspectRatio = !1,
      this.theActionAspectRatioWidth = 0,
      this.theActionAspectRatioHeight = 0,
      this.bUseDefaultStyle = !1,
      this.NewObjectVisible = !1,
      this.EmptySymbolList = [],
      this.EmptyEMFList = [],
      this.AddCount = 0,
      this.LineStamp = !1,
      this.theDrawStartX = 0,
      this.theDrawStartY = 0,
      this.theLineDrawStartX = 0,
      this.theLineDrawStartY = 0,
      this.FromOverlayLayer = !1,
      this.LineDrawID = - 1,
      this.LineDrawLineID = - 1,
      this.Dynamic_Guides = null,
      this.theRotateKnobCenterDivisor = {
        x: 2,
        y: 2
      },
      this.theRotateStartPoint = {},
      this.theRotateEndPoint = {},
      this.theRotateStartRotation = 0,
      this.theRotateObjectRadians = 0,
      this.theRotateEndRotation = 0,
      this.theRotatePivotX = 0,
      this.theRotatePivotY = 0,
      this.theRotateSnap = 5,
      this.enhanceRotateSnap = 45,
      this.theDrawShape = null,
      this.StampTimeout = null,
      this.wasClickInShape = !1,
      this.autoScrollTimer = new GPTimer(this),
      this.autoScrollTimerID = - 1,
      this.autoScrollXPos = 0,
      this.autoScrollYPos = 0,
      this.bInAutoScroll = !1,
      this.textEntryTimer = null,
      this.isMobilePlatform = /mobile|ip(ad|hone|od)|android|silk/i.test(navigator.userAgent),
      this.isGestureCapable = 'ontouchstart' in window ||
      'onpointerdown' in window &&
      navigator.maxTouchPoints &&
      navigator.maxTouchPoints > 1,
      this.isIOS = /ip(ad|hone|od)/i.test(navigator.userAgent),
      this.isAndroid = /android/i.test(navigator.userAgent),
      this.isMac = /(mac os x)/i.test(navigator.userAgent) &&
      !this.isMobilePlatform,
      this.isMac &&
      this.isGestureCapable &&
      (this.isMac = !1, this.isIOS = !0, this.isMobilePlatform = !0),
      this.bTouchInitiated = !1,
      this.isMobilePlatform &&
      (
        ConstantData.Defines.SED_KnobSize = 19,
        ConstantData.Defines.SED_RKnobSize = 21,
        ConstantData.Defines.SED_CKnobSize = 28,
        ConstantData.Defines.CONNECTPT_DIM = 19,
        ConstantData.Defines.JOINPT_DIM = 19,
        ConstantData.Defines.JOINPT_LINE_DIM = 95,
        ConstantData.Defines.CONNECTPT_LINE_DIM = 85,
        ConstantData.Defines.SED_Slop = 20,
        ConstantData.Defines.SED_SlopShapeExtra = 20
      ),
      this.MainAppElement = null,
      this.MainAppHammer = null,
      this.WorkAreaElement = null,
      this.WorkAreaHammer = null,
      this.WorkAreaTextInputProxy = null,
      this.theVirtualKeyboardLifterElementFrame = null,
      this.bTouchPanStarted = !1,
      this.touchPanX,
      this.touchPanY,
      this.bIsFullScreen = !1,
      this.TEHammer = null,
      this.TEWorkAreaHammer = null,
      this.TEClickAreaHammer = null,
      this.TEDecAreaHammer = null,
      this.TENoteAreaHammer = null,
      this.theSelectedListBlockID = - 1,
      this.theSEDSessionBlockID = - 1,
      this.theTEDSessionBlockID = - 1,
      this.theLayersManagerBlockID = - 1,
      this.stampCompleteCallback = null,
      this.stampCompleteUserData = null,
      this.stampHCenter = !0,
      this.stampVCenter = !0,
      this.stampShapeOffsetX = 0,
      this.stampShapeOffsetY = 0,
      this.stampSticky = !1,
      this.LastOpDuplicate = !1,
      this.NudgeOpen = !1,
      this.NudgeX = 0,
      this.NudgeY = 0,
      this.NudgeGrowX = 0,
      this.NudgeGrowY = 0,
      this.currentModalOperation = ListManager.ModalOperations.NONE,
      this.FormatPainterMode = ListManager.FormatPainterModes.NONE,
      this.FormatPainterStyle = new Resources.QuickStyle,
      this.FormatPainterSticky = !1,
      this.FormatPainterText = new DefaultStyle,// new SDGraphics.Text.Formatter.DefaultStyle,
      this.FormatPainterParaFormat = new SDGraphics.Text.ParagraphFormat,
      this.FormatPainterArrows = null,
      this.svgDoc = null,
      this.svgObjectLayer = null,
      this.svgOverlayLayer = null,
      this.svgHighlightLayer = null,
      this.theEventTimestamp = 0,
      this.actionArrowHideTimer = new GPTimer(this),
      this.uniqueID = 0,
      this.theTextClipboard = null,
      this.theHtmlClipboard = null,
      this.CutFromButton = !1,
      this.theImageClipboard = null;
    var e = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.SELECTEDLIST_OBJECT, []);
    if (null === e) throw new SDJSError({
      source: 'ListManager.LMInitialize',
      message: 'Got null value for theSelectedListBlock'
    });
    this.theSelectedListBlockID = e.ID;
    var t = {};
    if (Resources.CurrentTheme) {
      var a = Resources.FindStyle(ConstantData.Defines.DefaultStyle);
      a ? t = $.extend(!0, {
      }, a) : Resources.CurrentTheme.Styles &&
      Resources.CurrentTheme.Styles.length &&
      (a = Resources.CurrentTheme.Styles[0], t = $.extend(!0, {
      }, a))
    }
    this.TextureList = new Resources.SDTextureList,
      this.NStdTextures = 0,
      this.LoadStdTextures(),
      this.RichGradients = [],
      this.HasBlockDirectory = !1,
      this.FileVersion = SDF.SDF_FVERSION2022,
      this.ActiveExpandedView = null,
      this.CommentUserIDs = [],
      this.theContentHeader = new ListManager.ContentHeader,
      this.InitFontList(this.theContentHeader.FontList);
    var r = new ListManager.SEDSession;
    r.def.style = t,
      r.def.pen = Utils1.DeepCopy(ConstantData.Defines.PenStylingDefault),
      r.def.highlighter = Utils1.DeepCopy(ConstantData.Defines.HighlighterStylingDefault),
      r.d_sarrow = 0,
      r.d_sarrowdisp = !1,
      r.d_earrow = 0,
      r.d_earrowdisp = !1,
      r.d_arrowsize = 1,
      r.CurrentTheme = SDUI.Commands.MainController.Theme.GetCurrentTheme();
    var i = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.SED_SESSION_OBJECT, r);
    this.theSEDSessionBlockID = i.ID;
    var n = new ListManager.LayersManager,
      o = new ListManager.Layer;
    o.name = ConstantData.Defines.DefaultLayerName,
      n.layers.push(o),
      n.nlayers = 1,
      n.activelayer = 0;
    var s = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LAYERS_MANAGER_OBJECT, n);
    this.theLayersManagerBlockID = s.ID,
      this.SelectionState = new ListManager.SelectionAttributes;
    var l = new ListManager.TEDSession,
      S = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.TED_SESSION_OBJECT, l);
    this.theTEDSessionBlockID = S.ID;
    var c = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LINKLIST_OBJECT, []);
    if (null === c) throw new SDJSError({
      source: 'ListManager.LMInitialize',
      message: 'Got null value for theLinksBlock'
    });
    this.theLinksBlockID = c.ID,
      this.PreserveUndoState(!0),
      this.InitSVGDocument(),
      this.SVGroot = this.svgDoc.svgObj.node,
      this.UpdateSelectionAttributes(null),
      this.BuildArrowheadLookupTables(),
      this.theDirtyList = [],
      this.theDirtyListMoveOnly = [],
      this.DirtyListReOrder = !1,
      this.theMoveList = [],
      this.theMoveBounds = null,
      this.PinRect = null,
      this.LinkParams = null,
      this.RightClickParams = null,
      this.PostMoveSelectID = null,
      this.bBuildingSymbols = !1,
      this.bTokenizeStyle = !1,
      this.bDrawEffects = !0,
      this.initialStateID = GlobalData.stateManager.CurrentStateID,
      this.nObjectStoreStart = GlobalData.objectStore.StoredObjects.length,
      this.cachedHeight = null,
      this.cachedWidth = null,
      this.bInDimensionEdit = !1,
      this.curNoteShape = - 1,
      this.curNoteTableCell = null,
      this.curNoteGraphPint = null,
      this.bInNoteEdit = !1,
      this.bNoteChanged = !1,
      this.OldAllowSave = !0,
      this.SocketAction = [],
      this.PageAction = [],
      this.PagesToDelete = [],
      this.OldFileMetaData = null,
      this.curHiliteShape = - 1,
      this.SetEditMode(ConstantData.EditState.DEFAULT),
      this.alternateStateManagerVars = [],
      this.alternateStateManagerVars.bHasBeenSaved = !1,
      this.bitmapImportCanvas = null,
      this.bitmapImportCanvasCTX = null,
      this.bitmapScaledCanvas = null,
      this.bitmapScaledCanvasCTX = null,
      this.bitmapImportSourceWidth = 0,
      this.bitmapImportSourceHeight = 0,
      this.bitmapImportDestWidth = 800,
      this.bitmapImportDestHeight = 800,
      this.bitmapImportMaxScaledWidth = 1200,
      this.bitmapImportMaxScaledHeight = 1200,
      this.bitmapImportDPI = 200,
      this.bitmapImportMimeType = '',
      this.bitmapImportOriginalSize = 0,
      this.bitmapImportScaledSize = 0,
      this.scaledBitmapCallback = null,
      this.bitmapImportEXIFdata = null,
      this.bitmapImportFile = null,
      this.bitmapImportResult = null,
      this.symbolLibraryItemID = - 1,
      this.bIsInitialized = !0,
      this.TopLeftPastePos = {
        x: 0,
        y: 0
      },
      this.TopLeftPasteScrollPos = {
        x: 0,
        y: 0
      },
      this.PasteCount = 0,
      this.DoubleClickSymbolTimeStamp = 0,
      this.ImportContext = null
  }
  */

  //#endregion




  // debugger;

  if (!this.bIsInitialized) {
    this.theSVGDocumentID = '#svg-area';
    this.sendstate = 0;
    this.theRubberBand = null;
    this.theRubberBandStartX = 0;
    this.theRubberBandStartY = 0;
    this.theRubberBandFrame = { x: 0, y: 0, width: 0, height: 0 };
    this.theDragBBoxList = [];
    this.theDragElementList = [];
    this.theDragEnclosingRect = null;
    this.theDragStartX = 0;
    this.theDragStartY = 0;
    this.theDragDeltaX = 0;
    this.theDragDeltaY = 0;
    this.theDragTargetID = null;
    this.theDragTargetBBox = {};
    this.theDragGotMove = false;
    this.theDragGotAutoResizeRight = false;
    this.theDragGotAutoResizeBottom = false;
    this.theDragGotAutoResizeOldX = [];
    this.theDragGotAutoResizeOldY = [];
    this.theNudgeDelta = 10;
    this.NoUndo = false;
    this.theActionStoredObjectID = -1;
    this.theActionSVGObject = null;
    this.theActionTriggerID = 0;
    this.theActionTriggerData = 0;
    this.theActionStartX = 0;
    this.theActionStartY = 0;
    this.theActionTableLastX = 0;
    this.theActionTableLastY = 0;
    this.theActionOldExtra = 0;
    this.theActionBBox = {};
    this.theActionNewBBox = {};
    this.theActionLockAspectRatio = false;
    this.theActionAspectRatioWidth = 0;
    this.theActionAspectRatioHeight = 0;
    this.bUseDefaultStyle = false;
    this.NewObjectVisible = false;
    this.EmptySymbolList = [];
    this.EmptyEMFList = [];
    this.AddCount = 0;
    this.LineStamp = false;
    this.theDrawStartX = 0;
    this.theDrawStartY = 0;
    this.theLineDrawStartX = 0;
    this.theLineDrawStartY = 0;
    this.FromOverlayLayer = false;
    this.LineDrawID = -1;
    this.LineDrawLineID = -1;
    this.Dynamic_Guides = null;
    this.theRotateKnobCenterDivisor = { x: 2, y: 2 };
    this.theRotateStartPoint = {};
    this.theRotateEndPoint = {};
    this.theRotateStartRotation = 0;
    this.theRotateObjectRadians = 0;
    this.theRotateEndRotation = 0;
    this.theRotatePivotX = 0;
    this.theRotatePivotY = 0;
    this.theRotateSnap = 5;
    this.enhanceRotateSnap = 45;
    this.theDrawShape = null;
    this.StampTimeout = null;
    this.wasClickInShape = false;
    this.autoScrollTimer = new HvTimer(this)/*GPTimer(this)*/;
    this.autoScrollTimerID = -1;
    this.autoScrollXPos = 0;
    this.autoScrollYPos = 0;
    this.bInAutoScroll = false;
    this.textEntryTimer = null;
    // this.isMobilePlatform = /mobile|ip(ad|hone|od)|android|silk/i.test(navigator.userAgent);
    this.isGestureCapable = 'ontouchstart' in window || ('onpointerdown' in window && navigator.maxTouchPoints && navigator.maxTouchPoints > 1);
    // this.isIOS = /ip(ad|hone|od)/i.test(navigator.userAgent);
    // this.isAndroid = /android/i.test(navigator.userAgent);
    // this.isMac = /(mac os x)/i.test(navigator.userAgent) && !this.isMobilePlatform;
    // if (this.isMac && this.isGestureCapable) {
    //   this.isMac = false;
    //   this.isIOS = true;
    //   this.isMobilePlatform = true;
    // }
    this.bTouchInitiated = false;
    if (this.isMobilePlatform) {
      ConstantData.Defines.SED_KnobSize = 19;
      ConstantData.Defines.SED_RKnobSize = 21;
      ConstantData.Defines.SED_CKnobSize = 28;
      ConstantData.Defines.CONNECTPT_DIM = 19;
      ConstantData.Defines.JOINPT_DIM = 19;
      ConstantData.Defines.JOINPT_LINE_DIM = 95;
      ConstantData.Defines.CONNECTPT_LINE_DIM = 85;
      ConstantData.Defines.SED_Slop = 20;
      ConstantData.Defines.SED_SlopShapeExtra = 20;
    }
    this.MainAppElement = null;
    this.MainAppHammer = null;
    this.WorkAreaElement = null;
    this.WorkAreaHammer = null;
    this.WorkAreaTextInputProxy = null;
    this.theVirtualKeyboardLifterElementFrame = null;
    this.bTouchPanStarted = false;
    this.touchPanX = 0;
    this.touchPanY = 0;
    this.bIsFullScreen = false;
    this.TEHammer = null;
    this.TEWorkAreaHammer = null;
    this.TEClickAreaHammer = null;
    this.TEDecAreaHammer = null;
    this.TENoteAreaHammer = null;
    this.theSelectedListBlockID = -1;
    this.theSEDSessionBlockID = -1;
    this.theTEDSessionBlockID = -1;
    this.theLayersManagerBlockID = -1;
    this.stampCompleteCallback = null;
    this.stampCompleteUserData = null;
    this.stampHCenter = true;
    this.stampVCenter = true;
    this.stampShapeOffsetX = 0;
    this.stampShapeOffsetY = 0;
    this.stampSticky = false;
    this.LastOpDuplicate = false;
    this.NudgeOpen = false;
    this.NudgeX = 0;
    this.NudgeY = 0;
    this.NudgeGrowX = 0;
    this.NudgeGrowY = 0;
    this.currentModalOperation = ListManager.ModalOperations.NONE;
    this.FormatPainterMode = ListManager.FormatPainterModes.NONE;
    this.FormatPainterStyle = new Resources.QuickStyle();
    this.FormatPainterSticky = false;
    this.FormatPainterText = new DefaultStyle();
    this.FormatPainterParaFormat = new SDGraphics.Text.ParagraphFormat();
    this.FormatPainterArrows = null;
    this.svgDoc = null;
    this.svgObjectLayer = null;
    this.svgOverlayLayer = null;
    this.svgHighlightLayer = null;
    this.theEventTimestamp = 0;
    this.actionArrowHideTimer = new HvTimer(this)/*GPTimer(this)*/;
    this.uniqueID = 0;
    this.theTextClipboard = null;
    this.theHtmlClipboard = null;
    this.CutFromButton = false;
    this.theImageClipboard = null;

    const selectedListBlock = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.SELECTEDLIST_OBJECT, []);
    if (selectedListBlock === null) {
      // throw new SDJSError({ source: 'ListManager.LMInitialize', message: 'Got null value for theSelectedListBlock' });
      throw new Error('Got null value for theSelectedListBlock');
    }
    this.theSelectedListBlockID = selectedListBlock.ID;

    let defaultStyle = {};


    // if (Resources.CurrentTheme) {
    //   const foundStyle = Resources.FindStyle(/*ConstantData.Defines.DefaultStyle*/ 'Style30');
    //   console.log('SDJS.Initialize foundStyle',foundStyle);
    //   if (foundStyle) {
    //     defaultStyle = $.extend(true, {}, foundStyle);
    //   } else if (Resources.CurrentTheme.Styles && Resources.CurrentTheme.Styles.length) {
    //     defaultStyle = $.extend(true, {}, Resources.CurrentTheme.Styles[0]);
    //   }
    // }


    defaultStyle = new Resources.QuickStyle();

    console.log('SDJS.Initialize defaultStyle', defaultStyle);

    this.TextureList = new Resources.SDTextureList();
    this.NStdTextures = 0;
    // DOUBLE this.LoadStdTextures();
    this.RichGradients = [];
    this.HasBlockDirectory = false;
    this.FileVersion = SDF.SDF_FVERSION2022;
    this.ActiveExpandedView = null;
    this.CommentUserIDs = [];
    this.theContentHeader = new ListManager.ContentHeader();
    this.InitFontList(this.theContentHeader.FontList);

    const sedSession = new ListManager.SEDSession();
    sedSession.def.style = defaultStyle;
    sedSession.def.pen = Utils1.DeepCopy(ConstantData.Defines.PenStylingDefault);
    sedSession.def.highlighter = Utils1.DeepCopy(ConstantData.Defines.HighlighterStylingDefault);
    sedSession.d_sarrow = 0;
    sedSession.d_sarrowdisp = false;
    sedSession.d_earrow = 0;
    sedSession.d_earrowdisp = false;
    sedSession.d_arrowsize = 1;
    sedSession.CurrentTheme = SDUI.Commands.MainController.Theme.GetCurrentTheme();

    const sedSessionBlock = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.SED_SESSION_OBJECT, sedSession);
    this.theSEDSessionBlockID = sedSessionBlock.ID;

    const layersManager = new LayersManager();
    const defaultLayer = new Layer();
    defaultLayer.name = ConstantData.Defines.DefaultLayerName;
    layersManager.layers.push(defaultLayer);
    layersManager.nlayers = 1;
    layersManager.activelayer = 0;

    const layersManagerBlock = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LAYERS_MANAGER_OBJECT, layersManager);
    this.theLayersManagerBlockID = layersManagerBlock.ID;

    this.SelectionState = new ListManager.SelectionAttributes();

    const tedSession = new TEDSession();
    const tedSessionBlock = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.TED_SESSION_OBJECT, tedSession);
    this.theTEDSessionBlockID = tedSessionBlock.ID;

    const linksBlock = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LINKLIST_OBJECT, []);
    if (linksBlock === null) {
      // throw new SDJSError({ source: 'ListManager.LMInitialize', message: 'Got null value for theLinksBlock' });
      throw new Error('Got null value for theLinksBlock');
    }
    this.theLinksBlockID = linksBlock.ID;

    this.PreserveUndoState(true);
    this.InitSVGDocument();
    this.SVGroot = this.svgDoc.svgObj.node;
    this.UpdateSelectionAttributes(null);
    this.BuildArrowheadLookupTables();
    this.theDirtyList = [];
    this.theDirtyListMoveOnly = [];
    this.DirtyListReOrder = false;
    this.theMoveList = [];
    this.theMoveBounds = null;
    this.PinRect = null;
    this.LinkParams = null;
    this.RightClickParams = null;
    this.PostMoveSelectID = null;
    this.bBuildingSymbols = false;
    this.bTokenizeStyle = false;
    this.bDrawEffects = true;
    this.initialStateID = GlobalData.stateManager.CurrentStateID;
    this.nObjectStoreStart = GlobalData.objectStore.StoredObjects.length;
    this.cachedHeight = null;
    this.cachedWidth = null;
    this.bInDimensionEdit = false;
    this.curNoteShape = -1;
    this.curNoteTableCell = null;
    this.curNoteGraphPint = null;
    this.bInNoteEdit = false;
    this.bNoteChanged = false;
    this.OldAllowSave = true;
    this.SocketAction = [];
    this.PageAction = [];
    this.PagesToDelete = [];
    this.OldFileMetaData = null;
    this.curHiliteShape = -1;
    this.SetEditMode(ConstantData.EditState.DEFAULT);
    this.alternateStateManagerVars = [];
    this.alternateStateManagerVars.bHasBeenSaved = false;
    this.bitmapImportCanvas = null;
    this.bitmapImportCanvasCTX = null;
    this.bitmapScaledCanvas = null;
    this.bitmapScaledCanvasCTX = null;
    this.bitmapImportSourceWidth = 0;
    this.bitmapImportSourceHeight = 0;
    this.bitmapImportDestWidth = 800;
    this.bitmapImportDestHeight = 800;
    this.bitmapImportMaxScaledWidth = 1200;
    this.bitmapImportMaxScaledHeight = 1200;
    this.bitmapImportDPI = 200;
    this.bitmapImportMimeType = '';
    this.bitmapImportOriginalSize = 0;
    this.bitmapImportScaledSize = 0;
    this.scaledBitmapCallback = null;
    this.bitmapImportEXIFdata = null;
    this.bitmapImportFile = null;
    this.bitmapImportResult = null;
    this.symbolLibraryItemID = -1;
    this.bIsInitialized = true;
    this.TopLeftPastePos = { x: 0, y: 0 };
    this.TopLeftPasteScrollPos = { x: 0, y: 0 };
    this.PasteCount = 0;
    this.DoubleClickSymbolTimeStamp = 0;
    this.ImportContext = null;
  }





};

ListManager.LM.prototype.ResetgListManager = function (e) {
  this.curHiliteShape = - 1,
    this.bInNoteEdit = !1,
    this.curNoteShape = - 1, //
    this.initialStateID = GlobalData.stateManager.CurrentStateID,
    this.NoUndo = !1,
    this.EmptySymbolList = [],
    this.EmptyEMFList = [],
    this.AddCount = 0,
    this.LastOpDuplicate = !1,
    this.NudgeOpen = !1,
    this.NudgeX = 0,
    this.NudgeY = 0,
    this.NudgeGrowX = 0,
    this.NudgeGrowY = 0,
    this.theContentHeader.SDDataID = - 1,
    this.theContentHeader.orgcharttable = '',
    this.RecentlyLinkedTrelloCards = [],
    this.FileVersion = SDF.SDF_FVERSION2022
}


ListManager.LM.prototype.GetLastShape = function (e, t) {
  var a,
    r,
    i,
    n = - 1,
    o = this.ActiveLayerZList(),
    s = ConstantData.ObjFlags.SEDO_NotVisible;
  for (a = o.length - 1; a >= 0; a--) {
    if (null == e) return o[a];
    if (
      null != (r = this.GetObjectPtr(o[a], !1)) &&
      (!(r.flags & s) && r.DrawingObjectBaseClass === e)
    ) {
      if (- 1 === n && (n = o[a]), t) if (r.hooks.length) {
        if (
          (i = this.GetObjectPtr(r.hooks[0].objid, !1)) &&
          i.DrawingObjectBaseClass != ConstantData.DrawingObjectBaseClass.CONNECTOR
        ) continue
      } else if (this.FindChildArray(o[a], - 1) < 0) continue;
      return o[a]
    }
  }
  return n >= 0 ? n : - 1
}

ListManager.LM.prototype.ScaleNewNativeSymbol = function (e, t, a) {
  var r,
    i = ConstantData.TextFlags,
    n = a.width / e.Frame.width;
  0 === e.Frame.width &&
    (n = 1);
  var o = a.height / e.Frame.height;
  if (
    0 === e.Frame.height &&
    (o = 1),
    e.ScaleObject(0, 0, null, 0, n, o, !1),
    this.theActionBBox = $.extend(!0, {
    }, e.Frame),
    e.ObjGrow = t.ScalingData.ObjectGrowFlags,
    e.TextFlags = t.TextData.TextFlags,
    t.ChangedBy !== ConstantData.Defines.CustomSymbolSignature &&
    e.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
    e.DataID >= 0 &&
    (
      e.TextFlags & ConstantData.TextFlags.SED_TF_AttachB &&
      (
        e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_AttachB, !1),
        e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_None, !0)
      ),
      e.TextFlags & ConstantData.TextFlags.SED_TF_AttachA &&
      (
        e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_AttachA, !1),
        e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_None, !0)
      )
    ),
    e.TextFlags & (
      i.SED_TF_AttachA | i.SED_TF_AttachB | i.SED_TF_AttachC | i.SED_TF_AttachD
    ) &&
    (e.TextFlags = Utils2.SetFlag(e.TextFlags, i.SED_TF_None, !1)),
    e.flags = Utils2.SetFlag(
      e.flags,
      ConstantData.ObjFlags.SEDO_DropOnBorder,
      t.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_DropOnBorder
    ),
    e.flags = Utils2.SetFlag(
      e.flags,
      ConstantData.ObjFlags.SEDO_DropOnTable,
      t.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_DropOnTable
    ),
    t.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_NoLinking &&
    (e.hookflags = 0),
    t.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_NoTarget &&
    (e.targflags = 0),
    t.ShapeData.UseFlags,
    ListManager.LibraryUseFlags.SDLE_UseShowDimensions,
    t.ShapeData.UseFlags & ListManager.LibraryUseFlags.SDLE_UseText &&
    (
      e.TextGrow = t.TextData.TextGrow,
      e.TextAlign = SDF.W32JustToTextAlign(
        t.TextData.HorizontalJustification,
        t.TextData.VerticalJustification
      )
    ),
    (r = e.GetTable(!1)) &&
    this.Table_ScaleTable(e, r, n, o),
    t.SymbolData
  ) {
    var s = [],
      l = t.Title ||
        '';
    l = l.replace(/"/g, '\\"'),
      s.push({
        placeholder: '{{TITLE}}',
        value: l
      }),
      this.SetShapeDataFromSDON(e.BlockID, t.SymbolData, s)
  }
}

ListManager.LM.prototype.ScaleNewNativeSymbolList = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S = !1,
    c = null,
    u = {},
    p = null,
    d = 0;
  if (
    STANDARD_INTERIOR_WALL = ConstantData.Defines.STANDARD_INTERIOR_WALL,
    METRIC_INTERIOR_WALL = ConstantData.Defines.METRIC_INTERIOR_WALL,
    0 !== (r = e.length)
  ) {
    for (o = e[0], i = 0; i < r; i++) if (
      null != (n = this.GetObjectPtr(e[i], !1)) &&
      n.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL
    ) {
      S = !0,
        48,
        GlobalData.optManager.GetDrawingScale(GlobalData.docHandler.rulerSettings),
        GlobalData.docHandler.rulerSettings.useInches ||
        Utils2.IsEqual(n.StyleRecord.Line.Thickness, STANDARD_INTERIOR_WALL) &&
        (
          n.StyleRecord.Line.Thickness = METRIC_INTERIOR_WALL,
          n.StyleRecord.Line.BThick = METRIC_INTERIOR_WALL / 2,
          n.ChangeLineThickness(STANDARD_INTERIOR_WALL),
          50,
          this.AddToDirtyList(e[i])
        );
      var D = n.StyleRecord.Line.BThick;
      n.polylist &&
        n.polylist.closed &&
        n.StyleRecord.Line.BThick &&
        (d = 2 * D),
        o = e[i];
      break
    }
    for (i = 0; i < r; i++) null != (n = this.GetObjectPtr(e[i], !1)) &&
      (
        null === p ? (p = {}, Utils2.CopyRect(p, n.r)) : Utils2.UnionRect(p, n.r, p),
        S &&
        n.objecttype != ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL ||
        (
          null === c ? (c = {}, Utils2.CopyRect(c, n.Frame)) : Utils2.UnionRect(c, n.Frame, c)
        )
      );
    if (S) for (s = a.width / (c.width - d), l = a.height / (c.height - d), i = 0; i < r; i++) null != (n = this.GetObjectPtr(e[i], !1)) &&
      (
        u.x = n.Frame.x,
        u.y = n.Frame.y,
        u.width = n.Frame.width * s,
        u.height = n.Frame.height * l,
        n.ScaleObject(0, 0, null, 0, s, l, !0),
        this.SetLinkFlag(n.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        this.AddToDirtyList(e[i])
      );
    else n = this.GetObjectPtr(o, !1);
    return o
  }
}

ListManager.LM.prototype.ReplaceObjectHooks = function (e, t) {
  var a,
    r,
    i,
    n;
  if (
    t.hooks.length &&
    (
      r = t.hooks[0].objid,
      n = t.hooks[0].connect.x,
      a = this.GetObjectPtr(r, !1)
    )
  ) {
    e.hooks.push(t.hooks[0]),
      t.hooks.pop();
    var o = this.GetObjectPtr(this.theLinksBlockID, !1),
      s = o.length;
    if (
      (i = this.FindExactLink(o, r, t.BlockID)) >= 0 &&
      (o[i].hookid = e.BlockID),
      a.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.CONNECTOR &&
      (
        a.arraylist.hook[n + SDJS.ConnectorDefines.SEDA_NSkip].id = e.BlockID
      ),
      (i = this.FindLink(o, t.BlockID, !0)) >= 0
    ) for (; o[i].targetid === t.BlockID;) {
      var l,
        S,
        c = this.GetObjectPtr(o[i].hookid, !1);
      if (c) for (l = c.hooks.length, S = 0; S < l; S++) c.hooks[S].objid === t.BlockID &&
        (c.hooks[S].objid = e.BlockID);
      if (o[i].targetid = e.BlockID, ++i >= s) break
    }
  }
},

  ListManager.LM.prototype.ReplaceSpecialObject = function (e, t, a, r) {
    var i,
      n,
      o,
      s;
    this.VisibleZList();
    for (n = a.length, i = 0; i < n; i++) if (s = a[i], (o = this.GetObjectPtr(s, !1)) && o.objecttype === r && s !== t) return a[i] = t,
      a[n - 1] === t &&
      (a[n - 1] = s),
      e.Frame = Utils1.DeepCopy(o.Frame),
      o.extraflags = Utils2.SetFlag(o.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1),
      o.flags & ConstantData.ObjFlags.SEDO_Lock &&
      (
        e.flags = Utils2.SetFlag(e.flags, ConstantData.ObjFlags.SEDO_Lock, !0)
      ),
      s;
    return 0
  }

ListManager.LM.prototypeAddNewNativeSymbol = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = null,
    l = {
      selectedList: []
    },
    S = 0,
    c = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    u = ConstantData.TextFlags;
  if (e.nativeDataArrayBuffer) {
    e.SymbolData &&
      e.SymbolData.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_Scale &&
      (S = ConstantData.LayerFlags.SDLF_UseEdges);
    var p = GlobalData.optManager.ZListPreserve(S),
      d = p.length;
    if (
      SDF.ReadSymbolFromBuffer(
        e.nativeDataArrayBuffer,
        e.Frame.x,
        e.Frame.y,
        4,
        !1,
        t,
        l,
        !1,
        !1,
        !1,
        e.SymbolData.ShapeData,
        !1
      )
    ) return null;
    var D = p.length;
    D > d &&
      (s = p[d]);
    var g = D - d;
    if (s && s >= 0) {
      if (e.SymbolData) {
        if (
          0 == e.SymbolData.IsCustomContent &&
          'VisioStencil' !== e.SymbolData.ChangedBy &&
          1 === g &&
          e.SymbolData.Id !== ConstantData.Defines.Floorplan_WallOpeningID &&
          GlobalData.gBaseManager.UpdateShapeList(
            this.GetObjectPtr(s, !1),
            e.SymbolData.Id,
            e.SymbolData.Title,
            !1
          ),
          0 == (
            e.SymbolData.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_NoColor
          )
        ) {
          var h = Utils1.DeepCopy(c.def.style);
          if (a) h = Utils1.DeepCopy(a.StyleRecord);
          for (r = d; r < D; r++) (i = this.GetObjectPtr(p[r], !0)) &&
            (
              i.SymbolData = {
                Id: e.SymbolData.Id
              },
              i.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE ? a ||
                (h.Line = c.def.style.Border) : a ||
              (h.Line = c.def.style.Line),
              i.ApplyStyle(h, i instanceof ListManager.GroupSymbol == !1),
              this.AddToDirtyList(p[r])
            )
        }
        if (
          0 == (
            e.SymbolData.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_Auto
          )
        ) {
          var m = e.SymbolData;
          i = this.GetObjectPtr(s, !0),
            m.TextData.TextFlags = 0,
            i.TextGrow = m.TextData.TextGrow,
            i.TextFlags = 0,
            i.TextFlags & u.SED_TF_AttachB + u.SED_TF_AttachA + u.SED_TF_AttachC + u.SED_TF_None + u.SED_TF_AttachD ||
            (
              i.left_sindent = m.TextData.LeftTextIndent,
              i.top_sindent = m.TextData.TopTextIndent,
              i.right_sindent = m.TextData.RightTextIndent,
              i.bottom_sindent = m.TextData.BottomTextIndent,
              i.UpdateFrame(i.Frame)
            )
        }
      }
      if (this.theDrawShape || a) {
        if (l.selectedList.length > 1) {
          if (
            o = l.selectedList,
            s = this.ScaleNewNativeSymbolList(o, e.SymbolData, e.Frame),
            this.LinkParams &&
            !a
          ) for (d = o.length, r = 0; r < d; r++) this.LinkParams.lpCircList.push(r);
          return a ||
            (this.theMoveList = o),
            s
        }
        if (
          (n = this.GetObjectPtr(s, null == a)).SymbolID = e.SymbolID,
          !a &&
          n.flags & ConstantData.ObjFlags.SEDO_DropOnBorder &&
          this.LinkParams &&
          (
            this.LinkParams.DropOnLine = !0,
            this.LinkParams.lpCircList.push(s)
          ),
          this.ScaleNewNativeSymbol(n, e.SymbolData, e.Frame),
          a
        ) {
          if (
            n.SetShapeOrigin(a.Frame.x, a.Frame.y),
            this.ReplaceObjectHooks(n, a),
            (n = this.GetObjectPtr(s, !0)).objecttype === ConstantData.ObjectTypes.SD_OBJT_FRAME
          ) {
            p = GlobalData.optManager.ZListPreserve();
            var C = GlobalData.optManager.ReplaceSpecialObject(n, n.BlockID, p, n.objecttype);
            if (C) {
              var y = [
                C
              ];
              GlobalData.optManager.DeleteObjects(y, !1),
                n.UpdateFrame(n.Frame)
            }
          }
          GlobalData.optManager.AddToDirtyList(s)
        } else this.theDrawShape = n
      }
    }
  }
  return s
}

ListManager.LM.prototype.MarkAllAllVisibleHigherLayerObjectsDirty = function () {
  var e,
    t,
    a = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1);
  for (e = a.activelayer - 1; e >= 0; e--) if (
    !(!a.layers[e].flags & ConstantData.LayerFlags.SDLF_Visible)
  ) for (t = 0; t < a.layers[e].zList.length; t++) GlobalData.optManager.AddToDirtyList(a.layers[e].zList[t])
}



ListManager.LM.prototype.GanttAddtoDelete = function (e, t, a) {
  var r,
    i,
    n = this.GetMoveList(this.theDragTargetID, !0, !0, !1, {
    }, !1);
  mlen = n.length;
  var o = 0 == (a.extraflags & ConstantData.ExtraFlags.SEDE_NoDelete) &&
    !t;
  for (r = 0; r < mlen; r++) o &&
    (i = this.GetObjectPtr(n[r], !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
    (
      (i = this.GetObjectPtr(n[r], !0)).extraflags = Utils2.SetFlag(i.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1)
    ),
    e.indexOf(n[r]) < 0 &&
    e.push(n[r])
}

ListManager.LM.prototypeContainerAddtoDelete = function (e, t, a) {
  var r,
    i,
    n = !0;
  a &&
    (n = !1);
  var o = this.GetMoveList(e.BlockID, n, !0, !1, {
  }, !1);
  for (i = o.length, r = 0; r < i; r++) t.indexOf(o[r]) < 0 &&
    t.push(o[r])
}

ListManager.LM.prototypeSwimlaneAddtoDelete = function (e, t, a) {
  var r,
    i;
  if (
    e.moreflags & ConstantData.ObjMoreFlags.SED_MF_Frame_Group ||
    a
  ) for (i = e.FramezList.length, r = 0; r < i; r++) t.indexOf(e.FramezList[r]) < 0 &&
    t.push(e.FramezList[r])
}

ListManager.LM.prototypeTimelineAddtoDelete = function (e, t, a) {
  let r = GlobalData.gBusinessManager.GetChartObjectList(e.BlockID),
    n = r.length;
  for (i = 0; i < n; i++) t.indexOf(r[i]) < 0 &&
    t.push(r[i]);
  e.ParentFrameID &&
    t.indexOf(e.ParentFrameID) < 0 &&
    t.push(e.ParentFrameID)
}

ListManager.LM.prototypeTableContainerAddtoDelete = function (e, t) {
  var a,
    r,
    i,
    n = e.GetTable(!1);
  if (n) for (r = n.cells.length, a = 0; a < r; a++) if ((i = n.cells[a]).childcontainer >= 0) {
    t.indexOf(i.childcontainer) < 0 &&
      t.push(i.childcontainer);
    var o = this.GetObjectPtr(i.childcontainer, !1);
    this.ContainerAddtoDelete(o, t)
  }
  var s,
    l = this.GetMoveList(e.BlockID, !0, !0, !1, {
    }, !1);
  for (mlen = l.length, s = 0; s < mlen; s++) t.indexOf(l[s]) < 0 &&
    t.push(l[s])
}

ListManager.LM.prototypeAddtoDelete = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M = - 1,
    P = !1,
    R = 0,
    A = {},
    _ = [],
    E = (
      SDJS.ConnectorDefines.SEDA_NSkip,
      SDJS.ConnectorDefines
    );
  for (i = e.length, r = 0; r < i; r++) if (null != (n = GlobalData.optManager.GetObjectPtr(e[r], !1))) if (
    y = e[r],
    n.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART ? this.GanttAddtoDelete(e, t, n) : n.objecttype === ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER ? this.TableContainerAddtoDelete(n, e) : n.IsSwimlane() ? (this.SwimlaneAddtoDelete(n, e), i = e.length) : n.objecttype === ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE ? this.TimelineAddtoDelete(n, e) : n instanceof ListManager.ShapeContainer &&
      (this.ContainerAddtoDelete(n, e), P = !0),
    n.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.CONNECTOR
  ) if (P = !0, n._IsFlowChartConnector()) switch (n.objecttype) {
    case ConstantData.ObjectTypes.SD_OBJT_BAD_STEPCHART_BRANCH:
      break;
    case ConstantData.ObjectTypes.SD_OBJT_STEPCHARTH_BRANCH:
    case ConstantData.ObjectTypes.SD_OBJT_STEPCHARTV_BRANCH:
      t ||
        (e.splice(r, 1), i--, r--);
      break;
    default:
      Business.GetConnectorTree(e[r], e)
  } else n.objecttype === ConstantData.ObjectTypes.SD_OBJT_CAUSEEFFECT_BRANCH ? (
    void 0 === C &&
    n.hooks.length &&
    (l = this.GetObjectPtr(n.hooks[0].objid, !1)).DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.CONNECTOR &&
    (
      (
        C = l.arraylist.hook.length - SDJS.ConnectorDefines.SEDA_NSkip
      ) < 0 &&
      (C = 0),
      0 == (l.extraflags & ConstantData.ExtraFlags.SEDE_NoDelete) &&
      C++
    ),
    void 0 !== C &&
    (
      C - R > 1 &&
        0 == (n.extraflags & ConstantData.ExtraFlags.SEDE_NoDelete) ||
        t ? (Business.GetConnectorTree(e[r], e), R++) : (
        e.splice(r, 1),
        r--,
        i--,
        y = - 1,
        u = - 1,
        n.arraylist.hook[E.A_Cl].id >= 0 &&
        (u = n.arraylist.hook[E.A_Cl].id),
        n.arraylist.hook[E.A_Cr].id >= 0 &&
        (u = n.arraylist.hook[E.A_Cr].id),
        u >= 0 &&
        (g = e.indexOf(u)) >= 0 &&
        e.splice(g, 1)
      )
    )
  ) : (
    Business.GetConnectorTree(e[r], e),
    i = e.length,
    t &&
    n.hooks.length &&
    (l = this.GetObjectPtr(n.hooks[0].objid, !1)) &&
    l.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
    e.indexOf(n.hooks[0].objid) < 0 &&
    e.push(n.hooks[0].objid)
  );
  else {
    if (p = !1, (s = Business.GetParentConnector(e[r], null)) >= 0) {
      if (P = !0, l = GlobalData.optManager.GetObjectPtr(s, !1)) {
        var w = {};
        if (
          this.IsConnectorEndShape(n, l, w) &&
          (
            void 0 === C &&
            (C = w.nshapes),
            e.indexOf(s) < 0 ? C - R > 1 ||
              w.pasted ||
              t ? (
              e.push(s),
              l.extraflags & ConstantData.ExtraFlags.SEDE_NoDelete &&
              bIsPrimaryStateManager &&
              (
                l.extraflags = Utils2.SetFlag(l.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1)
              ),
              Business.GetConnectorTree(s, e),
              w.pasted ||
              R++
            ) : e.splice(r, 1) : w.nshapes <= 1 &&
            !w.pasted &&
            !t &&
            (e.splice(r, 1), (g = e.indexOf(s)) >= 0 && e.splice(g, 1))
          ),
          l.objecttype === ConstantData.ObjectTypes.SD_OBJT_GENOGRAM_BRANCH
        ) p = gGenogramManager.DeleteConnector(l, e, r, A),
          y = A.parentshape;
        else if (l._IsFlowChartConnector()) _ = [],
          f = GlobalData.optManager.FindChildArray(e[r], - 1),
          null == (L = GlobalData.optManager.GetObjectPtr(f, !1)) &&
          (L = l),
          l.objecttype === ConstantData.ObjectTypes.SD_OBJT_STEPCHARTV_BRANCH ||
            L.objecttype === ConstantData.ObjectTypes.SD_OBJT_STEPCHARTV_BRANCH ? gStepChartVManager &&
            !t &&
          (M = gStepChartVManager.DeleteShape(e[r], e, !1, null, _)) : l.objecttype === ConstantData.ObjectTypes.SD_OBJT_STEPCHARTH_BRANCH ||
            L.objecttype === ConstantData.ObjectTypes.SD_OBJT_STEPCHARTH_BRANCH ? gStepChartHManager &&
            !t &&
          (M = gStepChartHManager.DeleteShape(e[r], e, !1, null, _)) : GlobalDatagFlowChartManager &&
          !t &&
          (M = GlobalDatagFlowChartManager.DeleteShape(e[r], e, !1, _));
        else if (
          l.arraylist.styleflags & ConstantData.SEDA_Styles.SEDA_CoManager
        ) {
          if (t) for (
            y = l.arraylist.hook[SDJS.ConnectorDefines.SEDA_NSkip].id,
            e.indexOf(s) < 0 &&
            e.push(s),
            S = l.arraylist.hook.length,
            c = SDJS.ConnectorDefines.SEDA_NSkip;
            c < S;
            c++
          ) u = l.arraylist.hook[c].id,
            e.indexOf(u) < 0 &&
            e.push(u);
          else for (
            S = l.arraylist.hook.length,
            c = SDJS.ConnectorDefines.SEDA_NSkip;
            c < S;
            c++
          ) if (u = l.arraylist.hook[c].id, e.indexOf(u) < 0) {
            p = !0;
            break
          }
        } else 0 === l.hooks.length &&
          GlobalData.optManager.CN_GetNShapes(s) <= 1 &&
          - 1 === e.indexOf(s) &&
          e.push(s)
      }
    } else {
      var F;
      for (
        n.objecttype === ConstantData.ObjectTypes.SD_OBJT_MINDMAP_MAIN ? (F = 2, p = !1) : (F = 1, t || (p = !0)),
        I = - 1,
        m = 0;
        m < F;
        m++
      ) if ((o = GlobalData.optManager.FindChildArray(e[r], I)) >= 0) {
        if (
          (d = this.GetObjectPtr(o, !0)) &&
          d.arraylist &&
          (
            d.arraylist.hook.length <= SDJS.ConnectorDefines.SEDA_NSkip ||
            d.flags & ConstantData.ObjFlags.SEDO_NotVisible
          ) &&
          (p = !1),
          d.IsGenoConnector()
        ) {
          p = !1;
          var v = - 1;
          for (
            S = d.arraylist.hook.length,
            c = SDJS.ConnectorDefines.SEDA_NSkip;
            c < S;
            c++
          ) if (u = d.arraylist.hook[c].id, e.indexOf(u) < 0) {
            if (
              (h = this.GetObjectPtr(u, !1)).DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE
            ) {
              p = !0;
              break
            }
            h.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.CONNECTOR &&
              (v = u)
          }
          !1 === p &&
            (
              e.indexOf(o) < 0 &&
              e.push(o),
              v >= 0 &&
              e.indexOf(v) < 0 &&
              e.push(v),
              p = !0
            )
        }
        d.flags = Utils2.SetFlag(d.flags, ConstantData.ObjFlags.SEDO_Obj1, !0),
          this.SetLinkFlag(o, ConstantData.LinkFlags.SED_L_MOVE)
      }
      I = o
    }
    if (!p) for (
      b = (o = GlobalData.optManager.FindAllChildConnectors(y)).length,
      m = 0;
      m < b;
      m++
    ) P = !0,
      (d = this.GetObjectPtr(o[m], !1))._IsFlowChartConnector() ||
      Business.GetConnectorTree(o[m], e);
    if (
      n.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
      !t
    ) {
      var G,
        N,
        k = [];
      if ((D = this.HealLine(n, !1, k)) >= 0) for (P = !0, e.indexOf(D) < 0 && e.push(D), N = k.length, G = 0; G < N; G++) e.indexOf(k[G]) < 0 &&
        e.push(k[G])
    }
    if (n.associd >= 0) {
      var U = !1;
      (h = this.GetObjectPtr(n.associd, !1)) &&
        (
          h.hooks.length &&
          h.hooks[0].hookpt === ConstantData.HookPts.SED_KATD &&
          (U = !0),
          h.moreflags & ConstantData.ObjMoreFlags.SED_MF_VisioText &&
          (U = !0),
          h.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_EVENT &&
          h.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL ||
          e.indexOf(n.associd) < 0 &&
          e.push(n.associd)
        ),
        U &&
        e.indexOf(n.associd) < 0 &&
        e.push(n.associd)
    }
    if (
      n.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.LINE
    ) {
      var J = GlobalData.optManager.FindAllChildObjects(
        n.BlockID,
        ConstantData.DrawingObjectBaseClass.SHAPE,
        ConstantData.ObjectTypes.SD_OBJT_MULTIPLICITY
      );
      if (J && J.length) {
        var x = J.length;
        for (m = 0; m < x; m++) e.indexOf(J[m]) < 0 &&
          e.push(J[m])
      }
    }
    if (!t) for (
      b = (
        T = GlobalData.optManager.FindAllChildObjects(n.BlockID, ConstantData.DrawingObjectBaseClass.LINE, null)
      ).length,
      c = 0;
      c < b;
      c++
    ) e.indexOf(T[c]) < 0 &&
      e.push(T[c])
  }
  return a &&
    (a.connectors = P),
    M
},



  ListManager.LM.prototypeDeleteBlock = function (e) {
    var t = GlobalData.objectStore.GetObject(e);
    t &&
      t.Delete()
  }



ListManager.LM.prototypeDeleteAllObjects = function () {
  var e,
    t,
    a = Globals.StoredObjectType;
  for (e = GlobalData.objectStore.StoredObjects.length - 1; e >= 0; e--) switch ((t = GlobalData.objectStore.StoredObjects[e]).Type) {
    case a.SED_SESSION_OBJECT:
      t.Data.tselect = - 1;
      break;
    case a.TED_SESSION_OBJECT:
      break;
    case a.SELECTEDLIST_OBJECT:
    case a.LINKLIST_OBJECT:
      t.Data.length = 0;
      break;
    case a.LAYERS_MANAGER_OBJECT:
      t.Data.activelayer = 0,
        t.Data.nlayers = 1,
        t.Data.layers.length = 1,
        t.Data.layers[0].zList.length = 0;
      break;
    default:
      t.Delete()
  }
  GlobalData.optManager.ResetStateManager(),
    SDJS_reinit_state_manager_id(),
    GlobalData.optManager.theContentHeader.Save_HistoryState = - 1
}

ListManager.LM.prototypeClearAllObjects = function (e) {
  var t,
    a,
    r,
    i,
    n = this.ZList(),
    o = [],
    s = !1,
    l = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1),
    S = - 1,
    c = - 1,
    u = ListManager.Trello.TrelloArchiveCard;
  if (
    this.ClearAnySelection(!1),
    this.UpdateSelectionAttributes(null),
    this.TrelloArchiveCard = function () {
    },
    ListManager.Trello.TrelloArchiveCard = this.TrelloArchiveCard,
    l
  ) for (a = 0; a < l.nlayers; a++) {
    if (l.layers[a].flags & ConstantData.LayerFlags.SDLF_UseEdges) {
      S = a;
      break
    }
    l.layers[a].layertype === ConstantData.LayerTypes.SD_LAYERT_MINDMAP &&
      a,
      l.layers[a].layertype === ConstantData.LayerTypes.SD_LAYERT_GANTT &&
      (c = a)
  }
  if (t = n.length, e) {
    for (a = 0; a < t; a++) if (i = n[a], r = this.GetObjectPtr(i, !1)) {
      if (
        r.objecttype === ConstantData.ObjectTypes.SD_OBJT_CAUSEEFFECT_BRANCH
      ) s = !0;
      else if (
        r.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR
      ) c < 0 &&
        (
          r.extraflags = Utils2.SetFlag(r.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1)
        );
      else {
        if (r.extraflags & ConstantData.ExtraFlags.SEDE_NoDelete) continue;
        if (S >= 0 && S === this.FindLayerForShapeID(r.BlockID)) continue
      }
      o.push(i)
    }
    o.length &&
      (
        s &&
        this.AddtoDelete(o, !1, null),
        this.DeleteObjects(o, !1),
        GlobalData.optManager.CommentIdleTab(),
        this.CompleteOperation(null, !0)
      )
  }
  ListManager.Trello.TrelloArchiveCard = u
}

ListManager.LM.prototypeResetStateManager = function () {
  GlobalData.stateManager.ResetToSpecificState(this.initialStateID)
}

ListManager.LM.prototypeSwitchToAlternateStateManager = function (e, t, a) {
  bIsPrimaryStateManager &&
    this.SavePrimaryStateManagerLMMethods(),
    SDJS_select_alternate_state_manager(e, t, a)
}


ListManager.LM.prototypeSwitchToPrimaryStateManager = function () {
  bIsPrimaryStateManager ||
    SDJS_select_primary_state_manager()
}

ListManager.LM.prototypeSavePrimaryStateManagerLMMethods = function () {
  this.alternateStateManagerVars.bHasBeenSaved ||
    (
      this.alternateStateManagerVars.ScrollObjectIntoView = this.ScrollObjectIntoView,
      this.alternateStateManagerVars.ResizeSVGDocument = this.ResizeSVGDocument,
      this.alternateStateManagerVars.FitDocumentWorkArea = this.FitDocumentWorkArea,
      this.alternateStateManagerVars.UpdateSelectionAttributes = this.UpdateSelectionAttributes,
      this.alternateStateManagerVars.DeleteURL = this.DeleteURL,
      this.alternateStateManagerVars.AutoFormatShape = gFlowChartManager.AutoFormatShape,
      this.alternateStateManagerVars.GanttDeleteTask = this.GanttDeleteTask,
      this.ScrollObjectIntoView = function (e, t) {
      },
      this.ResizeSVGDocument = function () {
      },
      this.FitDocumentWorkArea = function () {
      },
      this.UpdateSelectionAttributes = function (e) {
      },
      this.DeleteURL = function (e) {
      },
      GlobalDatagFlowChartManager.AutoFormatShape = function (e, t) {
      },
      this.GanttDeleteTask = function () {
        return - 2
      },
      this.alternateStateManagerVars.bHasBeenSaved = !0
    )
}

ListManager.LM.prototypeRestorePrimaryStateManagerLMMethods = function () {
  this.ScrollObjectIntoView = this.alternateStateManagerVars.ScrollObjectIntoView,
    this.alternateStateManagerVars.ScrollObjectIntoView = null,
    this.ResizeSVGDocument = this.alternateStateManagerVars.ResizeSVGDocument,
    this.alternateStateManagerVars.ResizeSVGDocument = null,
    this.FitDocumentWorkArea = this.alternateStateManagerVars.FitDocumentWorkArea,
    this.alternateStateManagerVars.FitDocumentWorkArea = null,
    this.UpdateSelectionAttributes = this.alternateStateManagerVars.UpdateSelectionAttributes,
    this.alternateStateManagerVars.UpdateSelectionAttributes = null,
    this.DeleteURL = this.alternateStateManagerVars.DeleteURL,
    this.alternateStateManagerVars.DeleteURL = null,
    GlobalDatagFlowChartManager.AutoFormatShape = this.alternateStateManagerVars.AutoFormatShape,
    this.alternateStateManagerVars.AutoFormatShape = null,
    this.GanttDeleteTask = this.alternateStateManagerVars.GanttDeleteTask,
    this.alternateStateManagerVars.GanttDeleteTask = null,
    this.alternateStateManagerVars.bHasBeenSaved = !1
}

ListManager.LM.prototypeCloneObjectStore = function (e, t) {
  SDJS_clone_object_store(e, t)
}

ListManager.LM.prototypeAlternateStateManagerMacroTest1 = function () {
  var e,
    t,
    a,
    r = new SDJS.Editor.BaseStateManager,
    i = new SDJS.Editor.ObjectStore;
  this.SwitchToAlternateStateManager(r, i, !0);
  var n = this.ZList();
  e = n.length;
  var o = [];
  for (t = 0; t < e; ++t) a = n[t],
    this.GetObjectPtr(a, !1) instanceof ListManager.Oval ||
    o.push(a);
  o.length &&
    (this.SelectObjects(o, !1, !1), this.DeleteSelectedObjects()),
    this.SelectAllObjects(),
    this.CopyObjects(),
    this.RestorePrimaryStateManager()
}

ListManager.LM.prototypeAlternateStateManagerMacroTest2 = function () {
  var e,
    t,
    a,
    r = new SDJS.Editor.BaseStateManager,
    i = new SDJS.Editor.ObjectStore;
  this.SwitchToAlternateStateManager(r, i, !0);
  var n = this.ZList();
  e = n.length;
  var o = [];
  for (t = 0; t < e; ++t) a = n[t],
    this.GetObjectPtr(a, !1) instanceof ListManager.Oval ||
    o.push(a);
  o.length &&
    (this.SelectObjects(o, !1, !1), this.DeleteSelectedObjects());
  var s = new SDJS.Editor.BaseStateManager,
    l = new SDJS.Editor.ObjectStore;
  for (
    this.SwitchToAlternateStateManager(s, l, !0),
    e = (n = this.ZList()).length,
    o = [],
    t = 0;
    t < e;
    ++t
  ) a = n[t],
    - 1 == this.GetObjectPtr(a, !1).DataID &&
    o.push(a);
  o.length &&
    (this.SelectObjects(o, !1, !1), this.DeleteSelectedObjects()),
    this.SelectAllObjects(),
    this.CopyObjects(),
    this.RestorePrimaryStateManager()
}

ListManager.LM.prototypeAlternateStateManagerMacroTest3 = function () {
  var e = clipboardManager;
  clipboardManager = new SDJS.Editor.ObjectStoreFactory.Create;
  var t,
    a,
    r,
    i = new SDJS.Editor.BaseStateManager,
    n = new SDJS.Editor.ObjectStore;
  this.SwitchToAlternateStateManager(i, n, !0);
  var o = this.ZList();
  t = o.length;
  var s = [];
  for (a = 0; a < t; ++a) r = o[a],
    this.GetObjectPtr(r, !1) instanceof ListManager.Oval ||
    s.push(r);
  s.length &&
    (this.SelectObjects(s, !1, !1), this.DeleteSelectedObjects());
  var l = new SDJS.Editor.BaseStateManager,
    S = new SDJS.Editor.ObjectStore;
  for (
    this.SwitchToPrimaryStateManager(),
    this.SwitchToAlternateStateManager(l, S, !0),
    t = (o = this.ZList()).length,
    s = [],
    a = 0;
    a < t;
    ++a
  ) r = o[a],
    this.GetObjectPtr(r, !1) instanceof ListManager.Rect ||
    s.push(r);
  s.length &&
    (this.SelectObjects(s, !1, !1), this.DeleteSelectedObjects()),
    this.SelectAllObjects(),
    this.CopyObjects();
  var c = new SDJS.Editor.BaseStateManager,
    u = new SDJS.Editor.ObjectStore;
  this.SwitchToPrimaryStateManager(),
    this.SwitchToAlternateStateManager(c, u, !0),
    this.SelectAllObjects(),
    this.DeleteSelectedObjects(),
    this.PasteObjects(),
    this.SwitchToAlternateStateManager(i, n, !1),
    this.SelectAllObjects(),
    this.CopyObjects(),
    this.SwitchToAlternateStateManager(c, u, !1),
    this.PasteObjects(),
    this.SelectAllObjects(),
    clipboardManager = e,
    this.CopyObjects(),
    this.RestorePrimaryStateManager()
}

ListManager.LM.prototypeAddNewLayerAtFront = function (e, t, a) {
  var r = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0);
  if (r.nlayers >= ConstantData.Defines.MaxUserLayers) return Utils2.Alert(Resources.Strings.MaxLayersReached, null),
    !1;
  var i = new Layer();
  return i.name = e,
    i.flags = 0,
    t &&
    (i.flags |= ConstantData.LayerFlags.SDLF_Visible),
    a &&
    (i.flags |= ConstantData.LayerFlags.SDLF_Active),
    r.layers.unshift(i),
    r.nlayers++,
    !0
}

ListManager.LM.prototypeMakeLayerActiveByIndex = function (e) {
  GlobalData.optManager.CloseEdit();
  var t = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  t.moreflags & ConstantData.SessionMoreFlags.SEDSM_HideLayerTabs &&
    (
      (
        t = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)
      ).moreflags = Utils2.SetFlag(
        t.moreflags,
        ConstantData.SessionMoreFlags.SEDSM_HideLayerTabs,
        !1
      )
    );
  var a = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1),
    r = a.nlayers,
    i = a.layers,
    n = a.layers[a.activelayer].layertype;
  if (e >= 0 && e < r) {
    if (n === ConstantData.LayerTypes.SD_LAYERT_MINDMAP) ListManager.TaskMap.CommitVisualOutline();
    switch (
    (a = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0)).activelayer = e,
    i[a.activelayer].layertype
    ) {
      case ConstantData.LayerTypes.SD_LAYERT_MINDMAP:
        SDUI.AppSettings.NewUI ? (
          SDJS_init_business_manager('TASKMAP'),
          SDUI.Commands.MainController.SmartPanels.LoadTools(gTaskMapManager),
          SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_BUSINESSMODULE)
        ) : (
          SDUI.Commands.MainController.LoadSmartPanel('sp-mind_maps'),
          SDJS_init_business_manager('MINDMAP'),
          SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_TASKPANEL)
        ),
          SDUI.Commands.MainController.SmartPanels.SetLeftPanelMode(Resources.LeftPanelMode.LEFTPANELMODE_SMARTPANEL),
          ListManager.TaskMap.LoadLayer();
        break;
      case ConstantData.LayerTypes.SD_LAYERT_GANTT:
        SDUI.AppSettings.NewUI ? (
          SDJS_init_business_manager('PROJECTCHART'),
          SDUI.Commands.MainController.SmartPanels.LoadTools(gProjectChartManager),
          SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_BUSINESSMODULE)
        ) : (
          SDUI.Commands.MainController.LoadSmartPanel('sp-project_chart'),
          SDJS_init_business_manager('PROJECTCHART'),
          SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_TASKPANEL)
        ),
          SDUI.Commands.MainController.SmartPanels.SetLeftPanelMode(Resources.LeftPanelMode.LEFTPANELMODE_SMARTPANEL),
          GlobalData.optManager.GanttLoadLayer()
    }
    this.AdjustSelectedListAfterLayerChange()
  }
}

ListManager.LM.prototypeAddNewLayer = function (e, t, a) {
  if (
    this.CloseEdit,
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    this.AddNewLayerAtFront(e, t, a)
  ) {
    if (
      this.MakeLayerActiveByIndex(0),
      this.RenderAllSVGObjects(),
      Collab.AllowMessage()
    ) {
      var r = {
        layerName: e,
        bIsVisible: t,
        bIsClickable: a
      };
      Collab.BuildMessage(ConstantData.CollabMessages.AddNewLayer, r, !1)
    }
    this.CompleteOperation(null)
  }
}

ListManager.LM.prototypeAdjustSelectedListAfterLayerChange = function () {
  var e,
    t,
    a = this.GetObjectPtr(GlobalData.optManager.theSelectedListBlockID, !0),
    r = this.GetTargetSelect(),
    i = a.length,
    n = [];
  this.CloseEdit();
  var o = this.ActiveVisibleZList();
  for (e = 0; e < i; ++e) t = a[e],
    - 1 != o.indexOf(t) &&
    n.push(t);
  - 1 === o.indexOf(r) &&
    this.SetTargetSelect(- 1);
  var s = n.length;
  if (i != s) for (a.length = 0, e = 0; e < s; ++e) a.push(n[e])
}

ListManager.LM.prototypeSwitchToNextLayer = function () {
  this.CloseEdit();
  var e = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0);
  e.activelayer--,
    e.activelayer < 0 &&
    (e.activelayer = e.nlayers - 1),
    this.AdjustSelectedListAfterLayerChange(),
    this.RenderAllSVGObjects(),
    this.CompleteOperation(null)
}

ListManager.LM.prototypeSwitchToPreviousLayer = function () {
  this.CloseEdit();
  var e = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0);
  e.activelayer++,
    e.activelayer >= e.nlayers &&
    (e.activelayer = 0),
    this.AdjustSelectedListAfterLayerChange(),
    this.RenderAllSVGObjects(),
    this.CompleteOperation(null)
}

ListManager.LM.prototypeRotateLayerStack = function (e) {
  this.CloseEdit();
  var t = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0).layers,
    a = t.shift();
  t.push(a),
    this.AdjustSelectedListAfterLayerChange(),
    this.RenderAllSVGObjects(),
    e ||
    this.CompleteOperation(null)
}

ListManager.LM.prototypeToggleCurrentLayerVisible = function () {
  this.CloseEdit();
  var e = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0);
  e.layers[e.activelayer].flags ^= ConstantData.LayerFlags.SDLF_Visible,
    this.RenderAllSVGObjects(),
    this.CompleteOperation(null)
}

ListManager.LM.prototypeToggleCurrentLayerClickable = function () {
  this.CloseEdit();
  var e = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0);
  e.layers[e.activelayer].flags ^= ConstantData.LayerFlags.SDLF_Active,
    this.RenderAllSVGObjects(),
    this.CompleteOperation(null)
},

  ,

  ListManager.LM.prototype.BackMostLayerZListPreserve = function () {
    var e = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0);
    return e.layers[e.nlayers - 1].zList
  }



ListManager.LM.prototypeGetLayerCount = function () {
  return GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1).nlayers
}

ListManager.LM.prototypeGetActiveLayerIndex = function () {
  var e = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1);
  return e.activelayer >= e.nlayers &&
    (e.activelayer = e.nlayers - 1),
    e.activelayer
}

ListManager.LM.prototypeGetLayerInfoByIndex = function (e) {
  var t = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1);
  return e > t.nLayers - 1 ? null : t.layers[e]
}

ListManager.LM.prototypeGetLayerIndex = function (e) {
  var t,
    a,
    r = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1);
  for (a = r.layers.length, t = 0; t < a; t++) if (r.layers[t].layertype === e) return t;
  return - 1
}

ListManager.LM.prototypeIsTopMostLayer = function () {
  return 0 === this.GetObjectPtr(this.theLayersManagerBlockID, !1).activelayer
},
 ,
  ListManager.LM.prototype.ShowAllLayers = function () {
    var e,
      t = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1),
      a = (t.layers, t.nlayers);
    this.CloseEdit(),
      Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit();
    var r = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0),
      i = r.layers[r.activelayer];
    for (e = 0; e < a; ++e) (i = r.layers[e]).flags |= ConstantData.LayerFlags.SDLF_Visible,
      i.flags |= ConstantData.LayerFlags.SDLF_Active;
    if (this.RenderAllSVGObjects(), Collab.AllowMessage()) {
      Collab.BuildMessage(ConstantData.CollabMessages.ShowAllLayers, {
      }, !1)
    }
    this.CompleteOperation(null)
  }

ListManager.LM.prototypeAreAllLayersVisible = function () {
  var e,
    t = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1),
    a = this.GetLayerCount();
  for (e = 0; e < a; ++e) if (
    !(t.layers[e].flags & ConstantData.LayerFlags.SDLF_Visible)
  ) return !1;
  return !0
}


ListManager.LM.prototypeGetLayerNames = function () {
  var e,
    t = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1),
    a = t.layers,
    r = t.nlayers,
    i = [];
  for (e = 0; e < r; ++e) i.push(a[e].name.slice(0));
  return i
}

ListManager.LM.prototypeGetLayers = function () {
  var e = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1).layers;
  return Utils1.DeepCopy(e)
}

ListManager.LM.prototypeSetLayers = function (e, t) {
  this.CloseEdit,
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit();
  var a = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0);
  if (
    a.layers = Utils1.DeepCopy(e),
    a.nlayers = a.layers.length,
    t >= 0 &&
      t < a.nlayers ? a.activelayer = t : a.activelayer = 0,
    this.MakeLayerActiveByIndex(a.activelayer),
    this.AdjustSelectedListAfterLayerChange(),
    this.RenderAllSVGObjects(),
    Collab.AllowMessage()
  ) {
    var r = {
      activelayer: t
    };
    r.layers = e,
      Collab.BuildMessage(ConstantData.CollabMessages.SetLayers, r, !1)
  }
  this.CompleteOperation(null)
}

ListManager.LM.prototypeRemoveLayer = function (e) {
  if (
    (t = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1)).layers.length > e &&
    t.layers.length > 1
  ) {
    var t,
      a = (t = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0)).layers[e].zList;
    t.layers.splice(e, 1),
      t.nlayers--,
      t.activelayer >= e &&
      t.activelayer > 0 &&
      t.activelayer--;
    var r = [];
    e > 0 ? (
      r = (r = r.concat(a)).concat(t.layers[e - 1].zList),
      t.layers[e - 1].zList = r
    ) : t.layers[0].zList = t.layers[0].zList.concat(a),
      1 === t.nlayers &&
      (
        t.layers[0].flags = Utils2.SetFlag(
          t.layers[0].flags,
          ConstantData.LayerFlags.SDLF_Visible,
          !0
        ),
        t.layers[0].flags = Utils2.SetFlag(t.layers[0].flags, ConstantData.LayerFlags.SDLF_Active, !0)
      )
  }
},

  ListManager.LM.prototype.RemoveObjectsOnLayer = function (e, t) {
    var a,
      r,
      i,
      n = t.zList,
      o = n.length;
    for (a = 0; a < o; ++a) r = n[a],
      (i = this.svgObjectLayer.GetElementByID(r)) &&
      this.svgObjectLayer.RemoveElement(i)
  }

ListManager.LM.prototypeRemoveEventHandlersOnLayer = function (e, t) {
}

ListManager.LM.prototypeDirtyObjectsOnLayer = function (e, t) {
  var a,
    r = t.zList,
    i = r.length;
  for (a = 0; a < i; ++a) this.AddToDirtyList(r[a])
}

ListManager.LM.prototypeImportBackgroundLayerImage = function (e, t) {
  var a,
    r,
    i = - 1,
    n = function () {
      GlobalData.optManager.MakeLayerActiveByIndex(i),
        o.layers[i].flags = Utils2.SetFlag(o.layers[i].flags, ConstantData.LayerFlags.SDLF_NoAdd, !1),
        GlobalData.optManager.SetBackgroundImage(e, !1, t, !0)
    },
    o = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1);
  if (o) {
    for (a = 0; a < o.layers.length; a++) if (
      o.layers[a].layertype === ConstantData.LayerTypes.SD_LAYERT_BACKGROUND
    ) {
      i = a;
      break
    }
    if (
      Collab.AllowMessage() &&
      (
        Collab.BeginSecondaryEdit(),
        o = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !0)
      ),
      i < 0
    ) GlobalData.optManager.AddNewLayerAtFront(Resources.Strings.BackgroundLayer, !0, !1),
      GlobalData.optManager.RotateLayerStack(!0),
      i = o.layers.length - 1,
      o.layers[i].layertype = ConstantData.LayerTypes.SD_LAYERT_BACKGROUND;
    else {
      if ((r = o.layers[i].zList).length > 0 && null == t) return void SDUI.Commands.MainController.ShowMessageBox(
        'Delete existing image?',
        0,
        (function () {
          GlobalData.optManager.DeleteObjects(r),
            n()
        })
      );
      this.ClearAnySelection(!0)
    }
    n()
  }
}

ListManager.LM.prototypeAddAnnotationLayer = function (e) {
  var t,
    a = null != e,
    r = function (e) {
      // try {
      var t,
        r = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !0),
        i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
        n = 0,
        o = - 1,
        s = '',
        l = {},
        S = {};
      if (e) {
        if (r) for (s = r.layers[r.activelayer].name, t = 0; t < r.layers.length; t++) if (r.layers[t].name == Resources.Strings.Annotation) return void Utils2.Alert(Resources.Strings.AnnotationLayerAlreadyPresent, null);
        for (
          GlobalData.optManager.AddNewLayerAtFront(Resources.Strings.Annotation, !0, !1),
          GlobalData.optManager.RotateLayerStack(!0),
          t = 0;
          t < r.nlayers;
          t++
        ) if (r.layers[t].name == Resources.Strings.Annotation) {
          r.layers[t].flags = Utils2.SetFlag(
            r.layers[t].flags,
            ConstantData.LayerFlags.SDLF_UseEdges,
            !0
          ),
            GlobalData.optManager.MakeLayerActiveByIndex(t);
          break
        }
        if (
          S = Utils1.DeepCopy(i.dim),
          n = SDF.ReadSymbolFromBuffer(e, null, null, 4, !1, !1, {
            selectedList: []
          }, !1, !0, !1, !1, !1, l, !1)
        ) return GlobalData.optManager.Undo(!0),
          Collab.UnLockMessages(),
          void Collab.UnBlockMessages();
        if (s.length > 0) for (t = 0; t < r.layers.length; t++) if (r.layers[t].name == s) {
          o = t;
          break
        }
        for (o < 0 && (o = 0), t = 0; t < r.layers.length; t++) if (r.layers[t].name == Resources.Strings.Annotation) {
          annotationLayer = t;
          break
        }
        GlobalData.optManager.MakeLayerActiveByIndex(o),
          GlobalData.optManager.UpdateEdgeLayers([], l, S),
          GlobalData.optManager.MakeLayerActiveByIndex(annotationLayer),
          GlobalData.optManager.theContentHeader.Page.minsize = {
            x: 0,
            y: 0
          },
          GlobalData.optManager.FitDocumentWorkArea(!1, !1),
          GlobalData.optManager.MakeLayerActiveByIndex(o),
          GlobalData.optManager.theContentHeader.Page.minsize.x = i.dim.x,
          GlobalData.optManager.theContentHeader.Page.minsize.y = i.dim.y,
          GlobalData.optManager.FitDocumentWorkArea(!1, !1),
          GlobalData.optManager.theContentHeader.Page.minsize.x = l.x,
          GlobalData.optManager.theContentHeader.Page.minsize.y = l.y
      }
      if (
        GlobalData.optManager.AdjustSelectedListAfterLayerChange(),
        Collab.AllowMessage() &&
        !a
      ) {
        var c = {};
        Collab.IsSecondary() &&
          Collab.CreateList.length &&
          (
            c.CreateList = [],
            c.CreateList = c.CreateList.concat(Collab.CreateList)
          ),
          Collab.BuildMessage(ConstantData.CollabMessages.AddAnnotationLayer, c, !1)
      }
      GlobalData.optManager.CompleteOperation(null, !1),
        GlobalData.optManager.RenderAllSVGObjects()
      // } catch (n) {
      //   GlobalData.optManager.theContentHeader.Page.minsize.x = i.dim.x,
      //     GlobalData.optManager.theContentHeader.Page.minsize.y = i.dim.y,
      //     GlobalData.optManager.ExceptionCleanup(n),
      //     Collab.UnBlockMessages()
      // }
    },
    i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1);
  if (i) for (t = 0; t < i.layers.length; t++) if (i.layers[t].name == Resources.Strings.Annotation) return void Utils2.Alert(Resources.Strings.AnnotationLayerAlreadyPresent, null);
  if (
    GlobalData.optManager.CloseEdit(),
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    null == ListManager.AnnotationLayerBuffer
  ) {
    var n = 'FLOORPLAN' == GlobalData.optManager.theContentHeader.BusinessModule ? Resources.Strings.AnnotationLayerArchSDR : Resources.Strings.AnnotationLayerSDR;
    SDUI.CMSContent.GetAnnotationLayer(SDUI.AppSettings.ContentSource, n, r)
  } else r(ListManager.AnnotationLayerBuffer)
}

ListManager.LM.prototypeLoadAnnotationLayer = function () {
  var e = 'FLOORPLAN' == GlobalData.optManager.theContentHeader.BusinessModule ? Resources.Strings.AnnotationLayerArchSDR : Resources.Strings.AnnotationLayerSDR;
  SDUI.CMSContent.GetAnnotationLayer(
    SDUI.AppSettings.ContentSource,
    e,
    (function (e) {
      ListManager.AnnotationLayerBuffer = e
    })
  )
}

ListManager.LM.prototypeRemoveAnnotationLayer = function (e, t) {
  var a,
    r = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1),
    i = - 1;
  if (r) {
    for (a = 0; a < r.nlayers; a++) if (r.layers[a].flags & ConstantData.LayerFlags.SDLF_UseEdges) {
      i = a;
      break
    }
    if (
      !(
        i < 0 ||
        (
          this.CloseEdit(),
          Collab.AllowMessage() &&
          Collab.BeginSecondaryEdit(),
          r = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !0),
          GlobalData.optManager.DeleteObjects(r.layers[i].zList, !1),
          r.layers.splice(i, 1),
          r.nlayers--,
          r.activelayer >= i &&
          (r.activelayer--, r.activelayer < 0 && (r.activelayer = 0)),
          GlobalData.optManager.FitDocumentWorkArea(!1, !1),
          GlobalData.optManager.AdjustSelectedListAfterLayerChange(),
          t
        )
      )
    ) {
      if (Collab.AllowMessage()) {
        Collab.BuildMessage(ConstantData.CollabMessages.RemoveAnnotationLayer, {
        }, !1)
      }
      GlobalData.optManager.CompleteOperation(),
        GlobalData.optManager.RenderAllSVGObjects()
    }
  }
},

  ListManager.LM.prototype.ApplyColorFilter = function (e, t, a, r) {
    var i = FileParser.SDRColorFilters,
      n = !1,
      o = Utils1.DeepCopy(e);
    if (
      e.StyleRecord &&
      e.StyleRecord.Fill &&
      null == e.StyleRecord.Fill.Paint &&
      o.StyleRecord.Fill.Paint &&
      delete o.StyleRecord.Fill.Paint,
      t &&
      (
        null != o.arraylist &&
        t.DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.CONNECTOR &&
        (delete o.arraylist, n = !0),
        null != o.segl &&
        (
          t.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.LINE &&
          t.LineType === ConstantData.LineType.SEGLINE ||
          (delete o.segl, n = !0)
        )
      ),
      n
    ) return o;
    var s = GlobalData.optManager.currentModalOperation === ListManager.ModalOperations.FORMATPAINTER;
    if (o.EndArrowID || o.StartArrowID) {
      if (r & i.SD_NOCOLOR_LINEARROW) {
        var l = o.StyleRecord;
        o = {},
          null != l &&
          (o.StyleRecord = l)
      } else t &&
        (
          t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_LINEARROW, !0)
        );
      if (!s) return o
    }
    if (e.StyleRecord && o.StyleRecord) {
      if (o.StyleRecord.Name) {
        if (
          t &&
          t.DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.SHAPE &&
          delete o.StyleRecord.Fill,
          r & i.SD_NOCOLOR_STYLE
        ) return delete o.StyleRecord,
          o;
        o.StyleRecord.Fill &&
          o.StyleRecord.Fill.Paint &&
          !s &&
          (
            o.StyleRecord.Fill.Paint.Opacity &&
            delete o.StyleRecord.Fill.Paint.Opacity,
            o.StyleRecord.Fill.Paint.EndOpacity &&
            delete o.StyleRecord.Fill.Paint.EndOpacity
          ),
          o.StyleRecord.Line &&
          o.StyleRecord.Line.Paint &&
          !s &&
          (
            o.StyleRecord.Line.Paint.Opacity &&
            delete o.StyleRecord.Line.Paint.Opacity,
            o.StyleRecord.Line.Paint.EndOpacity &&
            delete o.StyleRecord.Line.Paint.EndOpacity
          ),
          o.StyleRecord.Text &&
          o.StyleRecord.Text.Paint &&
          !s &&
          (
            o.StyleRecord.Text.Paint.Opacity &&
            delete o.StyleRecord.Text.Paint.Opacity,
            o.StyleRecord.Text.Paint.EndOpacity &&
            delete o.StyleRecord.Text.Paint.EndOpacity
          ),
          t &&
          (
            t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_STYLE, !0)
          )
      }
      return o.StyleRecord.Fill &&
        o.StyleRecord.Fill.Paint &&
        a.Fill &&
        a.Fill.Paint &&
        (
          o.StyleRecord.Fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TEXTURE ? r & i.SD_NOCOLOR_TEXTURE ? (
            delete o.StyleRecord.Fill.Paint,
            delete o.StyleRecord.Fill.Hatch
          ) : t &&
          (
            t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_TEXTURE, !0)
          ) : r & i.SD_NOCOLOR_FILL ? (
            o.StyleRecord.Fill.Paint.FillType !== ConstantData.FillTypes.SDFILL_TEXTURE ||
            r & i.SD_NOCOLOR_TEXTURE
          ) &&
            (
              delete o.StyleRecord.Fill.Paint,
              delete o.StyleRecord.Fill.Hatch,
              delete o.StyleRecord.Fill
            ) : (
            t &&
            (
              t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_FILL, !0)
            ),
            !o.StyleRecord.Fill.Paint.FillType &&
              o.StyleRecord.Fill.Paint.Color ? a.Fill.Paint.FillType == ConstantData.FillTypes.SDFILL_TRANSPARENT ? o.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID : a.Fill.Paint.FillType != ConstantData.FillTypes.SDFILL_SOLID &&
                (
                  a.Fill.Paint.FillType == ConstantData.FillTypes.SDFILL_GRADIENT &&
                  o.StyleRecord.Fill.Paint.Color.toUpperCase() !== a.Fill.Paint.Color.toUpperCase() ||
                  (
                    o.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
                  )
                ) : (
              o.StyleRecord.Fill.Paint.FillType,
              ConstantData.FillTypes.SDFILL_TRANSPARENT
            )
          )
        ),
        o.StyleRecord.Fill &&
        o.StyleRecord.Fill.FillEffect &&
        (
          r & i.SD_NOCOLOR_EFFECT ? (
            delete o.StyleRecord.Fill.FillEffect,
            delete o.StyleRecord.Fill.EffectColor,
            delete o.StyleRecord.Fill.LParam,
            delete o.StyleRecord.Fill.WParam
          ) : t &&
          (
            t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_EFFECT, !0)
          )
        ),
        o.StyleRecord.Line &&
        a.Line &&
        (
          null != o.StyleRecord.Line.Thickness &&
          (
            r & i.SD_NOCOLOR_LINETHICK ? (
              delete o.StyleRecord.Line.Thickness,
              null != o.StyleRecord.Line.BThick &&
              delete o.StyleRecord.Line.BThick
            ) : (
              t &&
              (
                t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_LINETHICK, !0)
              ),
              t &&
              (
                t instanceof ListManager.PolyLineContainer ||
                t.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL
              ) &&
              t.StyleRecord.Line.BThick &&
              0 === o.StyleRecord.Line.BThick &&
              (o.StyleRecord.Line.BThick = o.StyleRecord.Line.Thickness / 2)
            )
          ),
          null != o.StyleRecord.Line.LinePattern &&
          (
            r & i.SD_NOCOLOR_LINEPAT ? delete o.StyleRecord.Line.LinePattern : t &&
              (
                t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_LINEPAT, !0)
              )
          ),
          o.StyleRecord.Line.Paint &&
          a.Line.Paint &&
          (
            r & i.SD_NOCOLOR_LINE ? delete o.StyleRecord.Line.Paint : (
              t &&
              (
                t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_LINE, !0)
              ),
              !o.StyleRecord.Line.Paint.FillType &&
                o.StyleRecord.Line.Paint.Color ? a.Line.Paint.FillType == ConstantData.FillTypes.SDFILL_TRANSPARENT ? o.StyleRecord.Line.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID : a.Line.Paint.FillType != ConstantData.FillTypes.SDFILL_SOLID &&
                  (
                    a.Line.Paint.FillType == ConstantData.FillTypes.SDFILL_GRADIENT &&
                    o.StyleRecord.Line.Paint.Color.toUpperCase() !== a.Line.Paint.Color.toUpperCase() ||
                    (
                      o.StyleRecord.Line.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
                    )
                  ) : (
                o.StyleRecord.Line.Paint.FillType,
                ConstantData.FillTypes.SDFILL_TRANSPARENT
              )
            )
          )
        ),
        o.StyleRecord.OutsideEffect &&
        (
          r & i.SD_NOCOLOR_OUTSIDE ? delete o.StyleRecord.OutsideEffect : t &&
            (
              t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_OUTSIDE, !0)
            )
        ),
        o.StyleRecord.Text &&
        (
          r & i.SD_NOCOLOR_TEXT ? delete o.StyleRecord.Text : t &&
            (
              t.colorchanges = Utils2.SetFlag(t.colorchanges, i.SD_NOCOLOR_TEXT, !0)
            )
        ),
        o
    }
    return e
  }

ListManager.LM.prototypeSetSelectedObjectAttributesCommon = function (e, t) {
  var a = !1,
    r = !1;
  null == t &&
    (t = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data);
  var i,
    n = t.length;
  0 === n &&
    (a = !0, r = !0);
  ConstantData.ObjectTypes;
  var o = null,
    s = null,
    l = Resources.FindStyle(ConstantData.Defines.TextBlockStyle);
  if (e.StyleRecord && e.StyleRecord.Text) var S = Utils1.DeepCopy(e.StyleRecord.Text),
    c = Utils1.DeepCopy(l.Text);
  for (i = 0; i < n; ++i) {
    var u = GlobalData.objectStore.PreserveBlock(t[i]).Data;
    if (null != u) {
      if (
        u.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE
      ) a = !0,
        e.StyleRecord &&
        e.StyleRecord.Text &&
        (
          u.UseTextBlockColor() ? (
            e.StyleRecord.Text = S,
            e.StyleRecord.Text.Paint = c.Paint,
            o = {
              Color: l.Text.Paint.Color
            },
            s = {
              color: l.Text.Paint.Color
            }
          ) : (
            e.StyleRecord.Text = S,
            o = {
              Color: e.StyleRecord.Text.Paint.Color
            },
            s = {
              color: e.StyleRecord.Text.Paint.Color
            }
          )
        );
      else r = !0,
        e.StyleRecord &&
        e.StyleRecord.Text &&
        (
          e.StyleRecord.Text = c,
          o = {
            Color: l.Text.Paint.Color
          },
          s = {
            color: l.Text.Paint.Color
          }
        );
      var p;
      (p = u.SetObjectStyle(e)) &&
        p.StyleRecord &&
        p.StyleRecord.Text &&
        s &&
        o &&
        u.ChangeTextAttributes(s, o),
        this.AddToDirtyList(t[i])
    }
  }
  e.StyleRecord &&
    a &&
    e.StyleRecord.Line &&
    (
      null == e.StyleRecord.Border &&
      (
        e.StyleRecord.Border = Utils1.DeepCopy(e.StyleRecord.Line)
      ),
      !1 === r &&
      (e.StyleRecord.Line = null)
    )
}

ListManager.LM.prototypeSetSelectedObjectAttributes = function (e, t, a) {
  var r;
  if (Collab.AllowMessage()) {
    Collab.BeginSecondaryEdit();
    var i = {
      attributes: Utils1.DeepCopy(e)
    };
    r = Collab.BuildMessage(ConstantData.CollabMessages.SetStyleAttributes, i, !0, !0)
  }
  var n,
    o = !1;
  if (
    GlobalData.optManager.RightClickSetOpacity = a,
    e.StyleRecord &&
    e.StyleRecord.Line &&
    null != e.StyleRecord.Line.Thickness
  ) {
    var s = this.GetTargetSelect();
    if (s >= 0) this.GetObjectPtr(s, !1).objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL &&
      (o = !0)
  }
  this.SetSelectedObjectAttributesCommon(e);
  var l = this.GetObjectPtr(this.theSEDSessionBlockID, !0);
  o &&
    (n = l.def.style.Line.Thickness);
  var S = GlobalData.optManager.ApplyColorFilter(e, null, l.def.style, 0);
  1 != t &&
    (
      S.segl &&
      null != S.segl.curveparam &&
      (l.def.curveparam = S.segl.curveparam),
      null != S.StartArrowID &&
      (
        l.d_sarrow = e.StartArrowID,
        null != e.StartArrowDisp &&
        (l.d_sarrowdisp = e.StartArrowDisp)
      ),
      null != S.EndArrowID &&
      (
        l.d_earrow = e.EndArrowID,
        null != e.EndArrowDisp &&
        (l.d_earrowdisp = e.EndArrowDisp)
      ),
      null != S.ArrowSizeIndex &&
      (l.d_arrowsize = e.ArrowSizeIndex),
      this.ApplyProperties(S.StyleRecord, l.def.style),
      o &&
      (
        l.def.style.Line.Thickness = n,
        l.def.wallThickness = S.StyleRecord.Line.Thickness
      ),
      S.StyleRecord &&
      e.StyleRecord.Fill &&
      l.def.style.Fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TRANSPARENT &&
      0 !== l.def.style.Fill.Paint.Opacity &&
      (
        l.def.style.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
      )
    ),
    a ? r &&
      (GlobalData.optManager.UnsentAttributeMessage = r) : (r && Collab.SendMessage(r), this.CompleteOperation(null))
},


  ListManager.LM.prototype.SetTableProperties = function (e, t, a) {
    var r,
      i,
      n,
      o,
      s,
      l = [],
      S = !1;
    if (
      r = (
        l = e ? this.ZList() : this.GetObjectPtr(this.theSelectedListBlockID, !1)
      ).length
    ) {
      for (o = !1, i = 0; i < r; i++) if (
        (n = this.GetObjectPtr(l[i], !1)) &&
        (s = n.GetTable(!1)) &&
        (s.rows.length != t || s.cols.length != cols)
      ) {
        o = !0;
        break
      }
      if (!o) return;
      for (
        Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        this.CloseEdit(),
        i = 0;
        i < r;
        i++
      ) (o = (n = this.GetObjectPtr(l[i], !1)).SetTableProperties(t, a)) &&
        (S = !0, this.AddToDirtyList(l[i]));
      if (S) {
        if (Collab.AllowMessage()) {
          var c = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
            u = {
              nrows: t,
              ncols: a
            };
          u.StyleRecord = Utils1.DeepCopy(c.def.style),
            Collab.BuildMessage(ConstantData.CollabMessages.InsertTable, u, !0)
        }
        this.CompleteOperation(null)
      }
    }
  }

ListManager.LM.prototypeInsertTable = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = [],
    S = !1,
    c = null;
  if (
    l = e ? this.ZList() : this.GetObjectPtr(this.theSelectedListBlockID, !1),
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    this.CloseEdit(),
    r = l.length
  ) for (i = 0; i < r; i++) s = (n = this.GetObjectPtr(l[i], !1)).GetTable(!1),
    GlobalData.optManager.Table_HideUI(n) ||
    GlobalData.optManager.Table_NoTableUI(s) ||
    (
      (o = n.InsertNewTable(t, a, !0)) ? (S = !0, this.AddToDirtyList(l[i])) : n.GetTable(!1) &&
        (o = !0)
    );
  if (!o) {
    var u = GlobalData.optManager.CalcWorkAreaUL(50, 50),
      p = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
      d = {
        Frame: {
          x: u.x,
          y: u.y,
          width: 100,
          height: 100
        },
        TextGrow: ConstantData.TextGrowBehavior.VERTICAL
      },
      D = new ListManager.Rect(d),
      g = GlobalData.optManager.AddNewObject(D, !0, !0);
    if (
      (c = []).push(g),
      Collab.AddNewBlockToSecondary(g),
      Collab.IsSecondary()
    ) var h = [
      g
    ];
    (n = this.GetObjectPtr(g, !0)).InsertNewTable(t, a, !1),
      S = !0
  }
  if (S) {
    if (Collab.AllowMessage()) {
      var m = {
        nrows: t,
        ncols: a
      };
      p = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
      m.StyleRecord = Utils1.DeepCopy(p.def.style),
        h &&
        (m.CreateList = h),
        Collab.BuildMessage(ConstantData.CollabMessages.InsertTable, m, !0)
    }
    this.CompleteOperation(c)
  }
}

ListManager.LM.prototypeRemoveTables = function (e) {
  var t,
    a,
    r,
    i,
    n = !1;
  if (
    a = (t = this.GetObjectPtr(this.theSelectedListBlockID, !1)).length
  ) for (
      Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit(),
      this.CloseEdit(),
      r = 0;
      r < a;
      r++
    ) (i = this.GetObjectPtr(t[r], !1)).GetTable(!0) &&
      (
        i = this.GetObjectPtr(t[r], !0),
        this.Table_Remove(i, e),
        n = !0,
        this.SetLinkFlag(i.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        this.AddToDirtyList(t[r])
      );
  if (n) {
    if (Collab.AllowMessage()) {
      Collab.BuildMessage(ConstantData.CollabMessages.RemoveTables, {
      }, !0)
    }
    this.CompleteOperation(null)
  }
}

ListManager.LM.prototypeFreezeProperties = function () {
  this.GetTargetSelect() >= 0 &&
    SDUI.Commands.MainController.ShowModal(Resources.Controls.Modals.FreezePropDialog.Id)
}

ListManager.LM.prototypeSetLineCornerRadiusAll = function (e, t) {
  t ||
    GlobalData.optManager.CloseEdit();
  var a = GlobalData.optManager.ZList(),
    r = {},
    i = {};
  t ? (
    r.curveparam = t.Data.curveparam,
    i.curveparam = t.Data.curveparam
  ) : (r.curveparam = e, i.curveparam = e);
  var n = {
    segl: r,
    arraylist: i
  };
  if (
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    GlobalData.optManager.SetSelectedObjectAttributesCommon(n, a),
    t ||
    (
      sdp = this.GetObjectPtr(this.theSEDSessionBlockID, !0),
      sdp.def.curveparam = r.curveparam
    ),
    Collab.AllowMessage()
  ) {
    var o = {
      curveparam: e
    };
    Collab.BuildMessage(ConstantData.CollabMessages.SetLineCornerRadiusAll, o, !1)
  }
  GlobalData.optManager.CompleteOperation()
}

ListManager.LM.prototypeSetColorFilter = function (e, t) {
  var a,
    r,
    i,
    n,
    o = this.GetObjectPtr(this.theSelectedListBlockID, !1);
  for (
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    r = o.length,
    a = 0;
    a < r;
    a++
  ) i = o[a],
    (n = this.GetObjectPtr(i, !0)) &&
    (n.colorfilter = t, this.AddToDirtyList(i));
  if (Collab.AllowMessage()) {
    var s = {
      colorfilter: t
    };
    Collab.BuildMessage(ConstantData.CollabMessages.SetColorFilter, s, !0)
  }
  this.CompleteOperation()
}

ListManager.LM.prototypeReverseArrowheads = function () {
  var e,
    t,
    a,
    r,
    i,
    n = this.GetObjectPtr(this.theSelectedListBlockID, !1),
    o = !1;
  for (t = n.length, e = 0; e < t; e++) a = n[e],
    !(r = this.GetObjectPtr(a, !1)) ||
    0 === r.StartArrowID &&
    0 === r.EndArrowID ||
    (
      Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit(),
      i = (r = this.GetObjectPtr(a, !0)).StartArrowID,
      r.StartArrowID = r.EndArrowID,
      r.EndArrowID = i,
      o = !0,
      this.AddToDirtyList(a)
    );
  if (o) {
    if (Collab.AllowMessage()) {
      Collab.BuildMessage(ConstantData.CollabMessages.ReverseArrowheads, {
      }, !0)
    }
    this.CompleteOperation()
  }
}

ListManager.LM.prototypeSetTheme = function (e, t) {

  console.log('ListManager.LM.prototype.SetTheme 1 e', e);
  console.log('ListManager.LM.prototype.SetTheme 1 t', t);

  var a = this.ZList();
  SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_BEGIN_THEME12, !1);
  var r = a.length,
    i = 0,
    n = 0,
    o = [],
    s = 0,
    l = !1,
    S = t.length;
  for (i = 0; i < r; ++i) {
    var c = this.GetObjectPtr(a[i], !1);
    if (null != c) if (
      c instanceof ListManager.GroupSymbol &&
      this.SetGroupTheme(c, t),
      c.GetTable()
    ) this.Table_SetTheme(c, t);
    else {
      var u = c.StyleRecord.Name;
      for (s = o.length, l = !1, n = 0; n < s; ++n) if (u === o[n].Name) {
        (c = this.GetObjectPtr(a[i], !0)).ApplyStyle(o[n], !0),
          l = !0;
        break
      }
      if (!l) for (n = 0; n < S; ++n) if (u === t[n].Name) {
        (c = this.GetObjectPtr(a[i], !0)).ApplyStyle(t[n], !0),
          o.push({
            quickstyleName: u,
            style: t[n]
          });
        break
      }
    }
  }
  var p = this.GetObjectPtr(this.theSEDSessionBlockID, !0),
    d = p.def.style.Name;
  for (s = o.length, l = !1, p.CurrentTheme = e, n = 0; n < s; ++n) if (d === o[n].Name) {
    p.def.style = $.extend(!0, {
    }, o[n].style),
      l = !0;
    break
  }
  if (!l) for (n = 0; n < S; ++n) if (d === t[n].Name) {
    p.def.style = $.extend(!0, {
    }, t[n]);
    break
  }
  this.CompleteOperation(null),
    this.RenderAllSVGObjects()
}

ListManager.LM.prototypeSetStartArrowID = function (e) {
  GlobalData.objectStore.GetObject(this.theSEDSessionBlockID).Data.d_sarrow = e
}

ListManager.LM.prototypeSetEndArrowID = function (e) {
  GlobalData.objectStore.GetObject(this.theSEDSessionBlockID).Data.d_earrow = e
}

ListManager.LM.prototypeSetStartArrowDisp = function (e) {
  GlobalData.objectStore.GetObject(this.theSEDSessionBlockID).Data.d_sarrowdisp = e
}

ListManager.LM.prototypeSetEndArrowDisp = function (e) {
  GlobalData.objectStore.GetObject(this.theSEDSessionBlockID).Data.d_earrowdisp = e
}

ListManager.LM.prototypeSetArrowSizeIndex = function (e) {
  GlobalData.objectStore.GetObject(this.theSEDSessionBlockID).Data.d_arrowsize = e
},
  ,
  ListManager.LM.prototype.SetBackgroundImage = function (e, t, a, r, i) {
    var n,
      o,
      s,
      l = '',
      S = null,
      c = null,
      u = this,
      p = t,
      d = 800,
      D = 800,
      g = [
        ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
      ],
      h = [
        ConstantData.ObjectSubTypes.SD_SUBT_TASKMAP,
        ConstantData.ObjectSubTypes.SD_SUBT_TASK
      ],
      m = function (e, t, a) {
        var i,
          n = [];
        if (!a && e > 0 && t > 0) {
          var o = GlobalData.optManager.bitmapImportDestHeight,
            s = GlobalData.optManager.bitmapImportDestWidth;
          Collab.AllowMessage() &&
            Collab.BeginSecondaryEdit(),
            o = t,
            s = e;
          var p = u.CalcWorkAreaCenterUL(s, o),
            d = new Resources.QuickStyle;
          d.Name = '',
            d.Line.Thickness = 0,
            d.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT;
          var D = {
            Frame: {
              x: p.x,
              y: p.y,
              width: s,
              height: o
            },
            TextGrow: ConstantData.TextGrowBehavior.PROPORTIONAL,
            ImageURL: l,
            StyleRecord: d,
            ObjGrow: ConstantData.GrowBehavior.PROPORTIONAL,
            flags: ConstantData.ObjFlags.SEDO_ImageOnly,
            extraflags: ConstantData.ExtraFlags.SEDE_NoColor
          },
            g = new ListManager.Rect(D);
          if (g) {
            var h = FileParser.GetImageDir(S);
            g.SetBlobBytes(c, h),
              h == FileParser.Image_Dir.dir_svg &&
              (g.SVGDim = {
                width: e,
                height: t
              })
          }
          if (
            i = u.AddNewObject(g, !1, !0),
            Collab.AddNewBlockToSecondary(i),
            Collab.IsSecondary()
          ) {
            var m = [];
            m = m.concat(Collab.CreateList)
          }
          var C = u.GetObjectPtr(i, !1);
          if (
            C.TextFlags = ConstantData.TextFlags.SED_TF_AttachB,
            C.ImageHeader = new ListManager.ImageRecord,
            n.push(i),
            Collab.AllowMessage()
          ) {
            null == r &&
              (r = !1);
            var y = {
              ImageDir: h,
              bytes: c,
              width: e,
              height: t,
              background: r
            };
            m &&
              (y.CreateList = m),
              Collab.BuildMessage(ConstantData.CollabMessages.AddShape_ImportPicture, y, !1)
          }
          var f = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1);
          f &&
            f.layers[f.activelayer].layertype === ConstantData.LayerTypes.SD_LAYERT_BACKGROUND &&
            (
              (
                f = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !0)
              ).layers[f.activelayer].flags = Utils2.SetFlag(
                f.layers[f.activelayer].flags,
                ConstantData.LayerFlags.SDLF_NoAdd,
                !0
              )
            ),
            r &&
            GlobalData.optManager.RenderAllSVGObjects(),
            u.CompleteOperation(n)
        }
      },
      C = function (e, t, a, n) {
        // try {
        var o;
        l = e,
          S = t,
          c = a;
        var s,
          d = !1;
        if (
          (o = n ? n.Data.ImageDir : FileParser.GetImageDir(t)) == FileParser.Image_Dir.dir_svg &&
          (d = !0, s = Utils2.ParseSVGDimensions(a)),
          n
        ) C = n.Data.BlockID;
        else {
          var D,
            C = GlobalData.optManager.GetTargetSelect(),
            y = !1;
          r &&
            (C = - 1),
            C >= 0 &&
            (
              D = GlobalData.optManager.GetObjectPtr(C, !1),
              g.indexOf(D.objecttype) < 0 &&
                h.indexOf(D.subtype) < 0 ? D.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
              (
                D instanceof ListManager.BaseSymbol != !1 ||
                D.SymbolURL ||
                (y = p)
              ) : (C = - 1, y = !1)
            )
        }
        if (y || n) if ((D = GlobalData.optManager.GetObjectPtr(C, !1)).GetTable(!1)) GlobalData.optManager.Table_ImportPicture(C, e, o, a, s, null, i);
        else {
          Collab.AllowMessage() &&
            Collab.BeginSecondaryEdit(),
            D = GlobalData.optManager.GetObjectPtr(C, !0),
            d &&
            (D.SVGDim = s),
            u.DeleteTargetTextObject(C),
            GlobalData.optManager.IsBlobURL(D.ImageURL) &&
            (GlobalData.optManager.DeleteURL(D.ImageURL), D.ImageURL = ''),
            D.ImageURL = e;
          var f = FileParser.GetImageDir(S);
          if (
            D.StyleRecord.Fill.Paint.Opacity = 1,
            D.SetBlobBytes(a, f),
            D.ImageHeader = new ListManager.ImageRecord,
            D.TextFlags = Utils2.SetFlag(D.TextFlags, ConstantData.TextFlags.SED_TF_None, !0),
            GlobalData.optManager.AddToDirtyList(C),
            Collab.AllowMessage()
          ) {
            var L = {
              BlockID: C,
              ImageDir: f,
              bytes: a
            };
            L.SVGDim = Utils1.DeepCopy(s),
              Collab.BuildMessage(ConstantData.CollabMessages.Shape_ImportPicture, L, !1)
          }
          GlobalData.optManager.CompleteOperation(null)
        } else d ? m(s.width, s.height, null) : SDGraphics.Element.Style.CalcImageSize(e, m)
        // } catch (e) {
        //   GlobalData.optManager.ExceptionCleanup(e)
        // }
      };
    if (a) {
      var y = ConstantData.CollabMessages;
      switch (a.MessageType) {
        case y.Shape_ImportPicture:
        case y.OrgAddPicture:
          C(a.Data.url, a.Data.blob, a.Data.Bytes, a);
          break;
        case y.AddShape_ImportPicture:
          S = a.Data.blob,
            l = a.Data.url,
            c = a.Data.Bytes,
            m(a.Data.width, a.Data.height, !1)
      }
    } else {
      var f = GlobalData.optManager.GetTargetSelect();
      if (0 === t && (s = !1, p = !0, f >= 0)) if (
        n = GlobalData.optManager.GetObjectPtr(f, !1),
        g.indexOf(n.objecttype) < 0 &&
        h.indexOf(n.subtype) < 0
      ) {
        if (
          n.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
          n instanceof ListManager.BaseSymbol == !1 &&
          !n.SymbolURL &&
          '' !== n.ImageURL &&
          null == n.GetTable(!1)
        ) return SDUI.Commands.MainController.InsertBitmapController.SetFile(e),
          void SDUI.Commands.MainController.ShowModal(Resources.Controls.Modals.InsertBitmap.Id)
      } else f = - 1;
      f >= 0 &&
        (n = GlobalData.optManager.GetObjectPtr(f, !1)).DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
        (
          n instanceof ListManager.BaseSymbol != !1 ||
          n.SymbolURL ||
          (s = p)
        ),
        s &&
        (
          (n = GlobalData.optManager.GetObjectPtr(f, !1)).GetTable(!1) ? (o = GlobalData.optManager.Table_GetImportPictureDim(f)) &&
            (D = o.x, d = o.y) : (D = n.Frame.width, d = n.Frame.height)
        );
      var L = new ListManager.Bitmap_Importer;
      L &&
        L.importBitmap(e, D, d, GlobalData.optManager.bitmapImportDPI, C)
    }
  }

ListManager.LM.prototypeSetObjectHyperlink = function (e, t) {
  var a = !1;
  Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    e = this.GetObjectPtr(e.BlockID, !0);
  var r = GlobalData.optManager.SD_GetVisioTextChild(e.BlockID);
  r >= 0 &&
    (e = this.GetObjectPtr(r, !0)),
    t = t ||
    '';
  var i = e.GetTable(!0);
  if (i && i.select >= 0) {
    var n = GlobalData.optManager.Table_GetActiveID();
    e.BlockID === n &&
      (this.Table_SetHyperlink(i, t), a = !0)
  }
  a ||
    (e.HyperlinkText = t);
  var o = e.GetIconShape();
  if (this.AddToDirtyList(o), Collab.AllowMessage()) {
    var s = {
      hyperlinkText: t
    };
    Collab.BuildMessage(ConstantData.CollabMessages.SetObjectHyperlink, s, !0)
  }
  this.CompleteOperation()
}

ListManager.LM.prototypeSetShapeMoreFlags = function (e, t, a) {
  Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit();
  var r = GlobalData.optManager.GetObjectPtr(e, !0);
  if (r) {
    if (
      r.moreflags = Utils2.SetFlag(r.moreflags, t, a),
      Collab.AllowMessage()
    ) {
      var i = {
        BlockID: e,
        flag: t,
        value: a
      };
      Collab.BuildMessage(ConstantData.CollabMessages.SetShapeMoreFlags, i, !1)
    }
    GlobalData.optManager.CompleteOperation()
  }
}

ListManager.LM.prototypeSetShapeProperties = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S = [],
    c = !1,
    u = ConstantData.TextFlags;
  for (s in e) if (null != e[s]) {
    o = !0;
    break
  }
  if (o) {
    if (
      r = (
        S = a ? GlobalData.optManager.ZList() : this.GetObjectPtr(this.theSelectedListBlockID, !1)
      ).length
    ) for (i = 0; i < r; i++) if (
      n = this.GetObjectPtr(S[i], !1),
      !((e.TextGrow || e.tmargin) && n.TextFlags & u.SED_TF_Attach) &&
      (o = Utils1.DeepCopy(n).SetShapeProperties(e))
    ) {
      c = !0;
      break
    }
    if (c) {
      if (
        Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        this.CloseEdit(),
        !t
      ) {
        null != e.tmargin &&
          (
            (l = this.GetObjectPtr(this.theSEDSessionBlockID, !0)).def.tmargins.left = e.tmargin,
            l.def.tmargins.top = e.tmargin,
            l.def.tmargins.right = e.tmargin,
            l.def.tmargins.bottom = e.tmargin
          ),
          null != e.CRFlag &&
          (
            null == l &&
            (l = this.GetObjectPtr(this.theSEDSessionBlockID, !0)),
            l.def.textflags = Utils2.SetFlag(
              l.def.textflags,
              ConstantData.TextFlags.SED_TF_FormCR,
              e.CRFlag
            )
          );
        var p = this.GetObjectPtr(this.theSEDSessionBlockID, !1);
        e.hasrrectselected &&
          e.rrectfixed &&
          e.rrectparam !== p.def.rrectparam &&
          (
            null == l &&
            (l = this.GetObjectPtr(this.theSEDSessionBlockID, !0)),
            l.def.rrectparam = e.rrectparam
          )
      }
      if (r = S.length) {
        for (i = 0; i < r; i++) n = this.GetObjectPtr(S[i], !0),
          (e.TextGrow || e.tmargin) &&
          n.TextFlags & u.SED_TF_Attach ||
          (o = n.SetShapeProperties(e)) &&
          (c = !0, this.AddToDirtyList(S[i]));
        if (Collab.AllowMessage()) {
          var d = {
            all: a
          };
          d.properties = Utils1.DeepCopy(e),
            Collab.BuildMessage(ConstantData.CollabMessages.SetShapeProperties, d, !0)
        }
        c &&
          this.CompleteOperation(null)
      }
    }
  }
}

ListManager.LM.prototypeSetTargetConnectionPoints = function (e, t, a) {
  var r,
    i,
    n = !1;
  if ((r = this.GetTargetSelect()) < 0) return !1;
  if (
    i = this.GetObjectPtr(r, !1),
    !Utils1.DeepCopy(i).SetShapeConnectionPoints(e, t, a)
  ) return !1;
  if (
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    this.CloseEdit(),
    (i = this.GetObjectPtr(r, !0)).SetShapeConnectionPoints(e, t, a) &&
    (
      n = !0,
      this.AddToDirtyList(r),
      this.SetLinkFlag(
        r,
        ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
      )
    ),
    Collab.AllowMessage()
  ) {
    var o = {
      flag: e
    };
    o.custompoints = Utils1.DeepCopy(t),
      o.AttachPoint = Utils1.DeepCopy(a),
      Collab.BuildMessage(
        ConstantData.CollabMessages.SetTargetConnectionPoints,
        o,
        !0
      )
  }
  n &&
    this.CompleteOperation(null)
},


  ListManager.LM.prototype.FormatPainterClick = function (e, t, a) {
    var r,
      i,
      n,
      o,
      s = {
        StyleRecord: null
      },
      l = null,
      S = null,
      c = !1,
      u = [];
    switch (this.FormatPainterMode) {
      case ListManager.FormatPainterModes.TEXT:
        if (this.GetActiveTextEdit() !== e && t) return o = this.svgObjectLayer.FindElementByDOMElement(t.currentTarget),
          this.ActivateTextEdit(o, t, !0),
          !0;
        var p = this.svgDoc.GetActiveEdit();
        if (p && this.FormatPainterText) {
          var d = p.GetSelectedRange();
          p.SetFormat(this.FormatPainterText, d.start, d.end - d.start),
            this.TextResizeCommon(e),
            p.SetSelectedRange(d.start, d.end, d.line, d.anchor),
            !0 !== this.FormatPainterSticky &&
            this.SetFormatPainter(!0, !1)
        } else (i = this.GetObjectPtr(e, !1)) &&
          (
            (n = i.GetTable(!1)) &&
            GlobalData.optManager.Table_PasteFormat(e, GlobalData.optManager.FormatPainterStyle, !1),
            !0 !== this.FormatPainterSticky &&
            this.SetFormatPainter(!0, !1)
          );
        break;
      case ListManager.FormatPainterModes.TABLE:
      case ListManager.FormatPainterModes.OBJECT:
        var D = (o = this.svgObjectLayer.GetElementByID(e)).GetTargetForEvent(t),
          g = D.GetID();
        if ((i = this.GetObjectPtr(e, !1)) && (n = i.GetTable(!1)), !i || !n || a) return i = this.GetObjectPtr(e, !0),
          Collab.AllowMessage() &&
          (
            Collab_Data = {
              BlockID: e
            },
            Collab_Data.FormatPainterMode = this.FormatPainterMode,
            Collab_Data.FormatPainterText = Utils1.DeepCopy(this.FormatPainterText),
            Collab_Data.FormatPainterStyle = Utils1.DeepCopy(this.FormatPainterStyle),
            Collab_Data.FormatPainterParaFormat = Utils1.DeepCopy(this.FormatPainterParaFormat),
            Collab_Data.FormatPainterArrows = Utils1.DeepCopy(this.FormatPainterArrows),
            Collab.BuildMessage(ConstantData.CollabMessages.FormatPainter, Collab_Data, !1)
          ),
          s.StyleRecord = this.FormatPainterStyle,
          this.FormatPainterArrows &&
          (
            s.StartArrowID = this.FormatPainterArrows.StartArrowID,
            s.EndArrowID = this.FormatPainterArrows.EndArrowID,
            s.StartArrowDisp = this.FormatPainterArrows.StartArrowDisp,
            s.EndArrowDisp = this.FormatPainterArrows.EndArrowDisp,
            s.ArrowSizeIndex = this.FormatPainterArrows.ArrowSizeIndex
          ),
          this.FormatPainterParaFormat &&
          (
            l = this.FormatPainterParaFormat.vjust,
            S = this.FormatPainterParaFormat.just
          ),
          i.StyleRecord &&
          i.StyleRecord.Fill &&
          i.StyleRecord.Fill.Paint &&
          i.StyleRecord.Fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TRANSPARENT &&
          (c = !0),
          i.SetObjectStyle(s),
          this.ChangeObjectTextAttributes(
            e,
            this.FormatPainterText,
            this.FormatPainterStyle.Text,
            S,
            this.FormatPainterParaFormat,
            l
          ),
          c &&
          (
            i.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT
          ),
          this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
          this.AddToDirtyList(e),
          u.push(e),
          this.CompleteOperation(u),
          !0 !== this.FormatPainterSticky &&
          this.SetFormatPainter(!0, !1),
          !0;
        if (
          (r = GlobalData.optManager.Table_GetActiveID()) != e &&
          t &&
          i &&
          n &&
          (this.Table_Load(e), r = e),
          r >= 0
        ) return g === ConstantData.SVGElementClass.SLOP ? (
          GlobalData.optManager.Table_PasteFormat(r, GlobalData.optManager.FormatPainterStyle, !0),
          !0 !== GlobalData.optManager.FormatPainterSticky &&
          GlobalData.optManager.SetFormatPainter(!0, !1),
          !0
        ) : g === ConstantData.Defines.TableRowHit ||
          g === ConstantData.Defines.TableColHit ? (this.Table_SetupAction(t, r, g, D.GetUserData()), !0) : (
          this.Table_SetupAction(t, r, ConstantData.SVGElementClass.BACKGROUNDIMAGE, 0),
          !0
        )
    }
    return !1
  },

  ListManager.LM.prototype.ThemeService = function () {
    return Resources.CurrentTheme
  },


  ListManager.LM.prototype.RubberBandSelect_Cancel = function (e) {


    /*
    GlobalData.optManager.theRubberBand &&
      (
        GlobalData.optManager.WorkAreaHammer.off('drag'),
        GlobalData.optManager.WorkAreaHammer.off('dragend'),
        GlobalData.optManager.WorkAreaHammer.on('dragstart', Evt_WorkAreaHammerDragStart),
        GlobalData.optManager.ResetAutoScrollTimer(),
        GlobalData.optManager.svgOverlayLayer.RemoveElement(GlobalData.optManager.theRubberBand),
        GlobalData.optManager.theRubberBand = null,
        GlobalData.optManager.theRubberBandStartX = 0,
        GlobalData.optManager.theRubberBandStartY = 0,
        GlobalData.optManager.theRubberBandFrame = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        }
      )
        */

    if (GlobalData.optManager.theRubberBand) {
      GlobalData.optManager.WorkAreaHammer.off('drag');
      GlobalData.optManager.WorkAreaHammer.off('dragend');
      GlobalData.optManager.WorkAreaHammer.on('dragstart', Evt_WorkAreaHammerDragStart);
      GlobalData.optManager.ResetAutoScrollTimer();
      GlobalData.optManager.svgOverlayLayer.RemoveElement(GlobalData.optManager.theRubberBand);
      GlobalData.optManager.theRubberBand = null;
      GlobalData.optManager.theRubberBandStartX = 0;
      GlobalData.optManager.theRubberBandStartY = 0;
      GlobalData.optManager.theRubberBandFrame = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
    }
    console.log('theRubberBand ============= Evt_RubberBandDragEnd to set to null', GlobalData.optManager.theRubberBand);

  };

ListManager.LM.prototype.SDJS_LM_SetupMobileReadOnlyEvents = function () {
  GlobalData.optManager.isMobilePlatform &&
    this.WorkAreaHammer.on('doubletap', SDJS_LM_WorkAreaHammerMobileDoubleTap)
}

ListManager.LM.prototypeSDJS_LM_ClearMobileReadOnlyEvents = function () {
  GlobalData.optManager.isMobilePlatform &&
    this.WorkAreaHammer.off('doubletap')
},





  ListManager.LM.prototype.DynamicSnaps_GetSnapObjects = function (e, t, a, r, i, n) {
    var o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b,
      M,
      P = FileParser.TextJust,
      R = this.ActiveVisibleZList();
    o = R.length;
    var A = function (e, t, r, i, n, o, s, l, S) {
      if (g = r - i, D = Math.abs(g), I = [], (M = a[e]) && (I = M.otherhits), D <= 5) if (null == M || o < M.distance) M &&
        I.push(M),
        (
          M = new ListManager.Dynamic_Hit(t, g, n, o, s, l, n === P.TA_CENTER)
        ).otherhits = I,
        a[e] = M;
      else {
        var c = new ListManager.Dynamic_Hit(t, g, n, o, s, l, n === P.TA_CENTER);
        M.otherhits.push(c)
      }
    },
      _ = function (e) {
        var t,
          r = !1;
        for (t in a) {
          var i = a[t];
          if (e && i && e.ID == i.ID && !0 === i.label) {
            r = !0;
            break
          }
        }
        r ||
          (e.label = !0)
      },
      E = function (e) {
        var a,
          r;
        o = e.otherhits.length;
        var i,
          n = [];
        for (s = 0; s < o; s++) a = e.otherhits[s],
          Utils2.IsEqual(a.snap, e.snap, 0.5) &&
          n.push(a);
        for (
          e.otherhits = n,
          (o = e.otherhits.length) > 1 &&
          e.otherhits.sort(
            (
              function (e, t) {
                return e.distance === t.distance ? 0 : e.distance < t.distance ? - 1 : 1
              }
            )
          ),
          s = o - 1;
          s >= 0;
          s--
        ) if (
            a = e.otherhits[s],
            GlobalData.optManager.GetObjectPtr(a.ID, !1).GetSnapRect(),
            s > 0 ? (
              r = e.otherhits[s - 1],
              i = GlobalData.optManager.GetObjectPtr(r.ID, !1).GetSnapRect()
            ) : (r = e, i = GlobalData.optManager.GetObjectPtr(e.ID, !1).GetSnapRect()),
            e.leftright
          ) if (e.aboveleft) switch (a.distance -= r.distance + i.height, e.edge) {
            case P.TA_LEFT:
              a.pt = {
                x: t.x,
                y: i.y
              };
              break;
            case P.TA_RIGHT:
              a.pt = {
                x: S,
                y: i.y
              };
              break;
            case P.TA_CENTER:
              a.pt = {
                x: h,
                y: i.y
              }
          } else switch (a.distance -= r.distance + i.height, e.edge) {
            case P.TA_LEFT:
              a.pt = {
                x: t.x,
                y: i.y + i.height
              };
              break;
            case P.TA_RIGHT:
              a.pt = {
                x: S,
                y: i.y + i.height
              };
              break;
            case P.TA_CENTER:
              a.pt = {
                x: h,
                y: i.y + i.height
              }
          } else if (e.aboveleft) switch (a.distance -= r.distance + i.width, e.edge) {
            case P.TA_TOP:
              a.pt = {
                x: i.x,
                y: i.y
              };
              break;
            case P.TA_BOTTOM:
              a.pt = {
                x: i.x,
                y: p
              };
              break;
            case P.TA_CENTER:
              a.pt = {
                x: i.x,
                y: C
              }
          } else switch (a.distance -= r.distance + i.width, e.edge) {
            case P.TA_TOP:
              a.pt = {
                x: i.x + i.width,
                y: i.y
              };
              break;
            case P.TA_BOTTOM:
              a.pt = {
                x: i.x + i.width,
                y: p
              };
              break;
            case P.TA_CENTER:
              a.pt = {
                x: i.x + i.width,
                y: C
              }
          }
      },
      w = function (e, a, r, i, n) {
        var o,
          s,
          l,
          c,
          u,
          d,
          D,
          g,
          h = 0,
          m = [],
          C = e.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !1, !1, null);
        hits = [];
        for (
          var y = GlobalData.optManager.PolyLIntersect(a, r, C, C.length);
          y.bSuccess &&
          (m.push(y.ipt), !((h += y.lpseg) > C.length - 1));
        ) o = C.slice(h),
          y = GlobalData.optManager.PolyLIntersect(a, r, o, o.length);
        if (i) {
          for (l = m.length, s = 0; s < l; s++) m[s].y <= t.y ? (c = t.y - m[s].y, (null == u || c < u) && (u = c, d = s)) : m[s].y >= p &&
            (c = m[s].y - p, (null == D || c < D) && (D = c, g = s));
          (null != u && null != D || !n) &&
            (hits.push({
              pt: m[d],
              dist: u
            }), hits.push({
              pt: m[g],
              dist: D
            }))
        } else {
          for (l = m.length, s = 0; s < l; s++) m[s].x <= t.x ? (c = t.x - m[s].x, (null == u || c < u) && (u = c, d = s)) : m[s].x >= S &&
            (c = m[s].x - S, (null == D || c < D) && (D = c, g = s));
          (null != u && null != D || !n) &&
            (hits.push({
              pt: m[d],
              dist: u
            }), hits.push({
              pt: m[g],
              dist: D
            }))
        }
        return hits
      },
      F = function (e, t, r) {
        if (r === ConstantData.Guide_DistanceTypes.Room) {
          var i = Utils1.DeepCopy(e.Frame),
            n = e.StyleRecord.Line.BThick;
          if (
            Utils2.InflateRect(i, - n, - n),
            GlobalData.optManager.IsRectEnclosed(i, t)
          ) {
            var o = {
              x: f.x,
              y: C
            },
              s = w(e, o, {
                x: c,
                y: C
              }, !1, !0),
              l = (o = {
                x: h,
                y: f.y
              }, w(e, o, {
                x: h,
                y: d
              }, !0, !0));
            2 === s.length &&
              (
                b = s[0].dist,
                (null == (M = a.wall_left) || M.distance > b) &&
                (
                  (
                    M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !1, - 1, !0)
                  ).pt = s[0].pt,
                  a.wall_left = M
                ),
                b = s[1].dist,
                (null == (M = a.wall_right) || M.distance > b) &&
                (
                  b = s[1].dist,
                  (
                    M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !1, - 2, !0)
                  ).pt = s[1].pt,
                  a.wall_right = M
                )
              ),
              2 === l.length &&
              (
                b = l[0].dist,
                (null == (M = a.wall_top) || M.distance > b) &&
                (
                  (
                    M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !0, - 1, !0)
                  ).pt = l[0].pt,
                  a.wall_top = M
                ),
                b = l[1].dist,
                (null == (M = a.wall_bottom) || M.distance > b) &&
                (
                  (
                    M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !0, - 2, !0)
                  ).pt = l[1].pt,
                  a.wall_bottom = M
                )
              )
          }
        }
        if (
          r === ConstantData.Guide_DistanceTypes.PolyWall ||
          r === ConstantData.Guide_DistanceTypes.Room
        ) {
          if (C >= f.y && C <= d) {
            o = {
              x: f.x,
              y: C
            };
            2 === (s = w(e, o, {
              x: c,
              y: C
            }, !1, !1)).length &&
              (
                null != s[0].pt &&
                (
                  b = s[0].dist,
                  (null == (M = a.wall_left) || M.distance > b) &&
                  (
                    (
                      M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !1, - 1, !0)
                    ).pt = s[0].pt,
                    a.wall_left = M
                  )
                ),
                null != s[1].pt &&
                (
                  b = s[1].dist,
                  (null == (M = a.wall_right) || M.distance > b) &&
                  (
                    b = s[1].dist,
                    (
                      M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !1, - 2, !0)
                    ).pt = s[1].pt,
                    a.wall_right = M
                  )
                )
              )
          }
          if (h >= f.x && h <= c) {
            o = {
              x: h,
              y: f.y
            };
            2 === (l = w(e, o, {
              x: h,
              y: d
            }, !0, !1)).length &&
              (
                null != l[0].pt &&
                (
                  b = l[0].dist,
                  (null == (M = a.wall_top) || M.distance > b) &&
                  (
                    (
                      M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !0, - 1, !0)
                    ).pt = l[0].pt,
                    a.wall_top = M
                  )
                ),
                null != l[1].pt &&
                (
                  b = l[1].dist,
                  (null == (M = a.wall_bottom) || M.distance > b) &&
                  (
                    (
                      M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !0, - 2, !0)
                    ).pt = l[1].pt,
                    a.wall_bottom = M
                  )
                )
              )
          }
        } else r === ConstantData.Guide_DistanceTypes.Vertical_Wall ? (
          i = Utils1.DeepCopy(e.Frame),
          n = e.StyleRecord.Line.BThick,
          Utils2.InflateRect(i, - n, 0),
          i.y <= C &&
          i.y + i.height >= C &&
          (
            t.x > i.x + i.width ? (
              b = t.x - i.x + i.width,
              (null == (M = a.wall_left) || M.distance > b) &&
              (
                M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !1, - 1, !0),
                a.wall_left = M
              )
            ) : S < i.x &&
            (
              M = a.wall_right,
              b = i.x - S,
              (null == M || M.distance > b) &&
              (
                M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !1, - 2, !0),
                a.wall_right = M
              )
            )
          )
        ) : r === ConstantData.Guide_DistanceTypes.Horizontal_Wall &&
        (
          i = Utils1.DeepCopy(e.Frame),
          n = e.StyleRecord.Line.BThick,
          Utils2.InflateRect(i, 0, n),
          i.x <= h &&
          i.x + i.width >= h &&
          (
            t.y > i.y + i.height ? (
              b = t.y - (i.y + i.height),
              M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !0, - 1, !0),
              a.wall_top = M
            ) : p < i.y &&
            (
              b = i.y - p,
              M = new ListManager.Dynamic_Hit(e.BlockID, null, P.TA_CENTER, b, !0, - 2, !0),
              a.wall_bottom = M
            )
          )
        )
      };
    if (null != this.GetObjectPtr(e, !1)) {
      var v;
      S = t.x + t.width,
        p = t.y + t.height,
        h = t.x + t.width / 2,
        C = t.y + t.height / 2;
      var G = !1;
      for (n && n.distanceonly && (G = !0), s = 0; s < o; s++) (l = R[s]) !== e &&
        (
          r &&
          r.indexOf(l) >= 0 ||
          (
            (T = this.GetObjectPtr(l, !1)) &&
            (
              f = T.GetSnapRect(),
              c = f.x + f.width,
              u = f.x,
              L = f.y,
              d = f.y + f.height,
              m = f.x + f.width / 2,
              y = f.y + f.height / 2,
              v = T.Guide_DistanceOnly()
            ),
            v &&
            F(T, t, v),
            T &&
            T.IsSnapTarget() &&
            !G &&
            (
              u >= t.x - 5 &&
              u <= t.x + 5 &&
              (
                d < t.y ? (b = t.y - d, A('above_left', l, u, t.x, P.TA_LEFT, b, !0, !0)) : L > p &&
                  (b = L - p, A('below_left', l, u, t.x, P.TA_LEFT, b, !0, !1))
              ),
              c >= t.x - 5 &&
              c <= t.x + 5 &&
              (
                d < t.y ? (b = t.y - d, A('above_left', l, c, t.x, P.TA_LEFT, b, !0, !0)) : L > p &&
                  (b = L - p, A('below_left', l, c, t.x, P.TA_LEFT, b, !0, !1))
              ),
              c >= S - 5 &&
              c <= S + 5 &&
              (
                d < t.y ? (b = t.y - d, A('above_right', l, c, S, P.TA_RIGHT, b, !0, !0)) : L > p &&
                  (b = L - p, A('below_right', l, c, S, P.TA_RIGHT, b, !0, !1))
              ),
              u >= S - 5 &&
              u <= S + 5 &&
              (
                d < t.y ? (b = t.y - d, A('above_right', l, u, S, P.TA_RIGHT, b, !0, !0)) : L > p &&
                  (b = L - p, A('below_right', l, u, S, P.TA_RIGHT, b, !0, !1))
              ),
              L >= t.y - 5 &&
              L <= t.y + 5 &&
              (
                c < t.x ? (b = t.x - c, A('left_top', l, L, t.y, P.TA_TOP, b, !1, !0)) : u > S &&
                  (b = u - S, A('right_top', l, L, t.y, P.TA_TOP, b, !1, !1))
              ),
              d >= t.y - 5 &&
              d <= t.y + 5 &&
              (
                c < t.x ? (b = t.x - c, A('left_top', l, d, t.y, P.TA_TOP, b, !1, !0)) : u > S &&
                  (b = u - S, A('right_top', l, d, t.y, P.TA_TOP, b, !1, !1))
              ),
              d >= p - 5 &&
              d <= p + 5 &&
              (
                c < t.x ? (b = t.x - c, A('left_bottom', l, d, p, P.TA_BOTTOM, b, !1, !0)) : u > S &&
                  (b = u - S, A('right_bottom', l, d, p, P.TA_BOTTOM, b, !1, !1))
              ),
              L >= p - 5 &&
              L <= p + 5 &&
              (
                c < t.x ? (b = t.x - c, A('left_bottom', l, L, p, P.TA_BOTTOM, b, !1, !0)) : u > S &&
                  (b = u - S, A('right_bottom', l, L, p, P.TA_BOTTOM, b, !1, !1))
              ),
              m >= h - 5 &&
              m <= h + 5 &&
              (
                d < t.y ? (b = t.y - d, A('above_center', l, m, h, P.TA_CENTER, b, !0, !0)) : L > p &&
                  (b = L - p, A('below_center', l, m, h, P.TA_CENTER, b, !0, !1))
              ),
              y >= C - 5 &&
              y <= C + 5 &&
              (
                c < t.x ? (b = t.x - c, A('left_center', l, y, C, P.TA_CENTER, b, !1, !0)) : u > S &&
                  (b = u - S, A('right_center', l, y, C, P.TA_CENTER, b, !1, !1))
              )
            )
          )
        );
      var N,
        k = {
          x: null,
          y: null
        },
        U = {
          x: 0,
          y: 0
        };
      if (i) {
        var J,
          x,
          O = i.length;
        for (J = 0; J < O; J++) N = i[J],
          (M = a[N]) &&
          (M.leftright ? (k.x = M.snap, U.x = M.snap) : (k.y = M.snap, U.y = M.snap));
        for (N in a) if (null != (M = a[N]) && i.indexOf(N) < 0) if (M.leftright) {
          if ('above_center' === N || 'below_center' === N) if (i.indexOf('above_right') >= 0 || i.indexOf('below_right') >= 0) for (M.snap -= U.x / 2, x = M.otherhits.length, J = 0; J < x; J++) M.otherhits[J].snap -= U.x / 2;
          else if (i.indexOf('above_left') >= 0 || i.indexOf('below_left') >= 0) for (M.snap += - U.x / 2, x = M.otherhits.length, J = 0; J < x; J++) M.otherhits[J].snap += - U.x / 2;
          Utils2.IsEqual(M.snap, 0, 0.5) ||
            (a[N] = null)
        } else {
          if ('left_center' === N || 'right_center' === N) if (i.indexOf('left_bottom') >= 0 || i.indexOf('right_bottom') >= 0) for (M.snap -= U.y / 2, x = M.otherhits.length, J = 0; J < x; J++) M.otherhits[J].snap -= U.y / 2;
          else if (i.indexOf('left_top') >= 0 || i.indexOf('right_top') >= 0) for (M.snap += - U.y / 2, x = M.otherhits.length, J = 0; J < x; J++) M.otherhits[J].snap += - U.y / 2;
          Utils2.IsEqual(M.snap, 0, 0.5) ||
            (a[N] = null)
        }
        for (N in a) null != (M = a[N]) &&
          (_(M), E(M))
      } else {
        var B = {
          x: null,
          y: null
        };
        if (GlobalData.docHandler.documentConfig.centerSnap) {
          var H = [
            'above_center',
            'below_center',
            'left_center',
            'right_center'
          ];
          for (o = H.length, s = 0; s < o; s++) null != (M = a[N = H[s]]) &&
            null != M.snap &&
            (
              M.leftright ? (null == B.x || Math.abs(M.snap) < Math.abs(B.x)) &&
                (B.x = M.snap, k.x = M.snap) : (null == B.y || Math.abs(M.snap) < Math.abs(B.x)) &&
              (B.y = M.snap, k.y = M.snap)
            )
        }
        for (N in a) switch (
          null != (M = a[N]) &&
          null != M.snap &&
          (
            M.leftright &&
              null == B.x ? (null == k.x || Math.abs(M.snap) < Math.abs(k.x)) &&
            (k.x = M.snap) : null == B.y &&
            (null == k.y || Math.abs(M.snap) < Math.abs(k.y)) &&
            (k.y = M.snap)
          ),
          N
        ) {
            case 'wall_left':
              a.left_center &&
                (a[N] = null);
              break;
            case 'wall_right':
              a.right_center &&
                (a[N] = null);
              break;
            case 'wall_top':
              a.above_center &&
                (a[N] = null);
              break;
            case 'wall_bottom':
              a.below_center &&
                (a[N] = null)
          }
        for (N in a) null != (M = a[N]) &&
          null != M.snap &&
          (
            M.leftright ? null != k.x &&
              (Utils2.IsEqual(M.snap, k.x, 0.5) || (a[N] = null)) : null != k.y &&
            (Utils2.IsEqual(M.snap, k.y, 0.5) || (a[N] = null))
          );
        for (N in a) null != (M = a[N]) &&
          (_(M = a[N]), E(M))
      }
      return k
    }
  },

  ListManager.LM.prototype.DynamicSnaps_UpdateGuides = function (e, t, a) {
    if (null != this.GetObjectPtr(t, !1)) {
      var r,
        i,
        n,
        o,
        s,
        l = this.Dynamic_Guides,
        S = FileParser.TextJust;
      i = a.y + a.height,
        n = a.x + a.width,
        o = a.x + a.width / 2,
        s = a.y + a.height / 2;
      var c = {
        x: 0,
        y: 0
      },
        u = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
        p = '#2C75F9',
        d = Utils1.DeepCopy(GlobalData.optManager.theContentHeader.DimensionFontStyle);
      d.color = p;
      var D = this.svgDoc.docInfo.docToScreenScale;
      this.svgDoc.docInfo.docScale,
        d.size /= D;
      var g = function (e) {
        var t = e + 'label',
          a = e + 'back',
          r = GlobalData.optManager.svgHighlightLayer.GetElementByID(e),
          i = GlobalData.optManager.svgHighlightLayer.GetElementByID(t),
          n = GlobalData.optManager.svgHighlightLayer.GetElementByID(a);
        r &&
          GlobalData.optManager.svgHighlightLayer.RemoveElement(r),
          i &&
          GlobalData.optManager.svgHighlightLayer.RemoveElement(i),
          n &&
          GlobalData.optManager.svgHighlightLayer.RemoveElement(n)
      },
        h = function (t, r) {
          var l = GlobalData.optManager.GetObjectPtr(t.ID, !1);
          if (null != l) {
            var D,
              g,
              h,
              m = l.GetSnapRect(),
              C = m.y + m.height,
              y = m.x + m.width,
              f = 1 / GlobalData.optManager.svgDoc.GetWorkArea().docScale,
              L = 3 * f + ',' + 6 * f;
            patterncenter = 12 * f + ',' + 6 * f;
            var I,
              T,
              b,
              M = GlobalData.optManager.svgHighlightLayer.GetElementByID(r),
              P = !1,
              R = null;
            if (
              t.leftright ? t.edge === S.TA_LEFT ? (
                t.label &&
                (
                  R = GlobalData.optManager.GetLengthInRulerUnits(t.distance, !1, 0, 0),
                  c.x = a.x
                ),
                t.aboveleft ? null != t.pt ? (D = {
                  x: a.x,
                  y: t.pt.y
                }, g = {
                  x: a.x,
                  y: m.y
                }, c.y = t.pt.y - t.distance / 2) : (D = {
                  x: a.x,
                  y: i
                }, g = {
                  x: a.x,
                  y: m.y
                }, c.y = a.y - t.distance / 2) : null != t.pt ? (D = {
                  x: a.x,
                  y: t.pt.y
                }, g = {
                  x: a.x,
                  y: C
                }, c.y = t.pt.y + t.distance / 2) : (
                  h = e.above_left ? i : a.y,
                  D = {
                    x: a.x,
                    y: h
                  },
                  g = {
                    x: a.x,
                    y: C
                  },
                  c.y = i + t.distance / 2
                )
              ) : t.edge === S.TA_RIGHT ? (
                t.label &&
                (
                  R = GlobalData.optManager.GetLengthInRulerUnits(t.distance, !1, 0, 0),
                  c.x = n
                ),
                t.aboveleft ? null != t.pt ? (D = {
                  x: n,
                  y: t.pt.y
                }, g = {
                  x: n,
                  y: m.y
                }, c.y = t.pt.y - t.distance / 2) : (D = {
                  x: n,
                  y: i
                }, g = {
                  x: n,
                  y: m.y
                }, c.y = a.y - t.distance / 2) : null != t.pt ? (D = {
                  x: n,
                  y: t.pt.y
                }, g = {
                  x: n,
                  y: C
                }, c.y = t.pt.y + t.distance / 2) : (
                  h = e.above_left ? i : a.y,
                  D = {
                    x: n,
                    y: h
                  },
                  g = {
                    x: n,
                    y: C
                  },
                  c.y = i + t.distance / 2
                )
              ) : t.edge === S.TA_CENTER &&
              (
                P = !0,
                c.x = o,
                - 1 === t.aboveleft ? (
                  null != t.pt ? (D = {
                    x: o,
                    y: a.y
                  }, g = {
                    x: o,
                    y: t.pt.y
                  }) : (D = {
                    x: o,
                    y: a.y
                  }, g = {
                    x: o,
                    y: m.y
                  }),
                  c.y = a.y - t.distance / 2
                ) : - 2 === t.aboveleft ? (
                  null != t.pt ? (D = {
                    x: o,
                    y: i
                  }, g = {
                    x: o,
                    y: t.pt.y
                  }) : (D = {
                    x: o,
                    y: i
                  }, g = {
                    x: o,
                    y: C
                  }),
                  c.y = i + t.distance / 2
                ) : t.aboveleft ? null != t.pt ? (D = {
                  x: o,
                  y: t.pt.y
                }, g = {
                  x: o,
                  y: C
                }, c.y = t.pt.y - t.distance / 2) : (D = {
                  x: o,
                  y: a.y
                }, g = {
                  x: o,
                  y: C
                }, c.y = a.y - t.distance / 2) : null != t.pt ? (D = {
                  x: o,
                  y: t.pt.y
                }, g = {
                  x: o,
                  y: m.y
                }, c.y = t.pt.y + t.distance / 2) : (D = {
                  x: o,
                  y: i
                }, g = {
                  x: o,
                  y: m.y
                }, c.y = i + t.distance / 2),
                R = GlobalData.optManager.GetLengthInRulerUnits(t.distance, !1, 0, 0)
              ) : t.edge === S.TA_TOP ? (
                t.label &&
                (
                  R = GlobalData.optManager.GetLengthInRulerUnits(t.distance, !1, 0, 0),
                  c.y = a.y
                ),
                t.aboveleft ? null != t.pt ? (D = {
                  x: t.pt.x,
                  y: a.y
                }, g = {
                  x: m.x,
                  y: a.y
                }, c.x = t.pt.x - t.distance / 2) : (D = {
                  x: n,
                  y: a.y
                }, g = {
                  x: m.x,
                  y: a.y
                }, c.x = a.x - t.distance / 2) : null != t.pt ? (D = {
                  x: t.pt.x,
                  y: a.y
                }, g = {
                  x: y,
                  y: a.y
                }, c.x = t.pt.x + t.distance / 2) : (
                  D = {
                    x: h = e.left_top ? n : a.x,
                    y: a.y
                  },
                  g = {
                    x: y,
                    y: a.y
                  },
                  c.x = n + t.distance / 2
                )
              ) : t.edge === S.TA_BOTTOM ? (
                t.label &&
                (
                  R = GlobalData.optManager.GetLengthInRulerUnits(t.distance, !1, 0, 0),
                  c.y = i
                ),
                t.aboveleft ? null != t.pt ? (D = {
                  x: t.pt.x,
                  y: i
                }, g = {
                  x: m.x,
                  y: i
                }, c.x = t.pt.x - t.distance / 2) : (D = {
                  x: n,
                  y: i
                }, g = {
                  x: m.x,
                  y: i
                }, c.x = a.x - t.distance / 2) : null != t.pt ? (D = {
                  x: t.pt.x,
                  y: i
                }, g = {
                  x: y,
                  y: i
                }, c.x = t.pt.x + t.distance / 2) : (
                  D = {
                    x: h = e.left_bottom ? n : a.x,
                    y: i
                  },
                  g = {
                    x: y,
                    y: i
                  },
                  c.x = n + t.distance / 2
                )
              ) : t.edge === S.TA_CENTER &&
              (
                P = !0,
                c.y = s,
                - 1 === t.aboveleft ? (
                  null != t.pt ? (D = {
                    x: a.x,
                    y: s
                  }, g = {
                    x: t.pt.x,
                    y: s
                  }) : (D = {
                    x: a.x,
                    y: s
                  }, g = {
                    x: m.x,
                    y: s
                  }),
                  c.x = a.x - t.distance / 2
                ) : - 2 === t.aboveleft ? (
                  null != t.pt ? (D = {
                    x: n,
                    y: s
                  }, g = {
                    x: t.pt.x,
                    y: s
                  }) : (D = {
                    x: n,
                    y: s
                  }, g = {
                    x: y,
                    y: s
                  }),
                  c.x = n + t.distance / 2
                ) : t.aboveleft ? null != t.pt ? (D = {
                  x: t.pt.x,
                  y: s
                }, g = {
                  x: y,
                  y: s
                }, c.x = t.pt.x - t.distance / 2) : (D = {
                  x: a.x,
                  y: s
                }, g = {
                  x: y,
                  y: s
                }, c.x = a.x - t.distance / 2) : null != t.pt ? (D = {
                  x: t.pt.x,
                  y: s
                }, g = {
                  x: m.x,
                  y: s
                }, c.x = t.pt.x + t.distance / 2) : (D = {
                  x: n,
                  y: s
                }, g = {
                  x: m.x,
                  y: s
                }, c.x = n + t.distance / 2),
                R = GlobalData.optManager.GetLengthInRulerUnits(t.distance, !1, 0, 0)
              ),
              D
            ) if (
                null == M &&
                (
                  (
                    M = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.LINE)
                  ).SetFillColor('none'),
                  M.SetStrokeColor(p),
                  M.SetStrokeWidth(f),
                  P ? M.SetStrokePattern(patterncenter) : M.SetStrokePattern(L),
                  M.SetID(r),
                  GlobalData.optManager.svgHighlightLayer.AddElement(M)
                ),
                M.SetPoints(D.x, D.y, g.x, g.y),
                T = r + 'label',
                b = r + 'back',
                R
              ) {
                if (
                  I = GlobalData.optManager.svgHighlightLayer.GetElementByID(T),
                  A = GlobalData.optManager.svgHighlightLayer.GetElementByID(b),
                  null == I
                ) {
                  var A;
                  (
                    A = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.RECT)
                  ).SetID(b),
                    A.SetStrokeWidth(0);
                  var _ = u.background.Paint.Color;
                  A.SetFillColor(_),
                    GlobalData.optManager.svgHighlightLayer.AddElement(A),
                    I = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT),
                    GlobalData.optManager.svgHighlightLayer.AddElement(I),
                    I.SetID(T),
                    I.SetRenderingEnabled(!1),
                    I.SetText(R),
                    I.SetFormat(d)
                } else I.SetRenderingEnabled(!1),
                  I.SetText(R);
                I.SetRenderingEnabled(!0);
                var E = I.GetTextMinDimensions();
                A.SetPos(c.x - E.width / 2 - 2, c.y - E.height / 2 - 2),
                  A.SetSize(E.width + 4, E.height + 4),
                  I.SetPos(c.x - E.width / 2, c.y - E.height / 2)
              } else I = GlobalData.optManager.svgHighlightLayer.GetElementByID(T),
                A = GlobalData.optManager.svgHighlightLayer.GetElementByID(b),
                I &&
                GlobalData.optManager.svgHighlightLayer.RemoveElement(I),
                A &&
                GlobalData.optManager.svgHighlightLayer.RemoveElement(A)
          }
        };
      for (r in e) {
        var m,
          C,
          y,
          f = [];
        if (null != e[r]) {
          for (f = [], h(e[r], r), C = e[r].otherhits.length, m = 0; m < C; m++) (y = e[r].otherhits[m]).label = e[r].label,
            f.push(y.ID),
            h(e[r].otherhits[m], r + y.ID.toString());
          if (l && null != l[r]) for (C = l[r].otherhits.length, m = 0; m < C; m++) y = l[r].otherhits[m],
            f.indexOf(y.ID) < 0 &&
            g(r + y.ID.toString())
        } else if (l && null != l[r] && (g(r), l[r].otherhits)) for (C = l[r].otherhits.length, m = 0; m < C; m++) g(r + (y = l[r].otherhits[m]).ID.toString())
      }
      this.Dynamic_Guides = e
    }
  },


  ListManager.LM.prototypeRenderAllSVGObjectsNoMouse = function () {
    var e,
      t,
      a = this.VisibleZList(),
      r = this.ActiveVisibleZList(),
      i = a.length;
    for (
      this.ClearSVGHighlightLayer(),
      this.ClearSVGOverlayLayer(),
      this.ClearSVGObjectLayer(),
      t = 0;
      t < i;
      ++t
    ) e = - 1 != r.indexOf(a[t]),
      this.AddSVGObject(t, a[t], !1, e);
    this.ClearDirtyList()
  },


  ListManager.LM.prototype.RenderDirtySVGObjectsNoSetMouse = function () {
    this.RenderDirtySVGObjectsCommon(!1)
  },


 ,
  ListManager.LM.prototype.SetDocumentScaleToFit = function (e) {
    this.svgDoc &&
      GlobalData.docHandler.SetSizeToFit(e)
  }

ListManager.LM.prototypeSetDocumentScaleToPage = function (e) {
  this.svgDoc &&
    GlobalData.docHandler.SetSizeToPage(e)
},


  ,
  ListManager.LM.prototype.GetDocumentScale = function () {
    if (this.svgDoc) return GlobalData.docHandler.GetZoomFactor()
  }


ListManager.LM.prototype.CalcSVGSymbolDimensions = function (e, t, a) {
  if (e) {
    var r = new FileReader;
    r.UserData = {
      callback: a
    },
      r.onload = function (e) {
        var t = this.result,
          a = null;
        window.DOMParser ? a = (new DOMParser).parseFromString(t, 'text/xml') : (
          (a = new ActiveXObject('Microsoft.XMLDOM')).async = !1,
          a.loadXML(t)
        );
        var r = a.documentElement.getAttribute('width');
        r &&
          (r = r.match(/\d*\.*\d*/)[0]);
        var i = a.documentElement.getAttribute('height');
        if (i && (i = i.match(/\d*\.*\d*/)[0]), r && i) this.UserData.callback(r, i, null);
        else {
          var n = a.documentElement.getAttribute('viewBox');
          if (n) {
            var o = n.split(' ');
            r = (r = parseFloat(o[2])).match(/\d*\.*\d*/)[0],
              i = (i = parseFloat(o[3])).match(/\d*\.*\d*/)[0],
              r &&
                i ? this.UserData.callback(r, i, null) : this.UserData.callback(0, 0, {
                  error: 'No width/height and viewbox bad'
                })
          } else this.UserData.callback(0, 0, {
            error: 'No viewbox or width/height'
          })
        }
      },
      r.readAsText(e)
  } else a &&
    a(0, 0, {
      error: 'No blob passed in'
    })
}

ListManager.LM.prototypeImportSVGSymbol = function (e) {
  var t = '',
    a = null,
    r = null,
    i = this,
    n = function (e, n, o) {
      var s,
        l = [];
      if (
        e &&
        (e = e.replace('px', '')),
        n &&
        (n = n.replace('px', '')),
        !o &&
        e > 0 &&
        n > 0
      ) {
        var S = 200,
          c = 200;
        e < n ? c *= e / n : S *= n / e;
        var u = i.CalcWorkAreaCenterUL(c, S),
          p = new Resources.QuickStyle;
        p.Name = '',
          p.Line.Thickness = 0,
          p.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT;
        var d = {
          Frame: {
            x: u.x,
            y: u.y,
            width: c,
            height: S
          },
          TextGrow: ConstantData.TextGrowBehavior.PROPORTIONAL,
          ImageURL: t,
          StyleRecord: p,
          ObjGrow: ConstantData.GrowBehavior.PROPORTIONAL,
          flags: ConstantData.ObjFlags.SEDO_ImageOnly,
          extraflags: ConstantData.ExtraFlags.SEDE_NoColor
        },
          D = new ListManager.Rect(d);
        s = i.AddNewObject(D, !1, !0);
        var g = i.GetObjectPtr(s, !1);
        if (g) {
          var h = FileParser.GetImageDir(a);
          g.SetBlobBytes(r, h)
        }
        l.push(s),
          i.CompleteOperation(l)
      }
    },
    o = new ListManager.SVGImporter;
  o &&
    o.importSVG(
      e,
      (
        function (e, o, s) {
          t = e,
            a = o,
            r = s,
            i.CalcSVGSymbolDimensions(o, e, n)
        }
      )
    )
},


  ListManager.LM.prototype.GetFontSource = function (e) {
    var t,
      a = Resources.WebFonts.length;
    for (t = 0; t < a; ++t) if (e == Resources.WebFonts[t].WebFontFamily) return Resources.WebFonts[t].Source;
    return 'system'
  }

ListManager.LM.prototypeGetFontImportName = function (e) {
  var t,
    a = Globals.WebFonts.length,
    r = '';
  for (t = 0; t < a; ++t) if (e == Globals.WebFonts[t].name) {
    'self-host' == Globals.WebFonts[t].source &&
      Globals.WebFonts[t].webName &&
      (r = Globals.WebFonts[t].webName);
    break
  }
  return r
},

  ListManager.LM.prototype.BBoxTest = function () {
    var e,
      t,
      a,
      r = this.GetObjectPtr(this.theSelectedListBlockID, !1);
    if (null != r) {
      var i = r.length;
      for (a = 0; a < i; ++a) {
        if (t = r[a], !(e = this.GetObjectPtr(t, !1))) return;
        e.GetBBox(e)
      }
    }
  }





ListManager.LM.prototypeSetActionArrowTimer = function (e) {
  if (!(e < 0)) {
    var t = GlobalData.optManager.GetObjectPtr(e, !1);
    t &&
      (
        this.ClearActionArrowTimer(e),
        t.actionArrowHideTimerID = GlobalData.optManager.actionArrowHideTimer.setTimeout('RemoveActionArrows', 500, e)
      )
  }
},
  ,


  ListManager.LM.prototype.GenerateSVGXMLDocument = function (e) {
    var t,
      a,
      r = null,
      i = window.navigator.msPointerEnabled,
      n = this.ZList(),
      o = n.length;
    if (0 === o) return !1;
    var s = [],
      l = {},
      S = null,
      c = null;
    for (t = 0; t < o; ++t) '' !== (S = this.GetObjectPtr(n[t], !1)).SymbolURL ? (c = S.GetBlobBytes()) &&
      (l = {
        URL: S.SymbolURL,
        BlobBytes: c,
        isSymbol: !0
      }, s.push(l)) : '' !== S.ImageURL &&
      (c = S.GetBlobBytes()) &&
    (l = {
      URL: S.ImageURL,
      BlobBytes: c,
      isSymbol: !1
    }, s.push(l));
    var u,
      p = s.length,
      d = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
      D = GlobalData.docHandler.DocObject().GetWorkArea().dispDpiX / GlobalData.docHandler.DocObject().GetWorkArea().docDpi;
    e ? (
      (
        u = GlobalData.optManager.GetSRect(!1, !1, null) ||
        {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        }
      ).width *= D,
      u.height *= D
    ) : u = {
      x: 0,
      y: 0,
      width: d.dim.x * D,
      height: d.dim.y * D
    };
    var g = document.getElementById('svg-area'),
      h = SDJS_CloneToDoc($('svg', g)[0], i);
    i ||
      h.setAttribute('xmlns', 'http://www.w3.org/2000/svg'),
      h.setAttribute('version', '1.1'),
      h.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink'),
      h.removeChild(h.childNodes[1]),
      h.removeChild(h.childNodes[1]),
      h.removeChild(h.childNodes[1]),
      h.removeChild(h.childNodes[1]);
    var m = h.childNodes.length;
    for (t = 0; t < m - 2; ++t) h.removeChild(h.childNodes[2]);
    var C,
      y = h.childNodes[0],
      f = y.childNodes.length,
      L = null,
      I = null,
      T = '',
      b = [];
    for (t = 0; t < f; ++t) if (
      - 1 != (C = (L = y.childNodes[t]).getAttribute('id')).indexOf('FX_NONE')
    ) b.push(L);
    else if (- 1 != C.indexOf('FX_OGLW')) b.push(L);
    else if (- 1 != C.indexOf('IFILL_blob')) for (I = (r = L.childNodes[0]).getAttribute('xlink:href'), a = 0; a < p; ++a) if (!(l = s[a]).isSymbol && - 1 != I.indexOf(l.URL)) {
      T = 'data:image/png;base64,' + Utils2.ArrayBufferToBase64(l.BlobBytes.Bytes),
        r.setAttribute('xlink:href', T);
      break
    }
    var M = b.length;
    for (t = 0; t < M; ++t) (L = b[t]).parentNode.removeChild(L);
    var P = h.childNodes[1],
      R = (P.childNodes.length, null);
    for (t = 0; t < o; ++t) (R = P.childNodes[t]) &&
      'url(#FX_NONE)' === R.getAttribute('filter') &&
      R.removeAttribute('filter');
    var A = P.getElementsByTagName('image'),
      _ = A.length;
    for (t = 0; t < _; ++t) {
      for (I = (r = A[t]).getAttribute('xlink:href'), a = 0; a < p; ++a) if ((l = s[a]).isSymbol && - 1 != I.indexOf(l.URL)) {
        T = l.URL,
          r.setAttribute('xlink:href', T);
        break
      }
      r &&
        'url(#FX_NONE)' === r.getAttribute('filter') &&
        r.removeAttribute('filter')
    }
    var E,
      w,
      F = P.getElementsByTagName('rect'),
      v = F.length,
      G = null,
      N = [];
    for (t = 0; t < v; ++t) 'hidden' === (G = F[t]).getAttribute('visibility') ? N.push(G) : (
      E = G.getAttribute('fill-opacity'),
      w = G.getAttribute('stroke-width'),
      '0' === E &&
      '0' === w &&
      N.push(G)
    ),
      'url(#FX_NONE)' === G.getAttribute('filter') &&
      G.removeAttribute('filter');
    var k = N.length;
    for (t = 0; t < k; ++t) (G = N[t]).parentNode.removeChild(G);
    var U = P.getElementsByTagName('oval'),
      J = U.length,
      x = null;
    for (t = 0; t < J; ++t) 'url(#FX_NONE)' === (x = U[t]).getAttribute('filter') &&
      x.removeAttribute('filter');
    var O = P.getElementsByTagName('path'),
      B = O.length,
      H = null;
    for (t = 0; t < B; ++t) 'url(#FX_NONE)' === (H = O[t]).getAttribute('filter') &&
      H.removeAttribute('filter');
    var V = P.getElementsByTagName('g'),
      j = V.length,
      z = null;
    for (t = 0; t < j; ++t) 'url(#FX_NONE)' === (z = V[t]).getAttribute('filter') &&
      z.removeAttribute('filter');
    var W,
      q,
      K,
      X,
      Y = P.getElementsByTagName('tspan'),
      Z = Y.length,
      Q = null,
      ee = [];
    for (t = 0; t < Z; ++t) W = (Q = Y[t]).getAttribute('font-family'),
      'google' == this.GetFontSource(W) &&
      (q = / /g, W = W.replace(q, '+'), - 1 == ee.indexOf(W) && ee.push(W)),
      'url(#FX_NONE)' === Q.getAttribute('filter') &&
      Q.removeAttribute('filter');
    for (t = 0; t < ee.length; ++t) (
      K = document.createElementNS('http://www.w3.org/2000/svg', 'style')
    ).setAttribute('type', 'text/css'),
      K.removeAttribute('xml:space'),
      W = '@import url(http://fonts.googleapis.com/css?family=' + ee[t] + ');',
      X = document.createTextNode(W),
      K.appendChild(X),
      y.appendChild(K);
    h.setAttribute('width', u.x + u.width),
      h.setAttribute('height', u.y + u.height),
      h.setAttribute('viewBox', '0 0 ' + (u.x + u.width) + ' ' + (u.y + u.height));
    var te = SDJS_XML2Str(h);
    i &&
      (
        q = /xmlns:NS[0-9]+=\"\" /g,
        te = te.replace(q, ''),
        q = /NS[0-9]+:/g,
        te = te.replace(q, '')
      ),
      q = /\xA0/g,
      te = SDJS_StrReplaceAll('&nbsp;', ' ', te = te.replace(q, ' ')),
      te = SDJS_StrReplaceAll('&quot;', '', te);
    return te = '<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">' + (te = SDJS_StrReplaceAll('%3A', ':', te))
  }




ListManager.LM.prototype.GeneratePreviewViaCanvg = function () {
  var e = this.GenerateSVGXMLDocument(!1),
    t = new Image;
  t.src = 'data:image/svg+xml,' + encodeURIComponent(e),
    t.onload = function () {
      var e = document.createElement('canvas');
      e.width = t.width,
        e.height = t.height,
        e.getContext('2d').drawImage(t, 0, 0);
      var a = document.createElement('a');
      a.download = 'preview.png',
        a.href = e.toDataURL('image/png'),
        document.body.appendChild(a),
        a.click()
    }
}

ListManager.LM.prototypeGeneratePreviewViaWebService = function () {
  var e = this.GetDocumentScale();
  1 != e &&
    this.SetDocumentScale(1);
  var t = this.GenerateSVGXMLDocument(!1);
  if (1 != e && this.SetDocumentScale(e), t) {
    $.ajax({
      type: 'PUT',
      async: !1,
      contentType: 'application/x-www-form-urlencoded; charset=utf-8',
      url: 'http://localhost:9494',
      dataType: 'text',
      data: t,
      success: function (e) {
      },
      error: function (e) {
      }
    })
  }
}

ListManager.LM.prototypeGeneratePreviewlSVG = function (e) {
  return (e = e || Resources.SDJSExportType.SVG) == Resources.SDJSExportType.SVG ? this.ExportSVGXML(!0, 12, !1, !1, !1, {
    exportLinks: !0
  }) : GlobalData.docHandler.GetPrintHandler().CreatePrintHTML(e)
}





ListManager.LM.prototypeGenerateCenteredPreviewPNG = function (e, t, a, r) {
  if (
    t = t ||
    2400,
    a = a ||
    2400,
    (r = r || Resources.SDJSExportType.PNG) == Resources.SDJSExportType.PNG ||
    r == Resources.SDJSExportType.JPEG
  ) {
    this.GenerateEncapsulatedSVG(
      (
        function (i, n) {
          if (i && n) {
            var o = SDGraphics.Element.Style.ExtractSVGSize(i),
              s = Math.min(1, t / o.width, a / o.height);
            o.width = Math.round(o.width * s),
              o.height = Math.round(o.height * s);
            var l = new Image;
            l.onload = function () {
              var i = document.createElement('canvas');
              i.width = t,
                i.height = a;
              var n = i.getContext('2d');
              r == Resources.SDJSExportType.JPEG &&
                (n.fillStyle = '#fff', n.fillRect(0, 0, o.width, o.height));
              var s = Math.round((t - o.width) / 2),
                S = Math.round((a - o.height) / 2);
              n.drawImage(l, s, S, o.width, o.height);
              var c = r == Resources.SDJSExportType.JPEG ? 'image/jpeg' : 'image/png';
              i.toBlob((function (t) {
                e(t)
              }), c, 0.8)
            },
              l.src = 'data:image/svg+xml,' + encodeURIComponent(i)
          } else e(null)
        }
      ),
      !1,
      !1,
      !0
    )
  } else e(null)
}

ListManager.LM.prototypeGeneratePreviewViaChrome = function () {
  var e = this.GetDocumentScale();
  1 != e &&
    this.SetDocumentScale(1);
  var t = this.GenerateSVGXMLDocument(!1);
  if (1 != e && this.SetDocumentScale(e), t) {
    var a = new Image;
    a.src = 'data:image/svg+xml,' + encodeURIComponent(t),
      a.onload = function () {
        var e = document.createElement('canvas');
        e.width = a.width,
          e.height = a.height,
          e.getContext('2d').drawImage(a, 0, 0);
        var t = document.createElement('a');
        t.download = 'preview.png',
          t.href = e.toDataURL('image/png'),
          document.body.appendChild(t),
          t.click()
      }
  }
}

ListManager.LM.prototypeGeneratePreviewToFile = function () {
  var e = this.GetDocumentScale();
  1 != e &&
    this.SetDocumentScale(1);
  var t = this.GenerateSVGXMLDocument(!1);
  if (1 != e && this.SetDocumentScale(e), t) {
    for (var a = new Array(t.length), r = 0; r < t.length; r++) a[r] = t.charCodeAt(r);
    var i = new Uint8Array(a),
      n = new Blob([i], {
        type: 'text/plain'
      }),
      o = function (e) {
      },
      s = function (e) {
        function t(e) {
          e.createWriter(a, o)
        }
        function a(e) {
          e.write(n)
        }
        e.root.getFile(
          'test.svg',
          {
            create: !0
          },
          (
            function (a) {
              a.remove((function () {
                e.root.getFile('test.svg', {
                  create: !0
                }, t, o)
              }), o)
            }
          ),
          o
        )
      };
    navigator.webkitPersistentStorage.requestQuota(
      4194304,
      (
        function (e) {
          (window.requestFileSystem || window.webkitRequestFileSystem)(PERSISTENT, e, s, o)
        }
      )
    )
  }
},






  ,
  ListManager.LM.prototype.FindBlock = function (e, t) {
    var a,
      r;
    for (a = e.length, r = 0; r < a; r++) if (e[r].ID === t) return r;
    return - 1
  },


  ListManager.LM.prototype.PatchUndo = function (e) {
    var t,
      a,
      r,
      i,
      n,
      o,
      s,
      l,
      S;
    if (SDJS.Editor.IsStateOpen()) for (
      n = GlobalData.stateManager.CurrentStateID,
      a = GlobalData.stateManager.States.length - 2;
      a >= 0;
      a--
    ) for (t = GlobalData.stateManager.States[a].StoredObjects.length, r = 0; r < t; r++) if (
      (i = GlobalData.stateManager.States[a].StoredObjects[r]).ID === e &&
      i.StateOperationTypeID == Globals.StateOperationType.CREATE
    ) {
      for (
        GlobalData.stateManager.States[a].StoredObjects.splice(r, 1),
        GlobalData.stateManager.PreserveState(),
        SDF.SaveChangedBlocks(GlobalData.stateManager.CurrentStateID, 0, GlobalData.stateManager.CurrentStateID - 1),
        s = GlobalData.stateManager.States[n].StoredObjects.length,
        o = 0;
        o < s;
        o++
      ) (l = GlobalData.stateManager.States[n].StoredObjects[o]).ID === e ||
        l.Type === Globals.StoredObjectType.LAYERS_MANAGER_OBJECT ||
        l.Type === Globals.StoredObjectType.SED_SESSION_OBJECT ||
        l.Type === Globals.StoredObjectType.SELECTEDLIST_OBJECT ||
        l.Type === Globals.StoredObjectType.TED_SESSION_OBJECT ||
        (
          (S = this.FindBlock(GlobalData.stateManager.States[a].StoredObjects, l.ID)) >= 0 ? GlobalData.stateManager.States[a].StoredObjects[S] = l : GlobalData.stateManager.States[a].StoredObjects.push(l)
        );
      return GlobalData.stateManager.States.pop(),
        void (GlobalData.stateManager.CurrentStateID = GlobalData.stateManager.States.length - 1)
    }
  }

ListManager.LM.prototypeAddEMFBlockToUndo = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S;
  if (GlobalData.stateManager.States[GlobalData.stateManager.CurrentStateID].IsOpen) for (
    o = GlobalData.stateManager.CurrentStateID,
    r = GlobalData.stateManager.States.length - 1;
    r >= 0;
    r--
  ) for (a = GlobalData.stateManager.States[r].StoredObjects.length, i = 0; i < a; i++) if (
    (n = GlobalData.stateManager.States[r].StoredObjects[i]).ID === e &&
    n.StateOperationTypeID == Globals.StateOperationType.CREATE
  ) {
    if (
      n.Data.BlobBytesID = t,
      n.Data.EMFBuffer = null,
      n.Data.EMFBufferType != FileParser.Image_Dir.dir_meta &&
      delete n.Data.EMFHash,
      r === o
    ) return;
    for (l = GlobalData.stateManager.States[o].StoredObjects.length, s = 0; s < l; s++) (S = GlobalData.stateManager.States[o].StoredObjects[s]).ID === t &&
      (
        GlobalData.stateManager.States[r].StoredObjects.push(S),
        GlobalData.stateManager.States[o].StoredObjects.splice(s, 1)
      );
    return void (
      0 === (l = GlobalData.stateManager.States[o].StoredObjects.length) &&
      (
        GlobalData.stateManager.States.pop(),
        GlobalData.stateManager.CurrentStateID = GlobalData.stateManager.States.length - 1
      )
    )
  }
}

ListManager.LM.prototypeGetAllBlockCopies = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o = [];
  for (t = GlobalData.stateManager.States.length, a = 0; a < t; a++) for (r = GlobalData.stateManager.States[a].StoredObjects.length, i = 0; i < r; i++) (n = GlobalData.stateManager.States[a].StoredObjects[i]).ID === e &&
    o.push(n);
  return o
},


  ListManager.LM.prototype.ResetUndoStates = function () {
    if (null === GlobalData.stateManager) throw new Error('stateManager is null');
    // new SDJSError({
    //   source: 'ListManager.ResetUndoStates',
    //   message: 'stateManager is null'
    // });
    GlobalData.stateManager.ResetUndoStates()
  },


  ListManager.LM.prototype.NudgeSelectedObjects = function (e, t, a) {
    var r,
      i,
      n = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
      o = n.length,
      s = this.GetTargetSelect();
    if (0 !== o) {
      GlobalData.optManager.Dynamic_Guides &&
        (
          GlobalData.optManager.DynamicSnaps_RemoveGuides(GlobalData.optManager.Dynamic_Guides),
          GlobalData.optManager.Dynamic_Guides = null
        );
      var l,
        S,
        c,
        u = {},
        p = this.GetMoveList(n[0], !0, !0, !1, u, !1);
      for (l = p.length - 1; l >= 0; l--) if (S = this.GetObjectPtr(p[l], !1), a && S.NoGrow()) p.splice(l, 1);
      else if (
        p[l] !== n[0] ||
        (
          S.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
          p.splice(l, 1),
          0 != (S.flags & ConstantData.ObjFlags.SEDO_Lock)
        )
      ) if (S.flags & ConstantData.ObjFlags.SEDO_Lock) p.splice(l, 1);
        else if (!a) for (c = 0; c < S.hooks.length; c++) - 1 === p.indexOf(S.hooks[c].objid) &&
          p.splice(l, 1);
      if (
        o = (n = p).length,
        (a || !(u.x + e < 0 || u.y + t < 0)) &&
        (u.x += e, u.y += t, 0 !== o)
      ) {
        Collab.AllowMessage() &&
          Collab.BeginSecondaryEdit(),
          this.HideAllSVGSelectionStates();
        var d,
          D,
          g,
          h,
          m = 0;
        this.theDragBBoxList = [];
        var C = - 1;
        for (m = 0; m < o; ++m) {
          if (C = n[m], i = this.GetObjectPtr(C, !1), a) {
            if (
              r = Utils1.DeepCopy(i),
              g = i.GetDimensions(),
              d = null,
              D = null,
              h = !1,
              e
            ) {
              if (
                (
                  i.ObjGrow === ConstantData.GrowBehavior.ALL ||
                  i.ObjGrow === ConstantData.GrowBehavior.PROPORTIONAL ||
                  i.ObjGrow === ConstantData.GrowBehavior.HCONSTRAIN
                ) &&
                (d = g.x + e) <= 10
              ) continue;
              g.y > 0 &&
                i.ObjGrow === ConstantData.GrowBehavior.PROPORTIONAL &&
                (D = g.y + e, h = !0)
            }
            if (t && !h) {
              if (
                (
                  i.ObjGrow === ConstantData.GrowBehavior.ALL ||
                  i.ObjGrow === ConstantData.GrowBehavior.PROPORTIONAL ||
                  i.ObjGrow === ConstantData.GrowBehavior.VCONSTRAIN
                ) &&
                (D = g.y + t) <= 10
              ) continue;
              g.x > 0 &&
                i.ObjGrow === ConstantData.GrowBehavior.PROPORTIONAL &&
                (d = g.x + t)
            } (i = this.GetObjectPtr(C, !0)).flags & ConstantData.ObjFlags.SEDO_TextOnly &&
              i.StyleRecord.Fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TRANSPARENT &&
              (
                i.flags = Utils2.SetFlag(i.flags, ConstantData.ObjFlags.SEDO_TextOnly, !1),
                i.SetTextGrow(ConstantData.TextGrowBehavior.VERTICAL)
              ),
              i.SetSize(d, D, ConstantData.ActionTriggerType.LINELENGTH),
              GlobalData.optManager.MaintainLink(i.BlockID, i, r, ConstantData.ActionTriggerType.LINEEND)
          } else e &&
            i.Frame.x + e,
            t &&
            i.Frame.y + t,
            this.OffsetShape(C, e, t, ConstantData.ActionTriggerType.TABLE_SELECT);
          if (this.AddToDirtyList(C, !a), C === s) {
            var y = i.GetDimensionsForDisplay();
            GlobalData.optManager.UpdateDisplayCoordinates(y, null, null, i)
          }
          if (i && 1 === i.hooks.length && !a) {
            var f = this.GetObjectPtr(i.hooks[0].objid, !1);
            this.HookedObjectMovingDebounced(i, f)
          }
        }
        this.NudgeOpen ? a ? (this.NudgeGrowX += e, this.NudgeGrowY += t) : (this.NudgeX += e, this.NudgeY += t) : a ? (
          this.NudgeGrowX = e,
          this.NudgeGrowY = t,
          this.NudgeX = 0,
          this.NudgeY = 0
        ) : (
          this.NudgeGrowX = 0,
          this.NudgeGrowY = 0,
          this.NudgeX = e,
          this.NudgeY = t
        ),
          this.NudgeOpen = !1,
          this.UpdateLinks(),
          this.UpdateLineHops(!0),
          GlobalDatagFlowChartManager.UpdateSwimlanes(),
          this.RenderDirtySVGObjects(),
          this.FitDocumentWorkArea(!1, !1),
          this.RenderAllSVGSelectionStates(),
          this.ScrollObjectIntoView(- 1, !1, u),
          this.NudgeOpen = !0,
          Collab.AllowMessage() &&
          Collab.UnBlockMessages()
      }
    }
  },



  ListManager.LM.prototype.AlignShapes = function (e) {
    var t,
      a,
      r = !1,
      i = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
      n = i.length;
    if (0 !== n) {
      var o = this.GetTargetSelect(),
        s = null,
        l = 0;
      if (- 1 != o) {
        var S = this.GetObjectPtr(o, !1);
        s = S.GetAlignRect(),
          l = S.StyleRecord.Line.Thickness;
        var c,
          u = 0,
          p = null,
          d = null;
        for (Collab.BeginSecondaryEdit(), u = 0; u < n; ++u) if (
          i[u] !== o &&
          (d = null, !(p = this.GetObjectPtr(i[u], !1)).hooks.length)
        ) {
          switch (
          r = !0,
          (p = this.GetObjectPtr(i[u], !0)).FramezList &&
          p.FramezList.length &&
          (d = p.FramezList),
          this.SetLinkFlag(i[u], ConstantData.LinkFlags.SED_L_MOVE),
          this.AddToDirtyList(i[u], !0),
          c = p.GetAlignRect(),
          e
          ) {
            case 'lefts':
              t = s.x - l / 2 - (c.x - p.StyleRecord.Line.Thickness / 2),
                a = 0;
              break;
            case 'centers':
              t = s.x + s.width / 2 - c.width / 2 - c.x,
                a = 0;
              break;
            case 'rights':
              t = s.x + s.width + l / 2 - (c.x + c.width + p.StyleRecord.Line.Thickness / 2),
                a = 0;
              break;
            case 'tops':
              a = s.y - l / 2 - (c.y - p.StyleRecord.Line.Thickness / 2),
                t = 0;
              break;
            case 'middles':
              a = s.y + s.height / 2 - c.height / 2 - c.y,
                t = 0;
              break;
            case 'bottoms':
              a = s.y + s.height + l / 2 - (c.y + c.height + p.StyleRecord.Line.Thickness / 2),
                t = 0
          }
          p.OffsetShape(t, a, d),
            t = 0,
            a = 0,
            p.r.x < 0 &&
            (t = - p.r.x),
            p.r.y < 0 &&
            (a = - p.r.y),
            (t || a) &&
            p.OffsetShape(t, a)
        }
        if (r) {
          if (Collab.AllowMessage()) {
            var D = {
              shapeAlign: e
            };
            Collab.BuildMessage(ConstantData.CollabMessages.AlignShapes, D, !0)
          }
          this.CompleteOperation(null)
        } else Utils2.Alert(Resources.Strings.AlignHooked, null),
          Collab.UnBlockMessages()
      }
    }
  }

ListManager.LM.prototypeRotateShapes = function (e, t) {
  var a = GlobalData.optManager.GetObjectPtr(this.theSelectedListBlockID, !1),
    r = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  t &&
    (a = t);
  var i,
    n,
    o = a.length;
  if (0 !== o) {
    var s,
      l,
      S,
      c,
      u = 0,
      p = 0,
      d = null,
      D = 0,
      g = 0;
    for (u = 0; u < o && !(l = (d = this.GetObjectPtr(a[u], !1)).NoRotate()); ++u);
    if (l) Utils2.Alert(Resources.Strings.NoRotate, null);
    else {
      for (u = 0; u < a.length; u++) if (
        (d = this.GetObjectPtr(a[u], !1)) instanceof ListManager.PolyLineContainer
      ) {
        var h = d.GetListOfEnclosedObjects(!1);
        if (h.length > 0) {
          if (!this.AllowGroup(h)) return void Utils2.Alert(Resources.Strings.GroupNotAllowed, null);
          if (this.IsLinkedOutside(h)) return void Utils2.Alert(Resources.Strings.LinkedOutside);
          if (this.IsGroupNonDelete()) return void Utils2.Alert(Resources.Strings.GroupNonDelete)
        }
      }
      if (null == t && Collab.AllowMessage()) {
        Collab.BeginSecondaryEdit();
        var m = {
          angle: e
        },
          C = Collab.BuildMessage(ConstantData.CollabMessages.RotateShapes, m, !0, !0);
        Collab.LockMessages()
      }
      for (u = 0; u < a.length; u++) {
        if (
          (d = this.GetObjectPtr(a[u], !0)) instanceof ListManager.PolyLine &&
          d.rflags &&
          (
            this.rflags = Utils2.SetFlag(this.rflags, ConstantData.FloatingPointDim.SD_FP_Width, !1),
            this.rflags = Utils2.SetFlag(
              this.rflags,
              ConstantData.FloatingPointDim.SD_FP_Height,
              !1
            )
          ),
          d instanceof ListManager.PolyLineContainer &&
          (
            this.SetLinkFlag(a[u], ConstantData.LinkFlags.SED_L_MOVE),
            this.AddToDirtyList(a[u]),
            rotatedList = d.RotateAllInContainer(d.BlockID, e),
            rotatedList &&
            rotatedList.length
          )
        ) for (p = a.length - 1; p >= 0; p--) rotatedList.indexOf(a[p]) >= 0 &&
          a[p] != d.BlockID &&
          a.splice(p, 1);
        if (
          d instanceof ListManager.PolyLineContainer ||
          d.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL
        ) for (p = a.length - 1; p >= 0; p--) obj = GlobalData.optManager.GetObjectPtr(a[p], !1),
          obj &&
          obj.hooks.length &&
          obj.hooks[0].objid === d.BlockID &&
          a.splice(p, 1)
      }
      for (o = a.length, u = 0; u < o; ++u) if (
        !(
          (d = this.GetObjectPtr(a[u], !0)) instanceof ListManager.PolyLineContainer
        )
      ) if (
          this.SetLinkFlag(a[u], ConstantData.LinkFlags.SED_L_MOVE),
          this.AddToDirtyList(a[u]),
          d instanceof ListManager.BaseLine
        ) if (d instanceof ListManager.PolyLine) {
          var y = {
            x: d.Frame.x + d.Frame.width / 2,
            y: d.Frame.y + d.Frame.height / 2
          };
          s = 2 * Math.PI * ((360 - e) / 360);
          var f = d.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null);
          Utils3.RotatePointsAboutPoint(y, s, f);
          var L = f.length;
          for (d.StartPoint.x = f[0].x, d.StartPoint.y = f[0].y, p = 0; p < L; p++) d.polylist.segs[p].pt.x = f[p].x - d.StartPoint.x,
            d.polylist.segs[p].pt.y = f[p].y - d.StartPoint.y;
          d.EndPoint.x = f[L - 1].x,
            d.EndPoint.y = f[L - 1].y,
            d.CalcFrame()
        } else {
            GlobalData.optManager.ob = Utils1.DeepCopy(d);
            var I = (d.StartPoint.x + d.EndPoint.x) / 2,
              T = (d.StartPoint.y + d.EndPoint.y) / 2,
              b = Math.sqrt(
                (d.EndPoint.x - d.StartPoint.x) * (d.EndPoint.x - d.StartPoint.x) + (d.EndPoint.y - d.StartPoint.y) * (d.EndPoint.y - d.StartPoint.y)
              );
            s = 2 * Math.PI * (e / 360),
              b /= 2,
              d.StartPoint.x = I - Math.cos(s) * b,
              d.StartPoint.y = T - Math.sin(s) * b,
              d.EndPoint.x = I + Math.cos(s) * b,
              d.EndPoint.y = T + Math.sin(s) * b,
              d.AfterRotateShape(d.BlockID),
              GlobalData.optManager.ob = {}
          } else d.RotationAngle = e,
            d.UpdateFrame(d.Frame),
            (i = GlobalData.optManager.SD_GetVisioTextChild(a[u])) >= 0 &&
            (n = GlobalData.optManager.GetObjectPtr(i, !0)) &&
            (
              n.VisioRotationDiff ? n.RotationAngle = e - n.VisioRotationDiff : n.RotationAngle = e,
              n.UpdateFrame(n.Frame),
              this.AddToDirtyList(i)
            ),
            this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto &&
            (
              S = d.r.x + d.r.width,
              c = d.r.y + d.r.height,
              S > r.dim.x &&
              (D = r.dim.x - S),
              c > r.dim.y &&
              (g = r.dim.y - c)
            ),
            d.r.x < 0 &&
            (D = - d.r.x),
            d.r.y < 0 &&
            (g = - d.r.y),
            (D || g) &&
            d.OffsetShape(D, g);
      null == t &&
        (
          Collab.AllowMessage() &&
          Collab.SendMessage(C),
          Collab.UnLockMessages(),
          this.CompleteOperation(null)
        )
    }
  }
}



ListManager.LM.prototypeLock = function (e, t) {
  var a = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    r = a.length;
  if (0 !== r || t) {
    var i,
      n = 0,
      o = !0,
      s = ConstantData.ObjFlags.SEDO_Lock;
    for (
      (i = this.GetObjectPtr(e, !1)) &&
      (o = 0 == (i.flags & s)),
      Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit(),
      n = 0;
      n < r;
      ++n
    ) (i = this.GetObjectPtr(a[n], !0)).flags = Utils2.SetFlag(i.flags, s, o),
      this.AddToDirtyList(a[n]);
    if (Collab.AllowMessage()) {
      var l = {
        BlockID: e
      };
      Collab.BuildMessage(ConstantData.CollabMessages.Lock, l, !0)
    }
    this.CompleteOperation(null)
  } else Utils2.Alert(Resources.Strings.Error_NoSymbolReplace, null)
},


  ListManager.LM.prototype.ReplaceSymbol = function (e, t, a, r, i, n) {
    var o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b = ConstantData.TextFlags,
      M = ConstantData.Defines.SED_EdgeSlop,
      P = {},
      R = 0,
      A = 0,
      _ = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1),
      E = (_.layers[_.activelayer].layertype, !1);
    switch (
    gSelectionManager = Business.GetSelectionBusinessManager(t, !1),
    gSelectionManager
    ) {
      case gProjectChartManager:
      case gMindMapManager:
      case gTaskMapManager:
        return
    }
    if (null != (o = this.GetObjectPtr(t, !1))) {
      for (
        l = (e.ExtraFlags & ConstantData.ExtraFlags.SEDE_NoColor) > 0,
        S = GlobalData.optManager.AddNewObject(e, l, !0),
        e.SymbolData &&
        e.SymbolData.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_NoColor &&
        (r = !1),
        D = GlobalData.optManager.EmptySymbolList.length,
        p = 0;
        p < D;
        p++
      ) GlobalData.optManager.EmptySymbolList[p].BlockID === S &&
        (
          GlobalData.optManager.EmptySymbolList[p].BlockID = t,
          i ||
          (E = !0),
          GlobalData.optManager.ReplaceSymbolID = GlobalData.optManager.EmptySymbolList[p].SymbolID,
          a.push(S)
        );
      if (!E) {
        for (D = GlobalData.optManager.EmptyEMFList.length, p = 0; p < D; p++) GlobalData.optManager.EmptyEMFList[p].BlockID === S &&
          (GlobalData.optManager.EmptyEMFList[p].BlockID = t);
        if (
          GlobalData.optManager.theMoveList &&
          (D = GlobalData.optManager.theMoveList.length)
        ) {
          for (p = 0; p < D; p++) f = GlobalData.optManager.theMoveList[p],
            (y = GlobalData.optManager.GetObjectPtr(f, !1)) &&
            (
              0 === p ? P = Utils1.DeepCopy(y.Frame) : Utils2.UnionRect(P, y.r, P)
            );
          if (R = 0, A = 0, P.x < M && (R = M - P.x), P.y < M && (A = M - P.y), R || A) for (p = 0; p < D; p++) f = GlobalData.optManager.theMoveList[p],
            (y = GlobalData.optManager.GetObjectPtr(f, !1)) &&
            (y.OffsetShape(R, A), this.AddToDirtyList(f))
        }
        if (
          s = GlobalData.objectStore.PreserveBlock(t),
          (C = (m = GlobalData.objectStore.GetObject(S)).Data).SymbolID ? GlobalData.optManager.ReplaceSymbolID = C.SymbolID : C.SymbolURL &&
            (GlobalData.optManager.ReplaceSymbolID = C.EMFHash),
          o.TableID >= 0 &&
          0 == (
            C.TextFlags & (
              b.SED_TF_None | b.SED_TF_AttachA | b.SED_TF_AttachB | b.SED_TF_AttachC | b.SED_TF_AttachD
            )
          ) &&
          C.TRectToFrame(o.trect),
          o.objecttype === ConstantData.ObjectTypes.SD_OBJT_FRAME &&
          C.objecttype === ConstantData.ObjectTypes.SD_OBJT_FRAME &&
          C.ImageURL.length ||
          n
        ) C.UpdateFrame(o.Frame),
          o.flags & ConstantData.ObjFlags.SEDO_Lock &&
          (
            C.flags = Utils2.SetFlag(C.flags, ConstantData.ObjFlags.SEDO_Lock, !0)
          );
        else {
          C.SetShapeOrigin(o.Frame.x + R, o.Frame.y + A);
          var w = GlobalData.optManager.svgObjectLayer.GetElementByID(C.BlockID);
          w &&
            w.SetPos(o.Frame.x + R, o.Frame.y + A)
        }
        var F = o.StyleRecord;
        for (
          g = o.DataID,
          L = o.NoteID,
          I = o.HyperlinkText,
          T = o.CommentID,
          o.CommentID = - 1,
          u = o.hooks,
          o.DataID = - 1,
          o.NoteID = - 1,
          h = o.TableID,
          o.TableID = - 1,
          h >= 0 &&
          o.hookflags & ConstantData.HookFlags.SED_LC_TableRows &&
          (
            C.hookflags = Utils2.SetFlag(C.hookflags, ConstantData.HookFlags.SED_LC_TableRows, !0)
          ),
          h >= 0 &&
            0 == (
              C.TextFlags & (
                b.SED_TF_None | b.SED_TF_AttachA | b.SED_TF_AttachB | b.SED_TF_AttachC | b.SED_TF_AttachD
              )
            ) ? C.TRectToFrame(o.trect) : (o.TableID = h, h = - 1),
          o.DeleteObject(),
          c = s.Data,
          s.Data = m.Data,
          s.Data.BlockID = t,
          m.Data = c,
          m.Data.BlockID = S,
          o = s.Data,
          r &&
          (o.StyleRecord = F),
          o.DataID < 0 &&
          (o.DataID = g),
          o.NoteID < 0 &&
          (o.NoteID = L),
          o.TableID < 0 &&
          (o.TableID = h),
          o.HyperlinkText = I,
          o.CommentID = T,
          o.hooks = u,
          m.Data.hooks = [],
          d = o.hooks.length,
          p = 0;
          p < d;
          p++
        ) this.SetLinkFlag(u[p].objid, ConstantData.LinkFlags.SED_L_MOVE, !0);
        a.push(S),
          this.AddToDirtyList(t)
      }
    }
  }

ListManager.LM.prototypeBPMN_SwitchSymbol = function (e, t, a) {
  var r,
    i = [];
  if (!((r = GlobalData.optManager.GetTargetSelect()) < 0)) {
    var n = GlobalData.optManager.GetObjectPtr(r, !1),
      o = n.objecttype,
      s = n.subtype;
    if (null == a && (a = gLineDrawBPMNManager.GetSymbolID(n, e, t)), null != a) {
      if (Collab.AllowMessage()) {
        Collab.BeginSecondaryEdit();
        var l = {
          symbolID: a,
          objecttype: e,
          subtype: t
        },
          S = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
        l.def = Utils1.DeepCopy(S.def);
        var c = Collab.BuildMessage(ConstantData.CollabMessages.BPMN_SwitchSymbol, l, !0, !0)
      }
      var u = GlobalData.optManager.BuildSymbolObject(a, - 1);
      u &&
        (
          GlobalData.optManager.ReplaceSymbol(u, n.BlockID, i, !1, !1, !0),
          GlobalData.optManager.DeleteObjects(i),
          (n = GlobalData.optManager.GetObjectPtr(r, !0)).objecttype = o,
          n.subtype = s,
          null != e &&
          (n.objecttype = e),
          null != t &&
          (n.subtype = t),
          Collab.AllowMessage() &&
          Collab.SendMessage(c),
          this.CompleteOperation()
        )
    }
  }
}

ListManager.LM.prototypeChangeToSymbol = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s = [],
    l = 0,
    S = 0,
    c = !1,
    u = (
      ConstantData.TextFlags,
      ConstantData.Defines.SED_EdgeSlop,
      ConstantData.ObjectTypes
    ),
    p = function (e) {
      switch (e.objecttype) {
        case u.SD_OBJT_GANTT_CHART:
        case u.SD_OBJT_TABLE_WITH_SHAPECONTAINER:
        case u.SD_OBJT_SHAPECONTAINER:
          return !1;
        default:
          if (e.IsSwimlane()) return !1
      }
      return !0
    },
    d = GlobalData.objectStore.GetObject(GlobalData.optManager.theSelectedListBlockID).Data,
    D = d.length;
  if (0 !== D) if (
    null == e &&
    (e = SDUI.Commands.MainController.Symbols.GetSelectedButton()),
    null != e
  ) {
    var g = [];
    for (a = 0; a < D; a++) i = d[a],
      (r = GlobalData.optManager.GetObjectPtr(i, !1)) instanceof ListManager.BaseShape &&
      p(r) &&
      g.push(i);
    if (0 !== g.length) {
      if (D = g.length, Collab.AllowMessage()) {
        Collab.BeginSecondaryEdit();
        var h = {
          symbolID: e
        },
          m = SDUI.Commands.MainController.Symbols.GetLMObject(e);
        m &&
          m.SymbolData &&
          m.SymbolData.IsCustomContent &&
          m.nativeDataArrayBuffer &&
          (
            h.nativeDataString = Collab.BufferToString(m.nativeDataArrayBuffer),
            h.SymbolData = Utils1.DeepCopy(m.SymbolData)
          );
        var C = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
        h.def = Utils1.DeepCopy(C.def);
        var y = Collab.BuildMessage(ConstantData.CollabMessages.ChangeToSymbol, h, !0, !0)
      }
      for (a = 0; a < D; a++) i = g[a],
        (r = GlobalData.optManager.GetObjectPtr(i, !1)) instanceof ListManager.BaseShape &&
        (n = GlobalData.optManager.BuildSymbolObject(e, - 1)) &&
        (
          c = !0,
          r = GlobalData.optManager.GetObjectPtr(i, !0),
          GlobalData.optManager.CancelModalOperation(),
          bUseDefaultStyle = (n.ExtraFlags & ConstantData.ExtraFlags.SEDE_NoColor) > 0,
          o = Utils1.DeepCopy(r.Frame),
          GlobalData.optManager.ReplaceSymbol(n, i, s, !0, t),
          r = GlobalData.optManager.GetObjectPtr(i, !1),
          GlobalData.optManager.SetLinkFlag(i, ConstantData.LinkFlags.SED_L_MOVE),
          (
            GlobalData.docHandler.documentConfig.centerSnap &&
            GlobalData.docHandler.documentConfig.enableSnap ||
            !1 === GlobalData.docHandler.documentConfig.enableSnap
          ) &&
          (
            l = (r.Frame.width - o.width) / 2,
            S = (r.Frame.height - o.height) / 2,
            (l || S) &&
            GlobalData.optManager.OffsetShape(i, - l, - S, 0)
          )
        );
      c ? (
        Collab.AllowMessage() &&
        Collab.SendMessage(y),
        GlobalData.optManager.theMoveList = [],
        GlobalData.optManager.DeleteObjects(s),
        0 === GlobalData.optManager.EmptySymbolList.length &&
        0 === GlobalData.optManager.EmptyEMFList.length &&
        GlobalData.optManager.CompleteOperation()
      ) : Utils2.Alert(Resources.Strings.Error_NoSymbolReplace, null)
    } else Utils2.Alert(Resources.Strings.NoChangeShape, null)
  } else Utils2.Alert(Resources.Strings.NoChangeShape, null)
}




ListManager.LM.prototype.ChangeShape = function (e, t, a) {
  if (null == t) {
    if (
      0 === (
        i = (r = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data).length
      )
    ) return
  } else {
    var r;
    (r = []).push(t);
    var i = r.length
  }
  var n,
    o,
    s,
    l,
    S = 0,
    c = null,
    u = null,
    p = !1;
  for (
    s = 0,
    l = !1,
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    S = 0;
    S < i;
    ++S
  ) {
    switch (c = this.GetObjectPtr(r[S], !1), e) {
      case ConstantData.SDRShapeTypes.SED_S_Rect:
      case ConstantData.SDRShapeTypes.SED_S_Oval:
      case ConstantData.SDRShapeTypes.SED_S_RRect:
        n = e;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Circ:
        l = !0,
          n = e;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Diam:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          o = ListManager.PolygonShapeGenerator.SED_S_Diam;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Tri:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          o = ListManager.PolygonShapeGenerator.SED_S_Tri;
        break;
      case ConstantData.SDRShapeTypes.SED_S_TriB:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          o = ListManager.PolygonShapeGenerator.SED_S_TriB;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Pgm:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.13333 * c.Frame.width,
          o = ListManager.PolygonShapeGenerator.SED_S_Pgm;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Pent:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.4 * c.Frame.height,
          o = ListManager.PolygonShapeGenerator.SED_S_Pent,
          l = !1;
        break;
      case ConstantData.SDRShapeTypes.SED_S_PentL:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.4 * c.Frame.width,
          o = ListManager.PolygonShapeGenerator.SED_S_PentL,
          l = !1;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Hex:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.26 * c.Frame.width,
          o = ListManager.PolygonShapeGenerator.SED_S_Hex,
          l = !1;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Oct:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.28,
          o = ListManager.PolygonShapeGenerator.SED_S_Oct,
          l = !1;
        break;
      case ConstantData.SDRShapeTypes.SED_S_ArrR:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.3 * c.Frame.width,
          o = ListManager.PolygonShapeGenerator.SED_S_ArrR;
        break;
      case ConstantData.SDRShapeTypes.SED_S_ArrL:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.3 * c.Frame.width,
          o = ListManager.PolygonShapeGenerator.SED_S_ArrL;
        break;
      case ConstantData.SDRShapeTypes.SED_S_ArrT:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.3 * c.Frame.height,
          o = ListManager.PolygonShapeGenerator.SED_S_ArrT;
        break;
      case ConstantData.SDRShapeTypes.SED_S_ArrB:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.3 * c.Frame.height,
          o = ListManager.PolygonShapeGenerator.SED_S_ArrB;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Trap:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.2 * c.Frame.width,
          o = ListManager.PolygonShapeGenerator.SED_S_Trap;
        break;
      case ConstantData.SDRShapeTypes.SED_S_TrapB:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.2 * c.Frame.width,
          o = ListManager.PolygonShapeGenerator.SED_S_TrapB;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Input:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = 0.27 * c.Frame.height,
          o = ListManager.PolygonShapeGenerator.SED_S_Input;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Term:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          o = ListManager.PolygonShapeGenerator.SED_S_Term;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Store:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = c.Frame.width / 7.5,
          o = ListManager.PolygonShapeGenerator.SED_S_Store;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Doc:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          o = ListManager.PolygonShapeGenerator.SED_S_Doc,
          s = c.Frame.height / 7.5;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Delay:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = c.Frame.width / 5,
          o = ListManager.PolygonShapeGenerator.SED_S_Delay;
        break;
      case ConstantData.SDRShapeTypes.SED_S_Disp:
        n = ConstantData.SDRShapeTypes.SED_S_Poly,
          s = c.Frame.width / 7.5,
          o = ListManager.PolygonShapeGenerator.SED_S_Disp
    }
    c.ChangeShape(e, n, o, s, l) &&
      (p = !0),
      u = this.GetObjectPtr(r[S], !1),
      GlobalData.optManager.SetLinkFlag(
        u.BlockID,
        ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
      ),
      u.hooks.length &&
      GlobalData.optManager.SetLinkFlag(u.hooks[0].objid, ConstantData.LinkFlags.SED_L_MOVE),
      this.AddToDirtyList(u.BlockID)
  }
  if (Collab.AllowMessage()) {
    var d = {
      shapeType: e
    };
    Collab.BuildMessage(ConstantData.CollabMessages.ChangeShape, d, !0)
  }
  p &&
    !a &&
    this.CompleteOperation(null)
}

ListManager.LM.prototypeChangeLineType = function (e, t, a, r) {
  var i = GlobalData.objectStore.GetObject(this.theSelectedListBlockID),
    n = ConstantData.LineType,
    o = i.Data,
    s = o.length;
  if (0 !== s) {
    var l,
      S,
      c = !1;
    for (l = 0; l < s; l++) if (
      !(
        (S = this.GetObjectPtr(o[l], !1)) instanceof ListManager.PolyLineContainer
      )
    ) {
      if (S instanceof ListManager.BaseLine) switch (e) {
        case n.SEGLINE:
        case n.ARCSEGLINE:
        case n.LINE:
        case n.ARCLINE:
          c = !0
      }
      if (c) break
    }
    if (c) {
      for (
        Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        l = 0;
        l < s;
        l++
      ) if (
          !(
            (S = this.GetObjectPtr(o[l], !1)) instanceof ListManager.PolyLineContainer
          ) &&
          S instanceof ListManager.BaseLine
        ) switch (e) {
          case n.SEGLINE:
          case n.ARCSEGLINE:
            this.ChangeToSegLine(S, e, a, r) &&
              (c = !0);
            break;
          case n.LINE:
          case n.ARCLINE:
            this.ChangeToLine(S, e, t) &&
              (c = !0)
        }
      if (Collab.AllowMessage()) {
        var u = {
          LineType: e,
          ShortRef: t,
          firstdir: a,
          lastdir: r
        };
        Collab.BuildMessage(ConstantData.CollabMessages.ChangeLineType, u, !0)
      }
      c &&
        this.CompleteOperation(null)
    }
  }
}

ListManager.LM.prototypeChangeToLine = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S = $.extend(!0, {
    }, e),
    c = ConstantData.LineType;
  if (
    S.LineType = t,
    S.ShortRef = a,
    S.shapeparam = 0.25,
    s = e.BlockID,
    e.LineType === t &&
    e.ShortRef === a
  ) return !1;
  switch (
  n = e.EndPoint.x - e.StartPoint.x,
  o = e.EndPoint.y - e.StartPoint.y,
  i = this.SafeSqrt(n * n + o * o),
  l = Utils1.DeepCopy(e),
  t
  ) {
    case c.LINE:
      void 0 !== S.segl &&
        (S.segl = null),
        void 0 !== S.polylist &&
        (S.polylist = null),
        void 0 !== S.CurveAdjust &&
        (S.CurveAdjust = null),
        r = new ListManager.Line(S);
      break;
    case c.ARCLINE:
      void 0 !== S.segl &&
        (S.segl = null),
        void 0 !== S.polylist &&
        (S.polylist = null),
        null == S.CurveAdjust &&
        (S.CurveAdjust = i / 8),
        r = new ListManager.ArcLine(S);
      break;
    default:
      return !1
  }
  var u = GlobalData.objectStore.PreserveBlock(e.BlockID);
  return null != u &&
    (
      r.BlockID = e.BlockID,
      u.Data = r,
      r.CalcFrame(),
      GlobalData.optManager.SetLinkFlag(
        s,
        ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
      ),
      GlobalData.optManager.MaintainLink(r.BlockID, r, l, ConstantData.ActionTriggerType.MODIFYSHAPE),
      this.AddToDirtyList(r.BlockID),
      !0
    )
}

ListManager.LM.prototypeChangeToSegLine = function (e, t, a, r) {
  var i,
    n,
    o,
    s = $.extend(!0, {
    }, e),
    l = ConstantData.LineType,
    S = ConstantData.HookPts,
    c = - 1,
    u = - 1;
  if (
    s.LineType = t,
    s.ShortRef = 0,
    n = e.BlockID,
    e.LineType === t &&
    e.segl.firstdir === a &&
    e.segl.lastdir === r
  ) return !1;
  switch (o = Utils1.DeepCopy(e), e.LineType) {
    case l.SEGLINE:
    case l.ARCSEGLINE:
      c = e.segl.firstdir,
        u = e.segl.lastdir
  }
  switch (t) {
    case l.SEGLINE:
      void 0 !== s.polylist &&
        (s.polylist = null),
        void 0 !== s.CurveAdjust &&
        (s.CurveAdjust = null);
      var p = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
      s.curveparam = p.def.curveparam,
        i = new ListManager.SegmentedLine(s);
      break;
    case l.ARCSEGLINE:
      void 0 !== s.polylist &&
        (s.polylist = null),
        void 0 !== s.CurveAdjust &&
        (s.CurveAdjust = null),
        i = new ListManager.ArcSegmentedLine(s);
      break;
    default:
      return !1
  }
  var d = GlobalData.objectStore.PreserveBlock(e.BlockID);
  if (null == d) return !1;
  i.BlockID = e.BlockID,
    d.Data = i;
  var D = [
    S.SED_KTC,
    S.SED_KBC
  ],
    g = !1;
  if (D.indexOf(a) >= 0 != D.indexOf(r) >= 0) {
    var h = {},
      m = {},
      C = e.GetLineChangeFrame();
    switch (a) {
      case S.SED_KTC:
        h.x = C.x,
          h.y = C.y + C.height,
          m.x = C.x + C.width,
          m.y = C.y;
        break;
      case S.SED_KBC:
        h.x = C.x,
          h.y = C.y,
          m.x = C.x + C.width,
          m.y = C.y + C.height;
        break;
      default:
        switch (r) {
          case S.SED_KTC:
            h.x = C.x,
              h.y = C.y,
              m.x = C.x + C.width,
              m.y = C.y + C.height;
            break;
          case S.SED_KBC:
            h.x = C.x,
              h.y = C.y + C.height,
              m.x = C.x + C.width,
              m.y = C.y
        }
    }
    Utils2.IsEqual(e.StartPoint.x, e.EndPoint.x) ? e.StartPoint.y < e.EndPoint.y &&
      (g = !0) : e.StartPoint.x > e.EndPoint.x &&
    (g = !0),
      g ? (
        i.StartPoint = m,
        i.EndPoint = h,
        i.segl.firstdir = r,
        i.segl.lastdir = a
      ) : (
        i.StartPoint = h,
        i.EndPoint = m,
        i.segl.firstdir = a,
        i.segl.lastdir = r
      )
  } else g = !1,
    Utils2.IsEqual(e.StartPoint.x, e.EndPoint.x) ? e.StartPoint.y < e.EndPoint.y &&
      (g = !0) : e.StartPoint.x > e.EndPoint.x &&
    (g = !0),
    g ? (i.segl.firstdir = r, i.segl.lastdir = a) : (i.segl.firstdir = a, i.segl.lastdir = r);
  var y,
    f = i.hooks.length;
  for (y = 0; y < f; y++) switch (i.hooks[y].hookpt) {
    case S.SED_KTL:
      c != i.segl.firstdir &&
        (
          i.hooks[y].connect = this.SegLFaceToConnect(i.segl.firstdir),
          GlobalData.optManager.SetLinkFlag(
            i.hooks[y].objid,
            ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
          )
        );
      break;
    case S.SED_KTR:
      u != i.segl.lastdir &&
        (
          i.hooks[y].connect = this.SegLFaceToConnect(i.segl.lastdir),
          GlobalData.optManager.SetLinkFlag(
            i.hooks[y].objid,
            ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
          )
        )
  }
  return i.SegLFormat(i.EndPoint, ConstantData.ActionTriggerType.LINEEND, 0),
    i.CalcFrame(),
    GlobalData.optManager.SetLinkFlag(
      n,
      ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
    ),
    GlobalData.optManager.MaintainLink(i.BlockID, i, o, ConstantData.ActionTriggerType.MODIFYSHAPE),
    this.AddToDirtyList(i.BlockID),
    !0
}

ListManager.LM.prototypeSegLFaceToConnect = function (e) {
  var t = ConstantData.HookPts,
    a = {},
    r = ConstantData.Defines.SED_CDim;
  switch (e) {
    case t.SED_KTC:
      a.x = r / 2,
        a.y = 0;
      break;
    case t.SED_KBC:
      a.x = r / 2,
        a.y = r;
      break;
    case t.SED_KLC:
      a.x = 0,
        a.y = r / 2;
      break;
    default:
      a.x = r,
        a.y = r / 2
  }
  return a
}


ListManager.LM.prototypeSpaceEvenly = function (e) {
  var t = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    a = t.length;
  if (!(a <= 2)) {
    var r,
      i,
      n,
      o,
      s,
      l,
      S,
      c,
      u = 0,
      p = null,
      d = - 1,
      D = - 1,
      g = - 1,
      h = - 1,
      m = 0,
      C = 0,
      y = 0,
      f = [];
    for (u = 0; u < a; ++u) 0 === (p = this.GetObjectPtr(t[u], !1)).hooks.length &&
      f.push(t[u]);
    if ((a = f.length) <= 2) Utils2.Alert(Resources.Strings.AlignHooked, null);
    else {
      if (
        Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        t = f,
        1 == e ||
        3 == e
      ) {
        for (u = 0; u < a; ++u) p = this.GetObjectPtr(t[u], !1),
          (- 1 == g || p.Frame.y + p.Frame.height < s) &&
          (g = t[u], s = p.Frame.y + p.Frame.height),
          (- 1 == h || p.Frame.y > l) &&
          (h = t[u], l = p.Frame.y);
        var L = t.slice(0);
        for (
          L.splice(L.indexOf(h), 1),
          L.splice(L.indexOf(g), 1),
          L.sort(
            (
              function (e, t) {
                var a = GlobalData.optManager.GetObjectPtr(e, !1),
                  r = GlobalData.optManager.GetObjectPtr(t, !1);
                return a.Frame.y - r.Frame.y
              }
            )
          ),
          y = l - s,
          C = 0,
          u = 0;
          u < L.length;
          ++u
        ) C += (p = this.GetObjectPtr(L[u], !1)).Frame.height;
        for (o = (y - C) / (L.length + 1), u = 0; u < L.length; ++u) 0 === (p = this.GetObjectPtr(L[u], !1)).hooks.length &&
          (
            c = s + o - (p = this.GetObjectPtr(L[u], !0)).Frame.y,
            S = 0,
            p.OffsetShape(S, c),
            s = p.Frame.y + p.Frame.height,
            this.SetLinkFlag(L[u], ConstantData.LinkFlags.SED_L_MOVE),
            this.AddToDirtyList(L[u], !0)
          )
      }
      if (2 == e || 3 == e) {
        for (u = 0; u < a; ++u) p = this.GetObjectPtr(t[u], !1),
          (- 1 == d || p.Frame.x + p.Frame.width < i) &&
          (d = t[u], i = p.Frame.x + p.Frame.width),
          (- 1 == D || p.Frame.x > n) &&
          (D = t[u], n = p.Frame.x);
        var I = t.slice(0);
        for (
          I.splice(I.indexOf(D), 1),
          I.splice(I.indexOf(d), 1),
          I.sort(
            (
              function (e, t) {
                var a = GlobalData.optManager.GetObjectPtr(e, !1),
                  r = GlobalData.optManager.GetObjectPtr(t, !1);
                return a.Frame.x - r.Frame.x
              }
            )
          ),
          y = n - i,
          m = 0,
          u = 0;
          u < I.length;
          ++u
        ) m += (p = this.GetObjectPtr(I[u], !1)).Frame.width;
        for (r = (y - m) / (I.length + 1), u = 0; u < I.length; ++u) 0 === (p = this.GetObjectPtr(I[u], !1)).hooks.length &&
          (
            S = i + r - (p = this.GetObjectPtr(I[u], !0)).Frame.x,
            c = 0,
            p.OffsetShape(S, c),
            i = p.Frame.x + p.Frame.width,
            this.SetLinkFlag(I[u], ConstantData.LinkFlags.SED_L_MOVE),
            this.AddToDirtyList(I[u], !0)
          )
      }
      if (Collab.AllowMessage()) {
        var T = {
          spaceEvenlyOption: e
        };
        Collab.BuildMessage(ConstantData.CollabMessages.SpaceEvenly, T, !0)
      }
      this.CompleteOperation(null)
    }
  }
}

ListManager.LM.prototypeChangeWidth = function (e) {
  var t = - 1,
    a = - 1,
    r = null;
  this.cachedWidth = null;
  var i = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    n = i.length;
  if (0 !== n) {
    Collab.BeginSecondaryEdit();
    var o = 0,
      s = null;
    for (o = 0; o < n; ++o) {
      if (
        (
          t = (s = this.GetObjectPtr(i[o], !0)).GetDimensionValueFromString(e, 1)
        ) >= 0 &&
        (
          a = s.GetDimensionLengthFromValue(t),
          a = s.AdjustDimensionLength(a),
          r = s.MaintainProportions(a, null)
        ),
        a >= 0
      ) {
        s.SetSize(a, r, ConstantData.ActionTriggerType.LINELENGTH);
        var l = s.GetDimensionsForDisplay();
        ConstantData.DocumentContext.CurrentWidth = '',
          s.CanUseRFlags() &&
          l.width === a &&
          (
            s.rflags = Utils2.SetFlag(s.rflags, ConstantData.FloatingPointDim.SD_FP_Width, !0),
            s.rwd = t
          ),
          this.SetLinkFlag(i[o], ConstantData.LinkFlags.SED_L_MOVE)
      }
      this.AddToDirtyList(i[o])
    }
    if (n > 0 && Collab.AllowMessage()) {
      var S = {
        widthStr: e
      };
      Collab.BuildMessage(ConstantData.CollabMessages.ChangeWidth, S, !0)
    }
    this.CompleteOperation(null)
  }
}

ListManager.LM.prototypeChangeHeight = function (e) {
  var t = - 1,
    a = - 1,
    r = null;
  this.cachedHeight = null;
  var i = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    n = i.length;
  if (0 !== n) {
    Collab.BeginSecondaryEdit();
    var o = 0,
      s = null;
    for (o = 0; o < n; ++o) {
      if (
        (
          t = (s = this.GetObjectPtr(i[o], !0)).GetDimensionValueFromString(e, 2)
        ) >= 0 &&
        (
          a = s.GetDimensionLengthFromValue(t),
          a = s.AdjustDimensionLength(a),
          r = s.MaintainProportions(null, a)
        ),
        a >= 0
      ) {
        s.SetSize(r, a, ConstantData.ActionTriggerType.LINELENGTH);
        var l = s.GetDimensionsForDisplay();
        ConstantData.DocumentContext.CurrentHeight = '',
          s.CanUseRFlags() &&
          l.height === a &&
          (
            s.rflags = Utils2.SetFlag(s.rflags, ConstantData.FloatingPointDim.SD_FP_Height, !0),
            s.rht = t
          ),
          this.SetLinkFlag(i[o], ConstantData.LinkFlags.SED_L_MOVE)
      }
      this.AddToDirtyList(i[o])
    }
    if (n > 0 && Collab.AllowMessage()) {
      var S = {
        heightStr: e
      };
      Collab.BuildMessage(ConstantData.CollabMessages.ChangeHeight, S, !0)
    }
    this.CompleteOperation(null)
  }
},

  ListManager.LM.prototype.SetTopLeft = function (e, t) {
    var a = this.GetTargetSelect();
    if (!(a < 0)) {
      Collab.BeginSecondaryEdit();
      var r = this.GetObjectPtr(a, !0);
      if (null !== r) {
        var i,
          n;
        i = GlobalData.docHandler.rulerSettings.useInches &&
          GlobalData.docHandler.rulerSettings.units == Resources.RulerUnits.SED_Feet ? this.ConvertToFeet(e) : this.NumberIsFloat(e, !0) ? parseFloat(e) : 0,
          t ? GlobalData.docHandler.rulerSettings.originx &&
            (
              n = 100 * GlobalData.docHandler.rulerSettings.originx,
              GlobalData.docHandler.rulerSettings.useInches ||
              (n /= ConstantData.Defines.MetricConv),
              e = (i += this.GetLengthInUnits(n)).toFixed(2)
            ) : GlobalData.docHandler.rulerSettings.originy &&
          (
            n = 100 * GlobalData.docHandler.rulerSettings.originy,
            GlobalData.docHandler.rulerSettings.useInches ||
            (n /= ConstantData.Defines.MetricConv),
            e = (i += this.GetLengthInUnits(n)).toFixed(2)
          );
        var o,
          s,
          l = this.GetDimensionLengthFromString(e, !1, !1);
        if (
          t ? (o = l, s = null) : (s = l, o = null),
          r.SetShapeOrigin(o, s, null, !0),
          this.SetLinkFlag(a, ConstantData.LinkFlags.SED_L_MOVE),
          this.AddToDirtyList(a, !0),
          Collab.AllowMessage()
        ) {
          var S = {
            Str: e,
            left: t
          };
          Collab.BuildMessage(ConstantData.CollabMessages.SetTopLeft, S, !0)
        }
        this.CompleteOperation(null);
        var c = r.GetDimensionsForDisplay();
        GlobalData.optManager.UpdateDisplayCoordinates(c, null, null, r)
      }
    }
  }

ListManager.LM.prototypeCenterOnPage = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = {},
    y = {},
    f = - 1,
    L = 0,
    I = ListManager.ShapeCenteringOptions,
    T = ConstantData.ObjFlags.SEDO_NotVisible,
    b = ConstantData.TextFlags.SED_TF_TitleBlock,
    M = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    P = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1),
    R = P.activelayer,
    A = P.layers[R].zList;
  for (m = P.nlayers, D = 0; D < m; D++) if (
    P.layers[D].flags & ConstantData.LayerFlags.SDLF_UseEdges &&
    P.layers[D].flags & ConstantData.LayerFlags.SDLF_Visible
  ) {
    f = D;
    break
  }
  if (f >= 0 && f !== P.activelayer) for (d = P.layers[f].zList.length, D = 0; D < d; D++) if (
    h = P.layers[f].zList[D],
    (g = this.GetObjectPtr(h, !1)) &&
    g.objecttype === ConstantData.ObjectTypes.SD_OBJT_ANNOTATION
  ) {
    L = g.r.height;
    break
  }
  if (
    p = new Rectangle(0, 0, 100, 100),
    r = this.GetSRect(!0, p, A),
    a &&
    Utils2.InflateRect(r, 10, 10),
    void 0 !== r
  ) {
    0 === r.height &&
      (r.height = 1),
      0 === r.width &&
      (r.width = 1);
    var _ = this.GetTargetSelect();
    switch (
    o = this.SD_GetPageDimensions(),
    (i = Math.floor(r.width / o.width)) * o.width < r.width &&
    i++,
    (n = Math.floor(r.height / o.height)) * o.height < r.height &&
    n++,
    this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto ? (s = new Rectangle(0, 0, M.dim.x, M.dim.y)).height -= L : (s = new Rectangle(0, 0, o.width * i, o.height * n)).height -= L,
    l = s.width - r.width,
    c = (l /= 2) - r.x,
    S = s.height - r.height,
    u = (S /= 2) - r.y,
    e &&
    (c = e.x - r.x, u = e.y - r.y),
    GlobalData.docHandler.documentConfig.centerSnap ? (C.x = c + p.x + p.width / 2, C.y = u + p.y + p.height / 2) : (C.x = c + p.x, C.y = u + p.y),
    y.x = C.x,
    y.y = C.y,
    c += (y = GlobalData.docHandler.SnapToGrid(y)).x - C.x,
    u += y.y - C.y,
    t
    ) {
      case I.SD_SHAPE_CENTER_LEFT_ALIGN:
        c = 100 - r.x;
        break;
      case I.SD_SHAPE_CENTER_RIGHT_ALIGN:
        c = r.x + r.width - 100;
        break;
      case I.SD_SHAPE_CENTER_TOP_ALIGN:
        c = 100 - r.y;
        break;
      case I.SD_SHAPE_CENTER_BOTTOM_ALIGN:
        c = r.y + r.height - 100
    }
    for (d = A.length, D = 0; D < d; D++) if (h = A[D], g = this.GetObjectPtr(h, !0)) {
      if (g.hooks.length > 0) continue;
      if (g.TextFlags & b) continue;
      if (g.flags & T) continue;
      var E = u,
        w = c;
      if (
        g.OffsetShape(w, E),
        this.SetLinkFlag(h, ConstantData.LinkFlags.SED_L_MOVE),
        this.AddToDirtyList(h, !0),
        h === _
      ) {
        var F = g.GetDimensionsForDisplay();
        GlobalData.optManager.UpdateDisplayCoordinates(F, null, null, g);
        var v = new ListManager.SelectionAttributes;
        v.left = F.x,
          v.top = F.y,
          v.width = F.width,
          v.height = F.height,
          v.widthstr = this.GetLengthInRulerUnits(v.width),
          v.heightstr = this.GetLengthInRulerUnits(v.height),
          v.leftstr = this.GetLengthInRulerUnits(v.left, !1, GlobalData.docHandler.rulerSettings.originx, !1),
          v.topstr = this.GetLengthInRulerUnits(v.top, !1, GlobalData.docHandler.rulerSettings.originy, !1),
          SDUI.Commands.MainController.UpdateRibbonDimensions(v)
      }
    }
    a ||
      this.CompleteOperation()
  }
}

ListManager.LM.prototypeHookedObjectMovingDebounced = function (e, t) {
  var a = this;
  if (
    t &&
    t.HookedObjectMoving &&
    t.Dimensions & (
      ConstantData.DimensionFlags.SED_DF_Always | ConstantData.DimensionFlags.SED_DF_Select
    )
  ) {
    clearTimeout(this.HookedObjectMovingTimer);
    var r = !this.HookedObjectMovingLastExecutionTime ||
      Date.now() - this.HookedObjectMovingLastExecutionTime >= 100 ? 0 : 100;
    this.HookedObjectMovingTimer = setTimeout(
      (
        function () {
          t.HookedObjectMoving({
            linkParams: null,
            movingShapeID: e.BlockID,
            movingShapeBBox: e.GetDimensionsForDisplay()
          }),
            a.HookedObjectMovingLastExecutionTime = Date.now()
        }
      ),
      r
    )
  }
}



ListManager.LM.prototypeBringSelectedToFront = function () {
  var e = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    t = e.length;
  if (0 !== t) {
    var a = this.AddAssoctoList(e);
    if (0 !== (t = a.length)) {
      var r = this.VisibleZList();
      if (!(r.length <= 1)) {
        r.length;
        var i,
          n,
          o = [];
        for (i = 0; i < t; i++) {
          n = a[i];
          var s = $.inArray(n, r);
          o.push(s)
        }
        o.sort((function (e, t) {
          return e - t
        }));
        var l = [];
        for (i = 0; i < t; i++) n = r[o[i]],
          l.push(n);
        var S = this.FrontMostLayerZListPreserve();
        for (i = 0; i < t; i++) n = l[i],
          this.RemoveFromAllZLists(n),
          S.push(n);
        this.UpdateLineHops(!0),
          this.RenderAllSVGObjects(),
          this.CompleteOperation()
      }
    }
  }
}

ListManager.LM.prototypeSendSelectedToBack = function () {
  var e = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    t = e.length;
  if (0 !== t) {
    var a = this.AddAssoctoList(e);
    if (0 !== (t = a.length)) {
      var r = this.VisibleZList();
      if (!(r.length <= 1)) {
        r.length;
        var i,
          n,
          o = [];
        for (i = 0; i < t; i++) {
          n = a[i];
          var s = $.inArray(n, r);
          o.push(s)
        }
        o.sort((function (e, t) {
          return e - t
        }));
        var l = [];
        for (i = 0; i < t; i++) n = r[o[i]],
          l.push(n);
        var S = this.BackMostLayerZListPreserve();
        for (i = t - 1; i >= 0; --i) n = l[i],
          this.RemoveFromAllZLists(n),
          S.unshift(n);
        this.UpdateLineHops(!0),
          this.RenderAllSVGObjects(),
          this.CompleteOperation()
      }
    }
  }
}

ListManager.LM.prototypeBringToFrontOfTargetLayer = function () {
  var e = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    t = e.length;
  if (0 !== t) {
    var a = this.AddAssoctoList(e);
    if (0 !== (t = a.length)) {
      var r = this.VisibleZList();
      if (!(r.length < 1)) {
        var i = this.GetTargetSelect(),
          n = this.GetLayerCount() - 1;
        - 1 != i &&
          (n = this.FindLayerForShapeID(i));
        r.length;
        var o,
          s,
          l = [];
        for (o = 0; o < t; o++) {
          s = a[o];
          var S = $.inArray(s, r);
          l.push(S)
        }
        l.sort((function (e, t) {
          return e - t
        }));
        var c = [];
        for (o = 0; o < t; o++) s = r[l[o]],
          c.push(s);
        var u = this.ZListPreserveForLayer(n);
        for (o = 0; o < t; o++) s = c[o],
          this.RemoveFromAllZLists(s),
          u.push(s);
        this.UpdateLineHops(!0),
          this.RenderAllSVGObjects(),
          this.CompleteOperation()
      }
    }
  }
}

ListManager.LM.prototypeSendToBackOfTargetLayer = function () {
  var e = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    t = e.length;
  if (0 !== t) {
    var a = this.AddAssoctoList(e);
    if (0 !== (t = a.length)) {
      var r = this.VisibleZList();
      if (!(r.length < 1)) {
        var i = this.GetTargetSelect(),
          n = this.GetLayerCount() - 1;
        - 1 != i &&
          (n = this.FindLayerForShapeID(i));
        r.length;
        var o,
          s,
          l = [];
        for (o = 0; o < t; o++) {
          s = a[o];
          var S = $.inArray(s, r);
          l.push(S)
        }
        l.sort((function (e, t) {
          return e - t
        }));
        var c = [];
        for (o = 0; o < t; o++) s = r[l[o]],
          c.push(s);
        var u = this.ZListPreserveForLayer(n);
        for (o = t - 1; o >= 0; --o) s = c[o],
          this.RemoveFromAllZLists(s),
          u.unshift(s);
        this.UpdateLineHops(!0),
          this.RenderAllSVGObjects(),
          this.CompleteOperation()
      }
    }
  }
}



ListManager.LM.prototypeBringToFrontOfAllLayers = function () {
  this.BringSelectedToFront()
}

ListManager.LM.prototypeSendToBackOfAllLayers = function () {
  this.SendSelectedToBack()
}




ListManager.LM.prototypeMoveObjectsToLayer = function (e) {
  this.GetFrontBackLayersForSelected().result &&
    this.BringToFrontOfSpecificLayer(e)
}

ListManager.LM.prototypePutBehindObject = function (e, t) {
  var a,
    r = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0),
    i = r.layers[r.activelayer].zList,
    n = i.indexOf(e),
    o = i.indexOf(t);
  if (n >= 0 && o >= 0 && n < o) {
    for (a = o; a > n; a--) i[a] = i[a - 1];
    i[n] = t
  }
}

ListManager.LM.prototypePutInFrontofObject = function (e, t) {
  var a,
    r = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0),
    i = r.layers[r.activelayer].zList,
    n = i.indexOf(e),
    o = i.indexOf(t);
  if (n >= 0 && o >= 0) if (o < n) {
    for (a = o; a < n; a++) i[a] = i[a + 1],
      GlobalData.optManager.AddToDirtyList(i[a]);
    i[n] = t,
      GlobalData.optManager.AddToDirtyList(t)
  } else {
    for (a = o; a > n + 1; a--) i[a] = i[a - 1],
      GlobalData.optManager.AddToDirtyList(i[a]);
    i[n + 1] = t,
      GlobalData.optManager.AddToDirtyList(t)
  }
}

ListManager.LM.prototypeBringObjectToFrontofLayer = function (e) {
  var t,
    a,
    r = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !0),
    i = r.layers[r.activelayer].zList,
    n = i.indexOf(e);
  if (a = i.length, n >= 0) {
    for (t = n; t < a - 1; t++) i[t] = i[t + 1];
    i[a - 1] = e
  }
}


ListManager.LM.prototypeSerializeGroupForClipboard = function (e) {
  var t,
    a = e.ShapesInGroup,
    r = a.length;
  if (0 !== r) {
    var i = [],
      n = null,
      o = null,
      s = null,
      l = null,
      S = null,
      c = null,
      u = null;
    for (t = 0; t < r; ++t) - 1 != (n = GlobalData.objectStore.GetObject(a[t])).Data.DataID ? (
      s = GlobalData.objectStore.GetObject(n.Data.DataID),
      l = Utils1.DeepCopy(s.Data)
    ) : l = null,
      - 1 != n.Data.NoteID ? (
        S = GlobalData.objectStore.GetObject(n.Data.NoteID),
        c = Utils1.DeepCopy(S.Data)
      ) : c = null,
      (o = Utils1.DeepCopy(n.Data)) instanceof ListManager.GroupSymbol ? (
        u = this.SerializeGroupForClipboard(o),
        i.push({
          shape: o,
          text: l,
          note: c,
          groupData: u
        })
      ) : i.push({
        shape: o,
        text: l,
        note: c
      });
    return i
  }
}



ListManager.LM.prototypeFilterFiletoClipboard = function (e, t) {
  var a,
    r,
    i,
    n = new SDJS.Editor.BaseStateManager,
    o = new SDJS.Editor.ObjectStore;
  stateManagerPrimary = stateManager,
    objectStorePrimary = objectStore,
    this.SwitchToAlternateStateManager(n, o, !0);
  var s = this.ZList();
  a = s.length;
  var l = [];
  for (r = 0; r < a; ++r) i = s[r],
    - 1 === e.indexOf(i) &&
    l.push(i);
  l.length &&
    this.DeleteObjects(l, !1),
    s = this.ZList();
  var S = {};
  return t ? S = {
    zList: s,
    buffer: SDF.WriteSelect(s, !1, !0, !1)
  }
    : (
      this.theContentHeader.ClipboardBuffer = SDF.WriteSelect(s, !1, !0, !1),
      this.theContentHeader.ClipboardType = ConstantData.ClipboardType.LM
    ),
    this.RestorePrimaryStateManager(),
    S
},




  ,
  ListManager.LM.prototype.DeserializeGroupForClipboard = function (e, t) {
    var a,
      r = t.groupData.length;
    if (0 !== r) {
      var i = null,
        n = null,
        o = null,
        s = null,
        l = null,
        S = null;
      for (a = 0; a < r; a++) {
        if (
          (n = Utils1.DeepCopy(t.groupData[a].shape)).UniqueID = this.uniqueID++,
          t.groupData[a].text
        ) {
          if (
            o = Utils1.DeepCopy(t.groupData[a].text),
            null === (
              s = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, o)
            )
          ) throw new Error('PasteObjects got a null new text block allocation')

          // new SDJSError({
          //   source: 'ListManager.PasteObjects',
          //   message: 'PasteObjects got a null new text block allocation'
          // });
          n.DataID = s.ID
        }
        if (t.groupData[a].note) {
          if (
            l = Utils1.DeepCopy(t.groupData[a].note),
            null === (
              S = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_NOTES_OBJECT, l)
            )
          ) throw new
            Error('PasteObjects got a null new text block allocation for a note')
          // SDJSError({
          //   source: 'ListManager.PasteObjects',
          //   message: 'PasteObjects got a null new text block allocation for a note'
          // });
          n.NoteID = S.ID
        }
        if (
          n instanceof ListManager.GroupSymbol &&
          this.DeserializeGroupForClipboard(n, t.groupData[a]),
          null === (
            i = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.BASE_LM_DRAWING_OBJECT, n)
          )
        ) throw new Error('PasteObjects got a null new block allocation')

        // SDJSError({
        //   source: 'ListManager.PasteObjects',
        //   message: 'PasteObjects got a null cloned object block'
        // });
        e.ShapesInGroup[a] = i.ID
      }
    }
  }



ListManager.LM.prototypeDuplicateObjects = function (e, t) {
  var a = {
    selectedList: []
  };
  if (
    Collab.BeginSecondaryEdit(),
    this.CloseEdit(),
    this.AreSelectedObjects()
  ) {
    var r = GlobalData.optManager.GetObjectPtr(
      GlobalData.optManager.theSEDSessionBlockID,
      !1 === this.LastOpDuplicate &&
      !t
    );
    e ? (r.dupdisp.x = 0, r.dupdisp.y = 0) : t ? (r.dupdisp.x = t.Data.dupdisp.x, r.dupdisp.y = t.Data.dupdisp.y) : this.LastOpDuplicate ||
      (r.dupdisp.x = 50, r.dupdisp.y = 50);
    var i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSelectedListBlockID, !1);
    if (!t && Collab.AllowMessage()) {
      var n = {
        fromMove: e
      };
      n.dupdisp = Utils1.DeepCopy(r.dupdisp),
        n.selectedList = Utils1.DeepCopy(i),
        n.tselect = Utils1.DeepCopy(r.tselect)
    }
    var o = this.CopyObjectsCommon(!0);
    if (o && o.buffer) {
      var s = this.GetObjectPtr(o.zList[0], !1).Frame;
      SDF.ReadSymbolFromBuffer(
        o.buffer,
        s.x + r.dupdisp.x,
        s.y + r.dupdisp.y,
        0,
        !1,
        !0,
        a,
        !e,
        !1,
        !1,
        !1,
        !1
      ),
        e ||
        (
          this.CompleteOperation(a.selectedList),
          t ||
          (this.LastOpDuplicate = !0)
        )
    }
    return !t &&
      Collab.AllowMessage() &&
      (
        Collab.IsSecondary() &&
        (n.CreateList = Utils1.DeepCopy(i)),
        Collab.AddNewBlockToSecondary(i),
        Collab.BuildMessage(ConstantData.CollabMessages.Duplicate, n, !1)
      ),
      a.selectedList
  }
},









  ,
  ListManager.LM.prototype.GetBackgroundFill = function () {
    var e = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !1);
    return Utils1.DeepCopy(e.background)
  }

ListManager.LM.prototypeGetSelectedStyle = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !1),
    g = GlobalData.optManager.GetObjectPtr(this.theSelectedListBlockID, !1),
    h = !1,
    m = !1,
    C = ConstantData.DrawingObjectBaseClass,
    y = !0,
    f = new Resources.QuickStyle,
    L = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  if (
    t &&
    (S = new ListManager.ArrowheadRecord),
    - 1 != L.theActiveTextEditObjectID &&
    (s = this.GetObjectPtr(L.theActiveTextEditObjectID, !1))
  ) {
    f = Utils1.DeepCopy(s.StyleRecord);
    var I = this.svgDoc.GetActiveEdit();
    if (I) {
      if (
        (i = I.GetSelectedFormat()).color ? f.Text.Paint.Color = i.color : f.Text.Paint.Color = - 1,
        i.colorTrans &&
        (f.Text.Paint.Opacity = i.colorTrans),
        e &&
        (
          n = I.GetVerticalAlignment(),
          (d = I.GetSelectedParagraphStyle()) &&
          d.bullet
        )
      ) switch (e.bullet = d.bullet, e.spacing = d.spacing, n) {
        case 'bottom':
        case 'top':
          e.just = n + '-' + d.just;
          break;
        default:
          e.just = d.just
      }
      t &&
        s.GetArrowheadSelection(t)
    }
    return f
  }
  if (0 === (a = g.length)) f = Utils1.DeepCopy(D.def.style),
    t &&
    (
      t.StartArrowID = D.d_sarrow,
      t.StartArrowDisp = D.d_sarrowdisp,
      t.EndArrowID = D.d_earrow,
      t.EndArrowDisp = D.d_earrowdisp,
      t.ArrowSizeIndex = D.d_arrowsize
    );
  else for (r = 0; r < a; r++) if (p = g[r], s = this.GetObjectPtr(p, !1)) {
    if (
      u = (c = GlobalData.optManager.SD_GetVisioTextChild(p)) >= 0 ? this.GetObjectPtr(c, !1) : s,
      t &&
      (
        y ? s.GetArrowheadSelection(t) &&
          (y = !1) : s.GetArrowheadSelection(S) &&
        (
          S.StartArrowID != t.StartArrowID &&
          (t.StartArrowID = - 1),
          S.StartArrowDisp != t.StartArrowDisp &&
          (t.StartArrowDisp = - 1),
          S.EndArrowID != t.EndArrowID &&
          (t.EndArrowID = - 1),
          S.EndArrowDisp != t.EndArrowDisp &&
          (t.EndArrowDisp = - 1),
          S.ArrowSizeIndex != t.ArrowSizeIndex &&
          (t.ArrowSizeIndex = - 1)
        )
      ),
      o = u.GetTextFormat(!0, null),
      h
    ) {
      if (s.DrawingObjectBaseClass === C.SHAPE) f.Border.Thickness != s.StyleRecord.Border.Thickness &&
        (f.Border.Thickness = - 1),
        f.Border.LinePattern != s.StyleRecord.Border.LinePattern &&
        (f.Border.LinePattern = - 1),
        f.Border.LineEffect != s.StyleRecord.Border.LineEffect &&
        (f.Border.LineEffect = - 1),
        f.Border.Paint = this.SD_ComparePaint(f.Border.Paint, s.StyleRecord.Border.Paint),
        f.Fill.Paint = this.SD_ComparePaint(f.Fill.Paint, s.StyleRecord.Fill.Paint),
        f.Fill.FillEffect != s.StyleRecord.Fill.FillEffect &&
        (f.Fill.FillEffect = - 1),
        f.Fill.Hatch != s.StyleRecord.Fill.Hatch &&
        (f.Fill.Hatch = - 1),
        f.Fill.EffectColor != s.StyleRecord.Fill.EffectColor &&
        (f.Fill.EffectColor = ''),
        f.Fill.WParam != s.StyleRecord.Fill.WParam &&
        (f.Fill.WParam = - 1),
        f.Fill.LParam != s.StyleRecord.Fill.LParam &&
        (f.Fill.LParam = - 1);
      else s.objecttype !== ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL &&
        f.Line.Thickness != s.StyleRecord.Line.Thickness &&
        (f.Line.Thickness = - 1),
        f.Line.LinePattern != s.StyleRecord.Line.LinePattern &&
        (f.Line.LinePattern = - 1),
        f.Line.LineEffect != s.StyleRecord.Line.LineEffect &&
        (f.Line.LineEffect = - 1),
        f.Line.Paint = this.SD_ComparePaint(f.Line.Paint, s.StyleRecord.Line.Paint);
      f.OutsideEffect.OutsideType != s.StyleRecord.OutsideEffect.OutsideType &&
        (f.OutsideEffect.OutsideType = - 1),
        f.OutsideEffect.Color != s.StyleRecord.OutsideEffect.Color &&
        (f.OutsideEffect.Color = ''),
        f.OutsideEffect.WParam != s.StyleRecord.OutsideEffect.WParam &&
        (f.OutsideEffect.WParam = - 1),
        f.OutsideEffect.LParam != s.StyleRecord.OutsideEffect.LParam &&
        (f.OutsideEffect.LParam = - 1),
        f.Text.Paint = this.SD_ComparePaint(f.Text.Paint, o.Paint),
        f.Name != s.StyleRecord.Name &&
        (f.Name = null)
    } else (f = Utils1.DeepCopy(s.StyleRecord)).Text = Utils1.DeepCopy(o),
      (l = s.GetTable(!1)) &&
      this.Table_GetStyle(s, l, f),
      h = !0;
    e &&
      (d = u.GetTextParaFormat(!0)) &&
      (
        m ? (
          e.spacing != m.spacing &&
          (e.spacing = - 1),
          e.bullet != m.bullet &&
          (e.bullet = - 1),
          e.just != m.just &&
          (e.just = - 1)
        ) : (e.spacing = d.spacing, e.bullet = d.bullet, e.just = d.just, m = !0)
      )
  }
  return f
}

ListManager.LM.prototypeGetSelectedProperties = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = GlobalData.optManager.GetObjectPtr(this.theSelectedListBlockID, !1),
    D = (
      ConstantData.DrawingObjectBaseClass,
      ConstantData.TextFlags
    ),
    g = new ListManager.SelectionShapeProperties;
  for (e = d.length, t = 0; t < e; t++) s = d[t],
    (p = (u = this.GetObjectPtr(s, !1)).GetTable(!1)) &&
    (g.hastable = !0),
    a = (
      (
        l = (S = GlobalData.optManager.SD_GetVisioTextChild(s)) >= 0 ? this.GetObjectPtr(S, !1) : u
      ).TextFlags & D.SED_TF_OneClick
    ) > 0,
    r = (l.TextFlags & D.SED_TF_None) > 0,
    c = 0 == (l.TextFlags & D.SED_TF_NoSpell),
    i = a ? D.SED_TF_OneClick : r ? D.SED_TF_None : 0,
    l.TextFlags & D.SED_TF_AttachA ? g.PositionFlag = l.TextFlags & D.SED_TF_AttachA : l.TextFlags & D.SED_TF_AttachB ? g.PositionFlag = l.TextFlags & D.SED_TF_AttachB : g.PositionFlag = 0,
    n = (l.TextFlags & D.SED_TF_FormCR) > 0,
    null == g.TextGrow ? g.TextGrow = l.TextGrow : g.TextGrow !== l.TextGrow &&
      (g.TextGrow = - 1),
    null == g.ObjGrow ? g.ObjGrow = u.ObjGrow : g.ObjGrow !== u.ObjGrow &&
      (g.ObjGrow = - 1),
    u.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
    u.ShapeType === ConstantData.ShapeType.POLYGON &&
    (g.AllowSides = !0),
    g.SideConn = (u.extraflags & ConstantData.ExtraFlags.SEDE_SideKnobs) > 0,
    g.Container = !1,
    u.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
    (
      g.Container = (u.moreflags & ConstantData.ObjMoreFlags.SED_MF_Container) > 0
    ),
    o = p ? p.tmargin.left : l.TMargins.left,
    null == g.tmargin ? g.tmargin = o : g.tmargin !== o &&
      (g.tmargin = - 1),
    null == g.ClickFlag ? g.ClickFlag = i : g.ClickFlag !== i &&
      (g.ClickFlag = - 1),
    null == g.AllowSpell ? g.AllowSpell = c : g.AllowSpell !== c &&
      (g.AllowSpell = - 1),
    null == g.CRFlag ? g.CRFlag = n : g.CRFlag !== n &&
      (g.CRFlag = - 1),
    (
      u instanceof ListManager.RRect ||
      u instanceof ListManager.Rect
    ) &&
    (
      g.hasrrectselected ||
      (
        g.hasrrectselected = !0,
        g.rrectfixed = (u.moreflags & ConstantData.ObjMoreFlags.SED_MF_FixedRR) > 0,
        g.rrectparam = u.shapeparam
      )
    );
  return g
}

ListManager.LM.prototypeGetFirstShapeSelected = function () {
  var e,
    t,
    a,
    r = this.GetObjectPtr(this.theSelectedListBlockID, !1);
  for (e = r.length, t = 0; t < e; t++) if (
    a = r[t],
    this.GetObjectPtr(a, !1).DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE
  ) return a;
  return - 1
}

ListManager.LM.prototypeGetSelectedConnectionPoints = function () {
  var e = 0,
    t = this.GetTargetSelect(),
    a = [];
  if (t >= 0) {
    var r = this.GetObjectPtr(t, !1);
    if (
      r.DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.SHAPE
    ) {
      if ((t = this.GetFirstShapeSelected()) < 0) return 0;
      r = this.GetObjectPtr(t, !1)
    }
    return r.flags & ConstantData.ObjFlags.SEDO_ContConn ? e = ConstantData.ObjFlags.SEDO_ContConn : r.flags & ConstantData.ObjFlags.SEDO_UseConnect &&
      (e = ConstantData.ObjFlags.SEDO_UseConnect),
      r.ConnectPoints &&
      (a = Utils1.DeepCopy(r.ConnectPoints)),
    {
      bRes: !0,
      flag: e,
      points: a
    }
  }
  return {
    bRes: !1,
    flag: e,
    points: a
  }
},

  ListManager.LM.prototype.SD_ComparePaint = function (e, t) {
    var a = ConstantData.FillTypes;
    if (- 1 != e.filltype) {
      if (e.filltype == t.filltype) {
        switch (e.filltype) {
          case a.SDFILL_SOLID:
            e.color != t.color &&
              (e.filltype = - 1, e.color = '');
            break;
          case a.SDFILL_GRADIENT:
            e.color == t.color &&
              e.endcolor == t.endcolor &&
              e.gradientflags == t.gradientflags ||
              (e.filltype = - 1);
            break;
          case a.SDFILL_TEXTURE:
            e.texture != t.texture &&
              (e.filltype = - 1)
        }
        return e
      }
      e.filltype = - 1
    }
  }



ListManager.LM.prototype.SelectAllObjects = function (e) {
  var t,
    a,
    r = this.GetObjectPtr(this.theTEDSessionBlockID, !1),
    i = 0,
    n = ConstantData.ObjectTypes.SD_OBJT_SHAPECONTAINER;
  if (r.theActiveTextEditObjectID >= 0) {
    var o = (
      t = this.svgObjectLayer.GetElementByID(r.theActiveTextEditObjectID)
    ).textElem;
    if (
      o &&
      (i = o.GetText().length, o.SetSelectedRange(0, i)),
      !(0 === i && r.theActiveTableObjectID >= 0)
    ) return;
    this.CloseEdit(!0)
  }
  if (r.theActiveTableObjectID >= 0) {
    if (a = this.GetObjectPtr(r.theActiveTableObjectID, !0)) {
      var s = a.GetTable(!1);
      if (s) {
        t = this.svgObjectLayer.GetElementByID(r.theActiveTableObjectID),
          s.select = 0;
        var l = [],
          S = [],
          c = s.cols.length,
          u = s.rows.length;
        this.Table_SelectCells(s, 0, u - 1, - 1, c - 1, !0, l, !1, S),
          this.LM_SelectSVGTableObject(a, this.svgDoc, t, l, S),
          this.CompleteOperation()
      }
    }
  } else {
    var p,
      d = [],
      D = this.ActiveVisibleZList(),
      g = (D = this.RemoveNotVisible(D)).length,
      h = 0,
      m = !1;
    for (e && (h = e.length), p = 0; p < g; ++p) (a = this.GetObjectPtr(D[p], !1)).objecttype === n &&
      this.ContainerIsInCell(a) ||
      h &&
      (
        m = !!(
          - 1 !== e.indexOf(ConstantData.DrawingObjectBaseClass.SHAPE) &&
          a instanceof ListManager.PolyLineContainer &&
          a.polylist &&
          a.polylist.closed
        ),
        - 1 === e.indexOf(a.DrawingObjectBaseClass) &&
        !m
      ) ||
      d.push(D[p]);
    this.SelectObjects(d, !1, !1)
  }
},






  ListManager.LM.prototypeDeSelect = function (e, t) {
    var a,
      r,
      i,
      n = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSelectedListBlockID, !t),
      o = e.length,
      s = this.GetObjectPtr(this.theSEDSessionBlockID, !t);
    for (a = 0; a < o; a++) - 1 !== (r = n.indexOf(e[a])) &&
      (
        GlobalData.optManager.ShowSVGSelectionState(e[a], !1),
        n.splice(r, 1),
        e[a] === s.tselect &&
        (s.tselect = - 1)
      );
    i = n.length,
      s.tselect < 0 &&
      i > 0 &&
      (s.tselect = n[i - 1])
  }

ListManager.LM.prototypeRandomColor = function () {
  return '#' + Number(Math.round(192 * Math.random()) + 63).toString(16) + Number(Math.round(192 * Math.random()) + 63).toString(16) + Number(Math.round(192 * Math.random()) + 63).toString(16)
},

  ListManager.LM.prototype.ObjectsAreEqual = function (e, t) {
    for (var a in t) {
      if (typeof t[a] != typeof e[a]) return !1;
      if (null === t[a] != (null === e[a])) return !1;
      switch (typeof t[a]) {
        case 'undefined':
          if (void 0 !== e[a]) return !1;
          break;
        case 'object':
          if (
            null !== t[a] &&
            null !== e[a] &&
            (
              t[a].constructor.toString() !== e[a].constructor.toString() ||
              !t[a].equals(e[a])
            )
          ) return !1;
          break;
        case 'function':
          if ('equals' != a && t[a].toString() != e[a].toString()) return !1;
          break;
        default:
          if (t[a] !== e[a]) return !1
      }
    }
    return !0
  }





ListManager.LM.prototype.CalcDocumentWorkAreaSize = function (e) {
  var t,
    a,
    r = !1,
    i = !1,
    n = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1);
  for (
    n.layers[n.activelayer].flags & ConstantData.LayerFlags.SDLF_UseEdges &&
    (r = !0),
    nlayers = n.nlayers,
    a = 0;
    a < nlayers;
    a++
  ) if (
      n.layers[a].flags & ConstantData.LayerFlags.SDLF_UseEdges &&
      n.layers[a].flags & ConstantData.LayerFlags.SDLF_Visible ||
      r
    ) {
      i = !0;
      break
    }
  t = this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto ? this.CalcAllObjectEnclosingRect(i && !r, !0) : this.CalcAllObjectEnclosingRect(!1, !1);
  var o,
    s,
    l = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    S = GlobalData.optManager.theContentHeader.Page.margins,
    c = e.x - (S.left + S.right),
    u = e.y - (S.top + S.bottom),
    p = {};
  if (
    t.x < 0 &&
    (t.x = 0),
    t.y < 0 &&
    (t.y = 0),
    o = Math.floor(t.x + t.width),
    s = Math.floor(t.y + t.height),
    this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_Pages
  ) {
    var d = Math.ceil(o / c),
      D = Math.ceil(s / u);
    d < 1 &&
      (d = 1),
      D < 1 &&
      (D = 1);
    var g = Math.round(l.dim.x / c);
    g < 1 &&
      (g = 1);
    var h = Math.round(l.dim.y / u);
    h < 1 &&
      (h = 1),
      p = {
        x: d * c,
        y: D * u
      },
      this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto &&
      (d < g && (p.x = g * c), D < h && (p.y = h * u))
  } else p.x = t.x + t.width,
    p.y = t.y + t.height,
    p.x < GlobalData.optManager.theContentHeader.Page.minsize.x &&
    (p.x = GlobalData.optManager.theContentHeader.Page.minsize.x),
    p.y < GlobalData.optManager.theContentHeader.Page.minsize.y &&
    (p.y = GlobalData.optManager.theContentHeader.Page.minsize.y);
  return p
},

  ListManager.LM.prototype.FitDocumentWorkAreaToPaperSize = function () {
    GlobalData.optManager.ZListPreserve(ConstantData.LayerFlags.SDLF_UseEdges);
    var e = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0),
      t = GlobalData.optManager.theContentHeader.Page.papersize;
    e.Page = Utils1.DeepCopy(GlobalData.optManager.theContentHeader.Page);
    var a = this.CalcDocumentWorkAreaSize(t);
    a.x !== e.dim.x ||
      a.y !== e.dim.y ? (
      e = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0),
      this.UpdateEdgeLayers([], e.dim, a),
      e.dim.x = a.x,
      e.dim.y = a.y,
      this.theContentHeader.Page.minsize.x = e.dim.x,
      this.theContentHeader.Page.minsize.y = e.dim.y,
      this.ResizeSVGDocument()
    ) : GlobalData.docHandler.CheckScaleToFit() &&
    this.ResizeSVGDocument()
  }

ListManager.LM.prototypeSD_GetPageDimensions = function () {
  this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  var e = GlobalData.optManager.theContentHeader.Page.papersize,
    t = GlobalData.optManager.theContentHeader.Page.margins;
  return {
    width: e.x - (t.left + t.right),
    height: e.y - (t.top + t.bottom)
  }
}

ListManager.LM.prototypeAccomodateDocumentPaperSize = function (e) {
  var t,
    a,
    r,
    i = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    n = {},
    o = ConstantData.Defines.MetricConv,
    s = GlobalData.optManager.theContentHeader.Page.margins,
    l = this.theContentHeader.Page.papersize,
    S = GlobalData.docHandler.svgDoc.GetWorkArea(),
    c = (l.x, s.left, s.right, l.y, s.top, s.bottom, !1);
  switch (e) {
    case 'A4':
    case 'A3':
    case 'A5':
    case 'B4':
    case 'B5':
      c = !0
  }
  i.dim.x % 1000 == 0 ||
    i.dim.y % 750 == 0 ? c ? (
      (a = Math.ceil(i.dim.x / 1000)) <= 0 &&
      (a = 1),
      (r = Math.ceil(i.dim.y / 750)) <= 0 &&
      (r = 1),
      n.y = S.docDpi * SDJS.DocumentHandler.PrintHandler.PageSize.A4.pageWidth / o,
      n.x = S.docDpi * SDJS.DocumentHandler.PrintHandler.PageSize.A4.pageHeight / o,
      this.theContentHeader.Page.papersize = n,
      t = (n.x * a - i.dim.x) / a,
      GlobalData.optManager.theContentHeader.Page.margins.left = t / 2,
      GlobalData.optManager.theContentHeader.Page.margins.right = t / 2,
      t = (n.y * r - i.dim.y) / r,
      GlobalData.optManager.theContentHeader.Page.margins.top = t / 2,
      GlobalData.optManager.theContentHeader.Page.margins.bottom = t / 2
    ) : (
    GlobalData.optManager.theContentHeader.Page.margins.left = 50,
    GlobalData.optManager.theContentHeader.Page.margins.right = 50,
    GlobalData.optManager.theContentHeader.Page.margins.top = 50,
    GlobalData.optManager.theContentHeader.Page.margins.bottom = 50
  ) : i.dim.y % 1000 != 0 &&
  i.dim.x % 750 != 0 ||
  (
    c ? (
      a = Math.ceil(i.dim.x / 750),
      r = Math.ceil(i.dim.y / 1000),
      n.x = S.docDpi * SDJS.DocumentHandler.PrintHandler.PageSize.A4.pageWidth / o,
      n.y = S.docDpi * SDJS.DocumentHandler.PrintHandler.PageSize.A4.pageHeight / o,
      this.theContentHeader.Page.papersize = n,
      t = (n.x * a - i.dim.x) / a,
      GlobalData.optManager.theContentHeader.Page.margins.left = t / 2,
      GlobalData.optManager.theContentHeader.Page.margins.right = t / 2,
      t = (n.y * r - i.dim.y) / r,
      GlobalData.optManager.theContentHeader.Page.margins.top = t / 2,
      GlobalData.optManager.theContentHeader.Page.margins.bottom = t / 2
    ) : (
      GlobalData.optManager.theContentHeader.Page.margins.left = 50,
      GlobalData.optManager.theContentHeader.Page.margins.right = 50,
      GlobalData.optManager.theContentHeader.Page.margins.top = 50,
      GlobalData.optManager.theContentHeader.Page.margins.bottom = 50
    )
  )
}

ListManager.LM.prototypeSetDocumentPaperSize = function (e, t) {
  GlobalData.optManager.AccomodateDocumentPaperSize(t),
    this.theContentHeader.Page.papersize = e,
    this.FitDocumentWorkAreaToPaperSize(),
    GlobalData.docHandler.DocumentPageSizeChanged();
  var a = 0;
  switch (t) {
    case 'A4':
    case 'A3':
    case 'A5':
    case 'B4':
    case 'B5':
      a = 1
  }
  var r = SDUI.FileSource.ParamGenerator.MakeUpdateUserSettingParameters(SDUI.AppSettings.FileSource, 'PaperSize', a);
  r.Callback = function (e) {
    SDUI.Utils.LogOpResult(e)
  },
    SDUI.FileSource.UpdateUserSetting(r),
    ConstantData.DocumentContext.UserSettings &&
    (ConstantData.DocumentContext.UserSettings.PaperSize = a),
    GlobalData.optManager.CompleteOperation()
}

ListManager.LM.prototypeGetContrastingColorName = function (e) {
  return (
    299 * parseInt(e.substr(1, 2), 16) + 587 * parseInt(e.substr(3, 2), 16) + 114 * parseInt(e.substr(5, 2), 16)
  ) / 1000 >= 128 ? ConstantData.Colors.Color_Black : ConstantData.Colors.Color_White
},





  ListManager.LM.prototypeSetShapeOrigin = function (e, t, a) {
    var r = {},
      i = GlobalData.objectStore.PreserveBlock(e).Data;
    r.x = i.Frame.x,
      r.y = i.Frame.y,
      i.SetShapeOrigin(t, a),
      (t - r.x || a - r.y) &&
      (
        this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
        this.AddToDirtyList(i.BlockID, !0)
      )
  },
 ,


  ListManager.LM.prototype.EllipseToPoints = function (e, t, a, r, i, n, o) {
    var s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m = 1,
      C = {};
    for (
      s = Math.abs(r - a),
      d = (l = Math.abs(n - i)) * l,
      t < 2 &&
      (t = 100),
      n > i ? r > a ? o ? (S = a, c = n) : (S = r, c = i, m = - 1) : o ? (S = r, c = i) : (c = n, S = a, m = - 1) : r > a ? o ? (S = r, c = i, m = - 1) : (c = n, S = a) : o ? (S = a, c = n, m = - 1) : (c = i, S = r),
      p = (n - i) / (t - 1),
      u = 0;
      u < t;
      u++
    ) g = (D = i + p * u) - c,
      h = Utils2.sqrt(1 - g * g / d) * s,
      C = new Point(S + h * m, D),
      e.push(C)
  }






ListManager.LM.prototype.ArcToChord = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = {},
    h = {},
    m = {},
    C = {},
    y = {};
  g.x = (t.x + e.x) / 2,
    g.y = (t.y + e.y) / 2,
    o = t.x - e.x,
    l = (s = t.y - e.y) / (n = Math.sqrt(o * o + s * s)),
    S = o / n,
    Math.abs(l) < 0.0001 &&
    (l = 0),
    Math.abs(o) < 0.0001 &&
    (o = 0),
    p = Math.asin(l),
    D = Math.acos(S);
  var f = {},
    L = {};
  return o < 0 &&
    s < 0 ? p = - D : p > 0 &&
    o < 0 &&
  (p = - p),
    l = Math.sin(p),
    S = Math.cos(p),
    c = e.x - g.x,
    u = e.y - g.y,
    f.x = c * S + u * l + g.x,
    f.y = - c * l + u * S + g.y,
    c = t.x - g.x,
    u = t.y - g.y,
    L.x = c * S + u * l + g.x,
    L.y = - c * l + u * S + g.y,
    C.x = i.StartPoint.x,
    C.y = i.StartPoint.y,
    y.x = i.EndPoint.x,
    y.y = i.EndPoint.y,
    c = C.x - g.x,
    u = C.y - g.y,
    C.x = c * S + u * l + g.x,
    C.y = - c * l + u * S + g.y,
    c = y.x - g.x,
    u = y.y - g.y,
    y.x = c * S + u * l + g.x,
    y.y = - c * l + u * S + g.y,
    c = a.x - g.x,
    u = a.y - g.y,
    h.x = c * S + u * l + g.x,
    h.y = - c * l + u * S + g.y,
    r &&
    (
      c = r.center.x - g.x,
      u = r.center.y - g.y,
      m.x = c * S + u * l + g.x,
      m.y = - c * l + u * S + g.y,
      (d = g.y < m.y ? h.y < m.y : h.y > m.y) &&
      (
        C.x < y.x ? h.x > C.x &&
          h.x < y.x &&
          (y.x - h.x < h.x - C.x ? h.x = y.x : h.x = C.x) : h.x > y.x &&
          h.x < C.x &&
        (C.x - h.x < h.x - y.x ? h.x = C.x : h.x = y.x)
      )
    ),
    h.y = g.y,
    c = h.x - g.x,
    u = h.y - g.y,
    l = Math.sin(- p),
    S = Math.cos(- p),
    h.x = c * S + u * l + g.x,
    h.y = - c * l + u * S + g.y,
    c = f.x - g.x,
    u = f.y - g.y,
    f.x = c * S + u * l + g.x,
    f.y = - c * l + u * S + g.y,
    r &&
    (h.x = 2 * Math.round((h.x + 0.5) / 2), !0 === d && h.x--),
    h
}

ListManager.LM.prototypeChordToArc = function (e, t, a, r, i, n, o, s) {
  var l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = {},
    C = {},
    y = {},
    f = {};
  return S = t.x - e.x,
    u = (c = t.y - e.y) / (l = Math.sqrt(S * S + c * c)),
    p = S / l,
    Math.abs(u) < 0.0001 &&
    (u = 0),
    Math.abs(S) < 0.0001 &&
    (S = 0),
    ((g = Math.asin(u)) > 0 && S < 0 || g < 0 && S < 0 && c < 0) &&
    (g = - g),
    u = Math.sin(g),
    p = Math.cos(g),
    d = e.x - a.x,
    D = e.y - a.y,
    y.x = d * p + D * u + a.x,
    y.y = - d * u + D * p + a.y,
    d = t.x - a.x,
    D = t.y - a.y,
    f.x = d * p + D * u + a.x,
    f.y = - d * u + D * p + a.y,
    d = s.x - a.x,
    D = s.y - a.y,
    m.x = d * p + D * u + a.x,
    m.y = - d * u + D * p + a.y,
    d = e.x - a.x,
    D = e.y - a.y,
    C.x = d * p + D * u + a.x,
    C.y = - d * u + D * p + a.y,
    h = C.y > a.y &&
    !o ||
    C.y <= a.y &&
    o,
    n &&
    (h = !h),
    d = m.x - a.x,
    Math.abs(d) > r &&
    (d = r),
    D = Utils2.sqrt(r * r - d * d),
    h ? (m.y = a.y + D, i && (D = C.y - m.y, m.y = C.y + D)) : (m.y = a.y - D, i && (D = C.y - m.y, m.y = C.y + D)),
    d = m.x - a.x,
    D = m.y - a.y,
    u = Math.sin(- g),
    p = Math.cos(- g),
    m.x = d * p + D * u + a.x,
    m.y = - d * u + D * p + a.y,
    m
}

ListManager.LM.prototypePolyGetIntersect = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = {},
    C = {},
    y = 0;
  for (l = e.length, n = 1; n < l; n++) if (C = e[n - 1], (m = e[n]).x != C.x || m.y != C.y) {
    if (S = m.x - C.x, c = m.y - C.y, i) {
      if (C.x < m.x ? (g = C.x, h = m.x) : (g = m.x, h = C.x), t < g || t > h) continue;
      if (
        Math.abs(S) < 0.0001 &&
        (S = 1),
        p = c / S * (t - C.x) + C.y,
        C.y < m.y ? (d = C.y, D = m.y) : (D = C.y, d = m.y),
        p >= d &&
        p <= D
      ) {
        if (y > 0) for (s = 0; s < y && (o = Math.abs(p - a[s]) > 1); s++);
        else o = !0;
        if (o) {
          if (!(y < 2)) return y + 1;
          a[y] = p,
            r &&
            (r[y] = n),
            y++
        }
      }
    } else {
      if (C.y < m.y ? (g = C.y, h = m.y) : (g = m.y, h = C.y), t < g || t > h) continue;
      if (
        Math.abs(c) < 0.0001 &&
        (c = 1),
        u = S / c * (t - C.y) + C.x,
        C.x < m.x ? (d = C.x, D = m.x) : (D = C.x, d = m.x),
        u >= d &&
        u <= D
      ) {
        if (y > 0) for (s = 0; s < y && (o = Math.abs(u - a[s]) > 1); s++);
        else o = !0;
        if (o) {
          if (!(y < 2)) return y + 1;
          a[y] = u,
            r &&
            (r[y] = n),
            y++
        }
      }
    }
    2 == y &&
      a[0] > a[1] &&
      (o = a[1], a[1] = a[0], a[0] = o, r && (o = r[1], r[1] = r[0], r[0] = o))
  }
  return y
},





  ListManager.LM.prototypeSD_GetClockwiseAngleBetween2PointsInRadians = function (e, t) {
    var a,
      r,
      i,
      n = ConstantData.Geometry.PI;
    return a = t.x - e.x,
      r = t.y - e.y,
      (i = 0 === a ? r >= 0 ? n / 2 : - n / 2 : 0 === r ? a >= 0 ? 0 : n : Math.atan2(r, a)) < 0 &&
      (i += 2 * n),
      i
  }

ListManager.LM.prototypeSetLineLength = function (e, t, a) {
  var r = this.SD_GetCounterClockwiseAngleBetween2Points(e, t);
  0 != r &&
    this.RotatePointsAboutPoint(e, - r, [
      e,
      t
    ]),
    t.x = e.x + a,
    0 != r &&
    this.RotatePointsAboutPoint(e, r, [
      e,
      t
    ])
}

ListManager.LM.prototypeIntersectPointOfLineAndRectangle = function (e, t, a) {
  var r,
    i,
    n = {},
    o = [],
    s = [],
    l = [],
    S = - 1,
    c = - 1;
  for (o = Utils2.PolyFromRect(a), i = 1; i < o.length; i++) s = o.slice(i - 1, i + 1),
    (n = GlobalData.optManager.PolyLIntersect(e, t, s, 2)) &&
    n.bSuccess &&
    l.push(new Point(n.ipt.x, n.ipt.y));
  if (0 == l.length) return null;
  if (1 == l.length) return l[0];
  for (i = 0; i < l.length; i++) r = Utils2.GetDistanceBetween2Points(e, l[i]),
    (S < 0 || r < S) &&
    (c = i, S = r);
  return l[c]
},

  ListManager.LM.prototype.PolyGetIntersect = function (e, t, a, r, i) {
    var n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y = {},
      f = {},
      L = 0;
    ConstantData.Defines.LongIntMax;
    for (S = e.length, n = 0, o = 1; o < S + 1; o++) if (
      c = o,
      f = e[n],
      o === S ? (y = e[0], c = 0) : y = e[o],
      !Utils2.IsEqual(y.x, f.x) ||
      !Utils2.IsEqual(y.y, f.y)
    ) if (n = o, u = y.x - f.x, p = y.y - f.y, i) {
      if (f.x < y.x ? (m = f.x, C = y.x) : (m = y.x, C = f.x), t < m || t > C) continue;
      if (
        0 === u &&
        (u = 1),
        D = p / u * (t - f.x) + f.y,
        f.y < y.y ? (g = f.y, h = y.y) : (h = f.y, g = y.y),
        D >= g &&
        D <= h
      ) {
        if (L > 0) for (l = 0; l < L && (s = Math.abs(D - a[l]) > 1); l++);
        else s = !0;
        if (s) {
          if (!(L < 2)) return L + 1;
          a[L] = D,
            r &&
            (r[L] = c),
            L++
        }
      }
    } else {
        if (f.y < y.y ? (m = f.y, C = y.y) : (m = y.y, C = f.y), t < m || t > C) continue;
        if (
          0 === p &&
          (p = 1),
          d = u / p * (t - f.y) + f.x,
          f.x < y.x ? (g = f.x, h = y.x) : (h = f.x, g = y.x),
          d >= g &&
          d <= h
        ) {
          if (L > 0) for (l = 0; l < L && (s = Math.abs(d - a[l]) > 1); l++);
          else s = !0;
          if (s) {
            if (!(L < 2)) return L + 1;
            a[L] = d,
              r &&
              (r[L] = c),
              L++
          }
        }
      }
    return 2 === L &&
      a[0] > a[1] &&
      (s = a[1], a[1] = a[0], a[0] = s, r && (s = r[1], r[1] = r[0], r[0] = s)),
      L
  }



ListManager.LM.prototypeSD_TableFillPoly = function (e, t, a, r, i, n, o) {
  var s,
    l,
    S,
    c,
    u,
    p,
    d = !1;
  if (t == a) return 1;
  for (
    p = e.length,
    S = t,
    a < t ? (l = p - 1, d = !0) : l = a,
    c = 0,
    o.length,
    s = S;
    s <= l;
    s++
  ) if (u = i ? e[s].y : e[s].x, r < 0) {
    if (u < n) {
      c = 1;
      break
    }
    if (u > n) {
      c = - 1,
        s === S &&
        (i ? e[s].y = n : e[s].x = n);
      break
    }
  } else {
      if (u > n) {
        c = 1;
        break
      }
      if (u < n) {
        c = - 1;
        break
      }
    }
  if (0 === c) for (s = t; s >= 0; s--) if (u = i ? e[s].y : e[s].x, r < 0) {
    if (u < n) {
      c = - 1;
      break
    }
    if (u > n) {
      c = 1;
      break
    }
  } else {
    if (u > n) {
      c = - 1;
      break
    }
    if (u < n) {
      c = 1;
      break
    }
  }
  if (0 === c) return 0;
  if (c > 0) {
    for (s = t; s <= l; s++) o.push(e[s]);
    if (d) for (s = 0; s <= a; s++) o.push(e[s])
  } else {
    for (a < t ? (l = a, d = !1) : (l = 0, d = !0), s = t; s >= l; s--) o.push(e[s]);
    if (d) for (s = p - 1; s >= a; s--) o.push(e[s])
  }
  return 1
},

  ListManager.LM.prototype.GetIntersectPt = function (e, t, a, r, i, n) {
    var o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y = !1,
      f = !1;
    function L(e, t) {
      return Math.abs(e.x - t.x) < 0.2
    }
    function I(e, t) {
      return Math.abs(e.y - t.y) < 0.2
    }
    if (
      o = t.x - e.x,
      s = t.y - e.y,
      L(e, t) ? (y = !0, d = t.x, l = 1) : I(e, t) ? (D = t.y, l = 0) : l = s / o,
      m = e.x,
      h = e.y,
      S = r.x - a.x,
      c = r.y - a.y,
      L(a, r) ? (f = !0, d = r.x, u = 1) : I(a, r) ? (D = r.y, u = 0) : u = c / S,
      C = a.x,
      g = a.y,
      l === u ||
      f === y &&
      !0 === f
    ) return !1;
    if (!f && !y) {
      if (p = u - l, Math.abs(p) < 0.0001) return !1;
      d = (h - g + u * C - l * m) / p
    }
    return y &&
      !f ? D = g + u * (m - C) : f &&
        !y &&
        0 === l ? i &&
    ((D = r.y) >= i.y && D <= i.y + i.height || (D = - 1)) : u &&
    (D = h + l * (d - m)),
      n.x = d,
      n.y = D,
      !0
  }


ListManager.LM.prototypeArc_Intersect = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = !1,
    L = {},
    I = {},
    T = [];
  return r = e.EndPoint.x - e.StartPoint.x,
    i = e.EndPoint.y - e.StartPoint.y,
    0 === r ? (!0, l = e.EndPoint.x, 1) : i / r,
    e.StartPoint.x,
    e.StartPoint.y,
    L = e.IsReversed ? e.CalcRadiusAndCenter(
      e.EndPoint.x,
      e.EndPoint.y,
      e.StartPoint.x,
      e.StartPoint.y,
      e.CurveAdjust,
      e.IsReversed
    ) : e.CalcRadiusAndCenter(
      e.StartPoint.x,
      e.StartPoint.y,
      e.EndPoint.x,
      e.EndPoint.y,
      e.CurveAdjust,
      e.IsReversed
    ),
    I.x = L.centerX,
    I.y = L.centerY,
    C = L.radius,
    n = t.EndPoint.x - t.StartPoint.x,
    o = t.EndPoint.y - t.StartPoint.y,
    0 === n ? (f = !0, l = t.EndPoint.x, s = 1) : s = o / n,
    p = t.StartPoint.x,
    u = t.StartPoint.y,
    0 === s ? !((c = C * C - (m = (S = t.StartPoint.y) - I.y) * m) < 0) &&
      (
        l = (h = Utils2.sqrt(c)) + I.x,
        a.x = l,
        a.y = S,
        T = e.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !1, !1, null),
        !!Utils3.LineDStyleHit(T, a, e.StyleRecord.lineThickness, 0, null) ||
        (
          !!Utils2.pointInRect(e.Frame, a) ||
          (
            l = - h + I.x,
            a.x = l,
            a.y = S,
            !!Utils3.LineDStyleHit(T, a, e.StyleRecord.lineThickness, 0, null) ||
            !!Utils2.pointInRect(e.Frame, a)
          )
        )
      ) : f ? !((c = C * C - (h = (l = t.StartPoint.x) - I.x) * h) < 0) &&
        (
          S = (m = Utils2.sqrt(c)) + I.y,
          a.x = l,
          a.y = S,
          T = e.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !1, !1, null),
          !!Utils3.LineDStyleHit(T, a, e.StyleRecord.lineThickness, 0, null) ||
          (
            !!Utils2.pointInRect(e.Frame, a) ||
            (
              S = - m + I.y,
              a.x = l,
              a.y = S,
              !!Utils3.LineDStyleHit(T, a, e.StyleRecord.lineThickness, 0, null) ||
              !!Utils2.pointInRect(e.Frame, a)
            )
          )
        ) : (
      d = s * s + 1,
      !((g = (D = 2 * s * (y = u - I.y - s * p) - 2 * I.x) * D - 4 * d * (I.x * I.x + y * y - C * C)) < 0) &&
      (
        S = u + s * ((l = (- D + (g = Utils2.sqrt(g))) / (2 * d)) - p),
        a.x = l,
        a.y = S,
        T = e.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !1, !1, null),
        !!Utils3.LineDStyleHit(T, a, e.StyleRecord.lineThickness, 0, null) ||
        (
          !!Utils2.pointInRect(e.Frame, a) ||
          (
            S = u + s * ((l = (- D - g) / (2 * d)) - p),
            a.x = l,
            a.y = S,
            !!Utils3.LineDStyleHit(T, a, e.StyleRecord.lineThickness, 0, null) ||
            !!Utils2.pointInRect(e.Frame, a)
          )
        )
      )
    )
}

ListManager.LM.prototypeLines_AddCurve = function (e, t, a, r, i, n) {
  var o,
    s = [],
    l = [],
    S = {};
  if (e) if (t > 0 && a > 0) for (
    S.x = r,
    S.y = i,
    S.width = n,
    S.height = - 2 * n,
    GlobalData.optManager.PolyYCurve(l, S, 20, 0, 0, 0, - n, !0),
    o = l.length - 1;
    o >= 0;
    o--
  ) s.push(l[o]);
  else t < 0 &&
    a > 0 ? (
    S.x = r,
    S.y = i + 2 * n,
    S.width = n,
    S.height = - 2 * n,
    GlobalData.optManager.PolyYCurve(s, S, 20, 0, 0, - n, 0, !0)
  ) : t > 0 &&
    a < 0 ? (
    S.x = r,
    S.y = i - 2 * n,
    S.width = - n,
    S.height = 2 * n,
    GlobalData.optManager.PolyYCurve(s, S, 20, 0, 0, n, 0, !0)
  ) : t < 0 &&
  a < 0 &&
  (
    S.x = r,
    S.y = i + 2 * n,
    S.width = - n,
    S.height = - 2 * n,
    GlobalData.optManager.PolyYCurve(s, S, 20, 0, 0, - n, 0, !0)
  );
  else if (t > 0 && a > 0) S.x = r - n,
    S.y = i,
    S.width = n,
    S.height = 2 * n,
    GlobalData.optManager.PolyYCurve(s, S, 20, 0, 0, 0, n, !1);
  else if (t < 0 && a > 0) S.x = r,
    S.y = i,
    S.width = n,
    S.height = 2 * n,
    GlobalData.optManager.PolyYCurve(s, S, 20, 0, 0, 0, n, !0);
  else if (t > 0 && a < 0) S.x = r - n,
    S.y = i,
    S.width = n,
    S.height = - 2 * n,
    GlobalData.optManager.PolyYCurve(s, S, 20, 0, 0, 0, - n, !1);
  else if (t < 0 && a < 0) for (
    S.x = r,
    S.y = i - 2 * n,
    S.width = n,
    S.height = 2 * n,
    GlobalData.optManager.PolyYCurve(l, S, 20, 0, 0, n, 0, !0),
    o = l.length - 1;
    o >= 0;
    o--
  ) s.push(l[o]);
  return s
}



ListManager.LM.prototypeLines_MaintainDist = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = {},
    h = {
      x: 0,
      y: 0
    },
    m = {};
  if (
    null === t &&
    (t = e),
    (g = t.GetConnectLine()) ? (D = g.startpt, d = g.endpt) : (D = t.StartPoint, d = t.EndPoint),
    i = d.x - D.x,
    n = d.y - D.y,
    Math.sqrt(i * i + n * n),
    h.x = r.x,
    h.y = r.y,
    t.LineType === ConstantData.LineType.ARCLINE &&
    (h = this.ArcToChord(D, d, h, g, t)),
    a === ConstantData.ActionTriggerType.LINESTART ? (i = h.x - d.x, n = h.y - d.y) : (i = h.x - D.x, n = h.y - D.y),
    o = Math.sqrt(i * i + n * n),
    (g = e.GetConnectLine()) ? (D = g.startpt, d = g.endpt) : (D = e.StartPoint, d = e.EndPoint),
    a === ConstantData.ActionTriggerType.LINESTART ? (c = d, i = - (d.x - D.x), n = - (d.y - D.y)) : (c = D, i = d.x - D.x, n = d.y - D.y),
    o > (s = Math.sqrt(i * i + n * n)) &&
    (o = s),
    s < 1 ? (r.x = D.x, r.y = D.y) : (l = n / s, S = i / s, r.x = c.x + S * o, r.y = c.y + l * o),
    e.LineType === ConstantData.LineType.ARCLINE
  ) {
    var C = e.CalcRadiusAndCenter(
      e.StartPoint.x,
      e.StartPoint.y,
      e.EndPoint.x,
      e.EndPoint.y,
      e.CurveAdjust,
      e.IsReversed
    );
    g ? (u = !1, p = !1) : (u = !1, p = e.IsReversed),
      m.x = C.centerX,
      m.y = C.centerY,
      r = this.ChordToArc(D, d, m, C.radius, p, u, C.centerInside, r)
  }
},


  ListManager.LM.prototype.SED_Opposite = function (e) {
    switch (e) {
      case ConstantData.SegLDir.SED_KLC:
        return ConstantData.SegLDir.SED_KRC;
      case ConstantData.SegLDir.SED_KRC:
        return ConstantData.SegLDir.SED_KLC;
      case ConstantData.SegLDir.SED_KTC:
        return ConstantData.SegLDir.SED_KBC;
      case ConstantData.SegLDir.SED_KBC:
        return ConstantData.SegLDir.SED_KTC
    }
    return 0
  },



  ListManager.LM.prototypeGetDocReplaceState = function () {
    return GlobalData.optManager.theContentHeader.AllowReplace
  }

ListManager.LM.prototypeSetDocReplaceState = function (e) {
  GlobalData.optManager.theContentHeader.AllowReplace = e
}

ListManager.LM.prototypeDocAllowSpell = function () {
  return (
    GlobalData.optManager.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_AutoSpell
  ) > 0 &&
    !GlobalData.docHandler.IsReadOnly()
},



  ListManager.LM.prototype.EditShapeOutline = function () {
    var e,
      t,
      a = ConstantData.ShapeType,
      r = ConstantData.ObjectTypes,
      i = !1;
    if ((e = this.GetTargetSelect()) >= 0) if (
      (t = this.GetObjectPtr(e, !1)) &&
      t.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE
    ) switch (t.ShapeType) {
      case a.OVAL:
      case a.RECT:
      case a.RRECT:
      case a.POLYGON:
        switch (t.objecttype) {
          case r.SD_OBJT_GANTT_CHART:
          case r.SD_OBJT_FRAME_CONTAINER:
          case r.SD_OBJT_TABLE_WITH_SHAPECONTAINER:
            i = !0;
            break;
          default:
            t.IsSwimlane() &&
              (i = !0)
        }
        return void (
          i ? Utils2.Alert(Resources.Strings.EditShapeOutline_WrongShape, null) : (this.OpenShapeEdit(e), this.CompleteOperation())
        );
      default:
        return void Utils2.Alert(Resources.Strings.EditShapeOutline_WrongShape, null)
    } else if (t.FromEditShapeOutline) return;
    Utils2.Alert(Resources.Strings.NoShape, null)
  }

ListManager.LM.prototypeOpenShapeEdit = function (e, t) {
  if (!t) {
    var a = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
    if (a.theActiveOutlineObjectID === e) return
  }
  var r = this.GetObjectPtr(e, !1);
  if (
    null != r &&
    r.objecttype !== ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL
  ) {
    if (
      Collab.AllowMessage() &&
      (Collab.BeginSecondaryEdit(), r = this.GetObjectPtr(e, !1)),
      this.CloseEdit(!1),
      r.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.LINE &&
      r.LineType === ConstantData.LineType.POLYLINE
    ) r.polylist.wasline &&
      (
        r.polylist.wasline = !1,
        r.TextGrow = ConstantData.TextGrowBehavior.PROPORTIONAL
      );
    else {
      if (
        r.DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.SHAPE
      ) return void (t || Collab.UnBlockMessages());
      if (
        this.ShapeToPolyLine(e, !1, null != t).FromEditShapeOutline = !0,
        Collab.AllowMessage()
      ) {
        var i = {
          BlockID: r.BlockID
        };
        Collab.BuildMessage(ConstantData.CollabMessages.OpenShapeEdit, i, !1)
      }
    }
    t ||
      (
        (a = this.GetObjectPtr(this.theTEDSessionBlockID, !0)).theActiveOutlineObjectID = e,
        Collab.UnBlockMessages()
      )
  }
},
  ,
  ListManager.LM.prototype.CalcPolyVertices = function (e) {
    var t,
      a,
      r,
      i,
      n,
      o,
      s,
      l = {};
    (i = e.inside.width) < 1 &&
      (i = 1),
      (n = e.inside.height) < 1 &&
      (n = 1);
    var S = Utils1.DeepCopy(e);
    for (
      (s = new ListManager.PolyLine(S)).inside = $.extend(!0, {
      }, e.Frame),
      t = (
        o = s.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !0, !1, !1, null)
      ).length,
      Utils2.GetPolyRect(l, o),
      e.VertexArray = [],
      a = 0;
      a < t;
      a++
    ) a > 0 &&
      o[a].x === o[a - 1].x &&
      o[a].y === o[a - 1].y ||
      (
        o[a].x -= l.x,
        o[a].y -= l.y,
        r = new Point(o[a].x / i, o[a].y / n),
        e.VertexArray.push(r)
      )
  }

ListManager.LM.prototypePolyLineToShape = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c = {},
    u = GlobalData.objectStore.PreserveBlock(e);
  if (null != u) {
    for (
      s = (
        n = (a = u.Data).GetPolyPoints(ConstantData.Defines.NPOLYPTS, !0, !1, !1, null)
      ).length,
      a.polylist.dim.x = a.inside.width,
      a.polylist.dim.y = a.inside.height,
      a.polylist.offset.x = a.StartPoint.x - a.Frame.x,
      a.polylist.offset.y = a.StartPoint.y - a.Frame.y,
      (l = a.inside.width) < 1 &&
      (l = 1),
      (S = a.inside.height) < 1 &&
      (S = 1),
      (r = new ListManager.Polygon(a)).NeedsSIndentCount = !0,
      r.polylist = a.polylist,
      r.BlockID = a.BlockID,
      r.StartPoint = a.StartPoint,
      r.EndPoint = a.EndPoint,
      r.RotationAngle = a.polylist.Shape_Rotation,
      r.DataID = a.polylist.Shape_DataID,
      Utils2.GetPolyRect(c, n),
      i = 0;
      i < s;
      i++
    ) i > 0 &&
      n[i].x === n[i - 1].x &&
      n[i].y === n[i - 1].y ||
      (
        n[i].x -= c.x,
        n[i].y -= c.y,
        o = new Point(n[i].x / l, n[i].y / S),
        r.VertexArray.push(o)
      );
    r.UpdateFrame(a.Frame),
      u.Data = r,
      t ||
      (this.AddToDirtyList(e), this.RenderDirtySVGObjects())
  }
}

ListManager.LM.prototypeShapeToPolyLine = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l = [],
    S = {};
  if (r) i = r,
    s = !0,
    S = $.extend(!0, {
    }, i.Frame);
  else {
    null == (i = this.GetObjectPtr(e, !1)).polylist ? (i.polylist = i.GetPolyList(), i.StartPoint = {}, i.EndPoint = {}) : s = !0;
    var c = GlobalData.objectStore.PreserveBlock(e);
    if (null == c) return;
    i = c.Data,
      S = $.extend(!0, {
      }, i.Frame)
  }
  if (s) {
    if (!i.polylist) return null;
    if (
      GlobalData.optManager.GetClosedPolyDim(i),
      !Utils2.IsEqual(i.polylist.dim.x, S.width)
    ) {
      var u = Utils1.DeepCopy(i);
      u.inside = $.extend(!0, {
      }, i.Frame),
        ListManager.PolyLine.prototype.ScaleObject.call(u, 0, 0, 0, 0, 0, 0),
        i.polylist = u.polylist
    }
  }
  return o = i.polylist.segs.length,
    i.StartPoint.x = i.Frame.x + i.polylist.segs[0].pt.x + i.polylist.offset.x,
    i.StartPoint.y = i.Frame.y + i.polylist.segs[0].pt.y + i.polylist.offset.y,
    i.EndPoint.x = i.Frame.x + i.polylist.segs[o - 1].pt.x + i.polylist.offset.x,
    i.EndPoint.y = i.Frame.y + i.polylist.segs[o - 1].pt.y + i.polylist.offset.y,
    (
      n = t ? new ListManager.PolyLineContainer(i) : new ListManager.PolyLine(i)
    ).BlockID = i.BlockID,
    n.polylist.Shape_Rotation = i.RotationAngle,
    n.polylist.Shape_DataID = i.DataID,
    n.RotationAngle = 0,
    n.DataID = - 1,
    r ||
    (c.Data = n),
    a ||
    (
      this.AddToDirtyList(e),
      this.RenderDirtySVGObjects(),
      l.push(e),
      this.SelectObjects(l, !1, !0)
    ),
    n.inside = $.extend(!0, {
    }, i.Frame),
    n
}

ListManager.LM.prototypeGetClosedPolyDim = function (e) {
  var t,
    a = {};
  if (e.polylist) {
    var r = Utils1.DeepCopy(e),
      i = new ListManager.PolyLine(r);
    i.inside = $.extend(!0, {
    }, e.Frame),
      i.polylist.dim.x = 0,
      i.polylist.dim.y = 0,
      (
        t = i.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !1, !1, null)
      ) &&
      t.length &&
      (
        Utils2.GetPolyRect(a, t),
        a.width < 1 &&
        (a.width = 1),
        a.height < 1 &&
        (a.height = 1),
        e.polylist.closed &&
        (e.polylist.dim.x = a.width, e.polylist.dim.y = a.height)
      )
  }
}

ListManager.LM.prototypeSafeSqrt = function (e) {
  return e < 0 ? 0 : Math.sqrt(e)
}

ListManager.LM.prototypeCalcWorkAreaCenterUL = function (e, t) {
  var a = this.svgDoc,
    r = a.docInfo.dispX + a.docInfo.dispWidth / 2 - e / 2 * a.docInfo.docToScreenScale,
    i = a.docInfo.dispY + a.docInfo.dispHeight / 2 - t / 2 * a.docInfo.docToScreenScale,
    n = a.ConvertWindowToDocCoords(r, i);
  return n.x < 10 &&
    (n.x = 10),
    n.y < 10 &&
    (n.y = 10),
    n
}

ListManager.LM.prototypeCalcWorkAreaUL = function (e, t) {
  var a = this.svgDoc,
    r = a.docInfo.dispX + e,
    i = a.docInfo.dispY + t;
  return a.ConvertWindowToDocCoords(r, i)
}

ListManager.LM.prototypeScaleToRuler = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c = 1,
    u = 1,
    p = GlobalData.docHandler.rulerSettings.major,
    d = this.GetObjectPtr(this.theSEDSessionBlockID, !1);
  switch (a) {
    case Resources.RulerUnits.SED_Feet:
      u = 12,
        12;
      break;
    case Resources.RulerUnits.SED_Mm:
      !0,
        0.1,
        u = 0.1,
        GlobalData.docHandler.rulerSettings.useInches ||
        (u /= GlobalData.docHandler.rulerSettings.metricConv);
      break;
    case Resources.RulerUnits.SED_Cm:
      !0,
        1,
        u = 1,
        GlobalData.docHandler.rulerSettings.useInches ||
        (u /= GlobalData.docHandler.rulerSettings.metricConv);
      break;
    case Resources.RulerUnits.SED_M:
      !0,
        100,
        u = 100,
        GlobalData.docHandler.rulerSettings.useInches ||
        (u /= GlobalData.docHandler.rulerSettings.metricConv);
      break;
    default:
      u = 1,
        1
  }
  switch (GlobalData.docHandler.rulerSettings.units) {
    case Resources.RulerUnits.SED_Feet:
      c = 12,
        12,
        GlobalData.docHandler.rulerSettings.useInches ||
        (c *= GlobalData.docHandler.rulerSettings.metricConv);
      break;
    case Resources.RulerUnits.SED_Mm:
      !0,
        c = 0.1,
        0.1;
      break;
    case Resources.RulerUnits.SED_Cm:
      !0,
        c = 1,
        1;
      break;
    case Resources.RulerUnits.SED_M:
      !0,
        c = 100,
        100;
      break;
    default:
      c = 1,
        1,
        GlobalData.docHandler.rulerSettings.useInches ||
        (c *= GlobalData.docHandler.rulerSettings.metricConv)
  }
  if (
    s = e * (o = u / (c *= GlobalData.docHandler.rulerSettings.majorScale)) * p,
    l = t * o * p,
    n ||
    s < ConstantData.Defines.SED_MinDim &&
    l < ConstantData.Defines.SED_MinDim &&
    (
      s < ConstantData.Defines.SED_MinDim &&
      (s = ConstantData.Defines.SED_MinDim),
      l < ConstantData.Defines.SED_MinDim &&
      (l = ConstantData.Defines.SED_MinDim),
      s > l ? (S = s / l, s = (l = ConstantData.Defines.SED_MinDim) * S) : (S = l / s, l = (s = ConstantData.Defines.SED_MinDim) * S)
    ),
    i
  ) for (var D = {
    width: d.dim.x,
    height: d.dim.y
  }; s > D.width || l > D.height;) s /= 10,
    l /= 10;
  r.x = s,
    r.y = l
}

ListManager.LM.prototypeCalcTextureScale = function (e, t) {

  var a,
    r,
    i = 1,
    n = 1;
  if (!e.Units) return e.Scale;
  switch (e.Units) {
    case Resources.RulerUnits.SED_Feet:
      n = 12;
      break;
    case Resources.RulerUnits.SED_Mm:
      n = 0.1 / GlobalData.docHandler.rulerSettings.metricConv;
      break;
    case Resources.RulerUnits.SED_Cm:
      n = 1 / GlobalData.docHandler.rulerSettings.metricConv;
      break;
    case Resources.RulerUnits.SED_M:
      n = 100 / GlobalData.docHandler.rulerSettings.metricConv;
      break;
    default:
      n = 1
  }
  switch (GlobalData.docHandler.rulerSettings.units) {
    case Resources.RulerUnits.SED_Feet:
      i = 12;
      break;
    case Resources.RulerUnits.SED_Mm:
      i = 0.1 / GlobalData.docHandler.rulerSettings.metricConv;
      break;
    case Resources.RulerUnits.SED_Cm:
      i = 1 / GlobalData.docHandler.rulerSettings.metricConv;
      break;
    case Resources.RulerUnits.SED_M:
      i = 100 / GlobalData.docHandler.rulerSettings.metricConv;
      break;
    default:
      i = 1
  }
  return a = n / (i *= GlobalData.docHandler.rulerSettings.majorScale),
    GlobalData.docHandler.rulerSettings.useInches ||
    (a /= GlobalData.docHandler.rulerSettings.metricConv),
    (r = e.RWidth * a * 100 / (t < 1 ? 1 : t)) < 0.01 &&
    (r = 0.01),
    r > 1000 &&
    (r = 1000),
    r
},



  ListManager.LM.prototypeFlipPoints = function (e, t, a) {
    var r,
      i,
      n;
    for (E = ConstantData.ExtraFlags, n = a.length, i = 0; i < n; i++) t & E.SEDE_FlipHoriz &&
      (r = a[i].x - e.x, a[i].x = e.x + e.width - r),
      t & E.SEDE_FlipVert &&
      (r = a[i].y - e.y, a[i].y = e.y + e.height - r)
  }

ListManager.LM.prototypePixelsToUnits = function (e) {
  return new ListManager.BaseDrawingObject(null).GetLengthInRulerUnits(e)
}

ListManager.LM.prototypePolyLIntersect = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = null,
    y = - 1,
    f = - 1,
    L = {
      x: 0,
      y: 0
    },
    I = {
      x: 0,
      y: 0
    },
    T = 0;
  if (S = Math.abs(t.x - e.x), Math.abs(t.y - e.y) < 1 && S >= 1) {
    for (i = 1; i < r; i++) if (
      a[i].y > a[i - 1].y ? (s = a[i - 1].y, l = a[i].y) : (s = a[i].y, l = a[i - 1].y),
      t.y >= s &&
      t.y < l
    ) {
      y = i,
        I.y = t.y;
      break
    }
    if (y >= 0) return T = y,
      a[y].x - a[y - 1].x == 0 ? (I.x = a[y].x, {
        bSuccess: !0,
        ipt: I,
        lpseg: T
      }) : a[y].y - a[y - 1].y == 0 ? (
        a[y].x > a[y - 1].x ? (n = a[y - 1].x, o = a[y].x) : (n = a[y].x, o = a[y - 1].x),
        I.x < n &&
        (I.x = n),
        I.x > o &&
        (I.x = o),
        {
          bSuccess: !0,
          ipt: I,
          lpseg: T
        }
      ) : (
        c = a[y].x - a[y - 1].x,
        d = (a[y].y - a[y - 1].y) / c,
        D = a[y].y - d * a[y].x,
        I.x = (I.y - D) / d,
        {
          bSuccess: !0,
          ipt: I,
          lpseg: T
        }
      )
  } else if (S < 1) {
    for (i = 1; i < r; i++) if (
      a[i].x > a[i - 1].x ? (n = a[i - 1].x, o = a[i].x) : (n = a[i].x, o = a[i - 1].x),
      t.x >= n &&
      t.x < o
    ) {
      f = i,
        I.x = t.x;
      break
    }
    if (f >= 0) return T = f,
      a[f].y - a[f - 1].y == 0 ? (I.y = a[f].y, {
        bSuccess: !0,
        ipt: I,
        lpseg: T
      }) : a[f].x - a[f - 1].x == 0 ? (
        a[f].y > a[f - 1].y ? (s = a[f - 1].y, l = a[f].y) : (s = a[f].y, l = a[f - 1].y),
        I.y < s &&
        (I.y = s),
        I.y > l &&
        (I.y = l),
        {
          bSuccess: !0,
          ipt: I,
          lpseg: T
        }
      ) : (
        c = a[f].x - a[f - 1].x,
        d = (a[f].y - a[f - 1].y) / c,
        D = a[f].y - d * a[f].x,
        I.y = d * I.x + D,
        {
          bSuccess: !0,
          ipt: I,
          lpseg: T
        }
      )
  } else for (c = t.x - e.x, u = (t.y - e.y) / c, p = t.y - u * t.x, i = 1; i < r; i++) {
    if (a[i].x - a[i - 1].x == 0) L.x = a[i].x,
      L.y = u * L.x + p;
    else if (a[i].y - a[i - 1].y == 0) L.y = a[i].y,
      L.x = (L.y - p) / u;
    else {
      if (
        c = a[i].x - a[i - 1].x,
        h = u - (d = (a[i].y - a[i - 1].y) / c),
        m = (D = a[i].y - d * a[i].x) - p,
        Math.abs(h) < 0.001
      ) continue;
      g = m / h,
        L.y = u * g + p,
        L.x = g
    }
    if (
      (C = Utils2.Pt2Rect(a[i], a[i - 1])).y + C.height == C.y &&
      C.height++,
      C.x + C.width == C.x &&
      C.width++,
      Utils2.pointInRect(C, L)
    ) return {
      bSuccess: !0,
      ipt: I = L,
      lpseg: T = i
    }
  }
  return {
    bSuccess: !1,
    ipt: I,
    lpseg: T
  }
}

ListManager.LM.prototypeSetWorkArea = function (e, t, a, r, i, n) {
  Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    this.CloseEdit();
  var o = 100,
    s = this.GetObjectPtr(this.theSEDSessionBlockID, !0),
    l = {
      x: a * o,
      y: r * o
    };
  this.UpdateEdgeLayers([], s.dim, l),
    s.dim.x = a * o,
    s.dim.y = r * o;
  var S = this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto;
  i ? (
    this.theContentHeader.flags = Utils2.SetFlag(
      this.theContentHeader.flags,
      ConstantData.ContentHeaderFlags.CT_DA_Pages,
      !1
    ),
    this.theContentHeader.flags = Utils2.SetFlag(
      this.theContentHeader.flags,
      ConstantData.ContentHeaderFlags.CT_DA_NoAuto,
      !n
    ),
    this.theContentHeader.MaxWorkDim.x = s.dim.x - 2 * ConstantData.Defines.SED_EdgeSlop,
    this.theContentHeader.MaxWorkDim.y = s.dim.y - 2 * ConstantData.Defines.SED_EdgeSlop,
    this.theContentHeader.Page.minsize.x = s.dim.x,
    this.theContentHeader.Page.minsize.y = s.dim.y
  ) : (
    this.theContentHeader.flags = Utils2.SetFlag(
      this.theContentHeader.flags,
      ConstantData.ContentHeaderFlags.CT_DA_Pages,
      !0
    ),
    this.theContentHeader.flags = Utils2.SetFlag(
      this.theContentHeader.flags,
      ConstantData.ContentHeaderFlags.CT_DA_NoAuto,
      !n
    ),
    n ? (
      this.theContentHeader.MaxWorkDim.x = ConstantData.Defines.MaxWorkDimX,
      this.theContentHeader.MaxWorkDim.y = ConstantData.Defines.MaxWorkDimY
    ) : (
      this.theContentHeader.MaxWorkDim.x = s.dim.x - 2 * ConstantData.Defines.SED_EdgeSlop,
      this.theContentHeader.MaxWorkDim.y = s.dim.y - 2 * ConstantData.Defines.SED_EdgeSlop
    )
  );
  var c = this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto;
  if (this.ResizeSVGDocument(), c != S) {
    this.RenderAllSVGObjects();
    var u,
      p,
      d,
      D,
      g = GlobalData.optManager.ActiveVisibleZList(),
      h = g.length;
    for (u = 0; u < h; u++) D = g[u],
      (d = (p = this.GetObjectPtr(D, !1)).GetTable(!1)) ? GlobalData.optManager.Table_Format(p, d, p.TextGrow, !1) : p.DataID >= 0 &&
        GlobalData.optManager.TextResizeCommon(D, !1, !0)
  }
  if (Collab.AllowMessage()) {
    var m = {
      thePagesAcross: e,
      thePagesDown: t,
      theInchesAcross: a,
      theInchesDown: r,
      theFixImageSizeInInches: i,
      theAutoGrow: n
    };
    Collab.BuildMessage(ConstantData.CollabMessages.SetWorkArea, m, !1)
  }
  this.CompleteOperation(null)
}

ListManager.LM.prototypeResetDrawingDimensions = function (e, t) {
  var a = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0),
    r = {
      x: e,
      y: t
    };
  this.UpdateEdgeLayers([], a.dim, r),
    a.dim.x = r.x,
    a.dim.y = r.y,
    this.ResizeSVGDocument()
}

ListManager.LM.prototypeGetFractionStringGranularity = function (e) {

  return GlobalData.docHandler.rulerSettings.fractionaldenominator >= 1 ? 1 / GlobalData.docHandler.rulerSettings.fractionaldenominator : GlobalData.docHandler.rulerSettings.majorScale <= 1 ? 1 / 16 : GlobalData.docHandler.rulerSettings.majorScale <= 2 ? 1 / 8 : GlobalData.docHandler.rulerSettings.majorScale <= 4 ? 1 / 4 : GlobalData.docHandler.rulerSettings.majorScale <= 8 ? 0.5 : 1
},
  ,
  ListManager.LM.prototype.NumberIsFloat = function (e, t) {
    var a,
      r,
      i = '9'.charCodeAt(0),
      n = '0'.charCodeAt(0),
      o = '.'.charCodeAt(0),
      s = '-'.charCodeAt(0);
    for (e = e.trim(), a = 0; a < e.length; a++) if (!((r = e.charCodeAt(a)) <= i && r >= n || r == o || t && r === s)) return !1;
    return !0
  }

ListManager.LM.prototypeConvertToFeet = function (e) {

  var t = '',
    a = '',
    r = '',
    i = 0,
    n = 0,
    o = [],
    s = 1;
  return (o = (e = e.trim()).split(' '))[o.length - 1].indexOf('/') >= 0 ? (
    t = o[o.length - 1],
    o.length >= 2 &&
    '\'' == (a = o[o.length - 2]).substr(a.length - 1, 1) &&
    (r = o[o.length - 2], a = ''),
    o.length >= 3 &&
    (r = o[o.length - 3])
  ) : 2 == o.length ? (r = o[0], a = o[1]) : '"' == o[0].charAt(o[0].length - 1) ? a = o[0] : r = o[0],
    '\'' == r.charAt(r.length - 1) &&
    (r = r.substring(0, r.length - 1)),
    '"' == a.charAt(a.length - 1) &&
    (a = a.substring(0, a.length - 1)),
    '"' == t.charAt(t.length - 1) &&
    (t = t.substring(0, t.length - 1)),
    r.length > 0 &&
    (i = parseFloat(r)),
    a.length > 0 &&
    (n = parseFloat(a)),
    i < 0 &&
    (i = - i, s = - 1),
    t.length > 0 &&
    (o = t.split('/'), n += parseInt(o[0], 10) / parseInt(o[1], 10)),
    (i += n / 12) * s
}

ListManager.LM.prototypeUnitsToCoord = function (e, t) {

  GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  var a = this.GetToUnits();
  return e += t * GlobalData.docHandler.rulerSettings.majorScale,
    e /= a
},



  ListManager.LM.prototype.GetDimensionLengthFromString = function (e, t, a) {

    var r = 0,
      i = 0;
    if (0 === e.length) return 0;
    if (
      GlobalData.docHandler.rulerSettings.useInches &&
      GlobalData.docHandler.rulerSettings.units == Resources.RulerUnits.SED_Feet &&
      !t
    ) {
      if ((r = this.ConvertToFeet(e)) < 0 && !a) return !1
    } else {
      if (!this.NumberIsFloat(e, a)) return 1;
      r = parseFloat(e)
    }
    return (
      i = GlobalData.docHandler.rulerSettings.showpixels ? r : this.UnitsToCoord(r, 0)
    ) > 400000 &&
      (i = - 1),
      i
  }

ListManager.LM.prototypeIsRectangularPolygon = function (e) {

  var t,
    a,
    r,
    i;
  if (5 != e.length) return !1;
  for (t = 1; t < e.length - 1; t++) if (
    a = Utils1.CalcAngleFromPoints(e[t], e[t - 1]),
    r = Utils1.CalcAngleFromPoints(e[t], e[t + 1]),
    a += i = 180 - a,
    (r += i) >= 360 &&
    (r -= 360),
    r < 0 &&
    (r += 360),
    !(Math.abs(Math.abs(a - r) - 90) < 1 || Math.abs(Math.abs(a - r) - 270) < 1)
  ) return !1;
  return !0
},
  ListManager.






    ListManager.LM.prototype.GetAngleSmallestDiff = function (e, t) {
      var a,
        r;
      return e < 0 &&
        (e += 360),
        t < 0 &&
        (t += 360),
        e %= 360,
        t %= 360,
        r = 360 - (a = Math.abs(t - e)),
        Math.min(a, r)
    }




ListManager.LM.prototypeUpdateAllDimensionLines = function (e) {
  var t,
    a,
    r = GlobalData.optManager.ActiveVisibleZList(),
    i = null,
    n = null;
  for (t = r.length, a = 0; a < t; a++) (i = GlobalData.optManager.GetObjectPtr(r[a], !1)) &&
    (
      n = GlobalData.optManager.svgObjectLayer.GetElementByID(i.BlockID),
      i.UpdateDimensionLines(n)
    );
  e &&
    GlobalData.optManager.CompleteOperation()
},

  ListManager.LM.prototype.SD_ScaleObjectsToNewScale = function (e) {
    var t,
      a,
      r,
      i,
      n,
      o,
      s,
      l,
      S,
      c = GlobalData.optManager.ZList(),
      u = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1);
    S = u.nlayers;
    var p = [];
    for (t = 0; t < S; t++) if (
      t !== u.activelayer &&
      u.layers[t].flags & ConstantData.LayerFlags.SDLF_UseEdges
    ) {
      p = p.concat(u.layers[t].zList);
      break
    }
    for (a = c.length, t = 0; t < a; t++) if (
      r = c[t],
      !(p.indexOf(r) >= 0) &&
      (i = GlobalData.optManager.GetObjectPtr(r, !0))
    ) {
      if (
        i.RemoveDimensionLines(this.svgObjectLayer.GetElementByID(r)),
        i.ScaleObject(0, 0, null, null, e, e, !0),
        i.DataID >= 0
      ) {
        for (
          n = (o = GlobalData.optManager.GetObjectPtr(i.DataID, !0).runtimeText.styles).length,
          s = 0;
          s < n;
          ++s
        ) o[s].size *= e;
        (l = i.GetTable(!0)) &&
          this.Table_ScaleTable(i, l, e, e)
      }
      GlobalData.optManager.AddToDirtyList(r)
    }
    GlobalData.optManager.CompleteOperation()
  }

ListManager.LM.prototype.ScaleDrawing = function (e, t) {
  var a = this.GetDrawingScale(t),
    r = this.GetDrawingScale(e),
    n = !1,
    o = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1),
    s = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
  if (r !== a) o.layers[o.activelayer].flags & ConstantData.LayerFlags.SDLF_UseEdges &&
    o.activelayer > 0 &&
    GlobalData.optManager.MakeLayerActiveByIndex(0),
    this.SD_ScaleObjectsToNewScale(r / a),
    n = !0,
    s.def.style.Line.Thickness = 1,
    gBusinessController.StopAddingWalls(null, !0),
    GlobalData.docHandler.MaintainView();
  else {
    var l = GlobalData.optManager.ZList();
    for (i = 0; i < l.length; i++) obj = GlobalData.optManager.GetObjectPtr(l[i], !0),
      0 !== obj.Dimensions &&
      GlobalData.optManager.AddToDirtyList(l[i]);
    GlobalData.optManager.RenderDirtySVGObjects(),
      GlobalData.optManager.PreserveUndoState(!1)
  }
  return n
}

ListManager.LM.prototypeGetDocumentName = function () {
  if (null != ConstantData.DocumentContext.CloudFileMetadata) {
    var e = ConstantData.DocumentContext.CloudFileMetadata.Name;
    return e = null != e &&
      e.toLowerCase().indexOf('.sdr') == e.length - 4 ? e.substring(0, e.length - 4) : e
  }
}

ListManager.LM.prototypeExportString = function (e, t) {
  if (t = t || 'debug.txt', e && e.length) {
    var a = new Blob([e], {
      type: 'text/plain'
    });
    a &&
      SDUI.Commands.MainController.ExportController.TriggerDownload(a, t, !1, !0)
  }
}

ListManager.LM.prototypeShowExpandedView = function (e, t) {
  var a = this.GetObjectPtr(e, !1);
  a &&
    (
      GlobalData.optManager.ActiveExpandedView = a,
      SDUI.Commands.MainController.ShowDropdown(
        Resources.Controls.Dropdowns.ExpandedViewContainer.Id,
        t.gesture.center.clientX,
        t.gesture.center.clientY
      )
    )
}

ListManager.LM.prototypeCreateD3Symbol = function (e) {
  var t = {
    Frame: {
      x: 100,
      y: 100,
      width: ConstantData.Defines.Shape_Width,
      height: ConstantData.Defines.Shape_Height
    },
    TextGrow: ConstantData.TextGrowBehavior.VERTICAL,
    d3Settings: e
  };
  if (
    e &&
    e.moduleID &&
    e.renderSettings &&
    e.renderSettings.width &&
    e.renderSettings.height
  ) {
    var a = e.renderSettings.width.value ||
      ConstantData.Defines.Shape_Width,
      r = e.renderSettings.height.value ||
        ConstantData.Defines.Shape_Height,
      i = SDUI.Utils.GetSymbolCode(e.moduleID);
    if (i && i.CalcSizeFromSettings) {
      var n = i.CalcSizeFromSettings(e.renderSettings);
      a = n.width,
        r = n.height,
        e.renderSettings.width.value = a,
        e.renderSettings.height.value = r
    }
    t.Frame.width = a,
      t.Frame.height = r
  }
  var o = function (e) {
    var t = document.createElement('canvas').getContext('2d');
    return t.fillStyle = e,
      t.fillStyle
  },
    s = e ? e.renderSettings : null,
    l = s &&
      s.fillColor ? s.fillColor.value : null,
    S = s &&
      s.strokeColor ? s.strokeColor.value : null,
    c = s &&
      s.strokeWidth ? s.strokeWidth.value : - 1,
    u = s &&
      s.textColor ? s.textColor.value : null,
    p = new ListManager.D3Symbol(t);
  id = this.AddNewObject(p, !0, !0),
    obj = this.GetObjectPtr(id, !0),
    obj &&
    obj.StyleRecord &&
    (
      l &&
      (
        'none' == l ? obj.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT : (
          obj.StyleRecord.Fill.Paint.Color = o(l),
          obj.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
        )
      ),
      S &&
      (
        'none' == S ? obj.StyleRecord.Line.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT : (
          obj.StyleRecord.Line.Paint.Color = o(S),
          obj.StyleRecord.Line.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
        )
      ),
      c >= 0 &&
      (obj.StyleRecord.Line.Thickness = c),
      u &&
      (obj.StyleRecord.Text.Paint.Color = o(u)),
      GlobalData.optManager.AddToDirtyList(obj.BlockID),
      GlobalData.optManager.CompleteOperation()
    )
}

ListManager.LM.prototypeD3_GetDefaultParams = function (e) {
  var t = ListManager.D3Symbol.DefaultD3Settings();
  t.moduleID = e;
  var a = SDUI.Utils.GetSymbolCode(t.moduleID);
  if (a && a.GetRenderParams) {
    var r = a.GetRenderParams();
    if (t.renderSettings = r, a.GetPublicAttributes) {
      var i = a.GetPublicAttributes();
      t.publicAttributes = i
    }
  }
  return t
}

ListManager.LM.prototypeD3_UpdateParamSize = function (e, t, a) {
  var r = SDUI.Utils.GetSymbolCode(e.moduleID);
  if (r && r._baseElem) {
    var i = r._baseElem;
    i &&
      e.renderSettings[i] &&
      e.renderSettings.scalingBasis &&
      (
        e.renderSettings.scalingBasis.value = e.renderSettings[i].value
      )
  }
  if (r && r.CalcSizeFromSettings) {
    e.renderSettings.width.value = t,
      e.renderSettings.height.value = a;
    var n = r.CalcSizeFromSettings(e.renderSettings);
    e.renderSettings.width.value = n.width,
      e.renderSettings.height.value = n.height
  }
}

ListManager.LM.prototypeD3_UpdateGraphSize = function (e, t, a) {
  var r = SDUI.Utils.GetSymbolCode(e.moduleID);
  r &&
    r.ResizeSettings &&
    r.ResizeSettings(e.renderSettings, t, a)
}

ListManager.LM.prototypeDontAllowInsertD3 = function () {
  var e = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1);
  switch (e.layers[e.activelayer].layertype) {
    case ConstantData.LayerTypes.SD_LAYERT_GANTT:
    case ConstantData.LayerTypes.SD_LAYERT_MINDMAP:
      return Utils2.Alert(Resources.Strings.NoInsertGraph, null),
        !0
  }
  return !1
}

ListManager.LM.prototypeAddGaugeToShape = function (e, t, a) {
  var r = Utils1.DeepCopy(e);
  r.d3Settings = {
    RenderSettings: {
    }
  };
  var i,
    n,
    o,
    s,
    l,
    S = [],
    c = e.Frame.width,
    u = e.Frame.height,
    p = 'noUnits',
    d = 'unitLabel',
    D = VS.Gauge_Types,
    g = '#e00d1e',
    h = '#ff7419',
    m = '#ffba07',
    C = '#009543',
    y = '#416bcf',
    f = '#dadada',
    L = '#aaaaaa',
    I = '#444444',
    T = '#FFFFFF',
    b = '444444',
    M = function (e) {
      var t,
        a,
        i,
        n,
        o = r.d3Settings.renderSettings;
      for (t = e.length, a = 0; a < t; a++) i = e[a].Name,
        n = e[a].Value,
        null != o[i] &&
        (o[i].value = n, o[i].dataMap = null, i === d && o[p] && (o[p].value = !1))
    };
  switch (a.GaugeType) {
    case D.LinearDetailHorizontal:
    case D.LinearDetailRampHorizontal:
    case D.LinearSimpleHorizontal:
    case D.LinearSimpleRampHorizontal:
    case D.LinearRangeHorizontal:
    case D.LinearRangeRampHorizontal:
    case D.LinearDetailVertical:
    case D.LinearDetailRampVertical:
    case D.LinearSimpleVertical:
    case D.LinearSimpleRampVertical:
    case D.LinearRangeVertical:
    case D.LinearRangeRampVertical:
      !function (e) {
        var a,
          i = [];
        switch (
        r.d3Settings.moduleID = 'LinearGauge',
        r.d3Settings = GlobalData.optManager.D3_GetDefaultParams(r.d3Settings.moduleID),
        i.push({
          Name: 'noUnits',
          Value: !1
        }, {
          Name: 'unitFontSize',
          Value: 34
        }),
        i.push({
          Name: 'unitPosition',
          Value: 'bottom'
        }),
        e
        ) {
          case D.LinearSimpleHorizontal:
          case D.LinearSimpleVertical:
            null == t.FillColor &&
              (r.StyleRecord.Fill.Paint.Color = f),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 0),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              i.push({
                Name: 'tickLocation',
                Value: 'inside.right'
              }, {
                Name: 'indicatorType',
                Value: 'solid'
              }, {
                Name: 'barWidth',
                Value: 40
              }, {
                Name: 'indicatorColor',
                Value: y
              }, {
                Name: 'majTickMax',
                Value: 0
              }),
              M(i);
            break;
          case D.LinearRangeHorizontal:
          case D.LinearRangeVertical:
            null == t.FillColor &&
              (r.StyleRecord.Fill.Paint.Color = f),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 0),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              i.push({
                Name: 'tickLocation',
                Value: 'inside.right'
              }, {
                Name: 'indicatorType',
                Value: 'line'
              }, {
                Name: 'barWidth',
                Value: 40
              }, {
                Name: 'rangeIndicators',
                Value: '0,25,' + C + ';25,50,' + m + ';50,75,' + h + ';75,100,' + g
              }, {
                Name: 'indicatorColor',
                Value: I
              }, {
                Name: 'majTickMax',
                Value: 0
              }),
              M(i);
            break;
          case D.LinearRangeRampHorizontal:
          case D.LinearRangeRampVertical:
            null == t.FillColor &&
              (
                r.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT
              ),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 0),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              i.push({
                Name: 'tickLocation',
                Value: 'outside.right'
              }, {
                Name: 'labelLocation',
                Value: 'right'
              }, {
                Name: 'labelFontSize',
                Value: 20
              }, {
                Name: 'indicatorType',
                Value: 'line'
              }, {
                Name: 'barWidth',
                Value: 50
              }, {
                Name: 'indicatorColor',
                Value: I
              }, {
                Name: 'majTickColor',
                Value: b
              }, {
                Name: 'majTickMax',
                Value: 1
              }, {
                Name: 'minTickMax',
                Value: 1
              }, {
                Name: 'majTickLen',
                Value: 0
              }, {
                Name: 'minTickLen',
                Value: 0
              }, {
                Name: 'tickLabelFreq',
                Value: 'startend'
              }),
              i.push({
                Name: 'rangeIndicators',
                Value: '0,25,' + C + ';25,50,' + m + ';50,75,' + h + ';75,100,' + g
              }, {
                Name: 'rangeWidthScale',
                Value: 'ascending'
              }),
              M(i);
            break;
          case D.LinearSimpleRampHorizontal:
          case D.LinearSimpleRampVertical:
            null == t.FillColor &&
              (
                r.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT
              ),
              null == t.LineColor &&
              (r.StyleRecord.Line.Paint.Color = L),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 0),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              i.push({
                Name: 'tickLocation',
                Value: 'outside.right'
              }, {
                Name: 'labelLocation',
                Value: 'right'
              }, {
                Name: 'labelFontSize',
                Value: 20
              }, {
                Name: 'indicatorType',
                Value: 'solid'
              }, {
                Name: 'barWidth',
                Value: 50
              }, {
                Name: 'indicatorColor',
                Value: y
              }, {
                Name: 'majTickColor',
                Value: b
              }, {
                Name: 'majTickMax',
                Value: 1
              }, {
                Name: 'minTickMax',
                Value: 1
              }, {
                Name: 'majTickLen',
                Value: 0
              }, {
                Name: 'minTickLen',
                Value: 0
              }, {
                Name: 'tickLabelFreq',
                Value: 'startend'
              }),
              i.push({
                Name: 'rangeIndicators',
                Value: '0,100,' + f
              }, {
                Name: 'rangeWidthScale',
                Value: 'ascending'
              }),
              M(i);
            break;
          case D.LinearDetailRampHorizontal:
          case D.LinearDetailRampVertical:
            null == t.FillColor &&
              (
                r.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT
              ),
              null == t.LineColor &&
              (r.StyleRecord.Line.Paint.Color = L),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 0),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              i.push({
                Name: 'tickLocation',
                Value: 'outside.right'
              }, {
                Name: 'labelLocation',
                Value: 'right'
              }, {
                Name: 'indicatorType',
                Value: 'arrowOut'
              }, {
                Name: 'barWidth',
                Value: 50
              }, {
                Name: 'labelFontSize',
                Value: 11
              }, {
                Name: 'majTickLen',
                Value: 11
              }, {
                Name: 'indicatorColor',
                Value: g
              }),
              i.push({
                Name: 'rangeIndicators',
                Value: '0,100,' + f
              }, {
                Name: 'rangeWidthScale',
                Value: 'ascending'
              }),
              M(i);
            break;
          case D.LinearDetailHorizontal:
          case D.LinearDetailVertical:
          default:
            null == t.FillColor &&
              (
                r.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT
              ),
              null == t.LineColor &&
              (r.StyleRecord.Line.Paint.Color = L),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 0),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              i.push({
                Name: 'tickLocation',
                Value: 'inside.right'
              }, {
                Name: 'indicatorType',
                Value: 'arrowOut'
              }, {
                Name: 'barWidth',
                Value: 12.25
              }, {
                Name: 'labelFontSize',
                Value: 12
              }, {
                Name: 'majTickLen',
                Value: 11
              }, {
                Name: 'indicatorColor',
                Value: g
              }),
              M(i)
        }
        switch (e) {
          case D.LinearDetailVertical:
          case D.LinearDetailRampVertical:
          case D.LinearSimpleVertical:
          case D.LinearSimpleRampVertical:
          case D.LinearRangeVertical:
          case D.LinearRangeRampVertical:
            i.push({
              Name: 'orientation',
              Value: 'vert'
            }, {
              Name: 'unitPosition',
              Value: 'right'
            }),
              M(i)
        }
        a = Math.max(c, u, 343),
          'vert' == r.d3Settings.renderSettings.orientation.value ? u = a : c = a
      }(a.GaugeType);
      break;
    case D.RadialSimpleLeft:
    case D.RadialSimpleTop:
    case D.RadialSimpleRight:
    case D.RadialSimpleBottom:
    case D.RadialSimpleFull:
    default:
      !function (e) {
        var a,
          i = [];
        switch (
        r.d3Settings.moduleID = 'RadialGauge',
        r.d3Settings = GlobalData.optManager.D3_GetDefaultParams(r.d3Settings.moduleID),
        e
        ) {
          case D.RadialSimpleFull:
            i.push({
              Name: 'filledRange',
              Value: !0
            }, {
              Name: 'minAngle',
              Value: 0
            }, {
              Name: 'maxAngle',
              Value: 360
            }, {
              Name: 'minTickMax',
              Value: 0
            }, {
              Name: 'majTickLen',
              Value: 0
            }, {
              Name: 'minTickLen',
              Value: 0
            }, {
              Name: 'majTickMax',
              Value: 0
            }, {
              Name: 'centerRadius',
              Value: 50
            }, {
              Name: 'indicatorColor',
              Value: y
            }, {
              Name: 'hollowCenter',
              Value: !0
            }, {
              Name: 'noUnits',
              Value: !1
            }, {
              Name: 'unitFontSize',
              Value: 34
            }),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 0),
              null == t.FillColor &&
              (r.StyleRecord.Fill.Paint.Color = f),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              M(i);
            break;
          case D.RadialSimpleTop:
          case D.RadialSimpleLeft:
          case D.RadialSimpleRight:
          case D.RadialSimpleBottom:
            switch (
            i.push({
              Name: 'filledRange',
              Value: !0
            }, {
              Name: 'minTickMax',
              Value: 0
            }, {
              Name: 'majTickLen',
              Value: 0
            }, {
              Name: 'minTickLen',
              Value: 0
            }, {
              Name: 'majTickMax',
              Value: 0
            }, {
              Name: 'centerRadius',
              Value: 50
            }, {
              Name: 'indicatorColor',
              Value: y
            }, {
              Name: 'hollowCenter',
              Value: !0
            }, {
              Name: 'noUnits',
              Value: !1
            }, {
              Name: 'unitFontSize',
              Value: 34
            }),
            null == t.LineThick &&
            (r.StyleRecord.Line.Thickness = 0),
            null == t.FillColor &&
            (r.StyleRecord.Fill.Paint.Color = f),
            null == t.TextColor &&
            (r.StyleRecord.Text.Paint.Color = I),
            e
            ) {
              case D.RadialSimpleTop:
                i.push({
                  Name: 'partialArcType',
                  Value: 'top'
                }, {
                  Name: 'minAngle',
                  Value: 90
                }, {
                  Name: 'maxAngle',
                  Value: 270
                }, {
                  Name: 'unitPosition',
                  Value: 'bottom'
                });
                break;
              case D.RadialSimpleLeft:
                i.push({
                  Name: 'partialArcType',
                  Value: 'left'
                }, {
                  Name: 'minAngle',
                  Value: 0
                }, {
                  Name: 'maxAngle',
                  Value: 180
                });
                break;
              case D.RadialSimpleRight:
                i.push({
                  Name: 'partialArcType',
                  Value: 'right'
                }, {
                  Name: 'minAngle',
                  Value: 180
                }, {
                  Name: 'maxAngle',
                  Value: 360
                });
                break;
              case D.RadialSimpleBottom:
                i.push({
                  Name: 'partialArcType',
                  Value: 'bottom'
                }, {
                  Name: 'minAngle',
                  Value: 270
                }, {
                  Name: 'maxAngle',
                  Value: 90
                })
            }
            M(i);
            break;
          case D.RadialRangeFull:
          case D.RadialRangeTop:
          case D.RadialRangeLeft:
          case D.RadialRangeBottom:
          case D.RadialRangeRight:
            switch (
            i.push({
              Name: 'centerColor',
              Value: f
            }, {
              Name: 'indicatorColor',
              Value: I
            }, {
              Name: 'centerRadius',
              Value: 10
            }, {
              Name: 'labelFontSize',
              Value: 10
            }, {
              Name: 'majTickMax',
              Value: 2
            }, {
              Name: 'majTickLen',
              Value: 20
            }, {
              Name: 'majTickColor',
              Value: f
            }, {
              Name: 'minTickMax',
              Value: 10
            }, {
              Name: 'minTickLen',
              Value: 20
            }, {
              Name: 'minTickColor',
              Value: f
            }, {
              Name: 'rangeIndicators',
              Value: '0,25,' + C + ';25,50,' + m + ';50,75,' + h + ';75,100,' + g
            }, {
              Name: 'noUnits',
              Value: !1
            }, {
              Name: 'unitFontSize',
              Value: 34
            }),
            null == t.LineColor &&
            (r.StyleRecord.Line.Paint.Color = f),
            null == t.LineThick &&
            (r.StyleRecord.Line.Thickness = 0),
            null == t.FillColor &&
            (r.StyleRecord.Fill.Paint.Color = T),
            null == t.TextColor &&
            (r.StyleRecord.Text.Paint.Color = I),
            e
            ) {
              case D.RadialRangeTop:
                i.push({
                  Name: 'partialArcType',
                  Value: 'top'
                }, {
                  Name: 'minAngle',
                  Value: 90
                }, {
                  Name: 'maxAngle',
                  Value: 270
                }, {
                  Name: 'unitPosition',
                  Value: 'bottom'
                });
                break;
              case D.RadialRangeLeft:
                i.push({
                  Name: 'partialArcType',
                  Value: 'left'
                }, {
                  Name: 'minAngle',
                  Value: 0
                }, {
                  Name: 'maxAngle',
                  Value: 180
                });
                break;
              case D.RadialRangeRight:
                i.push({
                  Name: 'partialArcType',
                  Value: 'right'
                }, {
                  Name: 'minAngle',
                  Value: 180
                }, {
                  Name: 'maxAngle',
                  Value: 360
                });
                break;
              case D.RadialRangeBottom:
                i.push({
                  Name: 'partialArcType',
                  Value: 'bottom'
                }, {
                  Name: 'minAngle',
                  Value: 270
                }, {
                  Name: 'maxAngle',
                  Value: 90
                });
                break;
              case D.RadialRangeFull:
                null == t.LineThick &&
                  (r.StyleRecord.Line.Thickness = 10)
            }
            M(i);
            break;
          case D.RadialDetailTop:
          default:
            null == t.FillColor &&
              (r.StyleRecord.Fill.Paint.Color = T),
              null == t.LineColor &&
              (r.StyleRecord.Line.Paint.Color = L),
              null == t.LineThick &&
              (r.StyleRecord.Line.Thickness = 2),
              null == t.TextColor &&
              (r.StyleRecord.Text.Paint.Color = I),
              i.push({
                Name: 'centerColor',
                Value: g
              }, {
                Name: 'indicatorColor',
                Value: g
              }, {
                Name: 'noUnits',
                Value: !1
              }, {
                Name: 'unitFontSize',
                Value: 34
              }),
              e === D.RadialDetailTop &&
              i.push({
                Name: 'partialArcType',
                Value: 'top'
              }, {
                Name: 'unitPosition',
                Value: 'bottom'
              }),
              M(i)
        }
        a = Math.max(c, u, 200),
          r.d3Settings.renderSettings.radius.value = a / 2,
          c = u = a
      }(a.GaugeType)
  }
  if (a.ShowDataTable) {
    var P = a.GaugeType;
    if (
      (n = ListManager.SDData.GetFieldedDataTableId(P)) < 0 &&
      (
        n = ListManager.SDData.NewFieldedDataTable(P),
        ListManager.SDData.SetFieldedDataSetting(
          n,
          ListManager.SDData.FieldedDataTableSettings.SOURCETYPE,
          ListManager.SDData.FieldedDataSourceTypes.AUTO
        ),
        n >= 0
      )
    ) {
      var R = r.d3Settings.renderSettings,
        A = r.d3Settings.publicAttributes;
      for (l = A.length, s = 0; s < l; s++) null != R[A[s]].dataMap &&
        ListManager.SDData.FieldedDataAddColumn(n, R[A[s]].dataMap, R[A[s]].type)
    }
    for (
      i = ListManager.SDData.FieldedDataAddRecord(n),
      s = 0;
      s < l;
      s++
    ) null != R[A[s]].dataMap &&
      null != (
        o = ListManager.SDData.FieldedDataGetFieldID(n, R[A[s]].dataMap)
      ) &&
      ListManager.SDData.FieldedDataSetFieldValue(n, i, o, R[A[s]].value);
    null != a.Settings &&
      function (e) {
        var t,
          a,
          s,
          l,
          S = r.d3Settings.renderSettings;
        for (t = e.length, a = 0; a < t; a++) s = S[e[a].Name].dataMap,
          e[a].Name === d &&
          S[p] &&
          (S[p].value = !1),
          l = e[a].Value,
          s &&
          null != (o = ListManager.SDData.FieldedDataGetFieldID(n, s)) &&
          ListManager.SDData.FieldedDataSetFieldValue(n, i, o, l),
          null != S[s = e[a].Name] &&
          (S[s].value = l)
      }(a.Settings)
  } else null != a.Settings &&
    M(a.Settings);
  GlobalData.optManager.D3_UpdateParamSize(r.d3Settings, c, u),
    c = r.d3Settings.renderSettings.width.value,
    u = r.d3Settings.renderSettings.height.value,
    e.Frame.width == c &&
    e.Frame.height == u ||
    (e.SetSize(c, u, - 1), r.Frame.width = c, r.Frame.height = u);
  var _ = new ListManager.D3Symbol(r);
  GlobalData.optManager.ReplaceSymbol(_, e.BlockID, S, !1, !1),
    a.ShowDataTable &&
    _.SetFieldDataRecord(n, i, !1),
    GlobalData.optManager.DeleteObjects(S)
},



  ListManager.LM.prototype.AddGraphToShape = function (e, t, a) {
    var r = Utils1.DeepCopy(e);
    r.d3Settings = {
      RenderSettings: {
      }
    };
    var i = [],
      n = e.Frame.width,
      o = e.Frame.height,
      s = VS.Graph_Types,
      l = 300,
      S = - 1,
      c = - 1,
      u = function (e) {
        var t,
          a,
          i,
          n,
          o = r.d3Settings.renderSettings;
        for (t = e.length, a = 0; a < t; a++) i = e[a].Name,
          n = e[a].Value,
          null != o[i] &&
          (o[i].value = n, o[i].dataMap = null)
      };
    switch (a.GraphType) {
      case s.LineChart:
      case s.AreaChart:
        !function (e) {
          var t = [];
          switch (
          r.d3Settings.moduleID = 'LineChart',
          r.d3Settings = GlobalData.optManager.D3_GetDefaultParams(r.d3Settings.moduleID),
          t.push({
            Name: VS.LineChart_Properties.LegendPos,
            Value: 'topright'
          }),
          t.push({
            Name: VS.LineChart_Properties.TitlePos,
            Value: 'topleft'
          }),
          e
          ) {
            case s.LineChart:
              u(t);
              break;
            case s.AreaChart:
              t.push({
                Name: VS.LineChart_Properties.DisplayType,
                Value: 'area'
              }),
                u(t)
          }
        }(a.GraphType);
        break;
      case s.PieChart:
      case s.DonutChart:
        !function (e) {
          var t = [];
          switch (
          r.d3Settings.moduleID = 'PieChart',
          r.d3Settings = GlobalData.optManager.D3_GetDefaultParams(r.d3Settings.moduleID),
          null == (c = a.DataTableRowID) &&
          (c = 1),
          l = 400,
          t.push({
            Name: VS.PieChart_Properties.LegendPos,
            Value: 'topright'
          }),
          t.push({
            Name: VS.PieChart_Properties.TitlePos,
            Value: 'topleft'
          }),
          t.push({
            Name: VS.PieChart_Properties.LabelPos,
            Value: 'outside'
          }),
          t.push({
            Name: VS.PieChart_Properties.LabelFormat,
            Value: 'percent'
          }),
          e
          ) {
            case s.PieChart:
              break;
            case s.DonutChart:
              var i = r.d3Settings.renderSettings[VS.PieChart_Properties.ChartRadius].value / 2;
              t.push({
                Name: VS.PieChart_Properties.InnerRadius,
                Value: i
              })
          }
          u(t)
        }(a.GraphType);
        break;
      case s.BarChart:
      case s.BarChartStacked:
      case s.BarChartHorizontal:
      case s.BarChartStackedHorizontal:
        !function (e) {
          var t = [];
          switch (
          r.d3Settings.moduleID = 'BarChart',
          r.d3Settings = GlobalData.optManager.D3_GetDefaultParams(r.d3Settings.moduleID),
          t.push({
            Name: VS.BarChart_Properties.LegendPos,
            Value: 'topright'
          }),
          t.push({
            Name: VS.BarChart_Properties.TitlePos,
            Value: 'topleft'
          }),
          e
          ) {
            case s.BarChart:
              break;
            case s.BarChartStacked:
              t.push({
                Name: VS.BarChart_Properties.BarGroupType,
                Value: 'stack'
              });
              break;
            case s.BarChartHorizontal:
              t.push({
                Name: VS.BarChart_Properties.BarOrient,
                Value: 'horiz'
              });
              break;
            case s.BarChartStackedHorizontal:
              t.push({
                Name: VS.BarChart_Properties.BarOrient,
                Value: 'horiz'
              }),
                t.push({
                  Name: VS.BarChart_Properties.BarGroupType,
                  Value: 'stack'
                })
          }
          u(t)
        }(a.GraphType);
        break;
      case s.SankeyChart:
      case s.SankeyChartLeft:
      case s.SankeyChartRight:
      case s.SankeyChartColored:
        !function (e) {
          var t = [];
          switch (
          r.d3Settings.moduleID = 'SankeyChart',
          r.d3Settings = GlobalData.optManager.D3_GetDefaultParams(r.d3Settings.moduleID),
          t.push({
            Name: VS.SankeyChart_Properties.TitlePos,
            Value: 'topleft'
          }),
          e
          ) {
            case s.SankeyChart:
              t.push({
                Name: VS.SankeyChart_Properties.BlendNodeColorsForLinks,
                Value: !1
              }),
                t.push({
                  Name: VS.SankeyChart_Properties.NodeAlign,
                  Value: 'justify'
                }),
                u(t);
              break;
            case s.SankeyChartColored:
              t.push({
                Name: VS.SankeyChart_Properties.BlendNodeColorsForLinks,
                Value: !0
              }),
                t.push({
                  Name: VS.SankeyChart_Properties.NodeAlign,
                  Value: 'justify'
                }),
                u(t);
              break;
            case s.SankeyChartLeft:
              t.push({
                Name: VS.SankeyChart_Properties.BlendNodeColorsForLinks,
                Value: !1
              }),
                t.push({
                  Name: VS.SankeyChart_Properties.NodeAlign,
                  Value: 'left'
                }),
                u(t);
              break;
            case s.SankeyChartRight:
              t.push({
                Name: VS.SankeyChart_Properties.BlendNodeColorsForLinks,
                Value: !1
              }),
                t.push({
                  Name: VS.SankeyChart_Properties.NodeAlign,
                  Value: 'right'
                }),
                u(t)
          }
        }(a.GraphType)
    }
    null != a.Settings &&
      u(a.Settings),
      n < 400 &&
      (n = 400),
      o < l &&
      (o = l),
      GlobalData.optManager.D3_UpdateGraphSize(r.d3Settings, n, o),
      n = r.d3Settings.renderSettings.width.value,
      o = r.d3Settings.renderSettings.height.value,
      e.Frame.width == n &&
      e.Frame.height == o ||
      (e.SetSize(n, o, - 1), r.Frame.width = n, r.Frame.height = o);
    var p = new ListManager.D3Symbol(r),
      d = - 1;
    if (null != a.DataTableID) (d = SDJS.API.GetDataTableIndex(a.DataTableID)) >= 0 &&
      (
        c >= 0 &&
        null != SDJS.API.DataList[d].RowList[c - 1] &&
        (S = SDJS.API.DataList[d].RowList[c - 1].RowID),
        p.SetFieldDataRecord(SDJS.API.DataList[d].TableID, S)
      );
    else if (null != a.ImportDataTableID) {
      if (d = a.ImportDataTableID, null != a.ImportDataRow) {
        var D = ListManager.SDData.FieldedDataGetRecordList(d);
        D.length > 0 &&
          (S = D[0])
      }
      p.SetFieldDataRecord(d, S)
    }
    GlobalData.optManager.ReplaceSymbol(p, e.BlockID, i, !1, !1),
      GlobalData.optManager.DeleteObjects(i)
  }

ListManager.LM.prototypeInsertGraph = function (e) {
  var t = function (t, a) {
    var r = GlobalData.optManager.GetPastePosition(),
      i = (
        GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
        Utils2.RemoveExtension(a)
      );
    i &&
      i.length > 30 &&
      (i.length = 30);
    var n = {
      Frame: {
        x: r.x,
        y: r.y,
        width: 400,
        height: 300
      },
      TextGrow: ConstantData.TextGrowBehavior.VERTICAL
    },
      o = new ListManager.Rect(n);
    Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit();
    var s = GlobalData.optManager.AddNewObject(o, !0, !0),
      l = [];
    l.push(s);
    var S = GlobalData.optManager.GetObjectPtr(s, !0),
      c = Resources.FindStyle(ConstantData.Defines.D3Style);
    c &&
      (S.StyleRecord = Utils1.DeepCopy(c));
    var u = {
      GraphType: e,
      ImportDataTableID: t
    };
    switch (e) {
      case VS.Graph_Types.PieChart:
      case VS.Graph_Types.DonutChart:
        u.ImportDataRow = 1;
        break;
      default:
        u.Settings = [
          {
            Name: VS.LineChart_Properties.Title,
            Value: i
          }
        ]
    }
    if (
      GlobalData.optManager.AddGraphToShape(S, null, u),
      Collab.AllowMessage()
    ) {
      var p = {};
      p.Graph = Utils1.DeepCopy(u),
        p.attributes = Utils1.DeepCopy(n),
        Collab.IsSecondary() &&
        (p.CreateList = [], p.CreateList.push(s)),
        Collab.BuildMessage(ConstantData.CollabMessages.InsertGraph, p, !1)
    }
    GlobalData.optManager.CompleteOperation(l),
      SDUI.Commands.MainController.Shapes.ReturnToSmartPanelMode('GRAPH')
  };
  if (
    ShowModalCallBack = function () {
      SDUI.Commands.MainController.ImportController.SetImportDataCallBack(t)
    },
    !GlobalData.optManager.DontAllowInsertD3()
  ) {
    var a = Resources.Controls.Modals.ImportData.Id,
      r = Constants.Css_ImportLineBarDataHelperImage;
    switch (e) {
      case VS.Graph_Types.PieChart:
      case VS.Graph_Types.DonutChart:
        r = Constants.Css_ImportPieDataHelperImage;
        break;
      case VS.Graph_Types.SankeyChart:
      case VS.Graph_Types.SankeyChartLeft:
      case VS.Graph_Types.SankeyChartRight:
      case VS.Graph_Types.SankeyChartColored:
        r = Constants.Css_ImportSankeyDataHelperImage
    }
    SDUI.Commands.MainController.DataPanel.SetImportClass(r),
      SDUI.Commands.MainController.DataPanel._importUpdate = !1,
      SDUI.Commands.MainController.ShowModal(a, ShowModalCallBack)
  }
}

ListManager.LM.prototypeIsGraph = function (e) {
  var t = VS.Graph_Types;
  if (
    e.objecttype === ConstantData.ObjectTypes.SD_OBJT_D3SYMBOL &&
    null != e.d3Settings
  ) switch (e.d3Settings.moduleID) {
    case t.LineChart:
    case t.PieChart:
    case t.BarChart:
    case t.SankeyChart:
      return !0
  }
  return !1
}

ListManager.LM.prototypeGetLastTargetShape = function (e) {
  var t,
    a,
    r = GlobalData.optManager.ActiveVisibleZList();
  for (t = r.length - 1; t >= 0; t--) if (a = r[t], e(GlobalData.optManager.GetObjectPtr(a, !1))) return a;
  return - 1
}

ListManager.LM.prototypeEditGraph = function () {
  var e,
    t;
  (e = this.GetTargetSelect()) < 0 &&
    (e = this.GetLastTargetShape(this.IsGraph)) >= 0 &&
    GlobalData.optManager.SetTargetSelect(e, !1),
    e >= 0 &&
      (t = this.GetObjectPtr(e, !1)) &&
      t.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
      this.IsGraph(t) ? SDUI.Commands.MainController.ShowModal(Resources.Controls.Modals.EditGraph.Id, null) : Utils2.Alert(Resources.Strings.NoGraph, null)
}

ListManager.LM.prototypeUpdateGraph = function (e, t, a, r, i, n) {
  var o,
    s = function (n, s) {
      var l = t;
      if ((n = n || o.fieldDataTableID) != o.fieldDataTableID) var S = o.fieldDataTableID;
      if ((a || r) && null !== n) {
        if (o.RemoveFieldData(!0), 'PieChart' === e.moduleID) {
          var c = ListManager.SDData.FieldedDataGetRecordList(n);
          c.length > 0 &&
            (l = c[0])
        }
        a &&
          void 0 !== a.msClose &&
          a.msClose(),
          o.SetFieldDataRecord(n, l)
      }
      o.d3Settings = Utils1.DeepCopy(e),
        o.SetFieldDataRecord(n, l),
        GlobalData.optManager.AddToDirtyList(o.BlockID),
        GlobalData.optManager.RenderDirtySVGObjects();
      var u = GlobalData.optManager.svgObjectLayer.GetElementByID(o.BlockID);
      if (
        o.Resize(u, o.Frame, o),
        GlobalData.optManager.AddToDirtyList(o.BlockID),
        S >= 0 &&
        (
          ListManager.SDData.DeleteFieldedDataTable(S),
          GlobalData.optManager.ClearShapesFieldData(S),
          SDUI.Commands.MainController.DataPanel._curTableID = n,
          SDUI.Commands.MainController.DataPanel.UpdateData(!0)
        ),
        Collab.AllowMessage()
      ) {
        var p = {
          BlockID: o.BlockID,
          tableID: n,
          DataRowID: l
        };
        p.d3Settings = Utils1.DeepCopy(e),
          Collab.BuildMessage(ConstantData.CollabMessages.UpdateGraph, p, !1)
      }
      GlobalData.optManager.CompleteOperation(),
        i &&
        SDUI.Commands.MainController.SmartPanels.SetLeftPanelMode(Resources.LeftPanelMode.LEFTPANELMODE_SMARTPANEL)
    };
  if (n) return o = this.GetObjectPtr(n.Data.BlockID, !0),
    void s(n.Data.tableID);
  Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    tselect = this.GetTargetSelect(),
    tselect >= 0 &&
    (
      o = this.GetObjectPtr(tselect, !0),
      a ||
        r ? function (e, t) {
          if (e) {
            var a = e.name.substring(e.name.lastIndexOf('.') + 1, e.name.length);
            if (a && ('xlsx' == a.toLowerCase() || 'xls' == a.toLowerCase())) return void SDUI.Commands.MainController.ImportController.ConvertXlsxToCsvThenRead(e, a, '', ListManager.ImportTypes.Data, s)
          }
          SDUI.Commands.MainController.DataPanel.ImportData(e, t, '', s)
        }(a, r) : s(null)
    )
}

ListManager.LM.prototypeIsGauge = function (e) {
  var t = VS.Gauge_Types;
  if (
    e.objecttype === ConstantData.ObjectTypes.SD_OBJT_D3SYMBOL &&
    null != e.d3Settings
  ) switch (e.d3Settings.moduleID) {
    case t.RadialDetail:
    case t.LinearDetailHorizontal:
      return !0
  }
  return !1
}

ListManager.LM.prototypeEditGauge = function () {
  var e,
    t;
  (e = this.GetTargetSelect()) < 0 &&
    (e = this.GetLastTargetShape(this.IsGauge)) >= 0 &&
    GlobalData.optManager.SetTargetSelect(e, !1),
    e >= 0 &&
      (t = this.GetObjectPtr(e, !1)) &&
      t.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE &&
      this.IsGauge(t) ? SDUI.Commands.MainController.ShowModal(Resources.Controls.Modals.EditGauge.Id, null) : Utils2.Alert(Resources.Strings.NoGauge, null)
}

ListManager.LM.prototypeInsertGauge = function (e) {
  var t = GlobalData.optManager.GetPastePosition();
  GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  if (!GlobalData.optManager.DontAllowInsertD3()) {
    var a = {
      Frame: {
        x: t.x,
        y: t.y,
        width: 200,
        height: 200
      },
      TextGrow: ConstantData.TextGrowBehavior.HORIZONTAL
    },
      r = new ListManager.Rect(a);
    Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit();
    var i = GlobalData.optManager.AddNewObject(r, !0, !0),
      n = [];
    n.push(i);
    var o = GlobalData.optManager.GetObjectPtr(i, !0),
      s = Resources.FindStyle(ConstantData.Defines.D3Style);
    s &&
      (o.StyleRecord = Utils1.DeepCopy(s));
    var l = {
      ShowDataTable: !0,
      GaugeType: e
    };
    if (
      GlobalData.optManager.AddGaugeToShape(o, {
      }, l),
      Collab.AllowMessage()
    ) {
      var S = {};
      S.Gauge = Utils1.DeepCopy(l),
        S.attributes = Utils1.DeepCopy(a),
        Collab.IsSecondary() &&
        (S.CreateList = [], S.CreateList.push(i)),
        Collab.BuildMessage(ConstantData.CollabMessages.InsertGauge, S, !1)
    }
    GlobalData.optManager.CompleteOperation(n),
      SDUI.Commands.MainController.Shapes.ReturnToSmartPanelMode('GAUGE')
  }
}

ListManager.LM.prototypeUpdateGauge = function (e, t, a, r, i) {
  var n;
  if ((n = i ? i.Data.BlockID : this.GetTargetSelect()) >= 0) {
    if (
      Collab.AllowMessage() &&
      !i &&
      Collab.BeginSecondaryEdit(),
      obj = this.GetObjectPtr(n, !0),
      obj.fieldDataTableID >= 0 &&
      (
        fieldID = ListManager.SDData.FieldedDataGetFieldID(obj.fieldDataTableID, 'minVal'),
        null != fieldID &&
        ListManager.SDData.FieldedDataSetFieldValue(
          obj.fieldDataTableID,
          obj.fieldDataElemID,
          fieldID,
          e.renderSettings.min.value
        ),
        fieldID = ListManager.SDData.FieldedDataGetFieldID(obj.fieldDataTableID, 'curVal'),
        null != fieldID &&
        ListManager.SDData.FieldedDataSetFieldValue(
          obj.fieldDataTableID,
          obj.fieldDataElemID,
          fieldID,
          e.renderSettings.val.value
        ),
        fieldID = ListManager.SDData.FieldedDataGetFieldID(obj.fieldDataTableID, 'maxVal'),
        null != fieldID &&
        ListManager.SDData.FieldedDataSetFieldValue(
          obj.fieldDataTableID,
          obj.fieldDataElemID,
          fieldID,
          e.renderSettings.max.value
        )
      ),
      obj.d3Settings = Utils1.DeepCopy(e),
      obj.StyleRecord = Utils1.DeepCopy(t),
      GlobalData.optManager.AddToDirtyList(n),
      GlobalData.optManager.RenderDirtySVGObjects(),
      obj.Frame.width != a ||
      obj.Frame.height != r
    ) {
      var o = Utils1.DeepCopy(obj.Frame);
      o.width = a,
        o.height = r;
      var s = GlobalData.optManager.svgObjectLayer.GetElementByID(obj.BlockID);
      obj.Resize(s, o, obj)
    }
    if (
      GlobalData.optManager.AddToDirtyList(n),
      Collab.AllowMessage() &&
      !i
    ) {
      var l = {
        BlockID: n,
        shapeWidth: a,
        shapeHeight: r
      };
      l.d3Settings = Utils1.DeepCopy(e),
        l.theStyle = Utils1.DeepCopy(t),
        Collab.BuildMessage(ConstantData.CollabMessages.UpdateGauge, l, !1)
    }
    GlobalData.optManager.CompleteOperation()
  }
}

ListManager.LM.prototypeGetAllContainers = function (e) {
  var t,
    a,
    r = e.length,
    i = [];
  for (t = 0; t < r; t++) (a = GlobalData.optManager.GetObjectPtr(e[t], !1)) &&
    a.moreflags & ConstantData.ObjMoreFlags.SED_MF_Container &&
    i.push(e[t]);
  return i
}

ListManager.LM.prototypeSwimlane_HasTitleRow = function (e) {
  if (e) {
    var t = e.GetTable(!1);
    if (
      t &&
      t.cells[0].celltype === ListManager.Table.CellTypes.SD_CT_SWIMLANE_TITLE
    ) return !0
  }
  return !1
}

ListManager.LM.prototypeInsertFrameContainer = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h = [],
    m = ConstantData.Defines.FrameGap,
    C = null,
    y = null,
    f = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    L = ConstantData.ObjMoreFlags.SED_MF_AutoContainer,
    I = f.def.rrectparam,
    T = [];
  if (r && (L = r.Data.AutoContainer, I = r.Data.shapeparam), null != e) {
    var b = GlobalData.optManager.GetObjectPtr(e, !1);
    b &&
      b.ParentFrameID >= 0 &&
      null == (y = GlobalData.optManager.GetObjectPtr(b.ParentFrameID, !1)) &&
      ((b = GlobalData.optManager.GetObjectPtr(e, !0)).ParentFrameID = - 1),
      null == (g = Business.GetSelectionBusinessManager(e, !1)) &&
      (g = GlobalData.gBusinessManager),
      C = g.GetFrameBusinessName()
  }
  var M,
    P,
    R,
    A,
    _ = GlobalData.optManager.ActiveVisibleZList();
  for (
    s = (n = this.GetObjectPtr(this.theSelectedListBlockID, !1)).length,
    o = 0;
    o < s;
    o++
  ) P = n[o],
    i = this.GetObjectPtr(P, !1),
    null == l ? l = Utils1.DeepCopy(i.r) : Utils2.UnionRect(l, i.r, l),
    h.push(P),
    c = _.indexOf(P),
    y &&
    i.hooks.length &&
    (R = this.GetObjectPtr(i.hooks[0].objid, !1)) &&
    R.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.CONNECTOR &&
    (A = _.indexOf(i.hooks[0].objid)) < c &&
    (c = A, P = i.hooks[0].objid),
    (null == S || c < S) &&
    (S = c, u = P);
  if (s = h.length, !y) for (o = 0; o < s; o++) for (
    P = h[o],
    null == (g = Business.GetSelectionBusinessManager(P, !1)) &&
    (g = GlobalData.gBusinessManager),
    d = (M = g.GetChartObjectList(P)).length,
    p = 0;
    p < d;
    p++
  ) D = M[p],
    h.indexOf(D) < 0 &&
    (i = this.GetObjectPtr(D, !1)) &&
    (
      Utils2.UnionRect(l, i.r, l),
      h.push(D),
      c = _.indexOf(D),
      (null == S || c < S) &&
      (S = c, u = D)
    );
  if (l) {
    if (
      null == C &&
      (C = g.GetFrameBusinessName()),
      Collab.AllowMessage()
    ) {
      Collab.BeginSecondaryEdit();
      var E = {
        BlockID: e,
        group: a,
        AutoContainer: L,
        shapeparam: I
      };
      Collab.IsSecondary() &&
        (E.CreateList = T);
      var w = Collab.BuildMessage(ConstantData.CollabMessages.InsertFrameContainer, E, !0, !0)
    }
    var F = function (e, t, r, n) {
      Utils2.InflateRect(e, m, m);
      var o = {
        Frame: e,
        TextGrow: ConstantData.TextGrowBehavior.VERTICAL,
        TextFlags: ConstantData.TextFlags.SED_TF_None,
        objecttype: t,
        shapeparam: I
      },
        s = new ListManager.Rect(o);
      L &&
        (
          s.moreflags = Utils2.SetFlag(
            s.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_AutoContainer,
            null == y
          )
        ),
        y &&
        (
          s.moreflags = Utils2.SetFlag(
            s.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_Frame_AllowNesting,
            !0
          )
        ),
        a &&
        (
          s.moreflags = Utils2.SetFlag(
            s.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_Frame_Group,
            !0
          )
        );
      var l = GlobalData.optManager.AddNewObject(s, !0, !0);
      return Collab.AddNewBlockToSecondary(l),
        T.push(l),
        (i = GlobalData.optManager.GetObjectPtr(l, !0)).StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
        i.StyleRecord.Fill.Paint.Color = ConstantData.Defines.FrameFillColor,
        i.StyleRecord.Line.Paint.Color = ConstantData.Defines.FrameLineColor,
        i.StyleRecord.Line.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
        i.StyleRecord.Line.Paint.Opacity = 1,
        i.StyleRecord.Line.Thickness = 1,
        i.StyleRecord.Text.Paint.Color = ConstantData.Defines.FrameTextColor,
        i.BusinessName = n,
        i.extraflags = Utils2.SetFlag(i.extraflags, ConstantData.ExtraFlags.SEDE_NoRotate, !0),
        i.moreflags = Utils2.SetFlag(
          i.moreflags,
          ConstantData.ObjMoreFlags.SED_MF_Container,
          !0
        ),
        GlobalData.optManager.PutBehindObject(r, l),
        GlobalData.optManager.AddToDirtyList(l),
        l
    }(l, ConstantData.ObjectTypes.SD_OBJT_FRAME_CONTAINER, u, C);
    if (!r && !Collab.IsProcessingMessage()) {
      var v = [];
      v.push(F),
        GlobalData.optManager.SelectObjects(v, !1, !0)
    }
    t ||
      (
        Collab.AllowMessage() &&
        Collab.SendMessage(w),
        GlobalData.optManager.CompleteOperation()
      )
  }
  return F
}

ListManager.LM.prototypeInsertSwimlane = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l = - 1,
    S = ConstantData.ObjectTypes,
    c = ListManager.Table.CellTypes,
    u = 980,
    p = 730,
    d = ListManager.Table.CellFlags.SDT_F_NoText,
    D = 0,
    g = [];
  i &&
    (D = 270);
  var h = function (e, i, s, l, c) {
    var D,
      g,
      h,
      m,
      C = s,
      y = [],
      f = ConstantData.Defines.FrameTitleHeight,
      L = ConstantData.Defines.FrameTitleWidth;
    null == s &&
      (
        r ? (s = r.Data.nlanes, C = r.Data.nvlanes) : (
          s = ConstantData.DocumentContext.SwimlaneNLanes,
          C = ConstantData.DocumentContext.SwimlaneNVLanes
        )
      );
    var I,
      T = 2,
      b = 2;
    switch (i) {
      case S.SD_OBJT_SWIMLANE_COLS:
        b = s;
        break;
      case S.SD_OBJT_SWIMLANE_ROWS:
        T = s;
        break;
      default:
        T = s + 1,
          b = C + 1;
        var M = Utils1.DeepCopy(e.trect);
        M.width = b * L,
          e.TRectToFrame(M, !0)
    }
    e.InsertNewTable(T, b, i === S.SD_OBJT_SWIMLANE_GRID);
    var P = e.GetTable(!0);
    switch (I = P.cells.length, i) {
      case S.SD_OBJT_SWIMLANE_COLS:
        for (
          D = P.rows[0],
          m = P.rows[1],
          GlobalData.optManager.theActionTable = P,
          dim = GlobalData.optManager.Table_GrowRow(P, 0, f - D.frame.height, !1),
          GlobalData.optManager.theActionTable = null,
          GlobalData.optManager.Table_FixRow(P, 0),
          t > 0 ? (n = b * t, o = b * a) : n = u,
          e.SetSize(n, p, 0),
          e.objecttype === S.SD_OBJT_SWIMLANE_ROWS &&
          c &&
          (c = l),
          h = 0;
          h < D.ncells;
          h++
        ) (g = P.cells[D.start + h]).celltype = ListManager.Table.CellTypes.SDT_CT_SUBCOLHEADER,
          c &&
            c.length ? (
            g.DataID = c[h].DataID,
            g.fill = c[h].HFill,
            P.cells[m.start + h].fill = c[h].LFill
          ) : g.DataID = GlobalData.optManager.CreateTextBlock(e, Resources.Strings.SwimlaneLabel),
          y.push(D.start + h);
        for (h = D.ncells; h < I; h++) (g = P.cells[h]).flags = d,
          g.celltype = ListManager.Table.CellTypes.SDT_CT_ROWREPEATER;
        GlobalData.optManager.Table_ReformatText(e, P, 0, 0, y),
          GlobalData.optManager.Table_BuildFills(e, P, null);
        break;
      case S.SD_OBJT_SWIMLANE_ROWS:
        for (
          GlobalData.optManager.theActionTable = P,
          dim = GlobalData.optManager.Table_GrowColumn(e, P, 0, L - P.cells[0].frame.width, e.TextGrow, !1, !1, !1),
          GlobalData.optManager.theActionTable = null,
          col = P.cols[0],
          GlobalData.optManager.Table_FixColumn(P, 0),
          o = t > 0 ? T * t : p,
          e.SetSize(u, o, 0),
          e.objecttype === S.SD_OBJT_SWIMLANE_COLS &&
          l &&
          (l = c),
          h = 0;
          h < P.rows.length;
          h++
        ) for (
            D = P.rows[h],
            g = P.cells[D.start],
            l &&
              l.length ? (
              g.DataID = l[h].DataID,
              g.fill = l[h].HFill,
              P.cells[D.start + 1].fill = l[h].LFill
            ) : g.DataID = GlobalData.optManager.CreateTextBlock(e, Resources.Strings.SwimlaneLabel),
            g.celltype = ListManager.Table.CellTypes.SDT_CT_ROWREPEATER,
            y.push(D.start),
            R = 1;
            R < D.ncells;
            R++
          ) (g = P.cells[D.start + R]).flags = d;
        GlobalData.optManager.Table_ReformatText(e, P, 0, 0, y),
          GlobalData.optManager.Table_BuildFills(e, P, null);
        break;
      default:
        for (
          D = P.rows[0],
          GlobalData.optManager.theActionTable = P,
          dim = GlobalData.optManager.Table_GrowRow(P, 0, f - D.frame.height, !1),
          GlobalData.optManager.theActionTable = null,
          GlobalData.optManager.Table_FixRow(P, 0),
          GlobalData.optManager.theActionTable = P,
          dim = GlobalData.optManager.Table_GrowColumn(e, P, 0, L - P.cells[0].frame.width, e.TextGrow, !1, !1, !1),
          GlobalData.optManager.theActionTable = null,
          col = P.cols[0],
          GlobalData.optManager.Table_FixColumn(P, 0),
          n = t > 0 ? L + (b - 1) * t : u,
          o = a > 0 ? f + (T - 1) * a : p,
          e.SetSize(n, o, 0),
          h = 1;
          h < D.ncells;
          h++
        ) {
          if (g = P.cells[D.start + h], c && c.length) for (
            g.DataID = c[h - 1].DataID,
            g.fill = c[h - 1].HFill,
            R = 1;
            R < P.rows.length;
            R++
          ) m = P.rows[R],
            P.cells[m.start + h].fill = c[h - 1].LFill;
          else g.DataID = GlobalData.optManager.CreateTextBlock(e, Resources.Strings.SwimlaneLabel),
            l &&
            l.length &&
            (g.fill = l[h - 1].HFill);
          g.celltype = ListManager.Table.CellTypes.SDT_CT_SUBCOLHEADER,
            y.push(D.start + h)
        }
        var R,
          A = P.rows.length;
        for (h = 0; h < A; h++) {
          if (D = P.rows[h], g = P.cells[D.start], l && l.length) {
            if (0 === h) {
              g.fill = l[0].HFill;
              continue
            }
            if (g.DataID = l[h - 1].DataID, g.fill = l[h - 1].HFill, c && 0 === c.length) for (R = 1; R < D.ncells; R++) P.cells[D.start + R].fill = l[h - 1].LFill
          } else {
            if (c && c.length) {
              if (0 === h) {
                g.fill = c[0].HFill;
                continue
              }
              g.fill = c[h - 1].HFill
            }
            if (0 === h) continue;
            g.DataID = GlobalData.optManager.CreateTextBlock(e, Resources.Strings.SwimlaneLabel)
          }
          for (
            g.celltype = ListManager.Table.CellTypes.SDT_CT_ROWREPEATER,
            y.push(D.start),
            R = 1;
            R < D.ncells;
            R++
          ) (g = P.cells[D.start + R]).flags = d
        }
        GlobalData.optManager.Table_ReformatText(e, P, 0, 0, y),
          GlobalData.optManager.Table_BuildFills(e, P, null)
    }
  },
    m = function (n) {
      var o = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
        s = (
          GlobalData.docHandler.svgDoc.GetWorkArea(),
          GlobalData.docHandler.svgDoc.docInfo.docToScreenScale
        );
      null != s &&
        0 !== s ||
        (s = 1);
      var l = [],
        c = GlobalData.optManager.GetPastePosition(),
        d = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !0),
        D = d.layers[d.activelayer].zList,
        m = D.length > 0 &&
          0 === d.swimlanelist.length;
      if (m) var C = D[0];
      var y = n === S.SD_OBJT_SWIMLANE_COLS &&
        ConstantData.DocumentContext.SwimlaneTitle,
        f = ConstantData.DocumentContext.AutoContainer,
        I = ConstantData.DocumentContext.ActAsContainer,
        T = o.def.rrectparam,
        b = Business.GetSelectionBusinessManager(null, !1);
      null == b &&
        (b = GlobalData.gBusinessManager);
      var M = SDJS_Business_GetModuleName(b),
        P = {
          x: c.x,
          y: c.y,
          width: u,
          height: p
        },
        R = GlobalDatagFlowChartManager.GetSwimlaneID(null, !0);
      if (
        r &&
        (
          P = Utils1.DeepCopy(r.Data.Frame),
          c.x = r.Data.pastepos.x,
          c.y = r.Data.pastepos.y,
          y = r.Data.AddTitle,
          f = r.Data.AutoContainer,
          I = r.Data.ActAsContainer,
          T = r.Data.shapeparam,
          (m = r.Data.putbehind) &&
          (C = r.Data.behindid),
          R = null,
          null != r.Data.FrameIDID &&
          (R = {
            ID: r.Data.FrameIDID
          })
        ),
        R
      ) {
        var A = GlobalData.optManager.GetObjectPtr(R.ID, !1);
        M = A.BusinessName,
          P.x = A.Frame.x,
          P.y = A.Frame.y,
          c.x = A.Frame.x,
          c.y = A.Frame.y,
          l.push(R.ID),
          C = R.ID,
          m = !0;
        var _ = Utils1.DeepCopy(A.r);
        switch (n) {
          case S.SD_OBJT_SWIMLANE_COLS:
            P.y = A.Frame.y - ConstantData.Defines.FrameTitleHeight,
              i ? (P.width = A.Frame.width, u = P.width) : (
                P.height = A.Frame.height + ConstantData.Defines.FrameTitleHeight,
                p = P.height
              );
            break;
          case S.SD_OBJT_SWIMLANE_ROWS:
            P.width = A.Frame.width,
              u = P.width,
              P.x = A.Frame.x - ConstantData.Defines.FrameTitleWidth;
            break;
          case S.SD_OBJT_SWIMLANE_GRID:
            P.width = A.Frame.width,
              u = P.width,
              P.y = A.Frame.y - ConstantData.Defines.FrameTitleHeight,
              P.x = A.Frame.x - ConstantData.Defines.FrameTitleWidth,
              P.height = A.Frame.height + ConstantData.Defines.FrameTitleHeight,
              p = P.height
        }
      }
      if (i) {
        var E = {
          x: P.x + P.width / 2,
          y: P.y + P.height / 2
        };
        P = GlobalData.optManager.RotateRectAboutCenter(P, E, 270)
      }
      var w = {
        Frame: P,
        TextGrow: ConstantData.TextGrowBehavior.VERTICAL,
        objecttype: n,
        shapeparam: T
      };
      i &&
        (w.RotationAngle = 270);
      var F = new ListManager.Rect(w);
      f &&
        (
          F.moreflags = Utils2.SetFlag(
            F.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_AutoContainer,
            !0
          )
        ),
        A &&
        (
          F.moreflags = Utils2.SetFlag(
            F.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_Frame_AllowNesting,
            (
              A.moreflags & ConstantData.ObjMoreFlags.SED_MF_Frame_AllowNesting
            ) > 0
          ),
          F.moreflags = Utils2.SetFlag(
            F.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_Frame_Group,
            (A.moreflags & ConstantData.ObjMoreFlags.SED_MF_Frame_Group) > 0
          )
        );
      var v = GlobalData.optManager.AddNewObject(F, !0, !0);
      if (
        Collab.AddNewBlockToSecondary(v),
        g.push(v),
        obj = GlobalData.optManager.GetObjectPtr(v, !0),
        obj.BusinessName = M,
        obj.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
        A ? (
          obj.StyleRecord.Fill.Paint.Color = A.StyleRecord.Fill.Paint.Color,
          obj.StyleRecord.Text.Paint.Color = ConstantData.Defines.FrameTextColor
        ) : (
          obj.StyleRecord.Fill.Paint.Color = ConstantData.Defines.FrameFillColor,
          obj.StyleRecord.Text.Paint.Color = ConstantData.Defines.FrameTextColor
        ),
        obj.StyleRecord.Line.Paint.Color = ConstantData.Defines.FrameLineColor,
        obj.StyleRecord.Line.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
        obj.StyleRecord.Line.Paint.Opacity = 1,
        obj.StyleRecord.Line.Thickness = 1,
        i
      ) {
        var G = c.x - F.r.x,
          N = c.y - F.r.y;
        if (obj.OffsetShape(G, N), !A) _ = Utils1.DeepCopy(obj.r)
      }
      if (
        obj.extraflags = Utils2.SetFlag(obj.extraflags, ConstantData.ExtraFlags.SEDE_NoRotate, !0),
        I &&
        (
          obj.moreflags = Utils2.SetFlag(
            obj.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_Container,
            !0
          )
        ),
        m &&
        GlobalData.optManager.PutBehindObject(C, v),
        h(obj, n),
        y &&
        L(obj.BlockID, null, null, !0),
        _ &&
        obj.OffsetShape(_.x - obj.r.x, _.y - obj.r.y),
        Collab.AllowMessage()
      ) {
        var k = {
          swimlanetype: e,
          tabledim: t,
          tabledim2: a,
          rotate: i
        };
        k.Frame = Utils1.DeepCopy(P),
          k.pastepos = Utils1.DeepCopy(c),
          R &&
          (k.FrameIDID = R.ID),
          k.nlanes = ConstantData.DocumentContext.SwimlaneNLanes,
          k.nvlanes = ConstantData.DocumentContext.SwimlaneNVLanes,
          k.putbehind = m,
          m &&
          (k.behindid = C),
          k.ActAsContainer = I,
          k.AutoContainer = f,
          k.AddTitle = y,
          k.shapeparam = T,
          Collab.IsSecondary() &&
          (k.CreateList = g),
          Collab.BuildMessage(ConstantData.CollabMessages.InsertSwimlane, k, !0)
      }
      if (l.length && GlobalData.optManager.DeleteObjects(l, !1), null == r) {
        var U = [];
        U.push(v),
          GlobalData.optManager.SelectObjects(U, !1, !0)
      }
      GlobalData.optManager.CompleteOperation()
    },
    C = function (e, t, a) {
      var r,
        i,
        n,
        o,
        s,
        l,
        S = 0,
        u = 1,
        p = 0;
      for (
        e.cells[0].celltype === c.SD_CT_SWIMLANE_TITLE &&
        (u = 2, p = 1),
        a &&
        (S = 1),
        s = e.rows[u],
        l = e.rows[p],
        i = e.cols.length,
        r = S;
        r < i;
        r++
      ) n = e.cells[l.start + r],
        (o = new ListManager.SwimlaneProperties).DataID = n.DataID,
        o.HFill = n.fill,
        n.DataID = - 1,
        n = e.cells[s.start + r],
        o.LFill = n.fill,
        t.push(o)
    },
    y = function (e, t, a) {
      var r,
        i,
        n,
        o,
        s = 0;
      for (i = e.rows.length, a && (s = 1), r = s; r < i; r++) o = e.rows[r],
        n = e.cells[o.start],
        prop = new ListManager.SwimlaneProperties,
        prop.DataID = n.DataID,
        prop.HFill = n.fill,
        n.DataID = - 1,
        n = e.cells[o.start + 1],
        prop.LFill = n.fill,
        t.push(prop)
    },
    f = function (r, n, o) {
      var s,
        l,
        u,
        p = 4,
        d = [],
        D = [],
        g = - 1,
        m = null,
        f = !1;
      if (
        (
          !(s = GlobalData.optManager.GetObjectPtr(n, !1)) ||
          s.objecttype !== r ||
          s.RotationAngle !== o
        ) &&
        (
          Collab.AllowMessage() &&
          Collab.BeginSecondaryEdit(),
          (s = GlobalData.optManager.GetObjectPtr(n, !1)) &&
          (l = s.GetTable(!0))
        )
      ) {
        switch (s.objecttype) {
          case S.SD_OBJT_SWIMLANE_COLS:
            p = l.cols.length,
              C(l, D, !1),
              r === S.SD_OBJT_SWIMLANE_GRID &&
              s.RotationAngle &&
              (d = D, D = []),
              l.cells[0].celltype === c.SD_CT_SWIMLANE_TITLE &&
              (
                g = l.cells[0].DataID,
                l.cells[0].DataID = - 1,
                f = !0,
                m = l.cells[0].fill,
                r !== s.objecttype &&
                (f = !1)
              );
            break;
          case S.SD_OBJT_SWIMLANE_ROWS:
            p = l.rows.length,
              y(l, d, !1);
            break;
          default:
            switch (C(l, D, !0), y(l, d, !0), r) {
              case S.SD_OBJT_SWIMLANE_ROWS:
                p = l.rows.length - 1;
                break;
              case S.SD_OBJT_SWIMLANE_COLS:
                p = l.cols.length - 1
            }
        }
        if (s.RotationAngle !== o) var I = Utils1.DeepCopy(s.r);
        if (
          (s = GlobalData.optManager.GetObjectPtr(n, !0)).RotationAngle = o,
          l &&
          GlobalData.optManager.Table_DeleteObject(l),
          (u = GlobalData.objectStore.GetObject(s.TableID)) &&
          u.Delete(),
          s.TableID = - 1,
          h(s, r, p, d, D),
          f &&
          r !== S.SD_OBJT_SWIMLANE_GRID &&
          L(s.BlockID, g, m, !0),
          s.objecttype = r,
          Collab.AllowMessage()
        ) {
          var T = {
            swimlanetype: e,
            tabledim: t,
            tabledim2: a,
            rotate: i
          };
          Collab.BuildMessage(ConstantData.CollabMessages.InsertSwimlane, T, !0)
        }
        I &&
          s.OffsetShape(I.x - s.r.x, I.y - s.r.y),
          GlobalData.optManager.CompleteOperation()
      }
    },
    L = function (t, a, r, i) {
      var n = GlobalData.optManager.GetObjectPtr(t, !1);
      if (n && n.objecttype === S.SD_OBJT_SWIMLANE_COLS) {
        var o = n.GetTable(!1);
        if (o && o.cells[0].celltype !== c.SD_CT_SWIMLANE_TITLE) {
          Collab.AllowMessage() &&
            Collab.BeginSecondaryEdit();
          var s,
            l,
            u,
            p = Utils1.DeepCopy(o.cells[o.rows[1].start].fill);
          if (n.RotationAngle) var d = Utils1.DeepCopy(n.r);
          for (
            o = (n = GlobalData.optManager.GetObjectPtr(t, !0)).GetTable(!0),
            GlobalData.optManager.Table_AddRows(n, o, 0, 0, !0, !1, !1),
            null != a &&
            (o.cells[0].DataID = a),
            r &&
            (o.cells[0].fill = r),
            GlobalData.optManager.Table_JoinHorizontally(n, o, 0, o.cols.length - 1, 0, 0),
            o.cells[0].celltype = c.SD_CT_SWIMLANE_TITLE,
            l = (u = o.rows[1]).ncells,
            s = 0;
            s < l;
            s++
          ) o.cells[u.start + s].fill = Utils1.DeepCopy(p);
          if (GlobalData.optManager.Table_BuildFills(n, o, null), i) return;
          if (Collab.AllowMessage()) {
            var D = {
              swimlanetype: e
            };
            Collab.BuildMessage(ConstantData.CollabMessages.InsertSwimlane, D, !0)
          }
          d &&
            n.OffsetShape(d.x - n.r.x, d.y - n.r.y),
            GlobalData.optManager.CompleteOperation()
        }
      }
    };
  r ||
    this.CloseEdit(),
    s = this.GetTargetSelect();
  var I = GlobalDatagFlowChartManager.GetSwimlaneID(s, 'all');
  switch (null != I && (l = I.ID, I.Type), e) {
    case 'SetColumnFormat':
      f(S.SD_OBJT_SWIMLANE_COLS, l, D);
      break;
    case 'SetRowFormat':
      f(S.SD_OBJT_SWIMLANE_ROWS, l, D);
      break;
    case 'SetGridFormat':
      f(S.SD_OBJT_SWIMLANE_GRID, l, D);
      break;
    case S.SD_OBJT_SWIMLANE_COLS:
      Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        m(S.SD_OBJT_SWIMLANE_COLS);
      break;
    case S.SD_OBJT_SWIMLANE_ROWS:
      Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        m(S.SD_OBJT_SWIMLANE_ROWS);
      break;
    case S.SD_OBJT_SWIMLANE_GRID:
      Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        m(S.SD_OBJT_SWIMLANE_GRID);
      break;
    case 'AddTitleRow':
      L(l);
      break;
    case 'AddFrameTitleRow':
      !function (t) {
        var a = ConstantData.Defines.FrameTitleHeight,
          r = ConstantData.Defines.FrameGap,
          i = GlobalData.optManager.GetObjectPtr(t, !1);
        if (i) {
          var n = i.GetTable(!1);
          if (null == n) {
            if (i.r.y - a < r) {
              Collab.AllowMessage() &&
                Collab.BeginSecondaryEdit(),
                i = GlobalData.optManager.GetObjectPtr(t, !0),
                Utils1.DeepCopy(i.r);
              var o = i.FramezList;
              i.OffsetShape(0, a + r - i.r.y, o)
            }
            var s = Utils1.DeepCopy(i.trect);
            if (
              i.InsertNewTable(2, 1, 2),
              (n = i.GetTable(!0)).cells[0].DataID = GlobalData.optManager.CreateTextBlock(i, Resources.Strings.FrameTitle),
              row = n.rows[0],
              GlobalData.optManager.theActionTable = n,
              GlobalData.optManager.Table_GrowRow(n, 0, a - row.frame.height, !1),
              GlobalData.optManager.theActionTable = null,
              GlobalData.optManager.Table_FixRow(n, 0),
              n.cells[0].celltype = ListManager.Table.CellTypes.SD_CT_SWIMLANE_TITLE,
              i.TextFlags = Utils2.SetFlag(i.TextFlags, ConstantData.TextFlags.SED_TF_None, !1),
              row = n.rows[1],
              GlobalData.optManager.theActionTable = n,
              GlobalData.optManager.Table_GrowRow(n, 1, s.height - row.frame.height, !1),
              GlobalData.optManager.theActionTable = null,
              n.cells[1].flags = ListManager.Table.CellFlags.SDT_F_NoText,
              i.OffsetShape(0, - a),
              GlobalData.optManager.SetLinkFlag(t, ConstantData.LinkFlags.SED_L_MOVE),
              GlobalData.optManager.AddToDirtyList(t, !0),
              Collab.AllowMessage()
            ) {
              var l = {
                swimlanetype: e
              };
              Collab.BuildMessage(ConstantData.CollabMessages.InsertSwimlane, l, !0)
            }
            GlobalData.optManager.CompleteOperation()
          }
        }
      }(l);
      break;
    case 'RemoveTitleRow':
      !function (t) {
        var a = GlobalData.optManager.GetObjectPtr(t, !1);
        if (a && a.objecttype === S.SD_OBJT_SWIMLANE_COLS) {
          var r = a.GetTable(!1);
          if (r && r.cells[0].celltype === c.SD_CT_SWIMLANE_TITLE) {
            Collab.AllowMessage() &&
              Collab.BeginSecondaryEdit();
            var i,
              n,
              o,
              s = Utils1.DeepCopy(r.cells[0].fill);
            if (a.RotationAngle) var l = Utils1.DeepCopy(a.r);
            for (
              r = (a = GlobalData.optManager.GetObjectPtr(t, !0)).GetTable(!0),
              GlobalData.optManager.Table_RemoveRows(a, r, 0, 0),
              n = (o = r.rows[0]).ncells,
              i = 0;
              i < n;
              i++
            ) r.cells[o.start + i].fill = Utils1.DeepCopy(s);
            if (
              GlobalData.optManager.Table_BuildFills(a, r, null),
              0 === r.cells[0].hline.Thickness
            ) {
              r.rows[0].selected = !0;
              var u = {
                StyleRecord: {
                  Line: {
                    Thickness: 1
                  }
                }
              },
                p = Utils1.DeepCopy(u);
              GlobalData.optManager.Table_ApplyProperties(a, u, p, !0),
                r.rows[0].selected = !1
            }
            if (Collab.AllowMessage()) {
              var d = {
                swimlanetype: e
              };
              Collab.BuildMessage(ConstantData.CollabMessages.InsertSwimlane, d, !0)
            }
            l &&
              a.OffsetShape(l.x - a.r.x, l.y - a.r.y),
              GlobalData.optManager.CompleteOperation()
          }
        }
      }(l);
      break;
    case 'RemoveFrameTitleRow':
      !function (t) {
        var a = GlobalData.optManager.GetObjectPtr(t, !1);
        if (a && a.objecttype === S.SD_OBJT_FRAME_CONTAINER) {
          var r = a.GetTable(!1);
          if (r) {
            Collab.AllowMessage() &&
              Collab.BeginSecondaryEdit();
            var i = (r = (a = GlobalData.optManager.GetObjectPtr(t, !0)).GetTable(!0)).cells[1].fill;
            if (
              a.StyleRecord.Fill = i,
              GlobalData.optManager.Table_DeleteObject(r),
              a.TextFlags = Utils2.SetFlag(a.TextFlags, ConstantData.TextFlags.SED_TF_None, !0),
              a.TextFlags = Utils2.SetFlag(a.TextFlags, ConstantData.TextFlags.SED_TF_OneClick, !1),
              theDataBlockToDelete = GlobalData.objectStore.GetObject(a.TableID),
              theDataBlockToDelete &&
              theDataBlockToDelete.Delete(),
              a.TableID = - 1,
              GlobalData.optManager.AddToDirtyList(t),
              Collab.AllowMessage()
            ) {
              var n = {
                swimlanetype: e
              };
              Collab.BuildMessage(ConstantData.CollabMessages.InsertSwimlane, n, !0)
            }
            GlobalData.optManager.CompleteOperation()
          }
        }
      }(l)
  }
  if (g.length) return g[0]
}

ListManager.LM.prototypeSwimLane_Operation = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p;
  Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit();
  var d = GlobalData.optManager.GetObjectPtr(e, !1);
  if (d) {
    var D = d.GetTable(!1);
    if (D) switch (
      i ||
      GlobalData.optManager.CloseEdit(),
      d.moreflags & ConstantData.ObjMoreFlags.SED_MF_AutoContainer &&
      (
        (d = GlobalData.optManager.GetObjectPtr(e, !0)).moreflags = Utils2.SetFlag(
          d.moreflags,
          ConstantData.ObjMoreFlags.SED_MF_AutoContainer,
          !1
        )
      ),
      t
    ) {
        case 'InsertCol':
        case 'InsertColLeft':
          if (Collab.AllowMessage()) {
            var g = {
              BlockID: e,
              action: t,
              row: a,
              col: r
            };
            i = Collab.BuildMessage(ConstantData.CollabMessages.SwimLane_Operation, g, !1, !0)
          }
          D.select = r,
            o = (n = D.cols[r].x) - (l = r > 0 ? D.cols[r - 1].x : 0),
            'InsertColLeft' === t &&
            (n = l),
            s = d.trect,
            d.RotationAngle ? (
              n -= (s = Utils1.DeepCopy(d.trect)).width,
              S = {
                x: s.x + s.width / 2,
                y: s.y + s.height / 2
              },
              n = (s = GlobalData.optManager.RotateRectAboutCenter(s, S, - d.RotationAngle)).y - n,
              Business.ShiftShapesInSwimlane(d, n, ConstantData.ActionArrow.DOWN, o)
            ) : (
              n += s.x,
              Business.ShiftShapesInSwimlane(d, n, ConstantData.ActionArrow.RIGHT, o)
            ),
            GlobalData.optManager.Table_InsertColumns('InsertColLeft' === t, e, !1, !1, !0, !0),
            D.select = - 1,
            Collab.AllowMessage() &&
            Collab.SendMessage(i),
            GlobalData.optManager.CompleteOperation();
          break;
        case 'InsertRow':
        case 'InsertRowLeft':
          if (Collab.AllowMessage()) g = {
            BlockID: e,
            action: t,
            row: a,
            col: r
          },
            i = Collab.BuildMessage(ConstantData.CollabMessages.SwimLane_Operation, g, !1, !0);
          D.select = a * D.cols.length,
            n = D.rows[a].frame.y,
            o = D.rows[a].frame.height,
            'InsertRow' === t &&
            (n += o),
            n += d.trect.y,
            Business.ShiftShapesInSwimlane(d, n, ConstantData.ActionArrow.DOWN, o),
            GlobalData.optManager.Table_InsertRows('InsertRowLeft' === t, e, !1, !1, !0),
            D.select = - 1,
            Collab.AllowMessage() &&
            Collab.SendMessage(i),
            GlobalData.optManager.CompleteOperation();
          break;
        case 'DeleteCol':
          if (Collab.AllowMessage()) g = {
            BlockID: e,
            action: t,
            row: a,
            col: r
          },
            i = Collab.BuildMessage(ConstantData.CollabMessages.SwimLane_Operation, g, !1, !0);
          D.select = r,
            d.RotationAngle ? (
              c = D.cols[r].x,
              l = r > 0 ? D.cols[r - 1].x : 0,
              c -= (s = Utils1.DeepCopy(d.trect)).width,
              l -= s.width,
              S = {
                x: s.x + s.width / 2,
                y: s.y + s.height / 2
              },
              u = (s = GlobalData.optManager.RotateRectAboutCenter(s, S, - d.RotationAngle)).y - c,
              p = s.y - l,
              Business.DeleteShapesInSwimlane(d, u, p, ConstantData.ActionArrow.DOWN)
            ) : (
              c = d.trect.x + D.cols[r].x,
              l = r > 0 ? d.trect.x + D.cols[r - 1].x : d.trect.x,
              Business.DeleteShapesInSwimlane(d, l, c, ConstantData.ActionArrow.RIGHT)
            ),
            GlobalData.optManager.Table_DeleteColumns(e, !1, !0, !0),
            D.select = - 1,
            Collab.AllowMessage() &&
            Collab.SendMessage(i),
            GlobalData.optManager.CompleteOperation();
          break;
        case 'DeleteRow':
          if (Collab.AllowMessage()) g = {
            BlockID: e,
            action: t,
            row: a,
            col: r
          },
            i = Collab.BuildMessage(ConstantData.CollabMessages.SwimLane_Operation, g, !1, !0);
          D.select = a * D.cols.length,
            p = (u = d.trect.y + D.rows[a].frame.y) + D.rows[a].frame.height,
            Business.DeleteShapesInSwimlane(d, u, p, ConstantData.ActionArrow.DOWN),
            GlobalData.optManager.Table_DeleteRows(e, !1, !0),
            D.select = - 1,
            Collab.AllowMessage() &&
            Collab.SendMessage(i),
            GlobalData.optManager.AddToDirtyList(e),
            GlobalData.optManager.CompleteOperation()
      }
  }
}

ListManager.LM.prototypeAddMultiplicity = function (e, t) {
  var a,
    r,
    i,
    n = ConstantData.ObjectTypes,
    o = (ConstantData.HookPts, ConstantData.Defines.SED_CDim),
    s = function (e) {
      var t,
        a,
        r,
        i,
        o = GlobalData.optManager.FindAllChildObjects(
          e.BlockID,
          ConstantData.DrawingObjectBaseClass.SHAPE,
          n.SD_OBJT_MULTIPLICITY
        ),
        s = - 1,
        l = - 1;
      for (t = o.length, a = 0; a < t; a++) if (
        i = o[a],
        (r = GlobalData.optManager.GetObjectPtr(i, !1)) &&
        r.objecttype === n.SD_OBJT_MULTIPLICITY
      ) if (0 === r.hooks[0].connect.x) s = i;
        else l = i;
      return {
        left: s,
        right: l
      }
    },
    l = function (e) {
      var t = Resources.FindStyle(ConstantData.Defines.TextBlockStyle),
        a = {
          StyleRecord: $.extend(!0, {
          }, t),
          Frame: {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          },
          TMargins: {
            top: 0,
            left: 0,
            bottom: 0,
            right: 0
          },
          TextGrow: ConstantData.TextGrowBehavior.HORIZONTAL,
          TextAlign: ConstantData.TextAlign.CENTER,
          flags: ConstantData.ObjFlags.SEDO_TextOnly
        };
      a.StyleRecord.Line.Thickness = 0;
      var r = new ListManager.Rect(a),
        i = (
          GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
          GlobalData.optManager.CalcDefaultInitialTextStyle(r.StyleRecord.Text)
        ),
        o = GlobalData.optManager.svgDoc.CalcStyleMetrics(i);
      r.Frame.height = o.height,
        r.Frame.width = 5 * o.width,
        r.UpdateFrame(r.Frame);
      var s = GlobalData.optManager.AddNewObject(r, !1, !0, e),
        l = GlobalData.optManager.GetObjectPtr(s, !1);
      return l.objecttype = n.SD_OBJT_MULTIPLICITY,
        l
    },
    S = this.GetObjectPtr(this.theSelectedListBlockID, !1),
    c = S.length,
    u = !1;
  for (a = 0; a < c; a++) if (
    (r = S[a]) >= 0 &&
    (i = this.GetObjectPtr(r, !1)).DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.LINE
  ) {
    var p,
      d = s(i);
    if (e && (d.left < 0 || d.right < 0)) return !0;
    if (d.left < 0) if (null != (p = l(' M '))) {
      var D = {
        x: 0,
        y: 0
      };
      GlobalData.optManager.UpdateHook(p.BlockID, - 1, r, ConstantData.HookPts.SED_KCB, D, null),
        p.flags = Utils2.SetFlag(p.flags, ConstantData.ObjFlags.SEDO_Assoc, !0),
        p.associd = i.BlockID,
        GlobalData.optManager.SetLinkFlag(r, ConstantData.LinkFlags.SED_L_MOVE),
        u = !0
    }
    if (d.right < 0) if (null != (p = l(' M '))) {
      D = {
        x: o,
        y: o
      };
      GlobalData.optManager.UpdateHook(p.BlockID, - 1, r, ConstantData.HookPts.SED_KCB, D, null),
        p.flags = Utils2.SetFlag(p.flags, ConstantData.ObjFlags.SEDO_Assoc, !0),
        p.associd = i.BlockID,
        GlobalData.optManager.SetLinkFlag(r, ConstantData.LinkFlags.SED_L_MOVE),
        u = !0
    }
  }
  return u &&
    !t &&
    this.CompleteOperation(),
    u
}

ListManager.LM.prototypeMultiplicity_SwitchSides = function (e, t, a) {
  var r = GlobalData.optManager.GetObjectPtr(e, !1),
    i = null;
  return r &&
    r.hooks.length &&
    (i = GlobalData.optManager.GetObjectPtr(r.hooks[0].objid, !1)),
    !(
      !i ||
      !r ||
      r.objecttype !== ConstantData.ObjectTypes.SD_OBJT_MULTIPLICITY
    ) &&
    (
      t ||
      (
        r = GlobalData.optManager.GetObjectPtr(e, !0),
        i = GlobalData.optManager.GetObjectPtr(r.hooks[0].objid, !0),
        0 === r.subtype ? r.subtype = ConstantData.ObjectSubTypes.SD_SUBT_MULTIPLICITY_FLIPPED : r.subtype = 0,
        GlobalData.optManager.SetLinkFlag(i.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        a ||
        GlobalData.optManager.CompleteOperation()
      ),
      !0
    )
}

ListManager.LM.prototypeIsJiraIssueShape = function (e) {
  var t = e.GetTable();
  return !!t &&
    GlobalData.optManager.Table_GetCellWithType(t, ListManager.Table.CellTypes.SD_CT_JIRA_ISSUEKEY)
}

ListManager.LM.prototypeInsertSDONFromImport = function (e, t, a, r) {
  // try {
  var i = JSON.parse(e)
  // } catch (e) {
  //   return !1
  // }
  if (r) var n = r;
  else n = Business.GetSelectionBusinessManager();
  if (
    null == n &&
    (n = GlobalData.gBusinessManager),
    t = !GlobalData.optManager.ImportContext ||
    'Replace' !== GlobalData.optManager.ImportContext.context,
    Collab.AllowMessage()
  ) {
    var o = SDJS_Business_GetModuleName(n);
    null == o &&
      (o = ''),
      Collab.BeginSecondaryEdit(),
      GlobalData.optManager.ImportContext &&
      GlobalData.optManager.ImportContext.deleteList &&
      (
        GlobalData.optManager.ImportContext.deleteList = GlobalData.optManager.GetShapesToReplace(GlobalData.optManager.ImportContext.contextId)
      );
    this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
    var s = {
      SDONStr: e,
      append: t,
      SelectionManagerName: o
    };
    GlobalData.optManager.ImportContext &&
      (
        s.ImportContext = Utils1.DeepCopy(GlobalData.optManager.ImportContext)
      ),
      null != i.importType &&
      (s.importType = i.importType);
    var l = !1;
    !0 === i.UseSelect &&
      (l = !0);
    var S = Collab.BuildMessage(ConstantData.CollabMessages.InsertSDONFromImport, s, l, !0)
  }
  t ||
    (
      GlobalData.optManager.ImportContext &&
        GlobalData.optManager.ImportContext.deleteList ? GlobalData.optManager.DeleteObjects(GlobalData.optManager.ImportContext.deleteList) : GlobalData.optManager.ClearAllObjects(!0),
      ListManager.SDData.ClearEmptyFieldedDataTables(ListManager.SDData.FieldedDataSourceTypes.SDON),
      ListManager.SDData.ClearEmptyFieldedDataTables(ListManager.SDData.FieldedDataSourceTypes.AUTO)
    ),
    SDJS.API.SymbolList = [],
    SDJS.API.ColorList = [],
    SDJS.API.DataList = [],
    SDJS.API.NImagesToLoad = 0,
    SavegBusinessManager = GlobalData.gBusinessManager,
    SaveBusinessModule = GlobalData.optManager.theContentHeader.BusinessModule,
    null != i.LoadedSymbols &&
    (SDJS.API.SymbolList = i.LoadedSymbols),
    $(document).on(
      Constants.IFrame_Command_SDONLoadComplete,
      (
        function () {
          $(document).off(Constants.IFrame_Command_SDONLoadComplete),
            GlobalData.optManager.SetDocDirtyState(!0),
            a &&
            a()
        }
      )
    );
  try {
    null == GlobalData.optManager.PastePos &&
      (GlobalData.optManager.PastePos = GlobalData.optManager.GetPastePosition()),
      SDJS.API.FixExternalSDON(i),
      n.ReadJSONAPI(i, null, null, t, a, r),
      S &&
      (
        Collab.IsSecondary() &&
        Collab.CreateList.length &&
        (
          S.Data.CreateList = [],
          S.Data.CreateList = S.Data.CreateList.concat(Collab.CreateList)
        ),
        S.Data.pastepos = Utils1.DeepCopy(GlobalData.optManager.PastePos),
        Collab.SendMessage(S)
      ),
      GlobalData.optManager.PastePos = null
  } catch (e) {
    return GlobalData.gBusinessManager = SavegBusinessManager,
      GlobalData.optManager.theContentHeader.BusinessModule = SaveBusinessModule,
      GlobalData.optManager.ImportContext = null,
      GlobalData.optManager.PastePos = null,
      $(document).off(Constants.IFrame_Command_SDONLoadComplete),
      !1
  }
  return SDUI.Commands.MainController.DataPanel.IdleDataPanel(),
    !0
}

ListManager.LM.prototypeClearSensitiveSDData = function () {
  var e = ListManager.SDData.GetDataSetIdByName('Jira');
  if (!(e < 0)) {
    var t = ListManager.SDData.GetTableID(e, 'DocInfo', !0);
    t < 0 ||
      ListManager.SDData.DeleteTable(t)
  }
}

ListManager.LM.prototypeGetShapesToReplace = function (e) {
  var t = null,
    a = null,
    r = [],
    i = {},
    n = !1,
    o = function (e) {
      var t,
        a,
        r,
        n = [],
        o = GlobalData.optManager.GetTargetSelect();
      return o >= 0 &&
        Business.GetSelectionBusinessManager(o, !0) === e &&
        (
          (t = GlobalData.optManager.GetObjectPtr(o, !1)).IsSwimlane() &&
          (r = t),
          t &&
          t.ParentFrameID >= 0 &&
          (a = GlobalData.optManager.GetObjectPtr(t.ParentFrameID, !1)).IsSwimlane() &&
          (r = a),
          null != r &&
          (
            n = n.concat(r.FramezList),
            GlobalData.optManager.ImportContext.ContainerID = r.BlockID,
            i.x = r.trect.x + ConstantData.Defines.FrameGap,
            i.y = r.trect.y + ConstantData.Defines.FrameGap,
            GlobalData.optManager.ImportContext &&
            (GlobalData.optManager.ImportContext.TopLeft = i)
          )
        ),
        n
    },
    s = function (e) {
      var t,
        a,
        r,
        i,
        n,
        o = GlobalData.optManager.GetTargetSelect(),
        s = function (e) {
          var t,
            a;
          for (t = (a = e.ContainerList.List).length - 1; t >= 0; t--) if (a[t].id >= 0) return a[t].id;
          return - 1
        };
      if (o >= 0 && Business.GetSelectionBusinessManager(o, !0) === e) {
        if (
          (t = GlobalData.optManager.GetObjectPtr(o, !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_SHAPECONTAINER
        ) return GlobalData.optManager.ImportContext.SmartContainerID = t.BlockID,
          GlobalData.optManager.ImportContext.SmartContainerChildID = s(t),
          [];
        if (
          t &&
          t.hooks.length &&
          (a = GlobalData.optManager.GetObjectPtr(t.hooks[0].objid, !1)) &&
          a.objecttype === ConstantData.ObjectTypes.SD_OBJT_SHAPECONTAINER
        ) return GlobalData.optManager.ImportContext.SmartContainerID = a.BlockID,
          GlobalData.optManager.ImportContext.SmartContainerChildID = s(a),
          []
      }
      var l,
        S = GlobalData.optManager.ActiveVisibleZList(),
        c = 0,
        u = - 1,
        p = [];
      for (
        i = S.length,
        r = 0;
        r < i &&
        (
          n = S[r],
          (t = GlobalData.optManager.GetObjectPtr(n, !1)) &&
          t.objecttype === ConstantData.ObjectTypes.SD_OBJT_SHAPECONTAINER &&
          (
            (l = GlobalData.optManager.ContainerIsInCell(t)) ? p.indexOf(l.obj.BlockID) < 0 &&
              (p.push(l.obj.BlockID), c++, u = n) : (c++, u = n)
          ),
          !(c > 1)
        );
        r++
      );
      if (1 === c) {
        if ((a = GlobalData.optManager.GetObjectPtr(u, !1)) && a.ContainerList) {
          var d = a.ContainerList.List;
          if (0 === (i = d.length) || 1 === i && d[0].id < 0) return GlobalData.optManager.ImportContext.SmartContainerID = a.BlockID,
            GlobalData.optManager.ImportContext.SmartContainerChildID = - 1,
            [];
          for (r = (i = d.length) - 1; r >= 0; r--) return n = d[r].id,
            Business.GetSelectionBusinessManager(n, !0) === e ? (
              GlobalData.optManager.ImportContext.SmartContainerID = a.BlockID,
              GlobalData.optManager.ImportContext.SmartContainerChildID = n,
              []
            ) : []
        }
        return []
      }
      return []
    };
  switch (
  GlobalData.optManager.ImportContext &&
  (GlobalData.optManager.ImportContext.contextId = e),
  e
  ) {
    case 'decisiontree':
    case 'm-decisionTreeVisualizer':
      t = gDecisionTreeManager;
      break;
    case 'orgchart':
    case 'm-orgChartVisualizer':
      t = gOrgChartManager;
      break;
    case 'timeline':
    case 'm-timelineVisualizer':
      t = gTimelineManager,
        GlobalData.optManager.ImportContext &&
        (GlobalData.optManager.ImportContext.ForceFrame = !0);
      break;
    case 'erd':
    case 'm-erdVisualizer':
      t = gLineDrawERDManager,
        GlobalData.optManager.ImportContext &&
        (GlobalData.optManager.ImportContext.ForceFrame = !0);
      break;
    case 'classdiagram':
    case 'm-classDiagramVisualizer':
      t = gLineDrawUMLClassManager,
        GlobalData.optManager.ImportContext &&
        (GlobalData.optManager.ImportContext.ForceFrame = !0);
      break;
    case 'umlsequence':
    case 'umlstate':
      t = gLineDrawUMLManager,
        GlobalData.optManager.ImportContext &&
        (GlobalData.optManager.ImportContext.ForceFrame = !0);
      break;
    case 'm-importtext':
      t = gTaskMapManager;
      break;
    case 'm-importazure':
      t = gLineDrawAzureManager;
      break;
    case 'm-importaws':
      t = gLineDrawAWSManager;
      break;
    case 'm-jiraFindIssue':
    case 'add':
      return s(t = gJiraIssuesContainerManager);
    case 'm-jiraProductRoadmap':
      return o(t = gJiraProductRoadmapManager);
    case 'm-jiraBlockingIssue':
      return o(t = gJiraBlockingIssueManager);
    case 'm-jiraPIBoard':
      return o(t = gJiraPIBoardManager);
    case 'm-jiraEpicDependency':
      return o(t = gJiraEpicDependencyManager);
    case 'm-azureDevOpsFindItem':
      return s(t = gAzureDevOpsItemContainerManager);
    default:
      return
  }
  var l = GlobalData.optManager.GetTargetSelect();
  if (
    l >= 0 &&
    (a = Business.GetSelectionBusinessManager(l, !0)) === t
  ) {
    n = !0;
    var S = GlobalData.optManager.GetObjectPtr(l, !1);
    if (S && S.IsSwimlane()) r = r.concat(S.FramezList),
      i.x = S.trect.x + ConstantData.Defines.FrameGap,
      i.y = S.trect.y + ConstantData.Defines.FrameGap;
    else {
      r = a.GetChartObjectList(l);
      var c = this.GetListSRect(r, !1, !1);
      c &&
        (i.x = c.x, i.y = c.y)
    }
  }
  if (
    n ||
    (
      r = function (e) {
        var t,
          a,
          r,
          n,
          o,
          s = GlobalData.optManager.ActiveVisibleZList(),
          l = [],
          S = [];
        a = s.length;
        var c = 0,
          u = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1);
        for (n = u.swimlanelist.length, t = 0; t < n; t++) r = u.swimlanelist[t],
          (o = Business.GetSelectionBusinessManager(r, !0)) === e &&
          (S = GlobalData.optManager.GetObjectPtr(r, !1).FramezList, c++);
        if (0 === c) for (t = 0; t < a; t++) r = s[t],
          l.indexOf(r) >= 0 ||
          (o = Business.GetSelectionBusinessManager(r, !0)) === e &&
          (S = o.GetChartObjectList(r), l = l.concat(S), c++);
        if (S.length) {
          var p = GlobalData.optManager.GetListSRect(S, !1, !1);
          i.x = p.x,
            i.y = p.y
        }
        return 1 === c ||
          0 === c ? S : (
          Utils2.Alert(Resources.Strings.ImportSelect, null),
          null
        )
      }(t)
    ),
    GlobalData.optManager.ImportContext &&
    null != i.x
  ) switch (GlobalData.optManager.ImportContext.TopLeft = i, e) {
    case 'm-importazure':
    case 'm-importaws':
    case 'erd':
    case 'classdiagram':
    case 'umlsequence':
    case 'umlstate':
      GlobalData.optManager.ImportContext &&
        (GlobalData.optManager.ImportContext.UseTopLeft = !0)
  }
  return GlobalData.optManager.ImportContext &&
    (GlobalData.optManager.ImportContext.contextId = e),
    r
}

ListManager.LM.prototypeStoreReportParameters = function (e, t, a) {
  var r = ListManager.ImportFieldNameList[ListManager.ImportTableFields.PARAMS_FIELD],
    i = GlobalData.optManager.GetObjectPtr(e, !0);
  if (null != i) {
    var n = i.datasetElemID,
      o = ListManager.SDData.GetDataSetIdByName(
        ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_IMPORT]
      );
    o < 0 &&
      (
        o = ListManager.SDData.CreateDataSet(
          ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_IMPORT]
        ),
        rowid = - 1,
        i.datasetType = ListManager.DataSetNameListIndexes.DATASET_IMPORT,
        i.datasetID = o
      );
    var s = ListManager.SDData.GetTableID(o, a, !0);
    s < 0 &&
      (
        s = ListManager.SDData.CreateTable(
          ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_IMPORT],
          a
        ),
        rowid = - 1,
        i &&
        (i.datasetTableID = s),
        ListManager.SDData.AddColumn(s, r, !1)
      ),
      n < 0 &&
      (n = ListManager.SDData.AddRow(s), i && (i.datasetElemID = n));
    var l = JSON.stringify(t);
    ListManager.SDData.UpdateValue(n, r, l)
  }
}

ListManager.LM.prototypeLoadReportParameters = function (e, t) {
  var a = null,
    r = ListManager.SDData.GetDataSetIdByName(
      ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_IMPORT]
    );
  if (r < 0) return null;
  var i = ListManager.SDData.GetTableID(r, e, !0);
  if (i < 0) return null;
  var n = ListManager.ImportFieldNameList[ListManager.ImportTableFields.PARAMS_FIELD],
    o = ListManager.SDData.GetValue(t, n);
  return null == o &&
    (
      o = function () {
        for (let e = ListManager.SDData.GetNumRows(i, '', '') - 1; e >= 0; e--) {
          const t = ListManager.SDData.GetRow(i, '', '', e),
            a = ListManager.SDData.GetValue(t, n);
          if (a) return a
        }
        return null
      }()
    ),
    o &&
    (a = JSON.parse(o)),
    a
}

ListManager.LM.prototypeShapeIsEnclosed = function (e, t) {
  var a,
    r,
    i,
    n = GlobalData.optManager.VisibleZList(),
    o = {};
  n.length,
    i = e.trect;
  var s = e.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null);
  if (0 !== e.RotationAngle) {
    var l = - e.RotationAngle / (180 / ConstantData.Geometry.PI);
    Utils3.RotatePointsAboutCenter(e.Frame, l, s)
  }
  var S = n.indexOf(e.BlockID);
  return !(n.indexOf(t.BlockID) < S) &&
    (
      t.BlockID,
      0 !== t.RotationAngle ? (
        a = t.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null),
        r = - t.RotationAngle / (180 / ConstantData.Geometry.PI),
        Utils3.RotatePointsAboutCenter(t.Frame, r, a),
        Utils2.GetPolyRect(o, a)
      ) : o = $.extend(!0, {
      }, t.Frame),
      0 !== e.RotationAngle ? 0 != t.RotationAngle ? Utils2.IsAllPolyPointsInPoly(s, a) : Utils2.IsAllFrameCornersInPoly(s, o) : 0 != t.RotationAngle ? Utils2.IsAllPolyPointsInPoly(s, a) : Utils2.RectInsideRect(i, o)
    )
},
,
 ,
  ListManager.LM.prototype.GetMaxDim = function (e) {
    return e.x = ConstantData.Defines.SD_MaxLongDim,
      e.y = ConstantData.Defines.SD_MaxLongDim,
      !0
  },


  function formatValue(value) {
    let formattedValue = value.trim();
    const length = value.length;
    for (let i = formattedValue.length; i < length; i++) {
      formattedValue += ' ';
    }
    return formattedValue;
  }

function NumberToString(value, isFeet) {
  let result = value;
  const decimalPlaces = GlobalData.docHandler.rulerSettings.dp;

  if (isFeet) return value;

  if (GlobalData.docHandler.rulerSettings.showpixels) {
    return result.toFixed(0);
  }

  if (value.toFixed) {
    result = value.toFixed(decimalPlaces);
  }

  if (isFeet) {
    const feetIndex = result.indexOf('"');
    const inchIndex = result.indexOf("'");
    if (feetIndex < 0) {
      result += '    ';
    } else {
      for (let i = feetIndex - inchIndex; i < 4; i++) result += ' ';
      for (let i = inchIndex; i < 4; i++) result += ' ';
    }
  } else {
    let decimalIndex = result.indexOf('.');
    if (decimalIndex < 0) {
      result += '.';
      decimalIndex = result.length - 1;
    }
    for (let i = result.length - decimalIndex - 1; i < decimalPlaces; i++) result += '0';
    for (let i = decimalIndex; i < 4; i++) result += ' ';
  }

  return result;
}

,
ListManager.LM.prototype.CoordinatesInEditState = function () {
  var e = Resources.Controls.GetControl(Resources.Controls.WorkArea.LeftEdit.Id);
  return !(!e || !(e = e.GetControl()) || e[0].classList.contains('hide'))
},

  ListManager.LM.prototype.PinTrackPoint = function (e) {
    GlobalData.optManager.PinRect &&
      (
        e.x < GlobalData.optManager.PinRect.x &&
        (e.x = GlobalData.optManager.PinRect.x),
        e.x > GlobalData.optManager.PinRect.x + GlobalData.optManager.PinRect.width &&
        (e.x = GlobalData.optManager.PinRect.x + GlobalData.optManager.PinRect.width),
        e.y < GlobalData.optManager.PinRect.y &&
        (e.y = GlobalData.optManager.PinRect.y),
        e.y > GlobalData.optManager.PinRect.y + GlobalData.optManager.PinRect.height &&
        (e.y = GlobalData.optManager.PinRect.y + GlobalData.optManager.PinRect.height)
      )
  }

ListManager.LM.prototypePinMoveRect = function (e) {
  var t = Utils1.DeepCopy(GlobalData.optManager.theMoveBounds);
  Utils2.OffsetRect(
    t,
    e.x - GlobalData.optManager.theDragStartX,
    e.y - GlobalData.optManager.theDragStartY
  );
  var a = t.x + t.width,
    r = t.y + t.height;
  GlobalData.optManager.PinRect &&
    (
      t.x < GlobalData.optManager.PinRect.x &&
      (
        e.x = GlobalData.optManager.PinRect.x + GlobalData.optManager.theDragStartX - GlobalData.optManager.theMoveBounds.x
      ),
      a > GlobalData.optManager.PinRect.x + GlobalData.optManager.PinRect.width &&
      (
        e.x = GlobalData.optManager.PinRect.x + GlobalData.optManager.PinRect.width + GlobalData.optManager.theDragStartX - (
          GlobalData.optManager.theMoveBounds.x + GlobalData.optManager.theMoveBounds.width
        )
      ),
      t.y < GlobalData.optManager.PinRect.y &&
      (
        e.y = GlobalData.optManager.PinRect.y + GlobalData.optManager.theDragStartY - GlobalData.optManager.theMoveBounds.y
      ),
      r > GlobalData.optManager.PinRect.y + GlobalData.optManager.PinRect.height &&
      (
        e.y = GlobalData.optManager.PinRect.y + GlobalData.optManager.PinRect.height + GlobalData.optManager.theDragStartY - (
          GlobalData.optManager.theMoveBounds.y + GlobalData.optManager.theMoveBounds.height
        )
      )
    )
},










  ListManager.LM.prototypeLM_ReverseHook = function (e) {
    var t = ConstantData.Defines.SED_CDim,
      a = ConstantData.HookPts,
      r = !1;
    var i,
      n,
      o = ConstantData.HookPts.SED_KTL,
      s = this.GetObjectPtr(this.LinkParams.ConnectIndex, !1),
      l = this.GetObjectPtr(e, !1);
    switch (
    1 === s.hooks.length ? s.hooks[0].hookpt === ConstantData.HookPts.SED_KTL &&
      (o = ConstantData.HookPts.SED_KTR) : (
      i = s.StartPoint,
      n = s.EndPoint,
      Math.abs(i.x - n.x) < 0.1 ? this.LinkParams.ConnectPt.y === t &&
        (o = ConstantData.HookPts.SED_KTR) : this.LinkParams.ConnectPt.x === t &&
      (o = ConstantData.HookPts.SED_KTR),
      o = s.ConnectToHook(this.LinkParams.ConnectPt, o)
    ),
    this.LinkParams.HookIndex
    ) {
      case a.SED_KTC:
        this.LinkParams.ConnectPt.x = t / 2,
          this.LinkParams.ConnectPt.y = 0;
        break;
      case a.SED_KBC:
        this.LinkParams.ConnectPt.x = t / 2,
          this.LinkParams.ConnectPt.y = t;
        break;
      case a.SED_KLC:
        this.LinkParams.ConnectPt.y = t / 2,
          this.LinkParams.ConnectPt.x = 0;
        break;
      default:
        if (
          this.LinkParams.HookIndex >= a.SED_CustomBase &&
          this.LinkParams.HookIndex < a.SED_CustomBase + 100
        ) {
          r = !0;
          var S = l.GetHookPoints(!0);
          this.LinkParams.ConnectPt = S[this.LinkParams.HookIndex - a.SED_CustomBase]
        } else this.LinkParams.ConnectPt.y = t / 2,
          this.LinkParams.ConnectPt.x = t
    }
    if (s.segl) if (o === a.SED_KTL) if (
      0 === s.segl.firstdir &&
      s.segl.lengths[0] < 0 &&
      (s.segl.lengths[0] = - s.segl.lengths[0]),
      r
    ) {
      s.segl.firstdir = l.GetSegLFace(this.LinkParams.ConnectPt, s.StartPoint, s.StartPoint);
      var c = GlobalData.optManager.svgObjectLayer.GetElementByID(this.LinkParams.ConnectIndex);
      (s = this.GetObjectPtr(this.LinkParams.ConnectIndex, !0)).AdjustLine(
        c,
        s.StartPoint.x,
        s.StartPoint.y,
        ConstantData.ActionTriggerType.LINESTART
      )
    } else s.segl.firstdir = this.LinkParams.HookIndex;
    else {
      var u = s.segl.pts.length - 1;
      if (
        0 === s.segl.lastdir &&
        s.segl.lengths[u - 1] < 0 &&
        (s.segl.lengths[u - 1] = - s.segl.lengths[u - 1]),
        r
      ) {
        s.segl.lastdir = l.GetSegLFace(this.LinkParams.ConnectPt, s.EndPoint, s.EndPoint);
        c = GlobalData.optManager.svgObjectLayer.GetElementByID(this.LinkParams.ConnectIndex);
        (s = this.GetObjectPtr(this.LinkParams.ConnectIndex, !0)).AdjustLine(
          c,
          s.EndPoint.x,
          s.EndPoint.y,
          ConstantData.ActionTriggerType.LINEEND
        )
      } else s.segl.lastdir = this.LinkParams.HookIndex
    }
    this.UpdateHook(
      this.LinkParams.ConnectIndex,
      - 1,
      e,
      o,
      this.LinkParams.ConnectPt,
      this.LinkParams.ConnectInside
    ),
      this.SetLinkFlag(this.theDragTargetID, ConstantData.LinkFlags.SED_L_MOVE),
      Collab.IsProcessingMessage() &&
      Collab.IsPrimary() ||
      (this.LinkParams.ConnectHookFlag = 0)
  },

  ListManager.LM.prototype.LM_HitAreaClick = function (e, t) {
    var a;
    null != (a = this.GetObjectPtr(e, !0)) &&
      a.HitAreaClick(t)
  },


  ListManager.LM.prototype.UserDataisIcon = function (e) {
    if (e) {
      if (!e.split) return e === ConstantData.SVGElementClass.ICON;
      var t = e.split('.');
      if (t[0]) return parseInt(t[0], 10) === ConstantData.SVGElementClass.ICON
    }
    return !1
  },




  ListManager.LM.prototype.CheckDragIsOverNonCustomLibrary = function (e) {
    return null != e &&
      (
        null != SDUI.Commands.MainController.Symbols &&
        !0 === SDUI.Commands.MainController.Symbols.IsCursorOverSymbolLibraryGallery(e.gesture.center.clientX, e.gesture.center.clientY, !1)
      )
  }

ListManager.LM.prototypeCloseOpenNudge = function () {
  if (Collab.AllowMessage()) {
    if (!SDJS.Editor.IsStateOpen()) {
      var e = GlobalData.optManager.GetTargetSelect();
      if (e >= 0) {
        Collab.BeginSecondaryEdit();
        GlobalData.optManager.GetObjectPtr(e, !0)
      }
    }
    var t = {
      deltaX: this.NudgeX,
      deltaY: this.NudgeY,
      growX: this.NudgeGrowX,
      growY: this.NudgeGrowY
    };
    Collab.BuildMessage(ConstantData.CollabMessages.NudgeSelectedObjects, t, !0)
  }
  this.NudgeOpen = !1,
    this.CompleteOperation(null)
},



  ListManager.LM.prototype.ScaleSymbolObject = function (e) {
    var t,
      a,
      r,
      i = {
        x: 0,
        y: 0
      },
      n = GlobalData.docHandler.svgDoc.docInfo.docDpi / SDF.DRAWRES,
      o = 0 == (
        GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !1).moreflags & ConstantData.SessionMoreFlags.SEDSM_DrawToScale
      );
    return i.x = e.ScalingData.Dimensions.x,
      i.y = e.ScalingData.Dimensions.y,
      e.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_Scale ? (
        GlobalData.docHandler.rulerSettings.useInches ? (
          t = e.ScalingData.Width,
          a = e.ScalingData.Height,
          r = e.ScalingData.ScaleType
        ) : (
          t = e.ScalingData.Metric_Width ? e.ScalingData.Metric_Width : i.x / GlobalData.docHandler.svgDoc.docInfo.docDpi * ConstantData.Defines.MetricConv,
          a = e.ScalingData.Metric_Height ? e.ScalingData.Metric_Height : i.y / GlobalData.docHandler.svgDoc.docInfo.docDpi * ConstantData.Defines.MetricConv,
          r = e.ScalingData.MetricUnits
        ),
        GlobalData.optManager.ScaleToRuler(t, a, r, i, o, !1)
      ) : (
        i.x = SDF.ToSDJSCoords(i.x, n),
        i.y = SDF.ToSDJSCoords(i.y, n)
      ),
      i
  }

ListManager.LM.prototypeGetSymbolFormat = function (e) {
  var t,
    a = e.Formats.length;
  for (t = 0; t < a; t++) if (e.Formats[t].Format === Globals.SymbolFormats.EMF) return Globals.SymbolFormats.EMF;
  for (t = 0; t < a; t++) if (e.Formats[t].Format === Globals.SymbolFormats.SVGColor) return Globals.SymbolFormats.SVGColor;
  for (t = 0; t < a; t++) if (e.Formats[t].Format === Globals.SymbolFormats.SVG) return Globals.SymbolFormats.SVG;
  for (t = 0; t < a; t++) {
    if (e.Formats[t].Format === Globals.SymbolFormats.SVG) return Globals.SymbolFormats.SVG;
    if (e.Formats[t].Format === Globals.SymbolFormats.SVGColor) return Globals.SymbolFormats.SVGColor;
    if (e.Formats[t].Format === Globals.SymbolFormats.JPG) return Globals.SymbolFormats.JPG;
    if (e.Formats[t].Format === Globals.SymbolFormats.PNG) return Globals.SymbolFormats.PNG
  }
  return 0
}

ListManager.LM.prototype.BuildSymbolObject = function (e, t, a) {
  var r, i, n, o, s, l,
    S = { x: 240, y: 150 },
    c = {},
    u = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, false),
    p = ConstantData.TextFlags,
    d = e,
    D = (t === -2),
    g = SDUI.Commands.MainController.Symbols.GetSymbolPreview(e),
    h = function (t) {
      var a, r, i, n, l, S, c = [], u = false;
      if (t) {
        o.EMFBuffer = new Uint8Array(t);
        s.EMFBuffer = new Uint8Array(t);
        if (D) {
          SDUI.Commands.MainController.Symbols.StoreSpecialSymbolObject(e, s);
        } else {
          SDUI.Commands.MainController.Symbols.StoreLMObject(e, s);
        }
        for (r = GlobalData.optManager.EmptyEMFList.length - 1; r >= 0; r--) {
          if (GlobalData.optManager.EmptyEMFList[r].EMFHash === o.EMFHash) {
            S = SDJS.Editor.IsStateOpen();
            a = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.EmptyEMFList[r].BlockID, S);
            if (a) {
              u = true;
              i = new Uint8Array(t);
              n = new ListManager.BlobBytes(GlobalData.optManager.EmptyEMFList[r].EMFBufferType, i);
              if (a.EMFBufferType === FileParser.Image_Dir.dir_meta) {
                l = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.BLOBBYTES_OBJECT, n);
                if (l) a.EMFBlobBytesID = l.ID;
              } else {
                l = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.BLOBBYTES_OBJECT, n);
                if (l) a.BlobBytesID = l.ID;
              }
              a.EMFBuffer = null;
              if (a.EMFBufferType !== FileParser.Image_Dir.dir_meta) {
                delete a.EMFHash;
              }
              if (GlobalData.optManager.ReplaceSymbolID !== o.EMFHash) {
                GlobalData.optManager.AddEMFBlockToUndo(GlobalData.optManager.EmptyEMFList[r].BlockID, l.ID);
              }
              if (!S) {
                c = [];
                c.push(l);
                c.push(GlobalData.objectStore.GetObject(a.BlockID));
                SDF.SaveChangedBlocks(GlobalData.stateManager.CurrentStateID, 0, GlobalData.stateManager.CurrentStateID, c);
              }
              GlobalData.optManager.EmptyEMFList.splice(r, 1);
            }
          }
        }
        if (u && S) {
          GlobalData.optManager.CompleteOperation();
        }
      }
    },
    m = function (t) {
      if (t) {
        o.nativeDataArrayBuffer = t;
        s.nativeDataArrayBuffer = t;
        if (D) {
          SDUI.Commands.MainController.Symbols.StoreSpecialSymbolObject(e, s);
        } else {
          SDUI.Commands.MainController.Symbols.StoreLMObject(e, s);
        }
        var a, r, i, n, l, S, c, u = false, p = [], g = false;
        a = GlobalData.optManager.EmptySymbolList.length;
        var h = [];
        if (
          GlobalData.optManager.theDrawShape &&
          GlobalData.optManager.theActionStoredObjectID >= 0 &&
          (h.push(GlobalData.optManager.theActionStoredObjectID),
            GlobalData.optManager.theDrawShape.SymbolID === d)
        ) {
          GlobalData.optManager.MouseAddNewShape(true);
          GlobalData.optManager.NewObjectVisible = true;
          for (r = 0; r < a; r++) {
            if (GlobalData.optManager.EmptySymbolList[r].BlockID === h[0]) {
              GlobalData.optManager.EmptySymbolList.splice(r, 1);
              break;
            }
          }
          GlobalData.optManager.DeleteObjects(h, false);
        }
        h = [];
        a = GlobalData.optManager.EmptySymbolList.length;
        for (r = a - 1; r >= 0; r--) {
          i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.EmptySymbolList[r].BlockID, false, false);
          if (i) {
            if (GlobalData.optManager.EmptySymbolList[r].SymbolID === d) {
              if (GlobalData.optManager.ReplaceSymbolID === d) {
                GlobalData.optManager.ReplaceSymbol(o, GlobalData.optManager.EmptySymbolList[r].BlockID, h, false, false);
                GlobalData.optManager.EmptySymbolList.splice(r, 1);
                u = true;
                g = true;
              } else {
                l = SDJS.Editor.IsStateOpen();
                h.push(GlobalData.optManager.EmptySymbolList[r].BlockID);
                c = GlobalData.optManager.EmptySymbolList[r].BlockID;
                S = {
                  x: o.Frame.x,
                  y: o.Frame.y,
                  width: o.Frame.width,
                  height: o.Frame.height
                };
                o.Frame.x = i.Frame.x;
                o.Frame.y = i.Frame.y;
                o.Frame.width = i.Frame.width;
                o.Frame.height = i.Frame.height;
                n = GlobalData.optManager.AddNewNativeSymbol(o, true, i);
                o.Frame = S;
                if (n < 0) continue;
                i.newID = n;
                if (GlobalData.optManager.GetTargetSelect() === c) {
                  p.push(n);
                  GlobalData.optManager.SelectObjects(p, false, false);
                }
                GlobalData.optManager.EmptySymbolList.splice(r, 1);
                GlobalData.optManager.DeleteObjects(h, false);
                GlobalData.optManager.SetLinkFlagsOnFilledClosedPolylines(n);
                GlobalData.optManager.UpdateLinks();
                if (!l) {
                  GlobalData.optManager.PatchUndo(c);
                }
                u = true;
              }
            }
          } else {
            GlobalData.optManager.EmptySymbolList.splice(r, 1);
          }
        }
        if (u) {
          if (GlobalData.optManager.ReplaceSymbolID === d || g) {
            GlobalData.optManager.ReplaceSymbolID = -1;
            GlobalData.optManager.DeleteObjects(h);
            GlobalData.optManager.CompleteOperation(null, false);
          } else {
            GlobalData.optManager.CompleteOperation(null, true);
          }
        }
      }
    };

  if (GlobalData.docHandler.svgDoc.docInfo.docDpi / SDF.DRAWRES, e) {
    if (!D) {
      var C = SDUI.Commands.MainController.Symbols.GetLMObject(e);
      if (C) {
        o = Utils1.DeepCopy(C);
        o.nativeDataArrayBuffer = C.nativeDataArrayBuffer;
        l = GlobalData.optManager.ScaleSymbolObject(o.SymbolData);
        o.Frame.width = l.x;
        o.Frame.height = l.y;
        return o;
      }
    }

    r = a && a.Data.SymbolData ?
      Utils1.DeepCopy(a.Data.SymbolData) :
      (D ?
        SDUI.Commands.MainController.Symbols.GetSpecialSymbolData(e) :
        SDUI.Commands.MainController.Symbols.GetSymbolData(e));

    if (r == null) {
      r = (g != null && g.IsCustomContent === true) ?
        SDUI.CMSContent.GetCustomSymbolMetadata(SDUI.AppSettings.ContentSource, e) :
        SDUI.CMSContent.GetSymbolMetadata(SDUI.AppSettings.ContentSource, e);
    }

    if (r == null) return null;

    S = GlobalData.optManager.ScaleSymbolObject(r);
    c.Frame = {
      x: -1000 - S.x,
      y: -1000 - S.y,
      width: S.x,
      height: S.y
    };

    if (r.HasNative) {
      c.nativeDataArrayBuffer = null;
      c.SymbolData = r;
      c.SymbolID = e;
      var y = Resources.FindStyle(ConstantData.Defines.TextBlockStyle);
      if (y) {
        c.StyleRecord = $.extend(true, {}, y);
        c.StyleRecord.Line = Utils1.DeepCopy(c.StyleRecord.Border);
        c.StyleRecord.Line.LinePattern = Resources.LinePatternData[Resources.Windows_LinePatterns.SEP_Dashed - 1];
        c.StyleRecord.Line.Thickness = 1;
      }
      s = new ListManager.Rect(c);
      o = new ListManager.Rect(c);
      o.extraflags = ConstantData.ExtraFlags.SEDE_NoColor;
      if (a && a.Data.nativeDataString != null) {
        m(Collab.StringToBuffer(a.Data.nativeDataString));
      } else if (g != null && g.IsCustomContent === true) {
        SDUI.CMSContent.GetCustomSymbolNative(SDUI.AppSettings.ContentSource, e, m);
      } else {
        SDUI.CMSContent.GetSymbolNativeByGUID(SDUI.AppSettings.ContentSource, e, m);
      }
      return o;
    }

    var f = (function (r) {
      var t, a = r.Formats.length;
      for (t = 0; t < a; t++) {
        if (r.Formats[t].Format === Globals.SymbolFormats.EMF)
          return Globals.SymbolFormats.EMF;
      }
      for (t = 0; t < a; t++) {
        if (r.Formats[t].Format === Globals.SymbolFormats.SVGColor)
          return Globals.SymbolFormats.SVGColor;
      }
      for (t = 0; t < a; t++) {
        if (r.Formats[t].Format === Globals.SymbolFormats.SVG)
          return Globals.SymbolFormats.SVG;
      }
      for (t = 0; t < a; t++) {
        if (r.Formats[t].Format === Globals.SymbolFormats.SVG) return Globals.SymbolFormats.SVG;
        if (r.Formats[t].Format === Globals.SymbolFormats.SVGColor) return Globals.SymbolFormats.SVGColor;
        if (r.Formats[t].Format === Globals.SymbolFormats.JPG) return Globals.SymbolFormats.JPG;
        if (r.Formats[t].Format === Globals.SymbolFormats.PNG) return Globals.SymbolFormats.PNG;
      }
      return 0;
    })(r);

    if (f === 0) return;

    c.SymbolID = e;
    switch (f) {
      case Globals.SymbolFormats.EMF:
        c.SymbolURL = Constants.FilePath_HashSVG + r.HashCode + '.svg';
        c.EMFBufferType = FileParser.Image_Dir.dir_meta;
        break;
      case Globals.SymbolFormats.SVG:
        c.ImageURL = Constants.FilePath_SymbolSVG + r.Id + '.svg';
        c.ImageDir = FileParser.Image_Dir.dir_svg;
        c.EMFBufferType = FileParser.Image_Dir.dir_svg;
        c.ImageID = r.Id;
        break;
      case Globals.SymbolFormats.PNG:
        c.ImageURL = Constants.FilePath_SymbolPNG + r.Id + '.png';
        c.ImageDir = FileParser.Image_Dir.dir_png;
        c.EMFBufferType = FileParser.Image_Dir.dir_png;
        break;
      case Globals.SymbolFormats.JPG:
        c.ImageURL = Constants.FilePath_SymbolJPG + r.Id + '.JPEG';
        c.ImageDir = FileParser.Image_Dir.dir_jpg;
        c.EMFBufferType = FileParser.Image_Dir.dir_jpg;
        break;
    }

    c.ObjGrow = r.ScalingData.ObjectGrowFlags;
    c.TextFlags = r.TextData.TextFlags;
    c.SymbolData = r;
    if (!(c.TextFlags & (p.SED_TF_AttachB + p.SED_TF_AttachA + p.SED_TF_AttachC + p.SED_TF_None + p.SED_TF_AttachD))) {
      c.left_sindent = r.TextData.LeftTextIndent;
      c.top_sindent = r.TextData.TopTextIndent;
      c.right_sindent = r.TextData.RightTextIndent;
      c.bottom_sindent = r.TextData.BottomTextIndent;
    }
    c.StyleRecord = Utils1.DeepCopy(u.def.style);
    c.StyleRecord.Line.Thickness = 0;
    c.StyleRecord.Fill.Paint.Opacity = 1;
    c.StyleRecord.Line.Paint.Opacity = 1;
    c.StyleRecord.Text.Paint.Opacity = 1;
    c.extraflags = ConstantData.ExtraFlags.SEDE_NoColor;
    c.StyleRecord.OutsideEffect.OutsideType = 0;
    c.StyleRecord.Name = '';
    c.colorfilter =
      FileParser.SDRColorFilters.SD_NOCOLOR_ALL - FileParser.SDRColorFilters.SD_NOCOLOR_TEXT;

    c.ConnectPoints = [];
    for (i = 0, n = r.ShapeData.ConnectionPoints.length; i < n; i++) {
      c.ConnectPoints.push(
        new Point(r.ShapeData.ConnectionPoints[i].x, r.ShapeData.ConnectionPoints[i].y)
      );
    }

    c.flags = ConstantData.ObjFlags.SEDO_UseConnect | ConstantData.ObjFlags.SEDO_ImageShape;
    c.flags = Utils2.SetFlag(
      c.flags,
      ConstantData.ObjFlags.SEDO_DropOnBorder,
      r.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_DropOnBorder
    );
    c.flags = Utils2.SetFlag(
      c.flags,
      ConstantData.ObjFlags.SEDO_DropOnTable,
      r.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_DropOnTable
    );
    if (r.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_NoLinking) {
      c.hookflags = 0;
    }
    if (r.ShapeData.ObjectAttributeFlags & ListManager.LibraryFlags.SEDL_NoTarget) {
      c.targflags = 0;
    }
    if (r.ShapeData.ObjectType > 0) {
      c.objecttype = r.ShapeData.ObjectType;
    }
    c.attachpoint = new Point(r.ShapeData.AttachPoint.x, r.ShapeData.AttachPoint.y);
    if (r.ShapeData.UseFlags & ListManager.LibraryUseFlags.SDLE_UseText) {
      c.TextGrow = r.TextData.TextGrow;
      if (r.TextData.HorizontalJustification >= 0 && r.TextData.VerticalJustification >= 0) {
        c.TextAlign = SDF.W32JustToTextAlign(
          r.TextData.HorizontalJustification,
          r.TextData.VerticalJustification
        );
      }
    }

    if (f === Globals.SymbolFormats.EMF) {
      o = new ListManager.Rect(c);
      o.EMFHash = r.HashCode;
      o.EMFBufferType = FileParser.Image_Dir.dir_meta;
      s = new ListManager.Rect(c);
      s.EMFHash = r.HashCode;
      SDUI.CMSContent.GetSymbolEMFByHash(SDUI.AppSettings.ContentSource, r.HashCode, h);
    } else if (f === Globals.SymbolFormats.SVGColor) {
      c.colorfilter = FileParser.SDRColorFilters.SD_NOCOLOR_STYLE;
      o = new ListManager.SVGFragmentSymbol(c);
      o.EMFHash = r.HashCode;
      var L = { isSymbol: false, AllowAddEMFHash: false };
      SDF.GetSVGFragment(L, o, o.EMFHash);
    } else {
      o = new ListManager.Rect(c);
      s = new ListManager.Rect(c);
      o.EMFHash = r.Id;
      if (f === Globals.SymbolFormats.SVG) {
        if (D) {
          SDUI.Commands.MainController.Symbols.StoreSpecialSymbolObject(e, s);
        }
      } else if (f === Globals.SymbolFormats.PNG) {
        SDUI.CMSContent.GetSymbolPNGByID(SDUI.AppSettings.ContentSource, r.Id, h);
      } else if (f === Globals.SymbolFormats.JPG) {
        SDUI.CMSContent.GetSymbolJPGByID(SDUI.AppSettings.ContentSource, r.Id, h);
      }
    }
    return o;
  }
  return null;
};















ListManager.LM.prototype.BuildCreateMessage = function (e, t) {
  if (Collab.AllowMessage()) {
    var a = [];
    if (
      Collab.IsSecondary() &&
      (
        this.theMoveList &&
          this.theMoveList.length ? a = a.concat(this.theMoveList) : a.push(this.theDrawShape.BlockID)
      ),
      this.theDrawShape.SymbolID
    ) {
      e.symbolID = this.theDrawShape.SymbolID,
        e.CreateList = a,
        e.StyleRecord = Utils1.DeepCopy(this.theDrawShape.StyleRecord),
        e.Actions = [];
      var r = new Collab.MessageAction(ConstantData.CollabMessageActions.CreateSymbol);
      if (
        e.Actions.push(r),
        r = new Collab.MessageAction(ConstantData.CollabMessageActions.MoveObject),
        e.Actions.push(r),
        r = new Collab.MessageAction(ConstantData.CollabMessageActions.LinkObject),
        e.Actions.push(r),
        i = Collab.BuildMessage(ConstantData.CollabMessages.AddSymbol, e, !1, !0),
        !t
      ) return i;
      Collab.SendMessage(i)
    } else {
      e.attributes = {},
        e.CreateList = a,
        e.attributes.StyleRecord = Utils1.DeepCopy(this.theDrawShape.StyleRecord),
        e.attributes.Frame = Utils1.DeepCopy(this.theDrawShape.Frame),
        e.attributes.TMargins = Utils1.DeepCopy(this.theDrawShape.TMargins),
        e.attributes.TextGrow = this.theDrawShape.TextGrow,
        e.attributes.ObjGrow = this.theDrawShape.ObjGrow,
        e.attributes.TextAlign = this.theDrawShape.TextAlign,
        e.attributes.flags = this.theDrawShape.flags,
        e.attributes.moreflags = this.theDrawShape.moreflags,
        e.attributes.shapeparam = this.theDrawShape.shapeparam,
        e.attributes.Dimensions = this.theDrawShape.Dimensions,
        e.attributes.dataclass = this.theDrawShape.dataclass,
        this.theDrawShape.VertexArray &&
        (
          e.attributes.VertexArray = Utils1.DeepCopy(this.theDrawShape.VertexArray)
        ),
        e.ShapeType = this.theDrawShape.ShapeType,
        e.Actions = [];
      r = new Collab.MessageAction(ConstantData.CollabMessageActions.CreateShape);
      e.Actions.push(r),
        r = new Collab.MessageAction(ConstantData.CollabMessageActions.MoveObject),
        e.Actions.push(r),
        r = new Collab.MessageAction(ConstantData.CollabMessageActions.LinkObject),
        e.Actions.push(r);
      var i = Collab.BuildMessage(ConstantData.CollabMessages.AddSymbol, e, !1, !0);
      if (!t) return i;
      Collab.SendMessage(i)
    }
  }
},











  ListManager.LM.prototype.ResetHammerGesture = function (e, t, a) {

    var r = GlobalData.optManager.ActiveVisibleZList(),
      i = 0,
      n = 0,
      o = !1;
    for (i = 0; i < r.length; i++) {
      var s = GlobalData.optManager.svgObjectLayer.GetElementByID(r[i]).svgObj.SDGObj.GetEventProxy();
      for (n = 0; n < s.eventHandlers.length; n++) s.eventHandlers[n].handler === t &&
        (o = !0);
      o &&
        s.on(e, a)
    }
  },
  ,









  ListManager.LM.prototype.IsHookType = function (e, t, a) {
    var r,
      i;
    if (null == this.GetObjectPtr(e, !1)) return !1;
    for (r = i.hooks.length - 1; r >= 0; r--) if (i.hooks[r].objid == t && i.hooks[r].hookpt == a) return !0;
    return !1
  },

  ListManager.LM.prototype.FindExactLink = function (e, t, a) {
    var r = this.FindLink(e, t, !0);
    if (r >= 0) for (; r < e.length && e[r].targetid === t;) {
      if (e[r].hookid === a) return r;
      r++
    }
    return - 1
  }

ListManager.LM.prototypeFindNumberHooked = function (e) {
  var t,
    a = this.GetObjectPtr(this.theLinksBlockID, !1),
    r = this.FindLink(a, e, !0),
    i = 0;
  if (t = a.length, r >= 0) for (; r < t && a[r].targetid === e;) i++,
    r++;
  return i
},



  ListManager.LM.prototype.GetTargetNode = function (e) {
    var t;
    return (t = this.GetObjectPtr(e, !1)) &&
      t.hooks.length &&
      (e = this.GetTargetNode(t.hooks[0].objid)),
      e
  }

ListManager.LM.prototypeGetTargetList = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S = {},
    c = ConstantData.ListCodes.SED_LC_MOVEHOOK;
  if (
    i === ConstantData.ListCodes.SED_LC_MOVETARGANDLINES &&
    (c = i),
    null == (n = this.GetObjectPtr(e, !1))
  ) return a;
  GlobalData.optManager.FixAnyCircularHooks(n);
  for (var u = 0; u < n.hooks.length; u++) s = n.hooks[u].objid,
    a.indexOf(s) < 0 &&
    (
      a.push(s),
      o = this.GetObjectPtr(s, !1),
      r &&
      0 == (o.flags & ConstantData.ObjFlags.SEDO_NotVisible) &&
      (S = o.GetMoveRect(!0, !0), r = Utils2.UnionRect(r, S, r))
    ),
    (l = this.FindLink(t, s, !0)) >= 0 &&
    (a = this.AddToHookList(t, a, l, s, c, 1, r)),
    a = this.GetTargetList(s, t, a, r, i);
  return a
},

  ListManager.LM.prototype.isCircular = function (e, t, a) {
    var r,
      i;
    for (i = e.length, r = 0; r < i; r++) if (e[r].hookid === a) return e[r].targetid === t ||
      this.isCircular(e, t, e[r].targetid);
    return !1
  },











  ListManager.LM.prototype.FilterLinks = function (e, t, a) {
    var r,
      i,
      n,
      o = e.length,
      s = !1;
    endm = !1;
    var l = this.GetObjectPtr(this.theLinksBlockID, !0);
    if (null != l) {
      if (o >= 0) for (r = 0; r < o; r++) (i = l[e[r]].hookid) >= 0 &&
        (n = this.GetObjectPtr(i, !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_MULTIPLICITY &&
        (n.hooks.length && 0 === n.hooks[0].connect.x ? s = !0 : endm = !0);
      if (s || endm) for (r = (o = t.length) - 1; r >= 0; r--) (i = l[t[r]].hookid) >= 0 &&
        (n = this.GetObjectPtr(i, !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_MULTIPLICITY &&
        (
          n.hooks.length &&
            0 === n.hooks[0].connect.x ? s &&
          (a.push(i), t.splice(r, 1)) : endm &&
          (a.push(i), t.splice(r, 1))
        )
    }
  },

  ListManager.LM.prototype.GetPolyLineLinks = function (e, t) {
    var a,
      r,
      i,
      n,
      o,
      s,
      l,
      S = [],
      c = {},
      u = [],
      p = this.GetObjectPtr(this.theLinksBlockID, !0);
    if (null == p) return null;
    if (n = p.length, null == (r = this.GetObjectPtr(e, !1))) return null;
    var d = new HitResult(- 1, 0, null);
    if ((i = this.FindLink(p, e, !0)) >= 0) for (; i < n && p[i].targetid === e;) {
      if ((s = p[i].hookid) >= 0) {
        if (null == (a = this.GetObjectPtr(s, !0))) {
          i++;
          continue
        }
        for (l = - 1, o = 0; o < a.hooks.length; o++) if (a.hooks[o].objid === e) {
          l = o;
          break
        }
        l >= 0 &&
          (
            u.splice(0),
            u.push(
              new Point(a.hooks[l].connect.x, a.hooks[l].connect.y)
            ),
            c = r.GetPerimPts(e, u, a.hooks[l].hookpt, !1, null, s),
            d.hitcode = 0,
            r.Hit(c[0], !1, !1, d),
            d.hitcode &&
            d.segment >= t &&
            S.push(i)
          )
      }
      i++
    }
    return S
  },

  ListManager.LM.prototype.FindChildObject = function (e, t, a) {
    var r,
      i,
      n,
      o = this.GetObjectPtr(this.theLinksBlockID, !1),
      s = this.FindLink(o, e, !0);
    if (r = o.length, s >= 0) for (; s < r && o[s].targetid === e;) {
      if (
        (i = o[s].hookid) !== a &&
        (n = this.GetObjectPtr(i, !1)) &&
        (null == t || n.DrawingObjectBaseClass === t)
      ) return i;
      s++
    }
    return - 1
  }



ListManager.LM.prototype.FindAllChildLines = function (e, t) {
  for (
    var a = {
      lindex: - 1,
      id: - 1,
      hookpt: 0
    },
    r = [];
    GlobalData.optManager.FindChildArrayByIndex(e, a, t, ConstantData.DrawingObjectBaseClass.LINE) > 0;
  ) r.push(a.id);
  return r
},




  ListManager.LM.prototype.SD_AutoInsertShape = function (e, t) {
    var a,
      r,
      i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h = [],
      m = [],
      C = [],
      y = [],
      f = (
        ConstantData.Defines.SED_CDim,
        ConstantData.LinkFlags.SED_L_MOVE
      ),
      L = ConstantData.LinkFlags.SED_L_CHANGE,
      I = (
        ConstantData.Defines.SED_SegMinSeg,
        function (e, t, a, r) {
          var i,
            n,
            o,
            s = 0;
          if (
            n = t.length,
            5 === (o = e.segl.pts.length - 1) &&
            a + 4 < n &&
            (t[2 + a] = t[4 + a]),
            r
          ) for (i = o - 1; i > 0 && !(n - 1 - s < 0); i--) e.segl.lengths[i] = t[n - 1 - s],
            s++;
          else for (i = 0; i < o && !(i + a >= n); i++) e.segl.lengths[i] = t[i + a],
            s++;
          return s
        }
      );
    n = this.GetObjectPtr(t, !0),
      o = this.GetObjectPtr(e, !0);
    var T = this.GetPolyLineLinks(t, 0);
    if (
      T &&
      T.length &&
      this.MoveLinks(t, t, T, y),
      a = Business.Base.prototype.DuplicateShape(t, !1, !1),
      (s = this.GetObjectPtr(a, !0)).DataID >= 0
    ) {
      var b = GlobalData.objectStore.GetObject(s.DataID);
      b &&
        b.Delete(),
        s.DataID = - 1
    }
    for (
      s.StartPoint.x = n.StartPoint.x,
      s.StartPoint.y = n.StartPoint.y,
      s.EndPoint.x = n.EndPoint.x,
      s.EndPoint.y = n.EndPoint.y,
      r = n.hooks.length,
      i = 0;
      i < r;
      i++
    ) h.push(n.hooks[i].objid);
    this.SED_AutoCNGetTargetPoint(e, this.LinkParams.AutoPoints[0], m),
      this.SED_AutoCNGetTargetPoint(e, this.LinkParams.AutoPoints[1], C);
    var M = function (e, t) {
      var a,
        r,
        i,
        n,
        o = [];
      r = e.segl.pts.length,
        n = t[0].index;
      var s = Utils2.Pt2Rect(e.StartPoint, e.EndPoint),
        l = {
          x: t[0].x - s.x,
          y: t[0].y - s.y
        },
        S = {
          x: t[1].x - s.x,
          y: t[1].y - s.y
        };
      for (a = 1; a < n; a++) i = Utils2.IsEqual(e.segl.pts[a].y, e.segl.pts[a - 1].y) ? Math.abs(e.segl.pts[a].x - e.segl.pts[a - 1].x) : Math.abs(e.segl.pts[a].y - e.segl.pts[a - 1].y),
        o.push(i);
      for (
        i = Utils2.IsEqual(e.segl.pts[n - 1].y, l.y) ? Math.abs(e.segl.pts[n - 1].x - l.x) : Math.abs(e.segl.pts[n - 1].y - l.y),
        o.push(i),
        i = Utils2.IsEqual(e.segl.pts[n].y, S.y) ? Math.abs(e.segl.pts[n].x - S.x) : Math.abs(e.segl.pts[n].y - S.y),
        o.push(i),
        a = n + 1;
        a < r;
        a++
      ) i = Utils2.IsEqual(e.segl.pts[a].y, e.segl.pts[a - 1].y) ? Math.abs(e.segl.pts[a].x - e.segl.pts[a - 1].x) : Math.abs(e.segl.pts[a].y - e.segl.pts[a - 1].y),
        o.push(i);
      return o
    }(n, this.LinkParams.AutoPoints);
    for (
      u = ConstantData.HookPts.SED_KTR,
      p = ConstantData.HookPts.SED_KTR,
      ConstantData.HookPts.SED_KTL,
      d = ConstantData.HookPts.SED_KTL,
      D = - 1,
      i = 0;
      i < r;
      i++
    ) n.hooks[i].hookpt === u &&
      (D = i);
    D >= 0 &&
      this.UpdateHook(a, - 1, n.hooks[D].objid, p, n.hooks[D].connect, n.hooks[D].cellid),
      0 === n.segl.firstdir &&
      (
        n.segl.pts[1].x === n.segl.pts[0].x ? n.StartPoint.y < n.EndPoint.y ? n.segl.firstdir = ConstantData.SegLDir.SED_KBC : n.segl.firstdir = ConstantData.SegLDir.SED_KTC : n.StartPoint.x < n.EndPoint.x ? n.segl.firstdir = ConstantData.SegLDir.SED_KRC : n.segl.firstdir = ConstantData.SegLDir.SED_KLC
      ),
      0 === s.segl.lastdir &&
      (
        r = s.segl.pts.length,
        s.segl.pts[r - 1].x === s.segl.pts[r - 2].x ? s.StartPoint.y < s.EndPoint.y ? s.segl.lastdir = ConstantData.SegLDir.SED_KTC : s.segl.lastdir = ConstantData.SegLDir.SED_KBC : s.StartPoint.x < s.EndPoint.x ? s.segl.lastdir = ConstantData.SegLDir.SED_KLC : s.segl.lastdir = ConstantData.SegLDir.SED_KRC
      ),
      n.segl.lastdir = o.GetSegLFace(m[0], n.StartPoint, this.LinkParams.AutoPoints[0]),
      this.UpdateHook(t, D, e, u, m[0], null),
      l = new Point(
        this.LinkParams.AutoPoints[0].x,
        this.LinkParams.AutoPoints[0].y
      ),
      n.EndPoint.x = l.x,
      n.EndPoint.y = l.y,
      n.SegLFormat(l, ConstantData.ActionTriggerType.LINEEND, 0),
      n.CalcFrame();
    var P = I(n, M, 0, !1);
    n.SegLFormat(l, ConstantData.ActionTriggerType.LINEEND, 0),
      n.CalcFrame(),
      this.AddToDirtyList(t),
      s.segl.firstdir = o.GetSegLFace(C[0], n.EndPoint, this.LinkParams.AutoPoints[1]),
      l = new Point(
        this.LinkParams.AutoPoints[1].x,
        this.LinkParams.AutoPoints[1].y
      ),
      g = this.LinkParams.AutoSeg;
    s.segl.lengths[- 1];
    if (
      Utils2.IsEqual(s.segl.pts[g].x, s.segl.pts[g - 1].x) ? (
        s.segl.lengths[0] = s.segl.pts[g].y + s.StartPoint.y - l.y,
        s.segl.lengths[0]
      ) : (
        s.segl.lengths[0] = s.segl.pts[g].x + s.StartPoint.x - l.x,
        s.segl.lengths[0]
      ),
      s.StartPoint.x = l.x,
      s.StartPoint.y = l.y,
      s.SegLFormat(l, ConstantData.ActionTriggerType.LINESTART, 0),
      s.CalcFrame(),
      I(s, M, P, !1),
      s.SegLFormat(l, ConstantData.ActionTriggerType.LINESTART, 0),
      s.CalcFrame(),
      this.AddToDirtyList(a),
      y
    ) for (r = y.length, i = 0; i < r; i++) (c = y[i].obj).objecttype !== ConstantData.ObjectTypes.SD_OBJT_MULTIPLICITY &&
      (
        Utils2.pointInRect(s.r, y[i].pt) ? (
          S = s.GetTargetPoints(y[i].pt, ConstantData.HookFlags.SED_LC_NoSnaps, null)
        ) &&
          S.length &&
          this.UpdateHook(
            c.BlockID,
            y[i].index,
            s.BlockID,
            c.hooks[y[i].index].hookpt,
            S[0],
            null
          ) : (
            S = n.GetTargetPoints(y[i].pt, ConstantData.HookFlags.SED_LC_NoSnaps, null)
          ) &&
          S.length &&
        (
          c.hooks[y[i].index].connect.x = S[0].x,
          c.hooks[y[i].index].connect.y = S[0].y
        )
      );
    for (
      this.UpdateHook(a, - 1, e, d, C[0], null),
      this.SetLinkFlag(e, f | L),
      this.SetLinkFlag(t, f | L),
      this.SetLinkFlag(a, f | L),
      r = h.length,
      i = 0;
      i < r;
      i++
    ) this.SetLinkFlag(h[i], f | L)
  }

ListManager.LM.prototypeSED_AutoCNGetTargetPoint = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = this.GetObjectPtr(e, !1),
    p = {},
    d = - 1;
  p.x = t.x,
    p.y = t.y,
    r = u.GetTargetPoints(
      p,
      ConstantData.HookFlags.SED_LC_NoSnaps | ConstantData.HookFlags.SED_LC_ForceEnd,
      null
    ),
    i = u.GetTargetPoints(
      p,
      ConstantData.HookFlags.SED_LC_NoSnaps | ConstantData.HookFlags.SED_LC_ForceEnd,
      null
    );
  var D = 1e+30;
  for (o = (n = u.GetPerimPts(e, r, null, !1, null, - 1)).length, s = 0; s < o; s++) D > (c = (l = t.x - n[s].x) * l + (S = t.y - n[s].y) * S) &&
    (d = s, D = c);
  d >= 0 &&
    a.push(new Point(i[d].x, i[d].y))
}



ListManager.LM.prototype.SeparateReturns = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y = [],
    f = {},
    L = [],
    I = [],
    T = [],
    b = [],
    M = [],
    P = ConstantData.HookPts,
    R = ConstantData.Defines.SED_CDim,
    A = 1000,
    _ = function (e, t) {
      var a = t * e.length;
      a > R / 2 &&
        (t *= R / 2 / a);
      return t
    },
    E = function (e, t, a, r, i) {
      var n,
        o,
        s,
        l,
        S,
        u,
        D,
        g,
        h,
        m,
        C,
        y,
        f = [],
        L = [],
        I = {};
      o = e.length;
      for (
        GlobalData.optManager.SetLinkFlag(t, ConstantData.LinkFlags.SED_L_MOVE),
        C = GlobalData.optManager.GetObjectPtr(t, !1),
        n = 0;
        n < o;
        n++
      ) s = GlobalData.optManager.GetObjectPtr(e[n], !1),
        y = Utils2.Pt2Rect(s.StartPoint, s.EndPoint),
        s.hooks[0].objid === t ? (p = s.hooks[0].hookpt, g = 0) : (p = s.hooks[1].hookpt, g = 1),
        p === P.SED_KTL ? (S = 0, l = s.segl.pts.length > 2 ? 2 : 1) : (S = (u = s.segl.pts.length) - 1, (l = u - 3) < 0 && (l = 0)),
        D = y.x + s.segl.pts[S].x,
        (I = new Point(0, 0)).x = y.x + s.segl.pts[l].x,
        I.y = y.y + s.segl.pts[l].y,
        I.index = n,
        I.hookindex = g,
        I.len = s.segl.pts.length,
        D <= I.x ? L.push(I) : f.push(I);
      for (
        L.sort((function (e, t) {
          return t.y === e.y ? t.x - e.x : a * (t.y - e.y)
        })),
        f.sort((function (e, t) {
          return t.y === e.y ? e.x - t.x : a * (t.y - e.y)
        })),
        o = f.length,
        c = R / 2,
        (L.length || i) &&
        (c -= r / 2),
        n = 0;
        n < o;
        n++
      ) I = f[n],
        (s = GlobalData.optManager.GetObjectPtr(e[I.index], !1)).hooks[I.hookindex].connect.x = c,
        c -= r;
      for (o = L.length, c = R / 2, (f.length || i) && (c += r / 2), n = 0; n < o; n++) if (
        I = L[n],
        (s = GlobalData.optManager.GetObjectPtr(e[I.index], !1)).hooks[I.hookindex].connect.x = c,
        c += r,
        I.len > 3
      ) {
        for (m = 0, h = n + 1; h < o; h++) L[h].y == I.y &&
          m++;
        m &&
          (
            d = C.Frame.width / (R / r) * m,
            s.segl.lengths[0] += d,
            s.segl.pts[1].y += a * d,
            s.segl.pts[2].y += a * d
          )
      }
    },
    w = function (e, t, a, r, i) {
      var n,
        o,
        s,
        l,
        S,
        c,
        D,
        g,
        h,
        m,
        C,
        y,
        f = [],
        L = [],
        I = {};
      o = e.length;
      for (
        GlobalData.optManager.SetLinkFlag(t, ConstantData.LinkFlags.SED_L_MOVE),
        C = GlobalData.optManager.GetObjectPtr(t, !1),
        n = 0;
        n < o;
        n++
      ) s = GlobalData.optManager.GetObjectPtr(e[n], !1),
        y = Utils2.Pt2Rect(s.StartPoint, s.EndPoint),
        s.hooks[0].objid === t ? (p = s.hooks[0].hookpt, g = 0) : (p = s.hooks[1].hookpt, g = 1),
        p === P.SED_KTL ? (S = 0, l = s.segl.pts.length > 2 ? 2 : 1) : (S = (c = s.segl.pts.length) - 1, (l = c - 3) < 0 && (l = 0)),
        D = y.y + s.segl.pts[S].y,
        (I = new Point(0, 0)).x = y.x + s.segl.pts[l].x,
        I.y = y.y + s.segl.pts[l].y,
        I.index = n,
        I.hookindex = g,
        I.len = s.segl.pts.length,
        D <= I.y ? L.push(I) : f.push(I);
      for (
        L.sort((function (e, t) {
          return t.x === e.x ? t.y - e.y : a * (t.x - e.x)
        })),
        f.sort((function (e, t) {
          return t.x === e.x ? e.y - t.y : a * (t.x - e.x)
        })),
        o = f.length,
        u = R / 2,
        (L.length || i) &&
        (u -= r / 2),
        n = 0;
        n < o;
        n++
      ) I = f[n],
        (s = GlobalData.optManager.GetObjectPtr(e[I.index], !1)).hooks[I.hookindex].connect.y = u,
        u -= r;
      for (o = L.length, u = R / 2, (f.length || i) && (u += r / 2), n = 0; n < o; n++) if (
        I = L[n],
        (s = GlobalData.optManager.GetObjectPtr(e[I.index], !1)).hooks[I.hookindex].connect.y = u,
        u += r,
        I.len > 3
      ) {
        for (m = 0, h = n + 1; h < o; h++) L[h].x == I.x &&
          m++;
        m &&
          (
            d = C.Frame.height / (R / r) * m,
            s.segl.lengths[0] += d,
            s.segl.pts[1].x += a * d,
            s.segl.pts[2].x += a * d
          )
      }
    };
  e = this.ActiveVisibleZList();
  var F = this.GetObjectPtr(this.theLinksBlockID, !1),
    v = !1;
  for (a = e.length, t = 0; t < a; t++) if (
    i = e[t],
    v = !1,
    r = GlobalData.optManager.GetObjectPtr(i, !1),
    A = R / r.Frame.width * 10,
    C = R / r.Frame.height * 10,
    r.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE
  ) {
    for (
      g = !1,
      D = !1,
      m = !1,
      h = !1,
      y = [],
      n = (
        y = GlobalData.optManager.GetHookList(
          F,
          y,
          r.BlockID,
          r,
          ConstantData.ListCodes.SED_LC_LINESONLY,
          f
        )
      ).length,
      L = [],
      o = 0;
      o < n;
      o++
    ) l = y[o],
      (s = GlobalData.optManager.GetObjectPtr(l, !1)).DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.LINE ||
      s.LineType !== ConstantData.LineType.SEGLINE &&
      s.LineType !== ConstantData.LineType.ARCSEGLINE ||
      L.push(l),
      s.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.CONNECTOR &&
      (
        (s = GlobalData.optManager.GetObjectPtr(l, !1)).hooks[0].connect.x === R ? s.hooks[0].connect.y == R / 2 &&
          (D = !0) : 0 === s.hooks[0].connect.x ? s.hooks[0].connect.y == R / 2 &&
            (g = !0) : s.hooks[0].connect.y === R ? s.hooks[0].connect.x == R / 2 &&
              (m = !0) : 0 === s.hooks[0].connect.y &&
              s.hooks[0].connect.x == R / 2 &&
        (h = !0)
      );
    for (S = L.length, I = [], b = [], T = [], M = [], o = 0; o < S; o++) switch (
      l = L[o],
      s = GlobalData.optManager.GetObjectPtr(l, !1),
      (p = s.hooks[0].objid === i ? s.hooks[0].hookpt : s.hooks[1].hookpt) === P.SED_KTL ? s.segl.firstdir : s.segl.lastdir
    ) {
        case P.SED_KTC:
          b.push(l);
          break;
        case P.SED_KBC:
          M.push(l);
          break;
        case P.SED_KLC:
          I.push(l);
          break;
        case P.SED_KRC:
          T.push(l)
      }
    M.length > 1 &&
      (E(M, i, 1, _(M, A), m), v = !0),
      b.length > 1 &&
      (E(b, i, - 1, _(b, A), h), v = !0),
      T.length > 1 &&
      (w(T, i, 1, _(T, C), D), v = !0),
      I.length > 1 &&
      (w(I, i, - 1, _(I, C), g), v = !0),
      v &&
      (
        GlobalData.optManager.UpdateLinks(),
        GlobalData.optManager.RenderDirtySVGObjects()
      )
  }
},



  ListManager.LM.prototype.OpenTextEdit = function (e) {
    if (- 1 != e) {
      var t = this.svgObjectLayer.GetElementByID(e);
      this.ActivateTextEdit(t);
      var a = this.svgDoc.GetActiveEdit();
      if (null == a) return;
      var r = a.GetText().length;
      a.SetSelectedRange(0, r)
    }
  }

ListManager.LM.prototypeTextEdit_PauseTyping = function () {
  clearTimeout(GlobalData.optManager.textEntryTimer),
    GlobalData.optManager.textEntryTimer = null,
    GlobalData.optManager.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
};





ListManager.LM.prototypeFlushTextToLMBlock = function () {
  var e = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  if (- 1 != e.theActiveTextEditObjectID) {
    (e = this.GetObjectPtr(this.theTEDSessionBlockID, !0)).TELastOp = ConstantData.TELastOp.INIT;
    var t = this.svgDoc.GetActiveEdit();
    if (!t) return;
    var a = null,
      r = null,
      i = this.GetObjectPtr(e.theActiveTextEditObjectID, !1);
    if (!i) return;
    var n = i.DataID;
    if (- 1 != n && (a = t.GetRuntimeText(), r = t.GetSelectedRange(), a)) {
      var o = this.GetObjectPtr(n, !0);
      o.runtimeText = a,
        o.selrange = r
    }
  }
},





  ListManager.LM.prototypeTEDragStartFactory = function (e) {
    return function (t) {
      return t.preventDefault(),
        t.stopPropagation(),
        t.gesture.preventDefault(),
        t.gesture.stopPropagation(),
        e.HandleMouseDown(t),
        !1
    }
  }

ListManager.LM.prototypeTEClickAreaDragStartFactory = function (e) {
  return function (t) {
    return t.preventDefault(),
      t.stopPropagation(),
      t.gesture.preventDefault(),
      t.gesture.stopPropagation(),
      e.HandleMouseDown(t),
      !1
  }
}

ListManager.LM.prototypeTEDragFactory = function (e) {
  return function (t) {
    return t.preventDefault(),
      t.stopPropagation(),
      t.gesture.preventDefault(),
      t.gesture.stopPropagation(),
      e.HandleMouseMove(t),
      !1
  }
}

ListManager.LM.prototypeTEDragEndFactory = function (e) {
  return function (t) {
    return t.preventDefault(),
      t.stopPropagation(),
      t.gesture.preventDefault(),
      t.gesture.stopPropagation(),
      e.HandleMouseUp(t),
      Collab.UnBlockMessages(),
      !1
  }
}






ListManager.LM.prototypeCreateTextBlock = function (e, t, a, r) {
  var i = {},
    n = e.GetTextDefault(i);
  if (!n) return - 1;
  var o = this.CalcDefaultInitialTextStyle(n),
    s = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
  if (
    s.SetText(t),
    s.SetFormat(o),
    s.SetParagraphStyle(i),
    e instanceof ListManager.BaseShape
  ) {
    if (null == e.vjust) {
      var l = SDF.TextAlignToJust(e.TextAlign);
      e.vjust = l.vjust
    }
    s.SetVerticalAlignment(e.vjust)
  }
  if (a) {
    var S = s.CalcTextFit(32000);
    a.height = S.height,
      a.width = S.width
  }
  var c = s.GetRuntimeText(),
    u = s.GetSelectedRange(),
    p = new ListManager.TextObject({
    });
  return p.runtimeText = c,
    p.selrange = u,
    GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, p).ID
}

ListManager.LM.prototypeClearTextBlock = function (e, t) {
  var a = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
  if (t.Data.runtimeText.text.length) {
    a.SetRuntimeText(t.Data.runtimeText),
      a.SetHyperlink(null, 0, t.Data.runtimeText.text.length),
      a.SetText('');
    var r = a.GetRuntimeText();
    t.Data.runtimeText = r;
    var i = GlobalData.optManager.svgObjectLayer.GetElementByID(e);
    if (i) {
      var n = i.textElem;
      n &&
        n.SetText('')
    }
    return !0
  }
  return !1
}

ListManager.LM.prototypeSetTextBlock = function (e, t, a, r) {
  var i = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
  if (
    i.SetRuntimeText(e.runtimeText),
    i.SetText(t),
    null != r &&
    i.SetParagraphAlignment(r),
    a
  ) {
    var n = i.CalcTextFit(32000);
    a.height = n.height,
      a.width = n.width
  }
  var o = i.GetRuntimeText();
  return e.runtimeText = o,
    !0
}

ListManager.LM.prototypeCreateTextBlockFromHTML = function (e, t, a) {
  var r = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
  if (this.SetHTMLText(e, r), a && r.SetVerticalAlignment(a), t) {
    var i = t.width ||
      32000,
      n = r.CalcTextFit(i);
    t.height = n.height,
      t.width = n.width
  }
  var o = r.GetRuntimeText(),
    s = r.GetSelectedRange(),
    l = new ListManager.TextObject({
    });
  return l.runtimeText = o,
    l.selrange = s,
    GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, l).ID
}

ListManager.LM.prototypeSetHTMLText = function (e, t) {
  var a = $('p', e);
  if (a.length || (a = $(e)), a.length) {
    var r,
      i = !1,
      n = [],
      o = function (e, a) {
        var r,
          s,
          l = Utils1.DeepCopy(a),
          S = null,
          c = t.GetTextLength();
        if ('P' == e.nodeName) i &&
          (t.SetText('\n', null, c), c++),
          'left' != (s = $(e).css('text-align')) &&
          'center' != s &&
          'right' != s ||
          t.SetParagraphAlignment(s, c),
          i = !0;
        else if ('SPAN' == e.nodeName) {
          if (
            (s = $(e).css('font-family')) &&
            (l.font = s, l.type = GlobalData.docHandler.svgDoc.GetFontType(l.font)),
            (s = $(e).css('font-size')) &&
            (
              s = s.replace('px', ''),
              s = SDF.TextSizeToPointSize(s),
              l.size = SDF.PointSizeToFontSize(s)
            ),
            'normal' != (s = $(e).css('font-weight')) &&
            'bold' != s ||
            (l.weight = s),
            'normal' != (s = $(e).css('font-style')) &&
            'italic' != s ||
            (l.style = s),
            'none' != (s = $(e).css('text-decoration')) &&
            'underline' != s ||
            (l.decoration = s),
            s = $(e).css('color')
          ) {
            if (s.indexOf('rgb(') >= 0) {
              var u = s.split('(')[1].split(')')[0].split(',');
              u &&
                3 == u.length &&
                (
                  s = '#' + (
                    u = u.map(
                      (
                        function (e) {
                          return 1 == (e = parseInt(e).toString(16)).length ? '0' + e : e
                        }
                      )
                    )
                  ).join('')
                )
            }
            '#' == s[0] &&
              (l.color = s)
          }
        } else '#text' == e.nodeName ? (
          e.textContent &&
          '\n' != e.textContent &&
          t.SetText(e.textContent, l, c),
          i = !0
        ) : 'BR' == e.nodeName ? (t.SetText('\n', null, c), i = !1) : 'A' == e.nodeName &&
          (S = {
            link: e.href,
            startPos: t.GetTextLength()
          });
        if (e.childNodes && e.childNodes.length) {
          for (r = 0; r < e.childNodes.length; r++) o(e.childNodes[r], l);
          S &&
            (S.endPos = t.GetTextLength(), S.startPos < S.endPos && n.push(S))
        }
      },
      s = SDGraphics.Text.Formatter.DefaultStyle();
    for (s.size = 12, r = 0; r < a.length; r++) o(a[r], s);
    for (r = 0; r < n.length; r++) t.SetHyperlink(n[r].link, n[r].startPos, n[r].endPos - n[r].startPos);
    var l,
      S = t.GetTextLength();
    if (S > 0) do {
      S--,
        '\n' == (l = t.GetText(S, 1)) &&
        t.DeleteText(S, 1)
    } while (S > 0 && '\n' == l)
  }
},



  ListManager.LM.prototypeChangeObjectTextAttributes = function (e, t, a, r, i, n, o, s) {
    Collab.BeginSecondaryEdit();
    var l,
      S = this.GetObjectPtr(e, !0),
      c = !1,
      u = !(
        S.colorfilter & FileParser.SDRColorFilters.SD_NOCOLOR_TEXT
      );
    if (u || s) {
      a &&
        u &&
        (
          void 0 !== a.FontName &&
          (S.StyleRecord.Text.FontName = a.FontName),
          void 0 !== a.FontId &&
          (S.StyleRecord.Text.FontId = a.FontId),
          void 0 !== a.FontSize &&
          0 !== a.FontSize &&
          (S.StyleRecord.Text.FontSize = a.FontSize),
          void 0 !== a.Face &&
          (S.StyleRecord.Text.Face = a.Face),
          void 0 !== a.Color &&
          (S.StyleRecord.Text.Paint.Color = a.Color),
          void 0 !== a.Opacity &&
          (S.StyleRecord.Text.Paint.Opacity = a.Opacity)
        );
      var p,
        d = S.flags & ConstantData.ObjFlags.SEDO_TextOnly,
        D = S.GetTextObject();
      if (- 1 != D && null != D) {
        this.GetObjectPtr(D, !1);
        if (p = o || this.svgObjectLayer.GetElementByID(e)) var g = p.textElem;
        if (
          r &&
          u &&
          (
            S instanceof ListManager.BaseShape ? (
              g &&
              g.SetParagraphAlignment(r),
              n &&
              g &&
              g.SetVerticalAlignment(n)
            ) : S instanceof ListManager.BaseLine &&
            !d &&
            g &&
            32000 != g.formatter.limits.maxWidth &&
            g &&
            g.SetParagraphAlignment(r)
          ),
          i &&
          u &&
          g &&
          g.SetParagraphStyle(i),
          t &&
          u &&
          g &&
          g.SetFormat(t),
          s &&
          g &&
          g.HasDataFields() &&
          g.UpdateFromData(S.fieldDataTableID, S.fieldDataElemID),
          g
        ) var h = g.GetRuntimeText();
        if (h) {
          if (
            this.GetObjectPtr(D, !0).runtimeText = h,
            this.AddToDirtyList(e),
            c ||
            this.HideAllSVGSelectionStates(),
            c = !0,
            S = this.GetObjectPtr(e, !0),
            r &&
            u
          ) {
            if (n) var m = SDF.TextAlignToWin(S.TextAlign),
              C = SDF.JSJustToWin(n);
            if (
              l = r,
              !n ||
              'top' !== n &&
              'bottom' !== n ||
              (l = n + '-' + r),
              S instanceof ListManager.BaseShape
            ) S.TextAlign = l;
            else if (
              (
                S instanceof ListManager.BaseLine ||
                S instanceof SDJS.Connector
              ) &&
              (S.TextAlign = l, S.LineTextX = 0, S.LineTextY = 0, n && m.vjust !== C)
            ) {
              var y = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
                f = ConstantData.Colors.Color_White;
              y &&
                y.background.Paint.FillType !== ConstantData.FillTypes.SDFILL_TRANSPARENT &&
                (f = y.background.Paint.Color),
                C === FileParser.TextJust.TA_CENTER ? S.StyleRecord.Fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TRANSPARENT &&
                  (
                    S.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
                    S.StyleRecord.Fill.Paint.Color = f
                  ) : C !== FileParser.TextJust.TA_CENTER &&
                  S.StyleRecord.Fill.Paint.FillType !== ConstantData.FillTypes.SDFILL_TRANSPARENT &&
                  f == S.StyleRecord.Fill.Paint.Color &&
                (
                  S.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT
                )
            }
          }
          this.TextResizeCommon(e, !1, !1, o)
        }
      }
    }
  }

ListManager.LM.prototypeChangeSelectedTextAttributes = function (e, t, a, r, i) {
  if (e || t || a || r) {
    if (Collab.BeginSecondaryEdit(), Collab.AllowMessage()) {
      var n = {};
      n.theTEStyle = Utils1.DeepCopy(e),
        n.theSEDStyle = Utils1.DeepCopy(t),
        n.theParagraphAlignment = a,
        n.theParagraphStyle = Utils1.DeepCopy(r),
        Collab.BuildMessage(ConstantData.CollabMessages.SetTextAttributes, n, !0)
    }
    var o,
      s,
      l = this.GetObjectPtr(this.theSelectedListBlockID, !1),
      S = l.length,
      c = 0,
      u = - 1,
      p = a,
      d = 'middle';
    for (
      a &&
      (s = p.indexOf('-')) >= 0 &&
      (d = p.slice(0, s), p = p.slice(s + 1, p.length)),
      c = 0;
      c < S;
      ++c
    ) {
      u = l[c],
        (o = GlobalData.optManager.SD_GetVisioTextChild(u)) >= 0 &&
        (u = o);
      var D = this.GetObjectPtr(u, !0);
      D &&
        0 == (
          D.colorfilter & FileParser.SDRColorFilters.SD_NOCOLOR_TEXT
        ) &&
        D.ChangeTextAttributes(e, t, a, r, p, d)
    }
    i ||
      this.CompleteOperation(null)
  }
}

ListManager.LM.prototypeChangeBackgroundTextColor = function (e, t) {
  if (e !== t) {
    var a,
      r,
      i,
      n = GlobalData.optManager.ZList();
    for (a = n.length, r = 0; r < a; r++) (i = this.GetObjectPtr(n[r], !1)) &&
      i.ChangeBackgroundColor(e, t)
  }
},
  ,
  ListManager.LM.prototype.ChangeFont = function (e) {
    Collab.BeginSecondaryEdit();
    var t = this.GetFontIdByName(e),
      a = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
    if (- 1 != a.theActiveTextEditObjectID || this.bInNoteEdit) {
      this.RegisterLastTEOp(ConstantData.TELastOp.STYLE);
      var r = this.svgDoc.GetActiveEdit(),
        i = r.GetSelectedRange(),
        n = r.GetSelectedFormat();
      if (
        n.font = e,
        r.SetFormat(n, i.start, i.end - i.start),
        this.bInNoteEdit ? this.NoteTextResizeCommon() : this.TextResizeCommon(a.theActiveTextEditObjectID),
        r.SetSelectedRange(i.start, i.end, i.line, i.anchor),
        0 === i.start &&
        r.GetTextLength() === i.end
      ) (o = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).def.style.Text.FontName = e,
        o.def.style.Text.FontId = t,
        o.def.lf.fontName = e;
      this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
    } else if (GlobalData.optManager.bInDimensionEdit) this.CloseEdit(),
      o = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0),
      GlobalData.optManager.theContentHeader.DimensionFont.fontName = e,
      GlobalData.optManager.theContentHeader.DimensionFontStyle.font = e,
      SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_DIMFONT, !1),
      GlobalData.optManager.UpdateAllDimensionLines(!0);
    else {
      var o;
      (o = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).def.style.Text.FontName = e,
        o.def.style.Text.FontId = t,
        o.def.lf.fontName = e,
        this.ChangeSelectedTextAttributes({
          font: e
        }, {
          FontName: e,
          FontId: t
        }, null, null)
    }
  }

ListManager.LM.prototypePointstoPixels = function (e) {
  return 72 * e / 100
}

ListManager.LM.prototypePixelstoPoints = function (e) {
  return Math.floor(100 * e / 72 + 0.5)
}

ListManager.LM.prototypeChangeFontSize = function (e) {
  Collab.BeginSecondaryEdit(),
    GlobalData.docHandler.rulerSettings.showpixels &&
    (e = this.PointstoPixels(e));
  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  if (- 1 != t.theActiveTextEditObjectID || this.bInNoteEdit) {
    this.RegisterLastTEOp(ConstantData.TELastOp.STYLE);
    var a = this.svgDoc.GetActiveEdit(),
      r = a.GetSelectedRange(),
      i = a.GetSelectedFormat();
    if (
      i.size = SDF.PointSizeToFontSize(e),
      a.SetFormat(i, r.start, r.end - r.start),
      this.bInNoteEdit ? this.NoteTextResizeCommon() : this.TextResizeCommon(t.theActiveTextEditObjectID),
      a.SetSelectedRange(r.start, r.end, r.line, r.anchor),
      0 === r.start &&
      a.GetTextLength() === r.end
    ) this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0).def.style.Text.FontSize = e;
    this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
  } else if (GlobalData.optManager.bInDimensionEdit) {
    this.CloseEdit();
    GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
    GlobalData.optManager.theContentHeader.DimensionFont.fontSize = e,
      GlobalData.optManager.theContentHeader.DimensionFontStyle.size = SDF.PointSizeToFontSize(e),
      SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_DIMFONT, !1),
      GlobalData.optManager.UpdateAllDimensionLines(!0)
  } else {
    this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0).def.style.Text.FontSize = e,
      this.ChangeSelectedTextAttributes({
        size: SDF.PointSizeToFontSize(e)
      }, {
        FontSize: e
      }, null, null)
  }
}

ListManager.LM.prototypeChangeFontStyle = function (e) {
  Collab.BeginSecondaryEdit();
  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !1),
    a = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    r = ConstantData.TextFace,
    i = {},
    n = a.def.style.Text.Face;
  switch (
  GlobalData.optManager.bInDimensionEdit &&
  (n = GlobalData.optManager.theContentHeader.DimensionFont.face),
  e
  ) {
    case 'bold':
      this.SelectionState.bold ? (i.weight = 'normal', n &= ~r.Bold) : (i.weight = 'bold', n |= r.Bold);
      break;
    case 'italic':
      this.SelectionState.italic ? (i.style = 'normal', n &= ~r.Italic) : (i.style = 'italic', n |= r.Italic);
      break;
    case 'underline':
      this.SelectionState.underline ? (i.decoration = 'none', n &= ~r.Underline) : (i.decoration = 'underline', n |= r.Underline);
      break;
    case 'super':
      this.SelectionState.superscript ? i.baseOffset = 'none' : i.baseOffset = 'super';
      break;
    case 'sub':
      this.SelectionState.subscript ? i.baseOffset = 'none' : i.baseOffset = 'sub';
      break;
    default:
      return
  }
  if (- 1 != t.theActiveTextEditObjectID || this.bInNoteEdit) {
    this.RegisterLastTEOp(ConstantData.TELastOp.STYLE);
    var o = this.svgDoc.GetActiveEdit(),
      s = o.GetSelectedRange();
    o.SetFormat(i, s.start, s.end - s.start),
      this.bInNoteEdit ? this.NoteTextResizeCommon() : this.TextResizeCommon(t.theActiveTextEditObjectID),
      o.SetSelectedRange(s.start, s.end, s.line, s.anchor),
      0 === s.start &&
      o.GetTextLength() === s.end &&
      (
        (a = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).def.style.Text.Face = n
      ),
      this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
  } else GlobalData.optManager.bInDimensionEdit ? (
    this.CloseEdit(),
    a = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0),
    GlobalData.optManager.theContentHeader.DimensionFont.face = n,
    GlobalData.optManager.theContentHeader.DimensionFontStyle = $.extend(!0, GlobalData.optManager.theContentHeader.DimensionFontStyle, i),
    SDF.ChangeHeader(FileParser.SDROpCodesByName.SDF_C_DIMFONT, !1),
    GlobalData.optManager.UpdateAllDimensionLines(!0)
  ) : (
    (a = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).def.style.Text.Face = n,
    this.ChangeSelectedTextAttributes(i, {
      Face: n
    }, null, null)
  )
}

ListManager.LM.prototypeChangeFontColor = function (e) {
  Collab.BeginSecondaryEdit();
  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  if (- 1 != t.theActiveTextEditObjectID || this.bInNoteEdit) {
    this.RegisterLastTEOp(ConstantData.TELastOp.STYLE);
    var a = this.svgDoc.GetActiveEdit(),
      r = a.GetSelectedRange(),
      i = a.GetSelectedFormat();
    if (
      i.color = e,
      a.SetFormat(i, r.start, r.end - r.start),
      this.bInNoteEdit ? this.NoteTextResizeCommon() : this.TextResizeCommon(t.theActiveTextEditObjectID),
      a.SetSelectedRange(r.start, r.end, r.line, r.anchor),
      0 === r.start &&
      a.GetTextLength() === r.end
    ) this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0).def.style.Text.Paint.Color = e;
    this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
  } else {
    this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0).def.style.Text.Paint.Color = e,
      this.ChangeSelectedTextAttributes({
        color: e
      }, {
        Color: e
      }, null, null)
  }
}

ListManager.LM.prototypeChangeFontOpacity = function (e) {
  Collab.BeginSecondaryEdit();
  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  if (- 1 != t.theActiveTextEditObjectID || this.bInNoteEdit) {
    var a = this.svgDoc.GetActiveEdit(),
      r = a.GetSelectedRange(),
      i = a.GetSelectedFormat();
    if (
      i.colorTrans = e,
      a.SetFormat(i, r.start, r.end - r.start),
      this.bInNoteEdit ? this.NoteTextResizeCommon() : this.TextResizeCommon(t.theActiveTextEditObjectID),
      a.SetSelectedRange(r.start, r.end, r.line, r.anchor),
      0 === r.start &&
      a.GetTextLength() === r.end
    ) this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0).def.style.Text.Paint.Opacity = e;
    this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
  } else {
    this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0).def.style.Text.Paint.Opacity = e,
      this.ChangeSelectedTextAttributes({
        colorTrans: e
      }, {
        Opacity: e
      }, null, null, !0)
  }
}

ListManager.LM.prototypeAddHyperlinkToActiveText = function (e) {
  if (
    - 1 != this.GetObjectPtr(this.theTEDSessionBlockID, !1).theActiveTextEditObjectID ||
    this.bInNoteEdit
  ) {
    var t = this.svgDoc.GetActiveEdit();
    t &&
      (
        this.RegisterLastTEOp(ConstantData.TELastOp.STYLE),
        t.SetSelectedHyperlink(e),
        this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
      )
  }
}

ListManager.LM.prototypeGetHyperlinkFromActiveText = function () {
  var e = '';
  if (
    - 1 != this.GetObjectPtr(this.theTEDSessionBlockID, !1).theActiveTextEditObjectID ||
    this.bInNoteEdit
  ) {
    var t = this.svgDoc.GetActiveEdit();
    t &&
      ((e = t.GetSelectedHyperlink()) || (e = ''))
  }
  return e
}

ListManager.LM.prototypeClearHyperlinkFromActiveText = function () {
  if (
    - 1 != this.GetObjectPtr(this.theTEDSessionBlockID, !1).theActiveTextEditObjectID ||
    this.bInNoteEdit
  ) {
    var e = this.svgDoc.GetActiveEdit();
    e &&
      (
        this.RegisterLastTEOp(ConstantData.TELastOp.STYLE),
        e.DeleteSelectedHyperlink(),
        this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
      )
  }
},



  ListManager.LM.prototypeTextResizeNeedPageResize = function (e, t, a) {
    if (
      !(
        GlobalData.optManager.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto
      )
    ) {
      var r,
        i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
      t > i.dim.x &&
        (
          r = {
            x: (
              i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)
            ).dim.x + GlobalData.optManager.theContentHeader.Page.papersize.x - (
                GlobalData.optManager.theContentHeader.Page.margins.left + GlobalData.optManager.theContentHeader.Page.margins.right
              ),
            y: i.dim.y
          },
          GlobalData.optManager.UpdateEdgeLayers([], i.dim, r),
          i.dim.x += GlobalData.optManager.theContentHeader.Page.papersize.x - (
            GlobalData.optManager.theContentHeader.Page.margins.left + GlobalData.optManager.theContentHeader.Page.margins.right
          ),
          GlobalData.optManager.ResizeSVGDocument()
        ),
        a > i.dim.y &&
        (
          r = {
            x: (
              i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)
            ).dim.x,
            y: i.dim.y + GlobalData.optManager.theContentHeader.Page.papersize.y - (
              GlobalData.optManager.theContentHeader.Page.margins.top + GlobalData.optManager.theContentHeader.Page.margins.bottom
            )
          },
          GlobalData.optManager.UpdateEdgeLayers([], i.dim, r),
          i.dim.y += GlobalData.optManager.theContentHeader.Page.papersize.y - (
            GlobalData.optManager.theContentHeader.Page.margins.top + GlobalData.optManager.theContentHeader.Page.margins.bottom
          ),
          GlobalData.optManager.ResizeSVGDocument()
        )
    }
  }

ListManager.LM.prototypeTextPinFrame = function (e, t) {
  var a = ConstantData.Defines.SED_EdgeSlop;
  if (
    e.x < a &&
    (e.x = a),
    e.y < a &&
    (e.y = a),
    this.theContentHeader.flags & ConstantData.ContentHeaderFlags.CT_DA_NoAuto
  ) {
    var r = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !1),
      i = e.x + e.width - r.dim.x + a;
    if (i > 0 && e.x >= i && (e.x -= i), (i = e.y + e.height - r.dim.y + a) > 0) {
      if (!(e.y - t >= i)) {
        var n = new Error(Resources.Strings.Error_Bounds);
        throw n.name = '1',
        n
      }
      e.y -= i
    }
  }
}


ListManager.LM.prototypeTextAutoScroll = function (e) {
  if (
    - 1 != GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theTEDSessionBlockID, !1).theActiveTextEditObjectID
  ) {
    var t = GlobalData.optManager.svgObjectLayer.GetElementByID(e);
    if (t && t.textElem) {
      var a = t.textElem.GetInputCursorPos();
      if (a) {
        var r = GlobalData.optManager.svgDoc.ConvertWindowToDocCoords(a.x2, a.y2);
        GlobalData.docHandler.ScrollToPosition(r.x, r.y)
      }
    }
  }
}


ListManager.LM.prototypeTextCallback = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = r.ID,
    p = null,
    d = !1,
    D = GlobalData.gBusinessManager,
    g = function () {
      var e = Business.GetSelectionBusinessManager(u);
      e &&
        (D = e)
    };
  try {
    var h = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theTEDSessionBlockID, !1);
    if (
      'spellcheck' === e &&
      (p = GlobalData.optManager.GetObjectPtr(u, !1)) &&
      (
        (S = p.GetTable(!1)) &&
        (
          c = a.GetUserData(),
          d = !(S.select >= 0) ||
          S.cells[S.select].DataID != c
        ),
        null == GlobalData.optManager.svgDoc.GetActiveEdit() &&
        (d = !0)
      ),
      h.theActiveTextEditObjectID != u ||
      d
    ) {
      if ('spellcheck' === e) (p = GlobalData.optManager.GetObjectPtr(u, !1)) &&
        (c = (S = p.GetTable(!1)) ? a.GetUserData() : p.DataID),
        c > 0 &&
        a &&
        (
          o = a.GetRuntimeText(),
          (s = GlobalData.optManager.GetObjectPtr(c, SDJS.Editor.IsStateOpen())) &&
          (s.runtimeText = o),
          SDJS.Editor.IsStateOpen() ||
          (
            (l = []).push(GlobalData.objectStore.GetObject(c)),
            SDF.SaveChangedBlocks(GlobalData.stateManager.CurrentStateID, 0, GlobalData.stateManager.CurrentStateID, l)
          )
        );
      return
    }
    switch (e) {
      case 'activate':
        (i = GlobalData.optManager.Table_GetActiveID()) >= 0 &&
          (
            GlobalData.optManager.Table_UpdateSelectionAttributes(i, !0),
            n = new ListManager.SelectionAttributes,
            $.extend(!0, n, GlobalData.optManager.SelectionState),
            SDUI.Commands.MainController.UpdateActiveSelection(n, !1)
          ),
          SDUI.Commands.MainController.DataPanel.IdleDataPanel(null, !0);
        break;
      case 'dragoutside':
        if (
          (p = GlobalData.optManager.GetObjectPtr(u, !1)) &&
          (S = p.GetTable(!1)) &&
          S.select >= 0
        ) {
          var m = p.GetTextParams(!1),
            C = t,
            y = {};
          y.x = C.x + p.Frame.x,
            y.y = C.y + p.Frame.y;
          var f = m.trect;
          Utils2.pointInRect(f, y) ||
            (
              a.editor.isActive &&
              a.editor.BeginTableDrag(),
              y.y -= p.trect.y,
              y.x -= p.trect.x,
              GlobalData.optManager.Table_Select(p, S, y, !0, null, !1)
            )
        }
        break;
      case 'dragoutside_mouseup':
        GlobalData.optManager.DeactivateTextEdit(!1),
          GlobalData.optManager.FormatPainterMode === ListManager.FormatPainterModes.TEXT &&
          (
            GlobalData.optManager.FormatPainterClick(u, null),
            !0 !== this.FormatPainterSticky &&
            (
              GlobalData.optManager.FormatPainterMode = ListManager.FormatPainterModes.None
            )
          );
        break;
      case 'keyend':
        switch (t.keyCode) {
          case Resources.Keys.Tab:
            if (
              h.theActiveTableObjectID >= 0 &&
              GlobalData.optManager.Table_Navigate(
                h.theActiveTableObjectID,
                Resources.Keys.Tab,
                t.shiftKey,
                t.ctrlKey
              )
            ) return !0;
            if (g(), !D.Tab(t.shiftKey)) return !0;
            break;
          case Resources.Keys.Enter:
            if (
              h.theActiveTableObjectID >= 0 &&
              GlobalData.optManager.Table_Navigate(
                h.theActiveTableObjectID,
                Resources.Keys.Enter,
                t.shiftKey,
                t.ctrlKey
              )
            ) return !0;
            if (
              (p = GlobalData.optManager.GetObjectPtr(h.theActiveTextEditObjectID, !1)) &&
              p.TextFlags & ConstantData.TextFlags.SED_TF_FormCR &&
              !t.ctrlKey &&
              (g(), !D.Tab(t.shiftKey))
            ) return !0;
            break;
          case Resources.Keys.Up_Arrow:
          case Resources.Keys.Down_Arrow:
            if (
              h.theActiveTableObjectID >= 0 &&
              GlobalData.optManager.Table_Navigate(h.theActiveTableObjectID, t.keyCode, t.shiftKey, t.ctrlKey)
            ) return !0;
            if (g(), !D.NavUpDown(t.keyCode === Resources.Keys.Up_Arrow)) return !0;
            break;
          case Resources.Keys.Left_Arrow:
          case Resources.Keys.Right_Arrow:
            if (
              h.theActiveTableObjectID >= 0 &&
              GlobalData.optManager.Table_Navigate(h.theActiveTableObjectID, t.keyCode, t.shiftKey, t.ctrlKey)
            ) return !0;
            if (
              g(),
              !D.NavRightLeft(t.keyCode === Resources.Keys.Left_Arrow)
            ) return !0
        }
        break;
      case 'edit':
        GlobalData.optManager.TextAutoScroll(u),
          GlobalData.optManager.TextResizeCommon(u);
        break;
      case 'didresize':
        break;
      case 'click':
        h.theTELastOp != ConstantData.TELastOp.INIT &&
          GlobalData.optManager.RegisterLastTEOp(ConstantData.TELastOp.SELECT);
        break;
      case 'selectrange':
        GlobalData.optManager.FormatPainterMode === ListManager.FormatPainterModes.TEXT &&
          (
            GlobalData.optManager.FormatPainterClick(u, null),
            !0 !== this.FormatPainterSticky &&
            (
              GlobalData.optManager.FormatPainterMode = ListManager.FormatPainterModes.None
            )
          );
        break;
      case 'hyperlink':
        SDUI.Commands.MainController.Hyperlinks.FollowHyperlink(t);
        break;
      case 'select':
        GlobalData.optManager.TextSelectIdle(a);
        break;
      case 'charfilter':
        if (!(p = GlobalData.optManager.GetObjectPtr(u, !1))) return !0;
        var L = Business.GetSelectionBusinessManager(p.BlockID);
        return !(L && !L.TextEditCharFilter(u, t));
      case 'deactivate':
        SDUI.Commands.MainController.DataPanel.IdleDataPanel(null, !0)
    }
  } catch (e) {
    GlobalData.optManager.ExceptionCleanup(e)
  }
}

ListManager.LM.prototypeFitProp = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M = {},
    P = {},
    R = {},
    A = e,
    _ = A.sizedim.height;
  S = {
    left: A.trect.x - A.Frame.x,
    top: A.trect.y - A.Frame.y,
    right: A.Frame.x + A.Frame.width - (A.trect.x + A.trect.width),
    bottom: A.Frame.y + A.Frame.height - (A.trect.y + A.trect.height)
  },
    c = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
  var E = A.GetTable(!1);
  E &&
    r >= 0 &&
    (
      L = E.select,
      E.select = r,
      f = A.GetTextParams(!0),
      S.left += f.trect.x - A.trect.x,
      S.top += f.trect.y - A.trect.y,
      S.right += A.trect.x + A.trect.width - (f.trect.x + f.trect.width),
      S.bottom += A.trect.y + A.trect.height - (f.trect.y + f.trect.height),
      E.select = L,
      T = f.trect.width - f.tsizedim.width
    ),
    m = $.extend(!1, {
    }, S),
    $.extend(!1, {
    }, S),
    o = (n = {
      x: A.Frame.width,
      y: A.Frame.height
    }).y + a,
    n.x,
    n.y,
    (i = {
      x: n.x,
      y: n.y
    }).x -= c.left + c.right,
    i.y -= c.top + c.bottom,
    l = A.ratio &&
      0 !== A.ratio ? A.ratio : i.x / i.y,
    M.left = A.left_sindent * i.x,
    M.top = A.top_sindent * i.y,
    M.right = A.right_sindent * i.x,
    M.bottom = A.bottom_sindent * i.y,
    P.left = m.left - M.left,
    P.top = m.top - M.top,
    P.right = m.right - M.right,
    P.bottom = m.bottom - M.bottom;
  var w = 1 - (A.bottom_sindent + A.top_sindent),
    F = w;
  a < 0 ? (
    u = n.y,
    p = n.y + a,
    f &&
    (I = p * l, (b = n.x - I) > T && (b = T, p = (I = n.x - b) / l)),
    d = !0
  ) : (p = n.y, u = n.y + a, u += A.top_sindent * a / w + A.bottom_sindent * a / F),
    D = (u - (c.top + c.bottom)) * l,
    R.x = D + (c.left + c.right),
    R.y = u,
    h = u,
    g = p,
    s = 0;
  for (
    null == t &&
    (
      s = o,
      a < 0 &&
      (D = (p - (c.top + c.bottom)) * l, R.x = D + (c.left + c.right), R.y = p)
    );
    o != s &&
    u - p > 1;
  ) if (
      !0,
      C = d ? p : (p + u) / 2,
      d = !1,
      D = (C - c.top - c.bottom) * l,
      D += c.left + c.right,
      n.x = D,
      n.y = C,
      (i = $.extend(!1, {
      }, n)).x -= c.left + c.right,
      i.y -= c.top + c.bottom,
      M.left = A.left_sindent * i.x,
      M.top = A.top_sindent * i.y,
      M.right = A.right_sindent * i.x,
      M.bottom = A.bottom_sindent * i.y,
      S.left = P.left + M.left,
      S.top = P.top + M.top,
      S.right = P.right + M.right,
      S.bottom = P.bottom + M.bottom,
      y = n.x - S.left - S.right,
      (s = t.CalcTextFit(y).height + S.bottom + S.top) < _ &&
      (s = _),
      s < C
    ) u = C,
      o = s,
      R = $.extend(!1, {
      }, n),
      s = 0,
      u > h &&
      (u = h),
      !1;
    else {
      if (!(s > C)) {
        o = s,
          R = $.extend(!0, {
          }, n),
          !1;
        break
      } (p = C) < g &&
        (p = g),
        !0
    }
  return R.x < A.sizedim.width &&
    (R.x = A.sizedim.width, R.y = R.x / l),
    R
}

ListManager.LM.prototypeChangeTextAlign = function (e) {
  var t,
    a,
    r = this.GetObjectPtr(this.theTEDSessionBlockID, !1),
    i = 'middle',
    n = e;
  if (
    (t = n.indexOf('-')) >= 0 &&
    (i = n.slice(0, t), n = n.slice(t + 1, n.length)),
    - 1 != r.theActiveTextEditObjectID
  ) {
    var o = this.GetObjectPtr(r.theActiveTextEditObjectID, !1);
    if (o instanceof ListManager.BaseLine) return;
    o.flags,
      ConstantData.ObjFlags.SEDO_TextOnly;
    var s = this.svgDoc.GetActiveEdit();
    this.RegisterLastTEOp(ConstantData.TELastOp.STYLE);
    var l = s.GetSelectedRange();
    o instanceof ListManager.BaseShape &&
      (
        s.SetParagraphAlignment(n, l.start, l.end - l.start),
        i &&
        (
          s.SetVerticalAlignment(i),
          (o = this.GetObjectPtr(r.theActiveTextEditObjectID, !0)).TextAlign = e
        )
      ),
      this.TextResizeCommon(r.theActiveTextEditObjectID),
      s.SetSelectedRange(l.start, l.end, l.line, l.anchor),
      (a = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).def.just = n,
      a.def.vjust = i,
      this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
  } else (a = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).def.just = n,
    a.def.vjust = i,
    this.ChangeSelectedTextAttributes(null, null, e, null)
}

ListManager.LM.prototypeSetTextAlignment = function (e, t, a) {
  var r = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
  r.SetRenderingEnabled(!1),
    r.SetRuntimeText(e.runtimeText),
    null != t &&
    r.SetVerticalAlignment(t),
    null != a &&
    r.SetParagraphAlignment(a),
    r.SetRenderingEnabled(!0),
    e.runtimeText = r.GetRuntimeText(),
    r = null
}

ListManager.LM.prototypeChangeTextBullet = function (e) {
  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  if (- 1 != t.theActiveTextEditObjectID || this.bInNoteEdit) {
    this.bInNoteEdit ||
      this.GetObjectPtr(t.theActiveTextEditObjectID, !1);
    var a = this.svgDoc.GetActiveEdit();
    this.RegisterLastTEOp(ConstantData.TELastOp.STYLE);
    var r = a.GetSelectedRange();
    a.SetParagraphStyle({
      bullet: e,
      lindent: 0,
      pindent: 0
    }, r.start, r.end - r.start),
      this.bInNoteEdit ? this.NoteTextResizeCommon() : this.TextResizeCommon(t.theActiveTextEditObjectID),
      a.SetSelectedRange(r.start, r.end, r.line, r.anchor),
      this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
  } else this.ChangeSelectedTextAttributes(null, null, null, {
    bullet: e,
    lindent: 0,
    pindent: 0
  })
}

ListManager.LM.prototypeChangeTextSpacing = function (e) {
  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !1),
    a = null;
  if (- 1 != t.theActiveTextEditObjectID || this.bInNoteEdit) {
    if (
      !this.bInNoteEdit &&
      (a = this.GetObjectPtr(t.theActiveTextEditObjectID, !1)) instanceof ListManager.BaseLine
    ) return;
    var r = this.svgDoc.GetActiveEdit();
    this.RegisterLastTEOp(ConstantData.TELastOp.STYLE);
    var i = r.GetSelectedRange();
    (a instanceof ListManager.BaseShape || this.bInNoteEdit) &&
      r.SetParagraphStyle({
        spacing: e
      }, i.start, i.end - i.start),
      this.bInNoteEdit ? this.NoteTextResizeCommon() : this.TextResizeCommon(t.theActiveTextEditObjectID),
      r.SetSelectedRange(i.start, i.end, i.line, i.anchor),
      this.RegisterLastTEOp(ConstantData.TELastOp.TIMEOUT)
  } else this.ChangeSelectedTextAttributes(null, null, null, {
    spacing: e
  })
}

ListManager.LM.prototypeChangeTextDirection = function (e, t) {
  var a = this.GetObjectPtr(this.theSelectedListBlockID, !1);
  if (Collab.BeginSecondaryEdit(), null == t) {
    var r = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !0);
    r.def.textflags = Utils2.SetFlag(
      r.def.textflags,
      ConstantData.TextFlags.SED_TF_HorizText,
      !1 === e
    )
  }
  var i = a.length,
    n = 0,
    o = - 1,
    s = !1,
    l = null;
  for (n = 0; n < i; ++n) o = a[n],
    (l = this.GetObjectPtr(o, !1)).DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.SHAPE &&
    (
      (l = this.GetObjectPtr(o, !0)).TextDirection = e,
      l.textflags = Utils2.SetFlag(
        l.textflags,
        ConstantData.TextFlags.SED_TF_HorizText,
        !1 === e
      ),
      l.VisioRotationDiff = 0,
      this.AddToDirtyList(o),
      s ||
      this.HideAllSVGSelectionStates(),
      s = !0
    );
  if (s && Collab.AllowMessage()) {
    var S = {
      textDirection: e
    };
    Collab.BuildMessage(ConstantData.CollabMessages.SetTextDirection, S, !0)
  }
  this.CompleteOperation(null)
}

ListManager.LM.prototypeDeleteTargetTextObject = function (e) {
  if (null == e && (e = this.GetTargetSelect()), e >= 0) {
    var t = this.GetObjectPtr(e, !0),
      a = t.DataID;
    if (- 1 != a) {
      var r = GlobalData.objectStore.GetObject(a);
      t.SetTextObject(- 1),
        r &&
        r.Delete()
    }
  }
}

ListManager.LM.prototypeTextSelectIdle = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = !1;
  t = e.GetSelectedFormat(),
    r = (a = e.GetSelectedRange()).start != a.end,
    GlobalData.optManager.SelectionState.selectionhastext = !0,
    t &&
    (
      (
        u = GlobalData.optManager.Table_GetActiveID() >= 0 &&
          GlobalData.optManager.GetClipboardType() === ConstantData.ClipboardType.Table ? ConstantData.ClipboardType.Table : GlobalData.optManager.theTextClipboard ? ConstantData.ClipboardType.Text : ConstantData.ClipboardType.None
      ) !== GlobalData.optManager.SelectionState.paste &&
      (GlobalData.optManager.SelectionState.paste = u, d = !0),
      (i = GlobalData.optManager.FontSizeToPoints(t.size)) != GlobalData.optManager.SelectionState.fontsize &&
      (GlobalData.optManager.SelectionState.fontsize = i, d = !0),
      (n = GlobalData.optManager.GetFontIdByName(t.font)) != GlobalData.optManager.SelectionState.fontid &&
      (GlobalData.optManager.SelectionState.fontid = n, d = !0),
      o = 'bold' === t.weight,
      GlobalData.optManager.SelectionState.bold != o &&
      (GlobalData.optManager.SelectionState.bold = o, d = !0),
      s = 'italic' === t.style,
      GlobalData.optManager.SelectionState.italic != s &&
      (GlobalData.optManager.SelectionState.italic = s, d = !0),
      l = 'underline' === t.decoration,
      GlobalData.optManager.SelectionState.underline != l &&
      (GlobalData.optManager.SelectionState.underline = l, d = !0),
      S = 'super' === t.baseOffset,
      GlobalData.optManager.SelectionState.superscript != S &&
      (GlobalData.optManager.SelectionState.superscript = S, d = !0),
      c = 'sub' === t.baseOffset,
      GlobalData.optManager.SelectionState.subscript != c &&
      (GlobalData.optManager.SelectionState.subscript = c, d = !0),
      r != GlobalData.optManager.SelectionState.allowcopy &&
      (GlobalData.optManager.SelectionState.allowcopy = r, d = !0),
      d &&
      (
        p = new ListManager.SelectionAttributes,
        $.extend(!0, p, GlobalData.optManager.SelectionState),
        SDUI.Commands.MainController.UpdateActiveSelection(p, !0)
      )
    )
}

ListManager.LM.prototypeReplaceAll = function (e, t, a, r) {
  var i = 0,
    n = {
      slot: 0,
      cellindex: - 1
    };
  if (null == e) return !1;
  if (0 === e.length) return !1;
  if (a) {
    if (e === t) return void Utils2.Alert(Resources.Strings.Search_ReplMatch, null)
  } else if (e.toUpperCase() === t.toUpperCase()) return void Utils2.Alert(Resources.Strings.Search_ReplMatch, null);
  for (
    GlobalData.optManager.CloseEdit(),
    GlobalData.optManager.NoUndo = !0;
    this.FindNext(e, t, a, r, !0, n);
  ) i++;
  i > 0 ? Utils2.Alert(i + Resources.Strings.Search_NMatches, null) : Utils2.Alert(Resources.Strings.Search_NoMatch, null),
    GlobalData.optManager.NoUndo = !1
}

ListManager.LM.prototypeFindNext = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T = this.GetObjectPtr(this.theTEDSessionBlockID, !1),
    b = !1,
    M = !1,
    P = !1,
    R = - 1,
    A = 0;
  if (null == e) return !1;
  if (0 === (S = e.length)) return !1;
  if (
    a ? r ? (f = Utils2.RegExpEscape(e), m = new RegExp('\\b' + f + '\\b')) : m = e : (
      f = Utils2.RegExpEscape(e),
      m = r ? new RegExp('\\b' + f + '\\b', 'i') : new RegExp(f, 'i')
    ),
    - 1 != T.theActiveTextEditObjectID ||
    this.bInNoteEdit
  ) {
    if (
      n &&
      (
        A = n.cellindex,
        L = this.bInNoteEdit ? n.NoteID : T.theActiveTextEditObjectID,
        (h = (g = this.GetObjectPtr(L, !1)).GetTable(!1)) &&
        (R = g.BlockID, this.bInNoteEdit || (n.cellindex = h.select))
      ),
      o = (C = this.svgDoc.GetActiveEdit()).GetSelectedRange(),
      b = !0,
      (M = this.bInNoteEdit) ||
      (y = T.theActiveTextEditObjectID),
      null != t &&
      (s = C.GetText(o.start, o.end - o.start)).length === S &&
      0 === (l = s.search(m)) &&
      (
        P = !0,
        C.Paste(t, !1),
        T.theTEWasEdited = !0,
        o.end += t.length - e.length
      ),
      s = C.GetText(),
      (l = o.end >= s.length ? - 1 : (s = C.GetText(o.end)).search(m)) >= 0
    ) return l += o.end,
      C.SetSelectedRange(l, l + S),
      !0;
    if (
      g = this.GetObjectPtr(T.theActiveTextEditObjectID, !1),
      this.CloseEdit(!0),
      lastcell = 0,
      g &&
      (h = g.GetTable(!1)) &&
      (lastcell = h.cells.length - 1),
      g &&
      g.NoteID >= 0 &&
      !M &&
      A === lastcell
    ) {
      var _ = this.GetObjectPtr(g.NoteID, !1);
      if (
        _ &&
        (l = (s = _.runtimeText.text).search(m)) >= 0 &&
        (
          (h = g.GetTable(!1)) &&
          (I = h.select, h.select = - 1),
          this.ToggleNote(g.BlockID, null),
          h &&
          (h.select = I),
          C = this.svgDoc.GetActiveEdit()
        )
      ) return C.SetSelectedRange(l, l + S),
        n &&
        (n.NoteID = g.BlockID),
        !0
    }
    n &&
      (n.NoteID = - 1),
      R < 0 &&
      n &&
      (n.slot++, n.cellindex = 0)
  }
  if (
    T.theActiveTableObjectID >= 0 ? R = T.theActiveTableObjectID : R >= 0 &&
      (b = !1),
    R >= 0
  ) {
    if ((g = this.GetObjectPtr(R, !1)) && (h = g.GetTable(!1))) {
      if (
        T.theActiveTableObjectID < 0 &&
        this.Table_Load(R),
        n &&
        (h.select = n.cellindex + 1, b = !1, M = !1),
        this.Table_FindNext(g, h, m, S, b, M)
      ) return !0;
      this.CloseEdit(!1),
        n &&
        (n.slot++, n.cellindex = 0)
    }
    b = !0
  }
  for (
    u = (c = this.ActiveVisibleZList()).length,
    n ? D = n.slot : (d = this.GetTargetSelect()) >= 0 ? ((D = c.indexOf(d)) < 0 || b && ++D >= u) &&
      (D = 0) : D = n ? n.slot : 0,
    p = D;
    p < u;
    p++
  ) {
    if (this.FoundText(c[p], m, S, y)) return !0;
    n &&
      (n.slot++, n.cellindex = 0)
  }
  if (null == n) for (p = 0; p < D; p++) if (this.FoundText(c[p], m, S, - 1)) return !0;
  return i ||
    P ||
    Utils2.Alert(Resources.Strings.Search_NoMatch, null),
    !1
}

ListManager.LM.prototypeFoundText = function (e, t, a, r) {
  var i,
    n,
    o,
    s;
  if ((i = this.GetObjectPtr(e, !1)).FoundText(t, a, r)) return GlobalData.optManager.ScrollObjectIntoView(e, !1),
    !0;
  if (
    i &&
    i.TableID >= 0 &&
    (o = i.GetTable(!1), this.Table_FindNext(i, o, t, a, !1, !1))
  ) return GlobalData.optManager.ScrollObjectIntoView(e, !1),
    !0;
  if (
    i &&
    i.NoteID >= 0 &&
    (s = this.GetObjectPtr(i.NoteID, !1)) &&
    (n = s.runtimeText.text.search(t)) >= 0
  ) {
    GlobalData.optManager.ScrollObjectIntoView(e, !1),
      this.ToggleNote(e, null);
    var l = this.svgDoc.GetActiveEdit();
    if (l) return l.SetSelectedRange(n, n + a),
      !0
  }
  return !1
}

ListManager.LM.prototypeInsertSymbolRun = function (e, t) {
  var a;
  if (
    - 1 != this.GetObjectPtr(this.theTEDSessionBlockID, !1).theActiveTextEditObjectID
  ) {
    var r = (a = this.svgDoc.GetActiveEdit()).GetSelectedRange(),
      i = a.GetSelectedFormat(),
      n = {
        font: 'Arial'
      };
    t.bSubscript &&
      (n.baseOffset = 'sub'),
      t.bSuperscript &&
      (n.baseOffset = 'super'),
      i.size &&
      t.fontScale &&
      (n.size = i.size * t.fontScale),
      a.SetText(e, n, r.start, r.end - r.start),
      r = a.GetSelectedRange(),
      a.SetFormat(i, r.start, 0)
  }
};





ListManager.LM.prototypeMobileTextDialogTrigger = function (e, t) {
  t &&
    (
      gMobileTextElement = e,
      SDUI.Commands.MainController.ShowModal('m-mobiletext')
    )
}



ListManager.LM.prototypeApplyGroupProperties = function (e, t) {
  var a,
    r = t.ShapesInGroup,
    i = !1,
    n = r.length;
  if (0 !== n) {
    var o;
    for (o = 0; o < n; ++o) (a = this.GetObjectPtr(r[o], !1)).r.height,
      a.r.width,
      a instanceof ListManager.GroupSymbol ? this.ApplyGroupProperties(e, a) : (a = this.GetObjectPtr(r[o], !0)).SetObjectStyle(e),
      i = !0;
    if (i) {
      GlobalData.optManager.AddToDirtyList(t.BlockID);
      var s = t.Frame.width / t.InitialGroupBounds.width,
        l = t.Frame.height / t.InitialGroupBounds.height;
      if (
        t.InitialGroupBounds = GlobalData.optManager.GetListSRect(r),
        !isNaN(s) &&
        !isNaN(l)
      ) {
        var S = Utils1.DeepCopy(t.Frame);
        if (
          S.width = s * t.InitialGroupBounds.width,
          S.height = l * t.InitialGroupBounds.height,
          0 !== t.InitialGroupBounds.x ||
          0 !== t.InitialGroupBounds.y
        ) {
          var c = s * t.InitialGroupBounds.x,
            u = l * t.InitialGroupBounds.y;
          for (S.x += c, S.y += u, o = 0; o < n; ++o) (a = this.GetObjectPtr(r[o], !0)).OffsetShape(- c, - u)
        }
        t.UpdateFrame(S)
      }
    }
    t.ConvertToNative(GlobalData.optManager.RichGradients, !1)
  }
}

ListManager.LM.prototypeSetGroupTheme = function (e, t) {
  var a = e.ShapesInGroup,
    r = a.length;
  if (0 !== r) {
    var i,
      n,
      o = t.length,
      s = [],
      l = 0,
      S = !1;
    for (i = 0; i < r; ++i) {
      var c = this.GetObjectPtr(a[i], !1);
      if (c instanceof ListManager.GroupSymbol) this.SetGroupTheme(c, t);
      else {
        var u = (c = this.GetObjectPtr(a[i], !0)).StyleRecord.Name;
        for (l = s.length, S = !1, n = 0; n < l; ++n) if (u === s[n].Name) {
          (c = this.GetObjectPtr(a[i], !0)).ApplyStyle(s[n], !0),
            S = !0;
          break
        }
        if (!S) for (n = 0; n < o; ++n) if (u === t[n].Name) {
          (c = this.GetObjectPtr(a[i], !0)).ApplyStyle(t[n], !0),
            s.push({
              quickstyleName: u,
              style: t[n]
            });
          break
        }
      }
    }
    e.ConvertToNative(GlobalData.optManager.RichGradients, !1)
  }
}

ListManager.LM.prototypeUngroupNative = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = [],
    d = {
      selectedList: []
    };
  if (
    (r = GlobalData.optManager.GetObjectPtr(e, !1)).NativeID >= 0 &&
    (i = GlobalData.optManager.GetObjectPtr(r.NativeID, !1)) &&
    (
      SDF.ReadSymbolFromBuffer(i, 0, 0, 0, !1, !1, d, !1, !1, !1, !1, !1),
      d.selectedList.length
    )
  ) {
    l = d.selectedList.length;
    var D = this.GetListSRect(d.selectedList);
    o = r.Frame.width / D.width,
      s = r.Frame.height / D.height;
    var g = {
      x: r.Frame.x + r.Frame.width / 2,
      y: r.Frame.y + r.Frame.height / 2
    };
    if (
      c = r.Frame.x,
      u = r.Frame.y,
      Utils2.IsEqual(100 * o, 100) &&
      Utils2.IsEqual(100 * s, 100) ||
      !(l > 1)
    ) for (S = 0; S < l; S++) e = d.selectedList[S],
      GlobalData.optManager.GetObjectPtr(e, !1).OffsetShape(c, u);
    else for (S = 0; S < l; S++) e = d.selectedList[S],
      GlobalData.optManager.GetObjectPtr(e, !1).ScaleObject(c, u, g, 0, o, s, !0);
    l > 1 &&
      !a ? (
      e = GlobalData.optManager.GroupSelectedShapes(!0, d.selectedList, !1),
      n = GlobalData.optManager.GetObjectPtr(e, !1),
      p.push(e),
      n.InitialGroupBounds.x = 0,
      n.InitialGroupBounds.y = 0,
      n.Frame = Utils1.DeepCopy(r.Frame),
      n.RotationAngle = r.RotationAngle,
      n.extraflags = Utils2.SetFlag(
        n.extraflags,
        ConstantData.ExtraFlags.SEDE_FlipHoriz,
        (r.extraflags & ConstantData.ExtraFlags.SEDE_FlipHoriz) > 0
      ),
      n.extraflags = Utils2.SetFlag(
        n.extraflags,
        ConstantData.ExtraFlags.SEDE_FlipVert,
        (r.extraflags & ConstantData.ExtraFlags.SEDE_FlipVert) > 0
      ),
      n.UpdateFrame(n.Frame)
    ) : p.push(d.selectedList[0])
  }
  return p
}

ListManager.LM.prototypeUngroupVisioShapes = function (e, t) {
  var a,
    r,
    i,
    n,
    o = - 1;
  if (
    e.StyleRecord.Line.Thickness > 0 &&
    0 === e.StyleRecord.Line.Paint.Opacity &&
    (
      e.StyleRecord.Line.Thickness = 0,
      e.StyleRecord.Line.Paint.Opacity = 1
    ),
    e instanceof ListManager.GroupSymbol
  ) {
    if (1 === (i = (a = Utils1.DeepCopy(e.ShapesInGroup)).length)) {
      var s = GlobalData.objectStore.GetObject(e.BlockID),
        l = GlobalData.objectStore.GetObject(a[0]),
        S = s.Data;
      S.DataID <= 0 &&
        (o = GlobalData.optManager.SD_GetVisioTextChild(S.BlockID)),
        o >= 0 &&
        (
          l.Data.associd = S.associd,
          S.associd = - 1,
          l.Data.TextFlags = S.TextFlags
        ),
        s.Data = l.Data,
        l.Data = S,
        l.Data.BlockID = l.ID,
        s.Data.BlockID = s.ID,
        l.Data.ShapesInGroup[0] = s.ID,
        a[0] = s.ID,
        this.UngroupShape(l.ID),
        (n = this.GetObjectPtr(a[0])) &&
        this.UngroupVisioShapes(n, t)
    } else if (e.ContainsText()) for (this.UngroupShape(e.BlockID), r = 0; r < i; r++) (n = this.GetObjectPtr(a[r])) &&
      this.UngroupVisioShapes(n, t)
  } else if (
    (o = GlobalData.optManager.SD_GetVisioTextChild(e.BlockID)) >= 0 &&
    0 === e.StyleRecord.Line.Thickness &&
    e.StyleRecord.Fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TRANSPARENT
  ) {
    var c = this.GetObjectPtr(o, !0);
    c.associd = - 1,
      c.moreflags = Utils2.SetFlag(
        c.moreflags,
        ConstantData.ObjMoreFlags.SED_MF_VisioText,
        !1
      ),
      e.associd = - 1,
      t.push(e.BlockID)
  }
},



  ListManager.LM.prototype.DrawRotatedBitmapImage = function (e, t, a, r, i) {
    var n = Math.PI / 180;
    e.save(),
      e.translate(a, r),
      e.rotate(i * n),
      e.drawImage(t, - t.width / 2, - t.height / 2),
      e.restore()
  }

ListManager.LM.prototypeImportScaledBitmapImage = function (e) {
  var t = new Image;
  GlobalData.optManager.bitmapImportCanvas = document.createElement('canvas'),
    GlobalData.optManager.bitmapScaledCanvas = document.createElement('canvas'),
    'http' == e.substring(0, 4) &&
    (t.crossOrigin = 'Anonymous'),
    t.onload = function () {
      var e = t.width,
        a = t.height;
      GlobalData.optManager.bitmapImportSourceWidth = e,
        GlobalData.optManager.bitmapImportSourceHeight = a,
        GlobalData.optManager.bitmapImportCanvas.width = e,
        GlobalData.optManager.bitmapImportCanvas.height = a;
      var r,
        i = GlobalData.optManager.bitmapImportCanvas.getContext('2d');
      if (
        GlobalData.optManager.bitmapImportCanvasCTX = i,
        i.fillStyle = 'white',
        i.fillRect(0, 0, e, a),
        GlobalData.optManager.bitmapImportEXIFdata.Orientation
      ) switch (GlobalData.optManager.bitmapImportEXIFdata.Orientation) {
        case 1:
        default:
          GlobalData.optManager.bitmapImportCanvas.width = e,
            GlobalData.optManager.bitmapImportCanvas.height = a,
            i.drawImage(t, 0, 0, e, a);
          break;
        case 3:
          GlobalData.optManager.bitmapImportCanvas.width = e,
            GlobalData.optManager.bitmapImportCanvas.height = a,
            GlobalData.optManager.DrawRotatedBitmapImage(i, t, e / 2, a / 2, 180);
          break;
        case 6:
          GlobalData.optManager.bitmapImportCanvas.width = a,
            GlobalData.optManager.bitmapImportCanvas.height = e,
            GlobalData.optManager.DrawRotatedBitmapImage(i, t, a / 2, e / 2, 90),
            r = e,
            e = a,
            a = r;
          break;
        case 8:
          GlobalData.optManager.bitmapImportCanvas.width = a,
            GlobalData.optManager.bitmapImportCanvas.height = e,
            GlobalData.optManager.DrawRotatedBitmapImage(i, t, a / 2, e / 2, 270),
            r = e,
            e = a,
            a = r
      } else GlobalData.optManager.bitmapImportCanvas.width = e,
        GlobalData.optManager.bitmapImportCanvas.height = a,
        i.drawImage(t, 0, 0, e, a);
      var n = GlobalData.optManager.bitmapImportDPI,
        o = GlobalData.optManager.bitmapImportDestWidth * (n / GlobalData.docHandler.svgDoc.docInfo.docDpi),
        s = GlobalData.optManager.bitmapImportDestHeight * (n / GlobalData.docHandler.svgDoc.docInfo.docDpi);
      o < 100 &&
        (o = 100),
        s < 100 &&
        (s = 100),
        o > GlobalData.optManager.bitmapImportMaxScaledWidth &&
        (o = GlobalData.optManager.bitmapImportMaxScaledWidth),
        s > GlobalData.optManager.bitmapImportMaxScaledHeight &&
        (s = GlobalData.optManager.bitmapImportMaxScaledHeight);
      var l = Math.max(o / e, s / a);
      l = Math.min(l, 1);
      var S = Math.round(e * l),
        c = Math.round(a * l);
      GlobalData.optManager.bitmapScaledCanvas.width = S,
        GlobalData.optManager.bitmapScaledCanvas.height = c;
      var u = GlobalData.optManager.bitmapScaledCanvas.getContext('2d');
      GlobalData.optManager.bitmapScaledCanvasCTX = u,
        u.ImageSmoothingEnabled = !1,
        u.drawImage(GlobalData.optManager.bitmapImportCanvas, 0, 0, e, a, 0, 0, S, c);
      GlobalData.optManager.bitmapScaledCanvas.toBlob(
        (
          function (e) {
            var t = new FileReader;
            t.onload = function () {
              this.result;
              var t = new Uint8Array(this.result),
                a = window.URL ||
                  window.webkitURL,
                r = '';
              a &&
                a.createObjectURL ? (
                GlobalData.optManager.bitmapImportScaledSize = t.length,
                r = a.createObjectURL(e),
                GlobalData.optManager.scaledBitmapCallback(r, e, t),
                GlobalData.optManager.bitmapImportCanvas.width = 0,
                GlobalData.optManager.bitmapImportCanvas.height = 0,
                GlobalData.optManager.bitmapImportCanvasCTX = null,
                GlobalData.optManager.bitmapImportCanvas = null,
                GlobalData.optManager.bitmapScaledCanvas.width = 0,
                GlobalData.optManager.bitmapScaledCanvas.height = 0,
                GlobalData.optManager.bitmapScaledCanvasCTX = null,
                GlobalData.optManager.bitmapScaledCanvas = null,
                GlobalData.optManager.bitmapImportEXIFdata = null
              ) : alert('No createObjectURL available')
            },
              t.readAsArrayBuffer(e)
          }
        ),
        GlobalData.optManager.bitmapImportMimeType,
        0.9
      )
    },
    t.onerror = function (e) {
      alert('The image could not be loaded')
    },
    t.src = e
};



ListManager.LM.prototype.MakeURL = function (e, t, a) {
  var r;
  if (e) r = new Blob([e], {
    type: a
  });
  else {
    var i = new ArrayBuffer(10),
      n = new DataStream(i);
    n.endianness = DataStream.LITTLE_ENDIAN,
      FileParser.write_nativebytearray(n, t),
      r = new Blob([n.buffer], {
        type: a
      })
  }
  var o = window.URL ||
    window.webkitURL,
    s = '';
  return o &&
    o.createObjectURL &&
    (s = o.createObjectURL(r)),
    s
},

  ListManager.LM.prototype.DeleteURL = function (e) {
    var t = window.URL ||
      window.webkitURL;
    t &&
      t.revokeObjectURL &&
      t.revokeObjectURL(e)
  }

ListManager.LM.prototypeClearImage = function (e, t, a, r, i) {
  var n,
    o,
    s = !1;
  if (n = this.GetObjectPtr(e, !r)) {
    if ((o = n.GetTable(!1)) && !a) {
      if (s = GlobalData.optManager.Table_ClearTableImage(n, o, r), r) return !0
    } else {
      if (this.IsBlobURL(n.ImageURL)) {
        if (r) return !0;
        this.DeleteURL(n.ImageURL),
          n.ImageURL = '',
          s = !0
      }
      if (- 1 != n.BlobBytesID) {
        var l = GlobalData.objectStore.GetObject(n.BlobBytesID);
        l &&
          l.Delete(),
          n.BlobBytesID = - 1
      }
      n.TextFlags = Utils2.SetFlag(n.TextFlags, ConstantData.TextFlags.SED_TF_None, !1)
    }
    s &&
      (
        this.AddToDirtyList(e),
        t &&
        (
          i &&
          Collab.SendMessage(i),
          this.CompleteOperation(null, !1)
        )
      )
  }
},




  ListManager.LM.prototype.Table_LoadStdTable = function (e) {
    SDUI.CMSContent.GetTable(
      SDUI.AppSettings.ContentSource,
      e,
      (
        function (t) {
          if (t) {
            var a = SDF.ReadTableFromBuffer(t);
            if (a) {
              var r,
                i,
                n;
              'Org-PhotoSplit' === e &&
                4 === a.cells.length &&
                a.cells[2].uniqueid === a.cells[3].uniqueid &&
                a.cells[3].uniqueid++;
              var o = ConstantData.FillTypes.SDFILL_TRANSPARENT;
              for (i = a.cells.length, r = 0; r < i; r++) (n = a.cells[r]).fill.Paint.FillType = o;
              if (
                GlobalData.optManager.Table_Format(null, a, ConstantData.TextGrowBehavior.PROPORTIONAL, !1),
                (n = a.cells[0]).celltype === ListManager.Table.CellTypes.SDT_CT_ICONPHOTOCELL
              ) null == n.Image &&
                (n.Image = new ListManager.ImageRecord),
                n.Image.iconid = ConstantData.Defines.Icon_Person;
              ListManager.Table.StandardTables[e] = a
            }
          }
        }
      )
    )
  }

ListManager.LM.prototypeTable_Create = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y = new ListManager.Table,
    f = t * a;
  if (!(f < 1)) {
    var L,
      I,
      T,
      b,
      M,
      P,
      R,
      A = {},
      _ = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !1);
    if (null != (R = this.GetObjectPtr(e, !0))) {
      R.TextFlags = Utils2.SetFlag(R.TextFlags, ConstantData.TextFlags.SED_TF_AttachA, !1),
        R.TextFlags = Utils2.SetFlag(R.TextFlags, ConstantData.TextFlags.SED_TF_AttachB, !1);
      var E = R.StyleRecord.Line.Paint.Color;
      E === R.StyleRecord.Fill.Paint.Color &&
        R.StyleRecord.Fill.Paint.FillType !== ConstantData.FillTypes.SDFILL_TRANSPARENT &&
        (E = _.def.style.Line.Paint.Color);
      var w = this.CalcDefaultInitialTextStyle(R.StyleRecord.Text),
        F = this.svgDoc.CalcStyleMetrics(w);
      for (
        R.TextFlags = Utils2.SetFlag(R.TextFlags, ConstantData.TextFlags.SED_TF_OneClick, !0),
        n = 0;
        n < f;
        n++
      ) (o = new ListManager.Table.Cell).textht = F.height,
        o.minht = o.textht,
        o.textwd = 0,
        o.minwd = 5 * F.width,
        o.fill = Utils1.DeepCopy(R.StyleRecord.Fill),
        o.hline = new Resources.LineData,
        o.hline.Paint.Color = E,
        o.vline = new Resources.LineData,
        o.vline.Paint.Color = E,
        o.hdisp = this.Table_GetGridLineThickness(o.hline),
        o.vdisp = this.Table_GetGridLineThickness(o.vline),
        o.tstylename = R.StyleRecord.Name,
        o.Text = Utils1.DeepCopy(R.StyleRecord.Text),
        o.Text.FontId = GlobalData.optManager.GetFontIdByName(_.def.lf.fontName),
        o.Text.FontName = _.def.lf.fontName,
        o.uniqueid = ++y.tunique,
        o.stylename = R.StyleRecord.Name,
        y.cells.push(o);
      for (
        Utils2.Add2Rect(R.trect, R.TMargins),
        y.tmargin = Utils1.DeepCopy(R.TMargins),
        l = 0,
        i ? (L = R.trect.width / a, I = R.trect.height / t) : (L = 100, I = F.height + y.tmargin.top + y.tmargin.bottom + o.hdisp),
        I < (c = F.height + y.tmargin.top + y.tmargin.bottom + o.hdisp) &&
        (I = c),
        d = I * t,
        i &&
        d < R.trect.height &&
        (d = R.trect.height),
        L < (u = F.width + y.tmargin.left + y.tmargin.right + o.vdisp) &&
        (L = u),
        p = L * a,
        i &&
        p < R.trect.width &&
        (p = R.trect.width),
        A.x = 0,
        A.y = 0,
        A.height = I,
        A.width = L,
        y.minwd = 0,
        n = 0;
        n < t;
        n++
      ) {
        for (
          s = new ListManager.Table.Row(l, a),
          h = n === t - 1 ? d - o.frame.y - o.frame.height : A.height,
          s.frame.x = 0,
          s.frame.y = A.y,
          s.frame.width = p,
          s.frame.height = h,
          s.minwd = 0,
          m = a,
          A.width = L,
          y.rows.push(s),
          S = 0;
          S < m;
          S++
        ) (o = y.cells[l + S]).frame.y = A.y,
          o.frame.x = A.x,
          o.frame.height = h,
          o.textht > s.textht &&
          (s.textht = o.textht),
          T = o.minwd,
          r !== ConstantData.TextGrowBehavior.VERTICAL &&
          o.textwd > T &&
          (T = o.textwd),
          T += y.tmargin.left + y.tmargin.right + o.vdisp,
          s.minwd += T,
          o.frame.width = S === m - 1 ? p - o.frame.x : A.width,
          A.x += A.width,
          o.trect.x = o.frame.x + y.tmargin.left,
          o.trect.y = o.frame.y + y.tmargin.top,
          o.trect.width = o.frame.width - y.tmargin.right - y.tmargin.left,
          S < m - 1 &&
          (o.trect.width -= o.vdisp),
          o.trect.height = o.frame.height - y.tmargin.bottom - y.tmargin.top,
          n < t - 1 &&
          (o.trect.height -= o.hdisp),
          o.sizedim.width = o.frame.width,
          o.sizedim.height = o.frame.height;
        s.minwd > y.minwd &&
          (y.minwd = s.minwd),
          y.minht += s.textht + o.hdisp + y.tmargin.top + y.tmargin.bottom,
          A.x = 0,
          A.y += I,
          l += m,
          C = new ListManager.Table.RowSegment(0, s.ncells, 0, s.frame.x + s.frame.width),
          s.segments = [],
          s.segments.push(C)
      }
      y.wd = p,
        y.ht = d;
      var v = Utils1.DeepCopy(R);
      if (
        v.trect.width = p,
        v.trect.height = d,
        v.TRectToFrame(v.trect, !0),
        i &&
          2 !== i ? (
          b = R.Frame.width / R.Frame.height,
          M = v.Frame.width - R.Frame.width,
          P = v.Frame.height - R.Frame.height,
          (M > 0 || P > 0) &&
          (
            M > P ? (g = v.Frame.width / b, D = v.Frame.width) : (g = v.Frame.height, D = v.Frame.height * b)
          )
        ) : (
          v.Frame.width != R.Frame.width &&
          (D = v.Frame.width),
          v.Frame.height != R.Frame.height &&
          (g = v.Frame.height)
        ),
        R.SetTable(y),
        y.cols = this.Table_BuildColumns(R, y, r),
        R.TextGrow = r,
        this.Table_BuildFills(R, y, R.StyleRecord.Fill),
        (g || D) &&
        (
          R.SetSize(D, g, 0),
          i ||
          (
            R.sizedim.width = R.Frame.width,
            R.sizedim.height = R.Frame.height
          )
        ),
        R.DataID >= 0
      ) {
        var G = this.Table_GetFirstTextCell(y);
        (o = y.cells[G]).DataID = R.DataID,
          R.DataID = - 1,
          this.svgObjectLayer.GetElementByID(R.BlockID).GetElementByID(ConstantData.SVGElementClass.TEXT).SetUserData(o.DataID);
        var N = [];
        N.push(G),
          this.Table_ReformatText(R, y, 0, 0, N)
      }
      this.AddToDirtyList(e),
        this.SetLinkFlag(R.BlockID, ConstantData.LinkFlags.SED_L_MOVE)
    }
  }
}

ListManager.LM.prototypeTable_Format = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A = !1,
    _ = [],
    E = !1;
  for (
    e &&
    (
      (
        R = this.svgDoc.CreateShape(ConstantData.CreateShapeType.SHAPECONTAINER)
      ).SetID(e.BlockID),
      this.svgObjectLayer.AddElement(R, 0)
    ),
    l = t.rows.length,
    f = 0;
    f < 2;
    f++
  ) {
    for (t.minht = 0, t.minwd = 0, u = 0, i = 0; i < l; i++) {
      for (
        (o = t.rows[i]).fixed = !1,
        S = 0,
        o.textht,
        o.textht = 0,
        o.minwd = 0,
        g = [],
        D = new ListManager.Table.RowSegment(0, 0, 0, 0),
        n = 0;
        n < o.ncells;
        n++
      ) s = t.cells[o.start + n],
        L = this.CalcDefaultInitialTextStyle(s.Text),
        I = this.svgDoc.CalcStyleMetrics(L),
        s.flags & ListManager.Table.CellFlags.SDT_F_FixedHeight &&
        (o.fixed = !0),
        s.flags & ListManager.Table.CellFlags.SDT_F_SilentF ||
          s.flags & ListManager.Table.CellFlags.SDT_F_AllowMin ? s.textht = 0 : s.textht = I.height,
        s.textwd = 0,
        s.childcontainer >= 0 &&
        this.GetObjectPtr(s.childcontainer, !1) &&
        (
          s.textwd = s.frame.width - t.tmargin.left - t.tmargin.right - s.vdisp,
          s.textht = s.frame.height - t.tmargin.top - t.tmargin.bottom - s.hdisp
        ),
        s.minht = s.textht,
        s.flags & ListManager.Table.CellFlags.SDT_F_AllowMin ? (
          s.minwd = ConstantData.Defines.MinCellDim,
          s.minht = ConstantData.Defines.MinCellDim
        ) : s.minwd = 5 * I.width,
        d = s.minwd,
        e &&
        s.DataID >= 0 &&
        (C = this.Table_AddSVGTextObject(e, this.svgDoc, R, s, o.start + n)) &&
        (
          y = C.GetTextMinDimensions(),
          s.nextra ? (
            A = !0,
            0 === f ? (s.textht = 0, s.minht = 0) : (
              s.minht = o.frame.height - t.tmargin.top - t.tmargin.bottom - s.hdisp,
              s.textht = this.Table_GetJoinedCellTextHt(t, o.start + n, y.height),
              s.textht > s.minht &&
              (s.minht = s.textht)
            )
          ) : s.textht = y.height,
          s.textwd = y.width
        ),
        s.textht > o.textht &&
        (o.textht = s.textht),
        0 == (s.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) ? (c = s.textht + t.tmargin.top + t.tmargin.bottom + s.hdisp) < s.sizedim.height &&
          (c = s.sizedim.height) : c = s.minht,
        c > S &&
        (S = c),
        0 == (s.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) &&
        (d += t.tmargin.left + t.tmargin.right + s.vdisp),
        o.minwd += d,
        e &&
        e.subtype === ConstantData.ObjectSubTypes.SD_SUBT_UI_HTABBED &&
        (E = s.hdisp > 0 && 0 === s.hline.Thickness),
        (s.flags & ListManager.Table.CellFlags.SDT_F_SilentL || E) &&
        (
          D.start === n ? D.start = n + 1 : (
            D.ncells = n - D.start,
            D.x_end = s.frame.x,
            h = t.cells[o.start + D.start],
            D.x_start = h.frame.x,
            g.push(D),
            D = new ListManager.Table.RowSegment(n + 1, 0, 0, 0)
          )
        );
      for (
        D.start < n &&
        (
          D.ncells = n - D.start,
          D.x_end = o.frame.x + o.frame.width,
          h = t.cells[o.start + D.start],
          D.x_start = h.frame.x,
          g.push(D)
        ),
        o.segments = g,
        o.minwd > t.minwd &&
        (t.minwd = o.minwd),
        t.minht += o.textht + t.tmargin.top + t.tmargin.bottom,
        o.minwd > t.minwd &&
        (t.minwd = o.minwd),
        p = u - o.frame.y,
        o.frame.y = u,
        m = S - o.frame.height,
        o.frame.height = S,
        u += S,
        n = 0;
        n < o.ncells;
        n++
      ) (s = t.cells[o.start + n]).frame.y += p,
        s.trect.y += p,
        s.frame.height = S,
        s.trect.height += m
    }
    if (!A) break
  }
  t.ht = u,
    t.cols = this.Table_BuildColumns(e, t, a);
  var w = t.cells.length;
  for (i = 0; i < w; i++) M = (s = t.cells[i]).minwd,
    0 == (s.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) &&
    (
      s.textwd > M &&
      (M = s.textwd),
      (M += t.tmargin.left + t.tmargin.right + s.vdisp) < s.sizedim.width &&
      (M = s.sizedim.width)
    ),
    P = M - s.frame.width,
    Utils2.IsEqual(P, 0) ? (
      null == _[s.colindex] &&
      (_[s.colindex] = 0),
      _[s.colindex] < 0 &&
      (_[s.colindex] = 0)
    ) : P < 0 ? null != _[s.colindex] ? _[s.colindex] < P &&
      (_[s.colindex] = P) : _[s.colindex] = P : null != _[s.colindex] ? P > _[s.colindex] &&
        (_[s.colindex] = P) : _[s.colindex] = P;
  for (w = _.length, i = 0; i < w; i++) _[i] &&
    e &&
    (
      this.theActionTable = t,
      this.Table_GrowColumn(e, t, i, _[i], a, !0, !1, r),
      this.theActionTable = null
    );
  if (e) {
    e.sizedim.height > e.Frame.height &&
      (e.sizedim.height = e.Frame.height),
      e.sizedim.width > e.Frame.width &&
      (e.sizedim.width = e.Frame.width);
    var F = $.extend(!0, {
    }, e.Frame);
    if (
      e.trect.width = t.wd,
      e.trect.height = t.ht,
      e.TRectToFrame(e.trect, !1),
      e.trect.height > t.ht
    ) {
      var v = Utils1.DeepCopy(t);
      this.Table_Resize(e, t, v, e.trect.width, e.trect.height)
    }
    e.Frame.width !== F.width &&
      (b = e.Frame.width),
      e.Frame.height !== F.height &&
      (T = e.Frame.height),
      (T || b) &&
      e.SetSize(b, T, ConstantData.ActionTriggerType.TABLE_EDIT)
  }
  this.Table_BuildFills(e, t, null),
    e &&
    this.svgObjectLayer.RemoveElement(R)
}

ListManager.LM.prototypeTable_SortChildContainers = function (e, t) {
  var a,
    r,
    i,
    n = [];
  if (!(this.ActiveVisibleZList().indexOf(e.BlockID) < 0)) {
    for (r = t.cells.length, a = 0; a < r; a++) (i = t.cells[a]).childcontainer >= 0 &&
      n.push(i.childcontainer);
    for (len = n.length, a = 0; a < len; a++) GlobalData.optManager.PutInFrontofObject(e.BlockID, n[a])
  }
}

ListManager.LM.prototypeTable_GetRow = function (e, t) {
  var a,
    r;
  for (a = e.rows.length, r = 0; r < a; r++) if (t < e.rows[r].start + e.rows[r].ncells) return r;
  return - 1
}



ListManager.LM.prototypeTable_GetColumnCells = function (e, t) {
  var a,
    r;
  if (cell_list = [], t < 0 || t > e.cols.length - 1) return cell_list;
  for (a = e.cells.length, r = 0; r < a; r++) e.cells[r].colindex === t &&
    cell_list.push(r);
  return cell_list
}

ListManager.LM.prototypeTable_GetCol = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = e.length,
    S = t.frame.x + t.frame.width;
  for (r = 0; r < l; r++) if (Utils2.IsEqual(S, e[r].x)) {
    for (n = e[r].segments.length, s = 0; s < n; s++) if (
      o = e[r].segments[s],
      t.frame.y - o.y > - 0.5 &&
      (i = t.frame.y + t.frame.height, o.bottom - i > - 0.5)
    ) return r;
    if (a) return r
  }
  return - 1
}

ListManager.LM.prototypeTable_GetGridLineThickness = function (e) {
  return e.Thickness
}

ListManager.LM.prototypeTable_GetFirstTextCell = function (e) {
  var t,
    a;
  for (a = e.cells.length, t = 0; t < a; t++) if (this.Table_AllowCellTextEdit(e, t)) return t;
  return - 1
}

ListManager.LM.prototypeTable_GetCellWithID = function (e, t, a) {
  var r,
    i,
    n;
  if (null == e) return null;
  for (i = e.cells.length, r = 0; r < i; r++) if ((n = e.cells[r]).uniqueid === t) return a &&
    (a.index = r),
    n;
  return null
}

ListManager.LM.prototypeTable_GetCellWithType = function (e, t) {
  var a,
    r;
  if (null == e) return null;
  for (r = e.cells.length, a = 0; a < r; a++) if (e.cells[a].celltype === t) return !0;
  return !1
}

ListManager.LM.prototypeTable_GetFirstImageCell = function (e) {
  var t,
    a,
    r,
    i = - 1,
    n = - 1;
  for (a = e.cells.length, t = 0; t < a; t++) if (
    r = e.cells[t],
    n < 0 &&
    r.ImageURL &&
    (n = t),
    - 1 === i &&
    0 == (r.flags & ListManager.Table.CellFlags.SDT_F_NoText) &&
    (i = t),
    r.celltype === ListManager.Table.CellTypes.SDT_CT_ICONPHOTOCELL ||
    r.celltype === ListManager.Table.CellTypes.SDT_CT_PHOTOCELL ||
    r.flags & ListManager.Table.CellFlags.SDT_F_PhotoPH
  ) return t;
  return n >= 0 ? n : i
}

ListManager.LM.prototypeTable_GetCellTextFormat = function (e, t, a) {
  return t < 0 &&
    (t = this.Table_GetFirstTextCell(e)),
    t < 0 ? null : (
      r = e.cells[t],
      a &&
      (a.bullet = 'none', a.spacing = 0, a.just = r.just, a.vjust = r.vjust),
      r.Text
    );
  var r
}

ListManager.LM.prototypeTable_GetStyle = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S = !0,
    c = GlobalData.optManager.Table_GetActiveID();
  if (e.BlockID === c) {
    for (r = t.rows.length, n = 0; n < r; n++) o = t.rows[n],
      l = t.cells[o.start],
      o.selected &&
      (
        S ? (a.Border = l.hline, S = !1) : (
          a.Border.Thickness != l.hline.Thickness &&
          (a.Border.Thickness = - 1),
          a.Border.LinePattern != l.hline.LinePattern &&
          (a.Border.LinePattern = - 1),
          a.Border.LineEffect != l.hline.LineEffect &&
          (a.Border.LineEffect = - 1),
          a.Border.Paint = this.SD_ComparePaint(a.Border.Paint, l.hline.Paint)
        )
      );
    for (i = t.cols.length, n = 0; n < i; n++) (s = t.cols[n]).selected &&
      (
        S ? (a.Border = s.vline, S = !1) : (
          a.Border.Thickness != s.vline.Thickness &&
          (a.Border.Thickness = - 1),
          a.Border.LinePattern != s.vline.LinePattern &&
          (a.Border.LinePattern = - 1),
          a.Border.LineEffect != s.vline.LineEffect &&
          (a.Border.LineEffect = - 1),
          a.Border.Paint = this.SD_ComparePaint(a.Border.Paint, s.vline.Paint)
        )
      )
  }
}

ListManager.LM.prototypeTable_GetTextFormat = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l = !0,
    S = ListManager.Table.CellFlags.SDT_F_Select,
    c = ConstantData.TextFace;
  for (o = e.cells.length, n = 0; n < o; n++) if (s = e.cells[n], r || s.flags & S) {
    if (!this.Table_AllowCellTextEdit(e, n)) continue;
    s.DataID >= 0 &&
      i &&
      (i.hastext = !0),
      l ? (
        t.FontId = s.Text.FontId,
        t.FontSize = s.Text.FontSize,
        t.Face = s.Text.Face,
        l = !1,
        a &&
        (a.just = s.just, a.vjust = s.vjust)
      ) : (
        t.FontId != s.Text.FontId &&
        (t.FontId = - 1),
        t.FontSize != s.Text.FontSize &&
        (t.FontSize = - 1),
        0 == (s.Text.Face & c.Bold) &&
        (t.Face = Utils2.SetFlag(t.Face, c.Bold, !1)),
        0 == (s.Text.Face & c.Italic) &&
        (t.Face = Utils2.SetFlag(t.Face, c.Italic, !1)),
        0 == (s.Text.Face & c.Underline) &&
        (t.Face = Utils2.SetFlag(t.Face, c.Underline, !1)),
        0 == (s.Text.Face & c.Superscript) &&
        (t.Face = Utils2.SetFlag(t.Face, c.Superscript, !1)),
        0 == (s.Text.Face & c.Subscript) &&
        (t.Face = Utils2.SetFlag(t.Face, c.Subscript, !1)),
        a &&
        (s.just !== a.just && (a.just = ''), s.vjust !== a.vjust && (a.vjust = ''))
      )
  }
}

ListManager.LM.prototypeTable_GetTextures = function (e, t) {
  var a,
    r,
    i,
    n,
    o = ConstantData.FillTypes.SDFILL_TEXTURE;
  for (i = e.cells.length, r = 0; r < i; r++) (a = e.cells[r]).fill.Paint.FillType === o &&
    (n = a.fill.Paint.Texture, - 1 === t.indexOf(n) && t.push(n)),
    a.hline.Paint.FillType === o &&
    (n = a.hline.Paint.Texture, - 1 === t.indexOf(n) && t.push(n)),
    a.vline.Paint.FillType === o &&
    (n = a.vline.Paint.Texture, - 1 === t.indexOf(n) && t.push(n)),
    a.Text.Paint.FillType === o &&
    (n = a.Text.Paint.Texture, - 1 === t.indexOf(n) && t.push(n))
}

ListManager.LM.prototypeTable_NoTableUI = function (e) {
  var t = !1,
    a = ListManager.Table.CellTypes;
  if (e && e.select >= 0) switch (e.cells[e.select].celltype) {
    case a.SDT_CT_MONTH_WITH_DAYS:
    case a.SDT_CT_WEEK_WITH_DAYS:
    case a.SDT_CT_QTR_WITH_MONTHS:
    case a.SDT_CT_YR_WITH_MONTHS:
    case a.SDT_CT_DAY_WITH_HOURS:
    case a.SDT_CT_MONTHLY_CALENDAR_NAME:
    case a.SDT_CT_YEARLY_CALENDAR_NAME:
    case a.SDT_CT_PREFIX_COUNT:
    case a.SDT_CT_SUBCOLHEADER:
    case a.SDT_CT_ROWREPEATER:
    case a.SDT_CT_GANTT_DATEBLOCK_TITLE:
    case a.SDT_CT_GANTTTASK:
    case a.SDT_CT_PERSON:
      t = !0;
      break;
    default:
      if (
        0 === e.select &&
        e.cells.length > 1 &&
        e.cells[1].celltype === a.SDT_CT_GANTTTASK
      ) return !0
  }
  return t
}



ListManager.LM.prototypeTable_GetTextParaFormat = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u = !0,
    p = 0,
    d = ListManager.Table.CellFlags.SDT_F_Select;
  for (l = e.cells.length, null != n && (p = n, l = n + 1), o = p; o < l; o++) s = e.cells[o],
    c = null,
    (r || s.flags & d) &&
    (
      s.DataID >= 0 &&
      (
        S = a.GetElementByID(ConstantData.SVGElementClass.TEXT, s.DataID)
      ) &&
      (c = S.GetSelectedParagraphStyle()),
      u ? (
        t.just = s.just,
        t.vjust = s.vjust,
        c &&
        (t.bullet = c.bullet, t.spacing = c.spacing),
        u = !1
      ) : (
        s.just !== t.just &&
        (t.just = ''),
        s.vjust !== t.vjust &&
        (t.vjust = ''),
        c &&
        (
          t.bullet != c.bullet &&
          (t.bullet = - 1),
          t.spacing != c.spacing &&
          (t.spacing = - 1)
        )
      )
    );
  if ('' !== t.just && '' !== t.vjust && i) switch (t.vjust) {
    case 'bottom':
    case 'top':
      t.just = t.vjust + '-' + t.just
  }
}

ListManager.LM.prototypeTable_CellIsFixed = function (e) {
  switch (e.celltype) {
    case ListManager.Table.CellTypes.SDT_CT_ICONCELL:
    case ListManager.Table.CellTypes.SDT_CT_ICONPHOTOCELL:
      return e.celltype
  }
  return !1
}

ListManager.LM.prototypeTable_BuildColumns = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = !1,
    L = [];
  for ((g = t.rows.length) - 1, d = 0; d < g; d++) for (r = t.rows[d], D = 0; D < r.ncells; D++) m = (i = t.cells[r.start + D]).frame.x + i.frame.width,
    (s = this.Table_GetCol(L, i, !0)) >= 0 ? (
      u = (n = L[s]).segments.length,
      p = n.segments[u - 1],
      i.colindex = s,
      n.vline = i.vline,
      n.vdisp = i.vdisp,
      ((y = this.Table_CellIsFixed(i)) || (y = this.Table_ColIsFixed(i))) &&
      (n.fixed = y),
      e &&
      e.subtype === ConstantData.ObjectSubTypes.SD_SUBT_UI_VTABBED &&
      (f = 0 === i.vline.Thickness && i.vdisp > 0),
      p.rowend < d - 1 ||
        f ? (
        p = new ListManager.Table.ColumnSegment(d, r.frame.y, r.frame.y + r.frame.height),
        n.segments.push(p),
        f &&
        d < g - 1 &&
        (
          p.noline = !0,
          p = new ListManager.Table.ColumnSegment(
            d + 1,
            t.rows[d + 1].frame.y,
            t.rows[d + 1].frame.y + t.rows[d + 1].frame.height
          ),
          n.segments.push(p)
        )
      ) : (p.bottom = r.frame.y + r.frame.height, p.rowend = d),
      S = i.minwd,
      a !== ConstantData.TextGrowBehavior.VERTICAL &&
      i.textwd > S &&
      (S = i.textwd),
      (c = i.frame.x + S + i.vdisp + t.tmargin.left + t.tmargin.right) > n.minx &&
      (n.minx = c)
    ) : (
      l = D < r.ncells - 1 ? i.vdisp : 0,
      (o = new ListManager.Table.Column(m, i.vline, l)).segments.push(
        new ListManager.Table.ColumnSegment(d, r.frame.y, r.frame.y + r.frame.height)
      ),
      S = i.minwd,
      a !== ConstantData.TextGrowBehavior.VERTICAL &&
      i.textwd > S &&
      (S = i.textwd),
      c = 0 == (i.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) ? i.frame.x + S + i.vdisp + t.tmargin.left + t.tmargin.right : i.frame.x + S,
      o.minx = c,
      o.fixed = this.Table_CellIsFixed(i),
      o.fixed ||
      (o.fixed = this.Table_ColIsFixed(i)),
      i.colindex = L.length,
      L.push(o)
    );
  C = L.length;
  var I = [];
  for (d = 0; d < C; d++) I.push(L[d].x);
  L.sort((function (e, t) {
    return e.x - t.x
  }));
  var T = [];
  for (d = 0; d < C; d++) T[I.indexOf(L[d].x)] = d;
  for (h = t.cells.length, d = 0; d < h; d++) (i = t.cells[d]).colindex = T[i.colindex];
  return L
}

ListManager.LM.prototypeTable_AddFill = function (e, t, a, r, i, n) {
  var o,
    s;
  for (o = e.length, s = 0; s < o; s++) if (
    Resources.SD_EqualFill(t, e[s].fill) &&
    e[s].containertext === n
  ) return e[s].list.push(a),
    e[s].rows.push(r),
    e[s].rcells.push(i),
    e;
  var l = new ListManager.Table.Fill(t);
  return l.containertext = n,
    l.list.push(a),
    l.rows.push(r),
    l.rcells.push(i),
    e.push(l),
    e
}

ListManager.LM.prototypeTable_BuildFills = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = [],
    S = !1;
  ListManager.Table.CellFlags.SDT_F_SilentF;
  e &&
    (
      S = (e.moreflags & ConstantData.ObjMoreFlags.SED_MF_Container) > 0
    );
  var c = !1;
  for (i = t.rows.length, r = 0; r < i; r++) for (n = t.rows[r], o = 0; o < n.ncells; o++) s = t.cells[n.start + o],
    a &&
    Resources.SD_EqualFill(s.fill, a) &&
    !S ||
    (
      S &&
      (c = 0 == (s.flags & ListManager.Table.CellFlags.SDT_F_NoText)),
      l = this.Table_AddFill(l, s.fill, n.start + o, r, o, c)
    );
  t.fills = l
};




ListManager.LM.prototype.Table_AddSVGTextObject = function (e, t, a, r, i) {
  var n = ConstantData.ObjectTypes;
  if (!(r.DataID < 0)) {
    var o,
      s,
      l = e.GetSVGFrame(e.Frame);
    o = e.trect.x - l.x,
      s = e.trect.y - l.y;
    var S = r.trect,
      c = e.GetTable(!1);
    r.nextra &&
      (S = this.Table_GetJoinedCellFrame(c, i, !0, !1));
    var u = GlobalData.objectStore.GetObject(r.DataID);
    if (null != u) {
      var p = t.CreateShape(ConstantData.CreateShapeType.TEXT);
      if (
        p.SetID(ConstantData.SVGElementClass.TEXT),
        p.SetUserData(r.DataID),
        p.SetRenderingEnabled(!1),
        p.SetPos(S.x + o, S.y + s),
        p.SetSize(S.width, S.height),
        a &&
        (a.AddElement(p), a.isText = !0, a.textElem = p),
        p.SetParagraphAlignment(r.just),
        p.SetVerticalAlignment(r.vjust),
        p.SetSpellCheck(e.AllowSpell()),
        p.InitDataSettings(e.fieldDataTableID, e.fieldDataElemID, e.dataStyleOverride),
        u.Data.runtimeText ? (
          u.Data.runtimeText.vAlign = r.vjust,
          p.SetRuntimeText(u.Data.runtimeText)
        ) : p.SetText(''),
        e.TextGrow === ConstantData.TextGrowBehavior.HORIZONTAL ? p.SetConstraints(
          GlobalData.optManager.theContentHeader.MaxWorkDim.x - c.wd + S.width,
          S.width,
          S.height
        ) : p.SetConstraints(S.width, S.width, S.height),
        p.SetRenderingEnabled(!0),
        u.Data.runtimeText ||
        (u.Data.runtimeText = p.GetRuntimeText()),
        p.SetEditCallback(GlobalData.optManager.TextCallback, a),
        !GlobalData.docHandler.IsReadOnly()
      ) switch (e.objecttype) {
        case n.SD_OBJT_SWIMLANE_GRID:
        case n.SD_OBJT_SWIMLANE_COLS:
        case n.SD_OBJT_SWIMLANE_ROWS:
        case n.SD_OBJT_ANNOTATION:
          var d = GlobalData.optManager.FindLayerForShapeID(e.BlockID);
          if (GlobalData.optManager.GetActiveLayerIndex() !== d) {
            p.SetEventBehavior(ConstantData.EventBehavior.NORMAL);
            var D = p.DOMElement(),
              g = Hammer(D);
            SDJS_LM_TableTextTap = SDJS_LM_TableTextTapFactory(e),
              g.on('tap', SDJS_LM_TableTextTap),
              p.SetCursor(ConstantData.CursorType.TEXT);
            break
          }
      }
      return p
    }
  }
}

ListManager.LM.prototypeTable_AddSVGDateBlockHeaderTitle = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = e.GetGanttInfo(!1),
    d = null,
    D = Utils1.DeepCopy(r.frame),
    g = null,
    h = {},
    m = null,
    C = null,
    y = null,
    f = {};
  (D = Utils1.DeepCopy(r.frame)).x = 0,
    D.y = 0;
  var L = e.GetSVGFrame(e.Frame);
  if (
    s = e.trect.x - L.x,
    l = e.trect.y - L.y,
    !(
      u = a.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDCLIPPINGGROUP)
    )
  ) {
    if (!(d = e.GetTable())) return;
    (u = t.CreateShape(ConstantData.CreateShapeType.GROUP)).SetPos(r.frame.x + s, l),
      u.SetSize(r.frame.width, d.ht),
      u.SetClipRect(0, 0, r.frame.width, d.ht),
      u.SetID(ConstantData.SVGElementClass.GANTTGRIDCLIPPINGGROUP),
      a.AddElement(u)
  }
  for (
    ;
    y = u.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDTITLELINE);
  ) u.RemoveElement(y);
  for (
    ;
    y = u.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDTITLETEXT);
  ) u.RemoveElement(y);
  for (n = 0; n < p.nTitle1; n++) {
    if (!(g = this.GanttGetTitle1FrameByIndex(p, D, n))) return;
    if (
      0 !== g.width &&
      (
        Utils2.OffsetRect(g, - p.scrollOffset, 0),
        !(g.x + g.width < D.x)
      )
    ) {
      if (g.x > D.x + D.width) return;
      if (!(o = this.GanttGetTitle1LabelByIndex(p, n))) return;
      var I = t.CreateShape(ConstantData.CreateShapeType.TEXT);
      switch (
      I.SetID(ConstantData.SVGElementClass.GANTTGRIDTITLETEXT),
      u &&
      (u.AddElement(I), u.isText = !0, u.textElem = I),
      f = {
        size: SDF.PointSizeToFontSize(r.Text.FontSize),
        font: r.Text.FontName,
        style: r.Text.Face,
        color: r.Text.Paint.Color
      },
      I.SetText(o, f),
      h = I.GetTextMinDimensions(),
      r.just
      ) {
        case 'left':
          S = g.x + s;
          break;
        case 'right':
          S = g.x + s + g.width - h.width;
          break;
        default:
          S = g.x + s + g.width / 2 - h.width / 2
      }
      switch (r.vjust) {
        case 'top':
          c = g.Y + l;
          break;
        case 'bottom':
          c = g.y + s + g.height - h.height;
          break;
        default:
          c = g.y + l + g.height / 2 - h.height / 2
      }
      if (
        I.SetPos(S, c),
        I.SetSize(h.width, h.height),
        I.SetParagraphAlignment('center'),
        I.SetVerticalAlignment('middle'),
        S > D.x + D.width
      ) {
        u.RemoveElement(I),
          I = null;
        break
      }
      if (n < p.nTitle1 - 1) {
        if (g.x + g.width > D.x + D.width) break;
        if (g.x + g.width < D.x) continue;
        (
          C = (
            m = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH)
          ).PathCreator()
        ).BeginPath(),
          C.MoveTo(g.x + g.width, g.y),
          C.LineTo(g.x + g.width, g.y + g.height),
          C.ClosePath(),
          C.Apply(),
          m.SetID(ConstantData.SVGElementClass.GANTTGRIDTITLELINE),
          m.SetFillColor('none'),
          m.SetStrokeColor(r.vline.Paint.Color),
          m.SetStrokeOpacity(1),
          m.SetStrokeWidth(r.vline.Thickness),
          u.AddElement(m)
      }
    }
  }
}

ListManager.LM.prototypeTable_AddSVGDateBlockHeaderGrid = function (e, t, a, r, i, n, o) {

  var s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P = null,
    R = new Rectangle(0, 0, 0, 0),
    A = new Rectangle(0, 0, 0, 0),
    _ = (
      new Rectangle(0, 0, 0, 0),
      new Rectangle(0, 0, 0, 0)
    );
  new Rectangle(0, 0, 0, 0);
  if (null == e) return 0;
  if (
    !(
      M = a.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDCLIPPINGGROUP)
    )
  ) {
    if (!(l = e.GetTable())) return;
    (M = t.CreateShape(ConstantData.CreateShapeType.GROUP)).SetPos(r.frame.x + n, o),
      M.SetSize(r.frame.width, l.ht),
      M.SetClipRect(0, 0, r.frame.width, l.ht),
      M.SetID(ConstantData.SVGElementClass.GANTTGRIDCLIPPINGGROUP),
      a.AddElement(M)
  }
  for (
    ;
    c = M.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDHEADERLINE);
  ) M.RemoveElement(c);
  for (
    ;
    c = M.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDHEADERTEXT);
  ) M.RemoveElement(c);
  if (
    f = (s = e.GetGanttInfo()).gridTimes.length,
    L = s.gridWd,
    T = {
      size: SDF.PointSizeToFontSize(r.Text.FontSize),
      font: r.Text.FontName,
      style: r.Text.Face,
      color: r.Text.Paint.Color
    },
    b = s.timeScale == ListManager.TimeScale.SDG_WEEK_WITH_DAYS ||
    s.timeScale == ListManager.TimeScale.SDG_MONTH_WITH_DAYS
  ) {
    var E = this.GanttGetNonWorkingDays();
    E.nonWorkDays;
    (d = E.holidayMask) &&
      (p = this.LoadHolidays(!1), g = this.CountryNameFromHolidayMask(d))
  }
  for (
    Utils2.CopyRect(_, r.frame),
    _.x = 0,
    (u = Utils1.DeepCopy(r.vline)).Paint.Color = ListManager.GanttDefines.GANTT_DATEBLOCK_GRIDLINE_COLOR,
    m = 0;
    m < f;
    m++
  ) if (!((I = L * m - s.scrollOffset) + L < 0)) {
    if (I >= r.frame.width) break;
    if (_.x + I >= _.x + _.width) break;
    if (
      b &&
      (
        A = Utils2.SetRect(I, r.frame.y + r.frame.height, I + L, e.trect.height),
        this.DrawDateBlockGridShading(M, s.gridTimes[m], A, g, p)
      ),
      m > 0 &&
      _.x + I > _.x &&
      (
        (
          S = (
            P = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH)
          ).PathCreator()
        ).BeginPath(),
        S.MoveTo(_.x + I, _.y),
        S.LineTo(_.x + I, e.trect.height),
        S.ClosePath(),
        S.Apply(),
        P.SetID(ConstantData.SVGElementClass.GANTTGRIDHEADERLINE),
        P.SetFillColor('none'),
        P.SetStrokeColor(u.Paint.Color),
        P.SetStrokeOpacity(1),
        P.SetStrokeWidth(u.Thickness),
        M.AddElement(P)
      ),
      Utils2.CopyRect(R, _),
      Utils2.OffsetRect(R, I, 0),
      r.celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER ? D = this.GanttGetGridLabelByIndex(s, m) : r.celltype == ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_TITLE &&
        (D = this.GanttGetTitle1LabelByIndex(s, m)),
      Utils2.IntersectRect(R, _)
    ) {
      var w = t.CreateShape(ConstantData.CreateShapeType.TEXT);
      w.SetID(ConstantData.SVGElementClass.GANTTGRIDHEADERTEXT),
        M &&
        (M.AddElement(w), M.isText = !0, M.textElem = w),
        w.SetParagraphAlignment('center'),
        w.SetVerticalAlignment('bottom'),
        w.SetText(D, T),
        C = L / 2 - (h = w.GetTextMinDimensions()).width / 2,
        y = r.frame.height / 2 - h.height / 2,
        Utils2.OffsetRect(R, C, y),
        R.width = h.width,
        R.height = h.height,
        w.SetPos(R.x, R.y),
        w.SetSize(R.width, R.height)
    }
  }
}

ListManager.LM.prototypeDrawDateBlockGridShading = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l;
  n = Utils2.SDRLocalTime(t);
  var S = this.GanttGetNonWorkingDays();
  if (
    o = S.nonWorkingDays,
    s = S.holidayMask,
    (l = 0 == (o & 1 << n.wDayOfWeek + 1)) &&
    0 != s &&
    this.GetHolidayStr(i, r, t) &&
    (l = !1),
    !l
  ) {
    var c = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.RECT);
    c.SetSize(a.width, a.height),
      c.SetPos(a.x, a.y),
      c.SetFillColor(ListManager.GanttDefines.GANTT_NONWORKING_COLOR),
      e.AddElement(c)
  }
}

ListManager.LM.prototypeLM_SelectSVGTableObject = function (e, t, a, r, i) {
  var n = function (e) {
    var a = !1;
    e < 0 &&
      (a = !0, e = - e);
    var r = GlobalData.optManager.GetObjectPtr(e, !1),
      i = GlobalData.optManager.svgObjectLayer.GetElementByID(e);
    if (i) {
      var n = i.GetElementByID(ConstantData.Defines.TableSelection);
      if (n) return void (a && i.RemoveElement(n));
      if (a) return;
      var o = t.CreateShape(ConstantData.CreateShapeType.RECT);
      o.SetStrokeColor(ConstantData.Colors.Color_Hilite),
        o.SetFillColor(ConstantData.Colors.Color_Hilite),
        o.SetOpacity(0.3),
        o.SetStrokeWidth(0),
        o.SetID(ConstantData.Defines.TableSelection),
        o.SetSize(r.Frame.width, r.Frame.height),
        i.AddElement(o)
    }
  };
  if (i && i.length) {
    var o = i.length;
    for (D = 0; D < o; D++) n(i[D])
  }
  var s = a.GetElementByID(ConstantData.Defines.TableSelection);
  s &&
    a.RemoveElement(s);
  var l = r.length;
  if (0 !== l) {
    var S,
      c,
      u = t.CreateShape(ConstantData.CreateShapeType.PATH),
      p = u.PathCreator(),
      d = e.GetSVGFrame(e.Frame);
    S = e.trect.x - d.x,
      c = e.trect.y - d.y,
      p.BeginPath();
    var D,
      g,
      h,
      m,
      C,
      y,
      f = 0,
      L = 0;
    for (D = 0; D < l; D++) h = (g = r[D]).x + g.width,
      m = g.y + g.height,
      p.MoveTo(g.x, g.y),
      p.LineTo(h, g.y),
      p.LineTo(h, m),
      p.LineTo(g.x, m),
      h > f &&
      (f = h),
      m > L &&
      (L = m),
      p.ClosePath();
    if (
      p.Apply(),
      u.SetStrokeColor(ConstantData.Colors.Color_Hilite),
      u.SetFillColor(ConstantData.Colors.Color_Hilite),
      u.SetOpacity(0.3),
      u.SetStrokeWidth(0),
      u.SetSize(f, L),
      u.SetPos(S, c),
      u.SetID(ConstantData.Defines.TableSelection),
      a.AddElement(u),
      y = (
        C = a.GetElementListWithID(ConstantData.ShapeIconType.COMMENT)
      ).length
    ) for (D = 0; D < y; ++D) a.MoveElementToFront(C[D]);
    if (
      y = (
        C = a.GetElementListWithID(ConstantData.ShapeIconType.NOTES)
      ).length
    ) for (D = 0; D < y; ++D) a.MoveElementToFront(C[D]);
    if (
      y = (
        C = a.GetElementListWithID(ConstantData.ShapeIconType.EXPANDEDVIEW)
      ).length
    ) for (D = 0; D < y; ++D) a.MoveElementToFront(C[D]);
    if (
      y = (
        C = a.GetElementListWithID(ConstantData.ShapeIconType.HYPERLINK)
      ).length
    ) for (D = 0; D < y; ++D) a.MoveElementToFront(C[D]);
    if (
      y = (
        C = a.GetElementListWithID(ConstantData.ShapeIconType.TRELLOLINK)
      ).length
    ) for (D = 0; D < y; ++D) a.MoveElementToFront(C[D]);
    if (
      y = (
        C = a.GetElementListWithID(ConstantData.ShapeIconType.EXPANDTABLE)
      ).length
    ) for (D = 0; D < y; ++D) a.MoveElementToFront(C[D]);
    if (
      y = (
        C = a.GetElementListWithID(ConstantData.ShapeIconType.COLLAPSETABLE)
      ).length
    ) for (D = 0; D < y; ++D) a.MoveElementToFront(C[D])
  }
}

ListManager.LM.prototypeLM_AddSVGTableCells = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P = 0,
    R = 0,
    A = {},
    _ = e.GetFieldDataStyleOverride();
  for (
    ConstantData.ObjectTypes;
    i = r.GetElementByID(ConstantData.Defines.TableCells);
  ) void 0 === m &&
    (m = r.GetElementIndex(i)),
    r.RemoveElement(i);
  for (
    ;
    i = r.GetElementByID(ConstantData.Defines.TableCellNoHit);
  ) void 0 === m &&
    (m = r.GetElementIndex(i)),
    r.RemoveElement(i);
  var E = t.fills.length;
  if (0 !== E) {
    var w = e.GetSVGFrame(e.Frame);
    for (g = 0; g < E; g++) {
      for (
        D = (S = t.fills[g]).list.length,
        o = (n = a.CreateShape(ConstantData.CreateShapeType.PATH)).PathCreator(),
        s = e.trect.x - w.x,
        l = e.trect.y - w.y,
        P = 0,
        R = 0,
        o.BeginPath(),
        L = S.fill.Paint.FillType,
        T = S.fill.Paint.Color,
        I = S.fill.Paint.Opacity,
        _ &&
        _.fillColor &&
        L !== ConstantData.FillTypes.SDFILL_TRANSPARENT &&
        (L = ConstantData.FillTypes.SDFILL_SOLID, T = _.fillColor),
        c = 0;
        c < D;
        c++
      ) {
        if (h = t.cells[S.list[c]], C = e.ExtendCell(g, c, !1)) for (y = C.length, o.MoveTo(C[0].x, C[0].y), f = 1; f < y; f++) o.LineTo(C[f].x, C[f].y),
          C[f].x > P &&
          (P = C[f].x),
          C[f].y > R &&
          (R = C[f].y);
        else p = (
          u = (
            h.flags & ListManager.Table.CellFlags.SDT_F_UseTextRectAsFrame
          ) > 0 ? $.extend(!0, {
          }, h.trect) : $.extend(!0, {
          }, h.frame)
        ).x + u.width + s,
          d = u.y + u.height + l,
          o.MoveTo(u.x + s, u.y + l),
          o.LineTo(p, u.y + l),
          o.LineTo(p, d),
          o.LineTo(u.x + s, d),
          p > P &&
          (P = p),
          d > R &&
          (R = d);
        o.ClosePath()
      }
      o.Apply(),
        L === ConstantData.FillTypes.SDFILL_GRADIENT ? (
          n.SetGradientFill(
            e.CreateGradientRecord(
              S.fill.Paint.GradientFlags,
              T,
              S.fill.Paint.Opacity,
              S.fill.Paint.EndColor,
              S.fill.Paint.EndOpacity
            )
          ),
          n.fillPaintType = L
        ) : L === ConstantData.FillTypes.SDFILL_RICHGRADIENT ? (
          n.SetGradientFill(e.CreateRichGradientRecord(S.fill.Paint.GradientFlags)),
          n.fillPaintType = L
        ) : L == ConstantData.FillTypes.SDFILL_TEXTURE ? (
          b = {
            url: '',
            scale: S.fill.Paint.TextureScale.Scale,
            alignment: S.fill.Paint.TextureScale.AlignmentScalar
          },
          M = S.fill.Paint.Texture,
          GlobalData.optManager.TextureList.Textures[M] &&
          (
            b.dim = GlobalData.optManager.TextureList.Textures[M].dim,
            b.url = GlobalData.optManager.TextureList.Textures[M].ImageURL,
            b.scale = GlobalData.optManager.CalcTextureScale(S.fill.Paint.TextureScale, b.dim.x),
            S.fill.Paint.TextureScale.Scale = b.scale,
            b.url ||
            (
              b.url = Constants.FilePath_CMSRoot + Constants.FilePath_Textures + GlobalData.optManager.TextureList.Textures[M].filename
            ),
            n.SetTextureFill(b)
          )
        ) : L == ConstantData.FillTypes.SDFILL_TRANSPARENT ? (I = 0.01, n.SetFillColor(S.fill.Paint.Color), n.SetOpacity(I)) : (n.SetFillColor(T), n.SetOpacity(I));
      var F = ConstantData.Defines.TableCells;
      e.IsSwimlane() &&
        h.flags & ListManager.Table.CellFlags.SDT_F_NoText &&
        (F = ConstantData.Defines.TableCellNoHit),
        n.SetStrokeColor(S.fill.Paint.Color),
        n.SetStrokeWidth(0),
        n.SetSize(P + s, R + l),
        n.SetPos(0, 0),
        n.SetID(F),
        n.SetUserData(g),
        GlobalData.optManager.bDrawEffects &&
        !GlobalData.optManager.bTokenizeStyle &&
        (
          A.Fill = S.fill,
          A.Line = t.cells[S.list[0]].hline,
          e.SetEffects(n, !1, !1, A, !0, !1)
        ),
        void 0 === m ? r.AddElement(n) : r.AddElement(n, m + g);
      var v = S.fill.Hatch;
      if (v && 0 !== v) {
        var G = a.CreateShape(ConstantData.CreateShapeType.PATH),
          N = G.PathCreator();
        N.pathSegs = Utils1.DeepCopy(o.pathSegs),
          N.curPosX = o.curPosX,
          N.curPosY = o.curPosY,
          N.Apply(),
          G.SetStrokeWidth(0),
          G.SetSize(P + s, R + l),
          G.SetPos(0, 0),
          G.SetID(ConstantData.Defines.TableCells),
          G.SetUserData(g);
        var k = t.cells[S.list[0]].hline.Paint.Color;
        e.SetFillHatch(G, v, k),
          r.AddElement(G)
      }
    }
  }
}

ListManager.LM.prototypeTable_ExtendLines = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h = e.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !0, !1, !1, null),
    m = [
      0,
      0
    ];
  for (
    p = e.trect.x - e.Frame.x,
    d = e.trect.y - e.Frame.y,
    D = e.inside.x - e.Frame.x,
    g = e.inside.y - e.Frame.y,
    i = t.rows.length,
    S = t.cols.length,
    r = 0;
    r < i - 1;
    r++
  ) if (
      o = (a = t.rows[r]).segments.length,
      l = a.frame.y + a.frame.height + d,
      l -= t.cells[t.rows[r].start].hdisp / 2,
      2 == this.PolyGetIntersect(h, l, m, null, !1)
    ) for (n = 0; n < o; n++) (s = a.segments[n]).x_start <= 0 &&
      (s.x_start = m[0] - p + D),
      s.ncells + s.start === a.ncells &&
      (s.x_end = m[1] - p - D);
  for (r = 0; r < S - 1; r++) if (
    o = (c = t.cols[r]).segments.length,
    u = c.x + p - c.vdisp / 2,
    2 == this.PolyGetIntersect(h, u, m, null, !0)
  ) for (n = 0; n < o; n++) 0 === (s = c.segments[n]).rowstart &&
    (s.y = m[0] - d + g),
    s.rowend === i - 1 &&
    (s.bottom = m[1] - d - g)
}

ListManager.LM.prototypeTable_ExtendCell = function (e, t, a, r, i) {
  var n = $.extend(!0, {
  }, e.Frame);
  e.Frame = e.inside;
  var o = e.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !0, !1, !1, null);
  e.Frame = n;
  var s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P = [],
    R = [
      0,
      0
    ],
    A = [
      0,
      0
    ];
  if (
    i ? (c = a, u = r - t.rows[c].start, d = t.cells[r]) : (
      c = t.fills[a].rows[r],
      u = t.fills[a].rcells[r],
      d = t.cells[t.fills[a].list[r]]
    ),
    g = t.rows[c],
    s = t.rows.length - d.nextra,
    l = g.ncells,
    1 == s &&
    1 == l
  ) {
    for (L = o.length, S = 0; S < L; S++) P.push(o[S]);
    return P
  }
  if (
    I = e.trect.x - e.inside.x,
    T = e.trect.y - e.inside.y,
    D = (p = d.frame).y + p.height + T,
    h = p.x + p.width + I,
    M = p.y + T,
    b = p.x + I,
    0 === u
  ) {
    if (0 === c) {
      if (1 === l) {
        if (
          2 === this.PolyGetIntersect(o, D, R, A, !1) &&
          (
            P.push(new Point(R[1], D)),
            P.push(new Point(R[0], D)),
            this.SD_TableFillPoly(o, A[0], A[1], - 1, !0, D, P)
          )
        ) return P
      } else if (1 === s) {
        if (
          2 === this.PolyGetIntersect(o, h, R, A, !0) &&
          (
            P.push(new Point(h, R[0])),
            P.push(new Point(h, R[1])),
            this.SD_TableFillPoly(o, A[1], A[0], - 1, !1, h, P)
          )
        ) return P
      } else if (
        2 === this.PolyGetIntersect(o, D, R, A, !1) &&
        (
          P.push(new Point(h, D)),
          P.push(new Point(R[0], D)),
          m = A[0],
          this.PolyGetIntersect(o, h, R, A, !0) >= 2 &&
          this.SD_TableFillPoly(o, m, A[0], - 1, !0, D, P)
        )
      ) return P[(C = P.length) - 1].y < D &&
        P.pop(),
        P.push(new Point(h, R[0])),
        P.push(new Point(P[0].x, P[0].y)),
        P
    } else if (c === s - 1) {
      if (1 === l) {
        if (
          this.PolyGetIntersect(o, M, R, A, !1) >= 2 &&
          (
            P.push(new Point(R[1], M)),
            P.push(new Point(R[0], M)),
            this.SD_TableFillPoly(o, A[0], A[1], 1, !0, M, P)
          )
        ) return P
      } else if (
        this.PolyGetIntersect(o, h, R, A, !0) >= 2 &&
        (
          P.push(new Point(h, M)),
          P.push(new Point(h, R[1])),
          m = A[1],
          this.PolyGetIntersect(o, M, R, A, !1) >= 2 &&
          this.SD_TableFillPoly(o, m, A[0], - 1, !1, h, P)
        )
      ) return P[(C = P.length) - 1].y < M &&
        P.pop(),
        P.push(new Point(R[0], M)),
        P.push(new Point(P[0].x, P[0].y)),
        P
    } else if (
      this.PolyGetIntersect(o, D, R, A, !1) >= 2 &&
      (
        P.push(new Point(h, D)),
        P.push(new Point(R[0], D)),
        m = A[0],
        y = A[1],
        f = R[1],
        this.PolyGetIntersect(o, M, R, A, !1) >= 2 &&
        this.SD_TableFillPoly(o, m, A[0], - 1, !0, D, P)
      )
    ) return P[(C = P.length) - 1].y < M &&
      P.pop(),
      P.push(new Point(R[0], M)),
      1 === l ? (
        P.push(new Point(R[1], M)),
        this.SD_TableFillPoly(o, A[1], y, 1, !0, M, P) &&
        (P[C - 1].y > D && P.pop(), P.push(new Point(f, D)))
      ) : P.push(new Point(h, M)),
      P.push(new Point(P[0].x, P[0].y)),
      P
  } else if (u === l - 1) {
    if (0 === c) {
      if (1 === s) {
        if (
          2 === this.PolyGetIntersect(o, b, R, A, !0) &&
          (
            P.push(new Point(b, R[1])),
            P.push(new Point(b, R[0])),
            this.SD_TableFillPoly(o, A[0], A[1], 1, !1, b, P)
          )
        ) return P
      } else if (
        2 === this.PolyGetIntersect(o, b, R, A, !0) &&
        (
          P.push(new Point(b, D)),
          P.push(new Point(b, R[0])),
          m = A[0],
          this.PolyGetIntersect(o, D, R, A, !1) >= 2 &&
          this.SD_TableFillPoly(o, m, A[1], 1, !1, b, P)
        )
      ) return P[(C = P.length) - 1].y > D &&
        P.pop(),
        P.push(new Point(R[1], D)),
        P.push(new Point(P[0].x, P[0].y)),
        P
    } else if (c === s - 1) {
      if (
        this.PolyGetIntersect(o, M, R, A, !1) >= 2 &&
        (
          P.push(new Point(b, M)),
          P.push(new Point(R[1], M)),
          m = A[1],
          this.PolyGetIntersect(o, b, R, A, !0) >= 2 &&
          this.SD_TableFillPoly(o, m, A[1], 1, !0, M, P)
        )
      ) return P[(C = P.length) - 1].x < b &&
        P.pop(),
        P.push(new Point(b, R[1])),
        P.push(new Point(P[0].x, P[0].y)),
        P
    } else if (
      this.PolyGetIntersect(o, M, R, A, !1) >= 2 &&
      (
        P.push(new Point(b, M)),
        P.push(new Point(R[1], M)),
        m = A[1],
        this.PolyGetIntersect(o, D, R, A, !1) >= 2 &&
        this.SD_TableFillPoly(o, m, A[1], 1, !0, M, P)
      )
    ) return P[(C = P.length) - 1].y > D &&
      P.pop(),
      P.push(new Point(R[1], D)),
      P.push(new Point(b, D)),
      P.push(new Point(P[0].x, P[0].y)),
      P
  } else if (0 === c) {
    if (
      this.PolyGetIntersect(o, b, R, A, !0) >= 2 &&
      (
        P.push(new Point(b, D)),
        P.push(new Point(b, R[0])),
        m = A[0],
        y = A[1],
        f = R[1],
        this.PolyGetIntersect(o, h, R, A, !0) >= 2 &&
        this.SD_TableFillPoly(o, m, A[0], 1, !1, b, P)
      )
    ) return P[(C = P.length) - 1].x > h &&
      P.pop(),
      P.push(new Point(h, R[0])),
      1 === s ? (
        P.push(new Point(h, R[1])),
        this.SD_TableFillPoly(o, A[1], y, - 1, !1, h, P) &&
        (P[C - 1].y < b && P.pop(), P.push(new Point(b, f)))
      ) : P.push(new Point(h, D)),
      P.push(new Point(P[0].x, P[0].y)),
      P
  } else if (
    c === s - 1 &&
    this.PolyGetIntersect(o, h, R, A, !0) >= 2 &&
    (
      P.push(new Point(h, M)),
      P.push(new Point(h, R[1])),
      m = A[1],
      this.PolyGetIntersect(o, b, R, A, !0) >= 2 &&
      this.SD_TableFillPoly(o, m, A[1], - 1, !1, h, P)
    )
  ) return P[(C = P.length) - 1].x < b &&
    P.pop(),
    P.push(new Point(b, R[1])),
    P.push(new Point(b, M)),
    P.push(new Point(P[0].x, P[0].y)),
    P;
  return null
}

ListManager.LM.prototypeLM_AddSVGSelectionArea = function (e, t, a, r) {
  var i = e.CreateShape(ConstantData.CreateShapeType.RECT);
  i.SetStrokeColor('white'),
    i.SetFillColor('none'),
    i.SetOpacity(0),
    i.SetStrokeWidth(ConstantData.Defines.TableZoneDim),
    i.SetEventBehavior(ConstantData.EventBehavior.HIDDEN_OUT),
    i.SetID(r),
    i.SetSize(a.width, a.height),
    i.SetPos(a.x, a.y),
    t.AddElement(i)
}

ListManager.LM.prototypeTable_GetCellURL = function (e) {
  if (e.ImageURL) return e.ImageURL;
  if (e.Image && e.Image.iconid > 0) {
    var t = '.png',
      a = e.Image.iconid;
    return e.flags & ListManager.Table.CellFlags.SDT_F_ToggleIconSelect &&
      a++,
      a >= ConstantData.Defines.SVGIconIndex &&
      (t = '.svg'),
      Constants.FilePath_RSRC + a + '.icon' + t
  }
  return null
}

ListManager.LM.prototypeTable_GetIconPosition = function (e, t, a) {
  var r,
    i = new Point(0, 0),
    n = ConstantData.Defines.Icon_Dim,
    o = !1,
    s = !1;
  return i.x = t.frame.x + t.frame.width - 2 - n,
    i.y = t.frame.y + t.frame.height - 2 - n,
    a === ConstantData.ShapeIconType.EXPANDTABLE &&
    (
      i.y = t.frame.y + t.frame.height / 2 - ConstantData.Defines.SED_CKnobSize / 2
    ),
    t.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
    (
      o = this.GetExpandIcon(t.datarecordID),
      (
        r = ListManager.SDData.GetValue(
          t.datarecordID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_URL]
        )
      ) &&
      r.length &&
      (s = !0)
    ),
    a === ConstantData.ShapeIconType.TRELLOLINK &&
    o &&
    (i.x -= 2 + n),
    a === ConstantData.ShapeIconType.HYPERLINK &&
    (o && (i.x -= 2 + n), s && (i.x -= 2 + n)),
    a === ConstantData.ShapeIconType.NOTES &&
    (o && (i.x -= 2 + n), s && (i.x -= 2 + n), t.hyperlink && (i.x -= 2 + n)),
    a === ConstantData.ShapeIconType.EXPANDEDVIEW &&
    (
      o &&
      (i.x -= 2 + n),
      s &&
      (i.x -= 2 + n),
      t.hyperlink &&
      (i.x -= 2 + n),
      (t.NoteID >= 0 || this.NoteIsShowing(e.BlockID, t)) &&
      (i.x -= 2 + n)
    ),
    i
}

ListManager.LM.prototypeTable_AddIcons = function (e, t, a, r, i, n, o) {
  if (r && !e.bInGroup) {
    var s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g = ConstantData.Defines.Icon_Dim,
      h = {
        svgDoc: a,
        iconSize: g,
        cursorType: ConstantData.CursorType.POINTER
      };
    for (s = o.length, l = 0; l < s; l++) {
      if (
        c = (S = t.cells[o[l]]).frame.x + S.frame.width - 2 - g + i,
        u = S.frame.y + S.frame.height - 2 - g + n,
        h.x = c,
        h.y = u,
        S.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
        S.datarecordID >= 0 &&
        (
          (d = this.GetExpandIcon(S.datarecordID)) &&
          (
            h.userData = ConstantData.SVGElementClass.ICON + '.' + o[l],
            - 1 === d ? (
              h.iconID = ConstantData.ShapeIconType.EXPANDTABLE,
              h.imageURL = ConstantData.Defines.Connector_PlusPath
            ) : (
              h.iconID = ConstantData.ShapeIconType.COLLAPSETABLE,
              h.imageURL = ConstantData.Defines.Connector_MinusPath
            ),
            h.cursorType = ConstantData.CursorType.ADD_PLUS,
            h.iconSize = ConstantData.Defines.SED_CKnobSize,
            h.y = S.frame.y + n + S.frame.height / 2 - ConstantData.Defines.SED_CKnobSize / 2,
            p = e.GenericIcon(h),
            r.AddElement(p),
            c -= 2 + g,
            h.cursorType = ConstantData.CursorType.POINTER,
            h.iconSize = g
          ),
          !(
            !(
              D = ListManager.SDData.GetValue(
                S.datarecordID,
                ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_URL]
              )
            ) ||
            !D.length
          ) &&
          (
            h.x = c,
            h.y = u,
            h.userData = ConstantData.SVGElementClass.ICON + '.' + o[l],
            h.iconID = ConstantData.ShapeIconType.TRELLOLINK,
            h.imageURL = Constants.FilePath_Icons + Constants.Icon_TrelloLink,
            p = e.GenericIcon(h),
            r.AddElement(p),
            c -= 2 + g
          )
        ),
        h.iconSize = g,
        h.y = u,
        S.hyperlink &&
        Global.ResolveHyperlink(S.hyperlink) &&
        (
          h.x = c,
          h.iconID = ConstantData.ShapeIconType.HYPERLINK,
          h.userData = ConstantData.SVGElementClass.ICON + '.' + o[l],
          h.imageURL = Constants.FilePath_Icons + Constants.Icon_Hyperlink,
          (p = e.GenericIcon(h)).SetHyperlinkAttribute(S.hyperlink),
          p.SetTooltip(Global.ResolveHyperlinkForDisplay(S.hyperlink)),
          r.AddElement(p),
          c -= 2 + g
        ),
        - 1 != S.NoteID ||
        this.NoteIsShowing(e.BlockID, S)
      ) {
        var m;
        h.x = c,
          h.iconID = ConstantData.ShapeIconType.NOTES,
          h.userData = ConstantData.SVGElementClass.ICON + '.' + o[l],
          h.imageURL = Constants.FilePath_Icons + Constants.Icon_Note,
          S.flags & ListManager.Table.CellFlags.SDT_F_InfoNoteIcon &&
          (
            h.imageURL = Constants.FilePath_Icons + Constants.Icon_Info
          ),
          (p = e.GenericIcon(h)).SetCustomAttribute('_expnotett_', S.NoteID),
          r.AddElement(p),
          c -= 2 + g;
        var C = e,
          y = S,
          f = function (e, t) {
            return function () {
              var a = function (e, t) {
                return function () {
                  GlobalData.optManager.bInNoteEdit ||
                    GlobalData.optManager.ShowNote(e, t)
                }
              }(e, t);
              m = setTimeout(a, 750, null)
            }
          }(C.BlockID, y),
          L = function (e, t) {
            return function () {
              GlobalData.optManager.bInNoteEdit ||
                GlobalData.optManager.HideNote(e, t),
                clearTimeout(m)
            }
          }(C.BlockID, y),
          I = p.DOMElement();
        $(I).hover(f, L)
      }
      S.ExpandedViewID >= 0 &&
        (
          h.x = c,
          h.iconID = ConstantData.ShapeIconType.EXPANDEDVIEW,
          h.userData = ConstantData.SVGElementClass.ICON + '.' + o[l],
          h.imageURL = Constants.FilePath_Icons + Constants.Icon_ExpandedView,
          (p = e.GenericIcon(h)).SetCustomAttribute('_expextendtt_', S.ExpandedViewID),
          r.AddElement(p),
          c -= 2 + g
        )
    }
  }
}

ListManager.LM.prototypeTableAddSVGDateBlockScrollControl = function (e, t, a, r, i, n, o) {

  var s,
    l;
  if (
    i.celltype == ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_TITLE
  ) {
    var S;
    (
      l = a.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDHOTSPOT)
    ) &&
      a.RemoveElement(l),
      (s = t.CreateShape(ConstantData.CreateShapeType.RECT)).SetSize(i.frame.width, e.Frame.height),
      s.SetPos(i.frame.x + n, i.frame.y + o),
      s.SetFillOpacity(0),
      s.SetID(ConstantData.SVGElementClass.GANTTGRIDHOTSPOT),
      a.AddElement(s);
    var c = e,
      u = i,
      p = function (e, t) {
        return function () {
          var a = function (e, t) {
            return function () {
              GlobalData.optManager.ShowGanttScroll(e, t)
            }
          }(e, t);
          S = setTimeout(a, 50, null)
        }
      }(c.BlockID, u),
      d = function (e, t) {
        return function (a) {
          GlobalData.optManager.HideGanttScroll(e, t, a),
            clearTimeout(S)
        }
      }(c.BlockID, u),
      D = s.DOMElement();
    $(D).hover(p, d)
  }
}

ListManager.LM.prototypeFrameCell = function (e, t, a, r, i, n, o, s, l) {
  var S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = {},
    C = e.GetSVGFrame(e.Frame);
  for (
    p = e.trect.x - C.x,
    d = e.trect.y - C.y;
    S = r.GetElementByID(ConstantData.Defines.TableCellFrame);
  ) r.RemoveElement(S);
  (c = t.cells[i]).hline.Paint.Color,
    g = c.hline.Thickness,
    h = c.hline.Paint.Opacity,
    c.hline.Paint.FillType,
    c.hline.LinePattern,
    D = c.hline.Paint.Color,
    m.Line = c.hline,
    ConstantData.Defines.TableRowHit,
    0 === g &&
    (g = 1),
    u = c.nextra ? GlobalData.optManager.Table_GetJoinedCellFrame(t, i, !1, !1) : c.frame,
    n &&
    (
      shape = a.CreateShape(ConstantData.CreateShapeType.LINE),
      shape.SetID(ConstantData.Defines.TableCellFrame),
      shape.SetUserData(i),
      shape.SetSize(g, c.frame.height),
      shape.SetPoints(u.x + p, u.y + d, u.x + p, u.y + u.height + d),
      shape.SetFillColor('none'),
      shape.SetStrokeColor(D),
      shape.SetStrokeOpacity(h),
      shape.SetStrokeWidth(g),
      shape.SetStrokeColor(m.Line.Paint.Color),
      shape.SetStrokeOpacity(h),
      r.AddElement(shape)
    ),
    o &&
    (
      shape = a.CreateShape(ConstantData.CreateShapeType.LINE),
      shape.SetID(ConstantData.Defines.TableCellFrame),
      shape.SetUserData(i),
      shape.SetSize(g, u.height),
      shape.SetPoints(u.x + u.width + p, u.y + d, u.x + u.width + p, u.y + u.height + d),
      shape.SetFillColor('none'),
      shape.SetStrokeColor(D),
      shape.SetStrokeOpacity(h),
      shape.SetStrokeWidth(g),
      shape.SetStrokeColor(m.Line.Paint.Color),
      shape.SetStrokeOpacity(h),
      r.AddElement(shape)
    ),
    s &&
    (
      shape = a.CreateShape(ConstantData.CreateShapeType.LINE),
      shape.SetID(ConstantData.Defines.TableCellFrame),
      shape.SetUserData(i),
      shape.SetSize(u.width, g),
      shape.SetPoints(u.x + p, u.y + d, u.x + u.width + p, u.y + d),
      shape.SetFillColor('none'),
      shape.SetStrokeColor(D),
      shape.SetStrokeOpacity(h),
      shape.SetStrokeWidth(g),
      shape.SetStrokeColor(m.Line.Paint.Color),
      shape.SetStrokeOpacity(h),
      r.AddElement(shape)
    ),
    l &&
    (
      shape = a.CreateShape(ConstantData.CreateShapeType.LINE),
      shape.SetID(ConstantData.Defines.TableCellFrame),
      shape.SetUserData(i),
      shape.SetSize(u.width, g),
      shape.SetPoints(u.x + p, u.y + u.height + d, u.x + u.width + p, u.y + u.height + d),
      shape.SetFillColor('none'),
      shape.SetStrokeColor(D),
      shape.SetStrokeOpacity(h),
      shape.SetStrokeWidth(g),
      shape.SetStrokeColor(m.Line.Paint.Color),
      shape.SetStrokeOpacity(h),
      r.AddElement(shape)
    )
}

ListManager.LM.prototypeLM_TableDrawDivider = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l = e.GetSVGFrame(e.Frame);
  n = e.trect.x - l.x,
    o = e.trect.y - l.y,
    (
      s = a.GetElementByID(ConstantData.Defines.TableCellSeparator, i.uniqueid)
    ) &&
    a.RemoveElement(s);
  var S = t.CreateShape(ConstantData.CreateShapeType.LINE),
    c = o + i.frame.y + i.frame.height / 2;
  S.SetID(ConstantData.Defines.TableCellSeparator),
    S.SetUserData(i.uniqueid),
    S.SetSize(r.wd - 20, 1),
    S.SetPoints(10 + n, c, r.wd - 10 + n, c),
    S.SetFillColor('none'),
    S.SetStrokeColor(ConstantData.Colors.Color_Black),
    S.SetStrokeOpacity(0.5),
    S.SetStrokeWidth(1),
    a.AddElement(S)
}

ListManager.LM.prototypeLM_AddSVGTableObject = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _,
    E,
    w,
    F,
    v,
    G,
    N,
    k,
    U,
    J,
    x,
    O,
    B,
    H,
    V,
    j,
    z,
    W,
    q,
    K = 0,
    X = [],
    Y = [],
    Z = {},
    Q = null,
    ee = {},
    te = [],
    ae = - 1,
    re = !1,
    ie = !1,
    ne = !1,
    oe = !1,
    se = e.GetSVGFrame(e.Frame),
    le = r.flags & ListManager.Table.TableFlags.SDT_TF_LOCK;
  ConstantData.ObjectTypes;
  for (
    _ = e.trect.x - se.x,
    E = e.trect.y - se.y,
    N = GlobalData.optManager.Table_GetActiveID() === e.BlockID,
    this.LM_AddSVGTableCells(e, r, t, a),
    q = r.rows.length,
    W = 0;
    W < q;
    W++
  ) for (n = (l = r.rows[W]).ncells, i = 0; i < n; i++) {
    if (
      ne = (
        (S = r.cells[i + l.start]).flags & ListManager.Table.CellFlags.SDT_F_UseTextRectAsFrame
      ) > 0,
      oe = (
        S.flags & ListManager.Table.CellFlags.SDT_F_UseExpandedRectAsFrame
      ) > 0,
      S.flags & ListManager.Table.CellFlags.SDT_F_FrameCell &&
      (ae = l.start + i),
      0 === i &&
      S.celltype === ListManager.Table.CellTypes.SDT_CT_MENU_SEPARATOR &&
      this.LM_TableDrawDivider(e, t, a, r, S),
      (
        S.hyperlink ||
        - 1 != S.NoteID ||
        S.ExpandedViewID >= 0 ||
        this.NoteIsShowing(e.BlockID, S)
      ) &&
      Y.push(i + l.start),
      S.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
      S.datarecordID >= 0 &&
      GlobalData.optManager.theContentHeader.SDDataID >= 0 &&
      S.datarecordID >= 0 &&
      (
        ListManager.SDData.GetNumChildren(
          S.datarecordID,
          ListManager.DataRelationships.PARENT_RELATIONSHIP
        ) > 0 &&
        Y.indexOf(i + l.start) < 0 &&
        Y.push(i + l.start),
        (
          L = ListManager.SDData.GetValue(
            S.datarecordID,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_URL]
          )
        ) &&
        L.length &&
        Y.indexOf(i + l.start) < 0 &&
        Y.push(i + l.start)
      ),
      w = this.Table_GetCellURL(S)
    ) {
      if (ne) h = $.extend(!0, {
      }, S.trect);
      else if (h = $.extend(!0, {
      }, S.frame), oe) {
        var Se = e.StyleRecord.Line.Thickness + 1;
        h.y -= Se,
          h.height += Se,
          h.width += Se
      }
      if (
        S.nextra &&
        (h = this.Table_GetJoinedCellFrame(r, i + l.start, ne, !1)),
        S.Image &&
        S.Image.iconid > 0
      ) {
        var ce = w.slice(- 3).toUpperCase();
        G = ConstantData.Defines.Icon_Dim,
          'SVG' === ce &&
          (
            S.Image.imageflags = ConstantData.ImageScales.SDIMAGE_PROP_FIT,
            S.SVGDim = {
              width: G,
              height: G
            }
          ),
          F = (h.width - G) / 2,
          v = (h.height - G) / 2,
          Utils2.InflateRect(h, - F, - v),
          f = null,
          (
            S.flags & ListManager.Table.CellFlags.SDT_F_ScaletoFit ||
            S.flags & ListManager.Table.CellFlags.SDT_F_DontScale
          ) &&
          (
            h = ne ? $.extend(!0, {
            }, S.trect) : $.extend(!0, {
            }, S.frame),
            S.Image.imageflags = ConstantData.ImageScales.SDIMAGE_ALWAYS_FIT
          )
      } else f = e.ExtendCell(W, i + l.start, !0);
      if (f) {
        for (
          O = (y = t.CreateShape(ConstantData.CreateShapeType.PATH)).PathCreator(),
          B = f.length,
          j = H = f[0].x,
          z = V = f[0].y,
          p = 1;
          p < B;
          p++
        ) f[p].x > j &&
          (j = f[p].x),
          f[p].y > z &&
          (z = f[p].y),
          f[p].x < H &&
          (H = f[p].x),
          f[p].y < V &&
          (V = f[p].y);
        for (O.MoveTo(f[0].x - H, f[0].y - V), p = 1; p < B; p++) O.LineTo(f[p].x - H, f[p].y - V);
        O.ClosePath(),
          O.Apply(),
          y.SetPos(H, V),
          y.SetSize(j - H, z - V),
          y.SetID(ConstantData.SVGElementClass.BACKGROUNDIMAGE),
          y.SetUserData(S.uniqueid)
      } else (y = t.CreateShape(ConstantData.CreateShapeType.RECT)).SetPos(h.x + _, h.y + E),
        y.SetSize(h.width, h.height),
        y.SetID(ConstantData.SVGElementClass.BACKGROUNDIMAGE),
        y.SetUserData(S.uniqueid);
      if (
        k = 'PROPFILL',
        U = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        },
        S.Image &&
        (
          S.Image.croprect &&
          (
            U.x = S.Image.croprect.left,
            U.y = S.Image.croprect.top,
            U.width = S.Image.croprect.right - S.Image.croprect.left,
            U.height = S.Image.croprect.bottom - S.Image.croprect.top
          ),
          void 0 !== S.Image.imageflags &&
            S.Image.imageflags === ConstantData.ImageScales.SDIMAGE_ALWAYS_FIT ? k = 'NOPROP' : void 0 !== S.Image.imageflags &&
            S.Image.imageflags === ConstantData.ImageScales.SDIMAGE_PROP_FIT &&
          (k = 'PROPFIT'),
          void 0 !== S.Image.imageflags &&
          S.flags & ListManager.Table.CellFlags.SDT_F_DontScale &&
          (k = 'NONE')
        ),
        - 1 != S.BlobBytesID
      ) {
        var ue = GlobalData.optManager.GetObjectPtr(S.BlobBytesID, !1);
        ue.ImageDir == FileParser.Image_Dir.dir_svg ? (
          null == S.SVGDim &&
          (S.SVGDim = Utils2.ParseSVGDimensions(ue.Bytes)),
          y.SetImageFill(
            w,
            {
              scaleType: k,
              cropRect: U,
              imageWidth: S.SVGDim.width,
              imageHeight: S.SVGDim.height
            }
          )
        ) : y.SetImageFill(w, {
          scaleType: k,
          cropRect: U
        })
      } else {
        'SVG' === w.slice(- 3).toUpperCase() ? null == S.SVGDim ? y.SetImageFill(w, {
          scaleType: k,
          cropRect: U
        }) : y.SetImageFill(
          w,
          {
            scaleType: k,
            cropRect: U,
            imageWidth: S.SVGDim.width,
            imageHeight: S.SVGDim.height
          }
        ) : y.SetImageFill(w, {
          scaleType: k,
          cropRect: U
        })
      }
      y.SetFillOpacity(S.fill.Paint.Opacity),
        a.AddElement(y)
    }
    S.DataID >= 0 &&
      S.DataID != e.DataID &&
      this.Table_AddSVGTextObject(e, t, a, S, i + l.start),
      S.flags & ListManager.Table.CellFlags.SDT_F_Select ? (
        h = S.frame,
        S.nextra &&
        (h = this.Table_GetJoinedCellFrame(r, i + l.start, !1, !1)),
        X.push(h),
        S.childcontainer >= 0 &&
        te.push(S.childcontainer)
      ) : S.childcontainer >= 0 &&
      te.push(- S.childcontainer)
  }
  if (e.ExtendLines(), ae >= 0) {
    var pe = e.subtype === ConstantData.ObjectSubTypes.SD_SUBT_UI_VTABBED;
    this.FrameCell(e, r, t, a, ae, !pe, !0, pe, !0)
  }
  for (n = r.rows.length, i = 0; i < n; i++) for (d = (l = r.rows[i]).segments.length, p = 0; p < d; p++) {
    if (
      D = l.segments[p],
      u = l.frame.y + l.frame.height + E,
      u -= (S = r.cells[D.start + l.start]).hdisp / 2,
      b = S.hline.Paint.Color,
      M = S.hline.Thickness,
      P = S.hline.Paint.Opacity,
      A = S.hline.Paint.FillType,
      K = S.hline.LinePattern,
      b = S.hline.Paint.Color,
      Z.Line = S.hline,
      R = ConstantData.Defines.TableRowHit,
      0 === M
    ) {
      if (le) continue;
      M = 1,
        P = N ? 0.5 : 0,
        K = Resources.LinePatternData[Resources.Windows_LinePatterns.SEP_Dotted - 1],
        R = ConstantData.Defines.TableRowHitHidden
    }
    if (i < n - 1) (o = t.CreateShape(ConstantData.CreateShapeType.LINE)).SetSize(l.frame.width, M),
      o.SetPoints(D.x_start + _, u, D.x_end + _, u),
      o.SetID(R),
      g = i + '.' + p,
      o.SetUserData(g),
      o.SetFillColor('none'),
      o.SetStrokeColor(b),
      o.SetStrokeOpacity(P),
      o.SetStrokeWidth(M),
      0 !== K &&
      o.SetStrokePattern(K),
      A == ConstantData.FillTypes.SDFILL_GRADIENT ? o.SetGradientStroke(
        e.CreateGradientRecord(
          Z.Line.Paint.GradientFlags,
          Z.Line.Paint.Color,
          Z.Line.Paint.Opacity,
          Z.Line.Paint.EndColor,
          Z.Line.Paint.EndOpacity
        )
      ) : A == ConstantData.FillTypes.SDFILL_RICHGRADIENT ? o.SetGradientStroke(e.CreateRichGradientRecord(Z.Line.Paint.GradientFlags)) : A == ConstantData.FillTypes.SDFILL_TEXTURE ? (
        J = {
          url: '',
          scale: Z.Line.Paint.TextureScale.Scale,
          alignment: Z.Line.Paint.TextureScale.AlignmentScalar
        },
        x = Z.Line.Paint.Texture,
        J.dim = GlobalData.optManager.TextureList.Textures[x].dim,
        J.url = GlobalData.optManager.TextureList.Textures[x].ImageURL,
        J.url ||
        (
          J.url = Constants.FilePath_CMSRoot + Constants.FilePath_Textures + GlobalData.optManager.TextureList.Textures[x].filename
        ),
        o.SetTextureStroke(J),
        o.SetStrokeOpacity(P)
      ) : A == ConstantData.FillTypes.SDFILL_SOLID ? (o.SetStrokeColor(Z.Line.Paint.Color), o.SetStrokeOpacity(P)) : o.SetStrokeColor('none'),
      a.AddElement(o),
      l.selected &&
      (
        K = '2,4',
        b = ConstantData.Colors.Color_Select,
        (m = t.CreateShape(ConstantData.CreateShapeType.LINE)).SetSize(l.frame.width, M),
        m.SetPoints(D.x_start + _, u, D.x_end + _, u),
        m.SetID(ConstantData.Defines.TableRowSelection),
        g = i + '.' + p,
        m.SetUserData(g),
        m.SetFillColor('none'),
        m.SetStrokeColor(b),
        m.SetStrokeOpacity(P),
        m.SetStrokeWidth(2),
        m.SetStrokePattern(K),
        a.AddElement(m)
      );
    else if (le) continue;
    (s = t.CreateShape(ConstantData.CreateShapeType.LINE)).ExcludeFromExport(!0),
      s.SetSize(l.frame.width, S.hline.Thickness + 4),
      s.SetPoints(D.x_start + _, u, D.x_end + _, u),
      s.SetID(ConstantData.Defines.TableRowHit),
      g = i + '.' + p,
      s.SetUserData(g),
      s.SetStrokeColor('white'),
      s.SetFillColor('none'),
      s.SetOpacity(0),
      s.SetEventBehavior(ConstantData.EventBehavior.HIDDEN_OUT),
      s.SetStrokeWidth(M + 4),
      a.AddElement(s)
  }
  for (n = r.cols.length, i = 0; i < n; i++) {
    if (
      M = (c = r.cols[i]).vline.Thickness,
      P = c.vline.Paint.Opacity,
      d = c.segments.length,
      R = ConstantData.Defines.TableColHit,
      A = c.vline.Paint.FillType,
      K = c.vline.LinePattern,
      0 === M
    ) {
      if (le) continue;
      M = 1,
        P = N ? 0.5 : 0,
        K = Resources.LinePatternData[Resources.Windows_LinePatterns.SEP_Dotted - 1],
        R = ConstantData.Defines.TableColHitHidden
    }
    if (
      Z.Line = c.vline,
      I = C = c.x - c.vdisp / 2,
      T = i,
      Utils2.IsEqual(c.x, r.wd)
    ) {
      if (le) continue;
      e.objecttype === ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_COLS &&
        e.RotationAngle &&
        (I -= c.x, T = - 1)
    } else for (p = 0; p < d; p++) b = c.vline.Paint.Color,
      D = c.segments[p],
      (o = t.CreateShape(ConstantData.CreateShapeType.LINE)).SetSize(M, D.bottom - D.y),
      o.SetPoints(C + _, D.y + E, C + _, D.bottom + E),
      o.SetID(R),
      g = i + '.' + p,
      o.SetUserData(g),
      o.SetFillColor('none'),
      o.SetStrokeColor(b),
      o.SetStrokeOpacity(P),
      D.noline ? o.SetStrokeWidth(0) : o.SetStrokeWidth(M),
      0 !== K &&
      o.SetStrokePattern(K),
      A == ConstantData.FillTypes.SDFILL_GRADIENT ? o.SetGradientStroke(
        e.CreateGradientRecord(
          Z.Line.Paint.GradientFlags,
          Z.Line.Paint.Color,
          Z.Line.Paint.Opacity,
          Z.Line.Paint.EndColor,
          Z.Line.Paint.EndOpacity
        )
      ) : A == ConstantData.FillTypes.SDFILL_RICHGRADIENT ? o.SetGradientStroke(e.CreateRichGradientRecord(Z.Line.Paint.GradientFlags)) : A == ConstantData.FillTypes.SDFILL_TEXTURE ? (
        J = {
          url: '',
          scale: Z.Line.Paint.TextureScale.Scale,
          alignment: Z.Line.Paint.TextureScale.AlignmentScalar
        },
        x = Z.Line.Paint.Texture,
        J.dim = GlobalData.optManager.TextureList.Textures[x].dim,
        J.url = GlobalData.optManager.TextureList.Textures[x].ImageURL,
        J.url ||
        (
          J.url = Constants.FilePath_CMSRoot + Constants.FilePath_Textures + GlobalData.optManager.TextureList.Textures[x].filename
        ),
        o.SetTextureStroke(J),
        o.SetStrokeOpacity(P)
      ) : A == ConstantData.FillTypes.SDFILL_SOLID ? (o.SetStrokeColor(Z.Line.Paint.Color), o.SetStrokeOpacity(P)) : o.SetStrokeColor('none'),
      a.AddElement(o),
      c.selected &&
      (
        K = '2,4',
        b = ConstantData.Colors.Color_Select,
        (m = t.CreateShape(ConstantData.CreateShapeType.LINE)).SetSize(M, D.bottom - D.y),
        m.SetPoints(C + _, D.y + E, C + _, D.bottom + E),
        m.SetID(ConstantData.Defines.TableColSelection),
        g = i + '.' + p,
        m.SetUserData(g),
        m.SetFillColor('none'),
        m.SetStrokeColor(b),
        m.SetStrokeOpacity(P),
        m.SetStrokeWidth(2),
        m.SetStrokePattern(K),
        a.AddElement(m)
      );
    for (p = 0; p < d; p++) D = c.segments[p],
      (s = t.CreateShape(ConstantData.CreateShapeType.LINE)).ExcludeFromExport(!0),
      s.SetSize(M, D.bottom - D.y),
      s.SetPoints(I + _, D.y + E, I + _, D.bottom + E),
      s.SetID(ConstantData.Defines.TableColHit),
      g = T + '.' + p,
      s.SetUserData(g),
      s.SetStrokeColor('white'),
      s.SetFillColor('none'),
      s.SetOpacity(0),
      s.SetEventBehavior(ConstantData.EventBehavior.HIDDEN_OUT),
      s.SetStrokeWidth(M + 4),
      a.AddElement(s)
  }
  for (i = 0; i < r.cells.length; i++) switch ((S = r.cells[i]).celltype) {
    case ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER:
      if (re) break;
      this.Table_AddSVGDateBlockHeaderGrid(e, t, a, S, i, _, E),
        re = !0;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_TITLE:
      if (ie) break;
      this.Table_AddSVGDateBlockHeaderTitle(e, t, a, S, i, _, E),
        ie = !0,
        Q = S
  }
  ie &&
    this.TableAddSVGDateBlockScrollControl(e, t, a, r, Q, _, E),
    N &&
    e.DataID < 0 &&
    this.LM_SelectSVGTableObject(e, t, a, X, te);
  var de = !1;
  e.IsSwimlane() &&
    (de = !0),
    de ||
    (
      G = ConstantData.Defines.TableZoneDim,
      ee.x = _ + G,
      ee.y = E,
      ee.width = G,
      ee.height = e.trect.height,
      this.LM_AddSVGSelectionArea(t, a, ee, ConstantData.Defines.TableRowZone),
      ee.x = _,
      ee.y = E + G,
      ee.height = G,
      ee.width = e.trect.width,
      this.LM_AddSVGSelectionArea(t, a, ee, ConstantData.Defines.TableColZone)
    ),
    this.Table_AddIcons(e, r, t, a, _, E, Y)
},



  ListManager.LM.prototype.Table_ResizeSVGTableObject = function (e, t, a, r) {
    var i;
    t.ExtendLines();
    var n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b,
      M,
      P,
      R,
      A,
      _,
      E,
      w,
      F,
      v,
      G,
      N,
      k,
      U,
      J,
      x = t.GetTable(!1);
    this.LM_AddSVGTableCells(t, x, this.svgDoc, e);
    var O,
      B,
      H,
      V,
      j,
      z = t.GetSVGFrame(t.Frame);
    if (
      t.objecttype === ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER
    ) for (n = x.cells.length, o = 0; o < n; o++) if (
      (y = x.cells[o]).childcontainer >= 0 &&
      (
        (
          l = GlobalData.optManager.svgObjectLayer.GetElementByID(y.childcontainer)
        ).SetPos(t.trect.x + y.frame.x, t.trect.y + y.frame.y),
        l.SetSize(y.frame.width, y.frame.height),
        (O = GlobalData.optManager.GetObjectPtr(y.childcontainer, !1)) &&
        O.ContainerList
      )
    ) for (
        H = (B = O.ContainerList.List).length,
        Y = t.trect.x + y.frame.x - O.Frame.x,
        Z = t.trect.y + y.frame.y - O.Frame.y,
        R = 0;
        R < H;
        R++
      ) (j = B[R].id) >= 0 &&
        (
          V = GlobalData.optManager.GetObjectPtr(j, !1),
          (l = GlobalData.optManager.svgObjectLayer.GetElementByID(j)) &&
          l.SetPos(V.Frame.x + Y, V.Frame.y + Z)
        );
    if (
      (l = e.GetElementByID(ConstantData.Defines.TableCellFrame)) &&
      (m = l.GetUserData()) >= 0 &&
      (y = x.cells[m]).flags & ListManager.Table.CellFlags.SDT_F_FrameCell
    ) {
      var W = t.subtype === ConstantData.ObjectSubTypes.SD_SUBT_UI_VTABBED;
      this.FrameCell(t, x, this.svgDoc, e, m, !W, !0, W, !0)
    }
    for (
      F = t.trect.x - z.x,
      v = t.trect.y - z.y,
      p = x.rows.length,
      g = x.cols.length,
      C = x.cells.length,
      s = e.ElementCount(),
      o = 0;
      o < s &&
      (l = e.GetElementByIndex(o));
      o++
    ) switch (S = l.GetID()) {
      case ConstantData.Defines.TableRowHit:
      case ConstantData.Defines.TableRowHitHidden:
      case ConstantData.Defines.TableRowSelection:
        c = (L = this.Table_GetRowAndSegment(l.GetUserData())).row,
          I = L.segment,
          c >= 0 &&
          c < p &&
          (
            u = x.rows[c],
            y = x.cells[u.start],
            T = u.segments[I],
            d = u.frame.y + u.frame.height + v,
            d -= y.hdisp / 2,
            l.SetPoints(T.x_start + F, d, T.x_end + F, d)
          );
        break;
      case ConstantData.Defines.TableColHit:
      case ConstantData.Defines.TableColHitHidden:
      case ConstantData.Defines.TableColSelection:
        D = (L = this.Table_GetColumnAndSegment(l.GetUserData())).column,
          I = L.segment,
          D >= 0 &&
          D < g &&
          (
            N = (h = x.cols[D]).x - h.vdisp / 2,
            null != (T = h.segments[I]) &&
            l.SetPoints(N + F, T.y + v, N + F, T.bottom + v)
          );
        break;
      case ConstantData.SVGElementClass.TEXT:
        (m = this.Table_CellFromDataID(x, l.GetUserData())) >= 0 &&
          m < C &&
          (
            G = (y = x.cells[m]).trect,
            y.nextra &&
            (G = this.Table_GetJoinedCellFrame(x, m, !0, !1)),
            l.SetPos(G.x + F, G.y + v),
            l.SetSize(G.width, G.height),
            f = t.TextGrow === ConstantData.TextGrowBehavior.HORIZONTAL ? GlobalData.optManager.theContentHeader.MaxWorkDim.x - x.wd + G.width : G.width,
            l.SetConstraints(f, G.width, G.height)
          );
        break;
      case ConstantData.SVGElementClass.BACKGROUNDIMAGE:
        if (L = l.GetUserData(), J = {}, y = this.Table_GetCellWithID(x, L, J)) {
          var q = (
            y.flags & ListManager.Table.CellFlags.SDT_F_UseExpandedRectAsFrame
          ) > 0;
          if (
            i = (
              y.flags & ListManager.Table.CellFlags.SDT_F_UseTextRectAsFrame
            ) > 0
          ) U = $.extend(!0, {
          }, y.trect);
          else if (U = $.extend(!0, {
          }, y.frame), q) {
            var K = t.StyleRecord.Line.Thickness + 1;
            U.y -= K,
              U.height += K,
              U.width += K
          }
          if (
            y.nextra &&
            (U = this.Table_GetJoinedCellFrame(x, J.index, i, !1)),
            y.Image &&
            y.Image.iconid > 0
          ) {
            var X = ConstantData.Defines.Icon_Dim,
              Y = (U.width - X) / 2,
              Z = (U.height - X) / 2;
            Utils2.InflateRect(U, - Y, - Z),
              y.flags & ListManager.Table.CellFlags.SDT_F_ScaletoFit &&
              (U = $.extend(!0, {
              }, y.frame)),
              b = null
          } else c = this.Table_GetRow(x, J.index),
            b = t.ExtendCell(c, J.index, !0);
          if (b) {
            for (
              (M = l.PathCreator()).BeginPath(),
              P = b.length,
              A = E = b[0].x,
              _ = w = b[0].y,
              R = 1;
              R < P;
              R++
            ) b[R].x > A &&
              (A = b[R].x),
              b[R].y > _ &&
              (_ = b[R].y),
              b[R].x < E &&
              (E = b[R].x),
              b[R].y < w &&
              (w = b[R].y);
            for (M.MoveTo(b[0].x - E, b[0].y - w), R = 1; R < P; R++) M.LineTo(b[R].x - E, b[R].y - w);
            M.ClosePath(),
              M.Apply(),
              l.SetPos(E, w),
              l.SetSize(A - E, _ - w),
              l.SetID(ConstantData.SVGElementClass.BACKGROUNDIMAGE),
              l.SetUserData(y.uniqueid)
          } else l.SetPos(U.x + F, U.y + v),
            l.SetSize(U.width, U.height)
        }
        break;
      case ConstantData.ShapeIconType.HYPERLINK:
      case ConstantData.ShapeIconType.TRELLOLINK:
      case ConstantData.ShapeIconType.EXPANDEDVIEW:
        (L = this.Table_GetRowAndSegment(l.GetUserData())) &&
          (
            y = x.cells[L.segment],
            k = this.Table_GetIconPosition(t, y, S),
            l.SetPos(k.x + F, k.y + v)
          );
        break;
      case ConstantData.ShapeIconType.NOTES:
        (L = this.Table_GetRowAndSegment(l.GetUserData())) &&
          (
            y = x.cells[L.segment],
            k = this.Table_GetIconPosition(t, y, ConstantData.ShapeIconType.NOTES),
            l.SetPos(k.x + F, k.y + v)
          );
        break;
      case ConstantData.ShapeIconType.EXPANDTABLE:
      case ConstantData.ShapeIconType.COLLAPSETABLE:
        (L = this.Table_GetRowAndSegment(l.GetUserData())) &&
          (
            y = x.cells[L.segment],
            k = this.Table_GetIconPosition(t, y, ConstantData.ShapeIconType.EXPANDTABLE),
            l.SetPos(k.x + F, k.y + v)
          );
        break;
      case ConstantData.Defines.TableCellSeparator:
        (y = this.Table_GetCellWithID(x, l.GetUserData(), null)) &&
          this.LM_TableDrawDivider(t, this.svgDoc, e, x, y)
    }
    !r &&
      t.GetGanttInfo() &&
      GlobalData.optManager.Table_ResizeGanttDateBlock(t, x, e, F, v)
  },



  ListManager.LM.prototype.Table_ResizeGanttDateBlock = function (e, t, a, r, i) {
    var n,
      o = - 1,
      s = 0,
      l = null,
      S = !1,
      c = !1,
      u = !1,
      p = null,
      d = null,
      D = - 1,
      g = [],
      h = GlobalData.optManager.ActiveVisibleZList(),
      m = a.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDCLIPPINGGROUP);
    if (m) {
      for (s = h.length, o = 0; o < s; o++) {
        switch (D = - 1, (p = GlobalData.optManager.GetObjectPtr(h[o])).objecttype) {
          case ConstantData.ObjectTypes.SD_OBJT_GANTT_CONNECTOR:
            if (0 === p.hooks.length) break;
            (d = GlobalData.optManager.GetObjectPtr(p.hooks[0].objid)) &&
              (D = d.datasetTableID);
            break;
          case ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR:
            D = p.datasetTableID
        }
        D >= 0 &&
          D === e.datasetTableID &&
          g.push({
            objID: p.BlockID,
            zOrder: o,
            hidden: 0 != (p.flags & ConstantData.ObjFlags.SEDO_NotVisible),
            EndArrowID: p.EndArrowID
          })
      }
      if (
        GlobalData.optManager.PlanningTableUpdateGeometry(e, !0),
        n = ListManager.SDData.GetNumRows(e.datasetTableID, '', ''),
        !window.navigator.msPointerEnabled &&
        n < 30
      ) for (a.RemoveElement(m), s = t.cells.length, o = 0; o < s; o++) switch (cell = t.cells[o], cell.celltype) {
        case ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER:
          if (S) break;
          this.Table_AddSVGDateBlockHeaderGrid(e, this.svgDoc, a, cell, o, r, i),
            S = !0;
          break;
        case ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_TITLE:
          if (c) break;
          this.Table_AddSVGDateBlockHeaderTitle(e, this.svgDoc, a, cell, o, r, i),
            c = !0,
            dateBlockTitleCell = cell
      } else {
        for (
          ;
          l = m.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDHEADERLINE);
        ) m.RemoveElement(l);
        for (
          ;
          l = m.GetElementByID(ConstantData.SVGElementClass.GANTTGRIDHEADERTEXT);
        ) m.RemoveElement(l)
      }
      for (s = g.length, o = 0; o < s; o++) if (
        (
          u = 0 != (
            (p = GlobalData.optManager.GetObjectPtr(g[o].objID, !1)).flags & ConstantData.ObjFlags.SEDO_NotVisible
          )
        ) != g[o].hidden &&
        GlobalData.optManager.AddSVGObject(g[o].zOrder, p.BlockID, !0, !1),
        !u &&
        p.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
        p.EndArrowID != g[o].EndArrowID
      ) {
        var C = GlobalData.optManager.svgObjectLayer.GetElementByID(p.BlockID),
          y = C.GetElementByID(ConstantData.SVGElementClass.SHAPE),
          f = C.GetElementByID(ConstantData.SVGElementClass.SLOP),
          L = 0 === ConstantData1.ArrowheadLookupTable[p.StartArrowID].id ? null : ConstantData1.ArrowheadLookupTable[p.StartArrowID],
          I = 0 === ConstantData1.ArrowheadLookupTable[p.EndArrowID].id ? null : ConstantData1.ArrowheadLookupTable[p.EndArrowID],
          T = ListManager.ArrowheadSizeTable[p.ArrowSizeIndex];
        y.SetArrowheads(L, T, I, T, p.StartArrowDisp, p.EndArrowDisp),
          f.SetArrowheads(L, T, I, T, p.StartArrowDisp, p.EndArrowDisp)
      }
    }
  }

ListManager.LM.prototypeTable_Hit = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c;
  for (o = (r = e.rows.length) - 1, i = 0; i < r; i++) if (a < (n = e.rows[i]).frame.y + n.frame.height) {
    o = i;
    break
  }
  var u = e.flags & ListManager.Table.TableFlags.SDT_TF_LOCK;
  for (s = (n = e.rows[o]).ncells - 1, i = 0; i < n.ncells; i++) if (t < (l = e.cells[n.start + i]).frame.x + l.frame.width) {
    if (s = i, l.flags & ListManager.Table.CellFlags.SDT_F_SilentF) return (c = this.Table_GetJoinedCellParent(e, l.colindex, o)) ? S = c.cellindex : - 1;
    break
  }
  return S = n.start + s,
    u &&
    (
      this.Table_AllowCellTextEdit(e, S) ||
      (S = this.Table_GetFirstTextCell(e))
    ),
    S
}

ListManager.LM.prototypeTable_RowAndColumnHit = function (e, t, a) {
  var r = this.Table_Hit(e, t, a);
  return {
    row: Math.floor(r / e.cols.length),
    col: r % e.cols.length
  }
}

ListManager.LM.prototypeTable_RowOrColHit = function (e, t, a) {
  var r = $.extend(!0, {
  }, e.trect),
    i = {
      x: t,
      y: a
    };
  return r.y += 10,
    r.x += 10,
    Utils2.InflateRect(r, - 10, - 10),
    Utils2.pointInRect(r, i) ? null : !(a < r.y) &&
      (a < r.x || null)
}

ListManager.LM.prototypeTable_AllowCellTextEdit = function (e, t) {
  var a = e.cells[t];
  return a.celltype !== ListManager.Table.CellTypes.SDT_CT_ICONCELL &&
    (
      a.celltype !== ListManager.Table.CellTypes.SDT_CT_ICONPHOTOCELL &&
      (
        a.celltype !== ListManager.Table.CellTypes.SD_CT_JIRA_ISSUEKEY &&
        (
          a.celltype !== ListManager.Table.CellTypes.SD_CT_JIRA_SUMMARY &&
          (
            a.celltype !== ListManager.Table.CellTypes.SD_CT_JIRA_STATUS &&
            (
              a.celltype !== ListManager.Table.CellTypes.SD_CT_JIRA_PRIORITY &&
              (
                a.celltype !== ListManager.Table.CellTypes.SD_CT_JIRA_ASSIGNEE &&
                (
                  a.celltype !== ListManager.Table.CellTypes.SD_CT_JIRA_ASSIGNEE_AVATAR &&
                  (
                    a.celltype !== ListManager.Table.CellTypes.SD_CT_JIRA_ISSUETYPE &&
                    (
                      a.celltype !== ListManager.Table.CellTypes.SD_CT_TIMELINE_DATETITLE &&
                      (
                        a.celltype !== ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL &&
                        (
                          a.celltype !== ListManager.Table.CellTypes.SD_CT_TIMELINE_LABELROW &&
                          (
                            !(a.childcontainer >= 0) &&
                            !(
                              a.flags & ListManager.Table.CellFlags.SDT_F_NoText ||
                              a.flags & ListManager.Table.CellFlags.SDT_F_PhotoPH ||
                              null != a.ImageURL &&
                              '' != a.ImageURL ||
                              a.flags & ListManager.Table.CellFlags.SDT_F_SilentF
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
}

ListManager.LM.prototypeTable_FixSizeDim = function (e) {
  var t,
    a,
    r,
    i;
  for (a = e.cells.length, t = 0; t < a; t++) i = (r = e.cells[t]).frame,
    r.sizedim.width = i.width,
    r.sizedim.height = i.height
}

ListManager.LM.prototypeTable_FixSizeDimToMin = function (e) {
  var t,
    a,
    r,
    i;
  for (a = e.cells.length, t = 0; t < a; t++) i = (r = e.cells[t]).minht,
    r.sizedim.height = i
}

ListManager.LM.prototypeTable_GetTRect = function (e, t, a, r) {
  var i = t.select;
  if (null != r && (i = r), i < 0) return null;
  var n,
    o = t.cells[i],
    s = {
      x: e.trect.x + o.trect.x,
      y: e.trect.y + o.trect.y,
      width: o.trect.width,
      height: o.trect.height
    },
    l = 0;
  if (o.nextra) {
    var S = this.Table_GetJoinedCellFrame(t, i, !0, !1);
    s.height = S.height
  }
  if (a) {
    var c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b = this.Table_GetRow(t, i);
    for (g = i - (u = t.rows[b]).start, c = 0; c < u.ncells; c++) p = t.cells[u.start + c],
      d = c === g ? 0 : p.textht,
      (D = p.sizedim.height - t.tmargin.top - t.tmargin.bottom - p.hdisp) > d &&
      (d = D),
      d > l &&
      (l = d);
    for (
      o.nextra &&
      (D = s.height) > l &&
      (l = D),
      I = (h = t.cols[o.colindex]).segments.length,
      T = o.frame.x,
      n = o.sizedim.width - (o.frame.width - o.trect.width),
      m = 0;
      m < I;
      m++
    ) for (y = (C = h.segments[m]).rowstart; y <= C.rowend; y++) if (y !== b) for (u = t.rows[y], c = 0; c < u.ncells; c++) if ((p = t.cells[u.start + c]).colindex === o.colindex) {
      f = p.textwd,
        p.minwd > f &&
        (f = p.minwd),
        (L = p.sizedim.width - t.tmargin.left - t.tmargin.right - p.vdisp) > f &&
        (f = L),
        (f += p.frame.x - T) > n &&
        (n = f);
      break
    }
  }
  var M = {};
  return M.trect = s,
    M.sizedim = {},
    M.sizedim.width = o.sizedim.width,
    M.sizedim.height = o.sizedim.height,
    a &&
    (M.tsizedim = {}, M.tsizedim.height = l, M.tsizedim.width = n),
    M
}

ListManager.LM.prototypeTable_CloseEdit = function (e, t) {
  GlobalData.optManager.bInNoteEdit &&
    GlobalData.optManager.ToggleNote(GlobalData.optManager.curNoteShape, GlobalData.optManager.curNoteTableCell),
    this.DeactivateAllTextEdit(!1),
    e.DataID = - 1
},
  ,
  ListManager.LM.prototype.Table_OpenEdit = function (e, t, a, r) {
    t.select = a;
    var i = GlobalData.optManager.svgObjectLayer.GetElementByID(e);
    GlobalData.optManager.ActivateTextEdit(i.svgObj.SDGObj, r, !1);
    var n = GlobalData.optManager.svgDoc.GetActiveEdit();
    GlobalData.optManager.GetObjectPtr(e, !1);
    n &&
      n.editor &&
      (n.editor.lastClickTime = 0, n.editor.HandleMouseDown(r))
  },

  ListManager.LM.prototype.Table_Load = function (e, t) {
    var a;
    (
      a = t ? this.GetObjectPtr(this.theTEDSessionBlockID, !1) : this.GetObjectPtr(this.theTEDSessionBlockID, !0)
    ).theActiveTableObjectID >= 0 &&
      a.theActiveTableObjectID !== e &&
      this.Table_Release(!1);
    var r = a.theActiveTableObjectID >= 0 &&
      a.theActiveTableObjectID == e &&
      a.theActiveTableObjectIndex >= 0;
    a.theActiveTableObjectID = e;
    var i,
      n,
      o = this.svgObjectLayer.GetElementByID(e);
    if (o) {
      var s = o.GetElementListWithID(ConstantData.Defines.TableRowHitHidden);
      if (s) for (n = s.length, i = 0; i < n; i++) s[i].SetStrokeOpacity(0.5);
      if (
        s = o.GetElementListWithID(ConstantData.Defines.TableColHitHidden)
      ) for (n = s.length, i = 0; i < n; i++) s[i].SetStrokeOpacity(0.8);
      var l = GlobalData.optManager.GetObjectPtr(e, !1);
      if (r || (a.theActiveTableObjectIndex = - 1), l) switch (l.objecttype) {
        case ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_GRID:
        case ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_COLS:
        case ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_ROWS:
        case ConstantData.ObjectTypes.SD_OBJT_BPMN_POOL:
        case ConstantData.ObjectTypes.SD_OBJT_FRAME_CONTAINER:
        case ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART:
        case ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER:
          break;
        default:
          a.theActiveTableObjectIndex < 0 &&
            (
              a.theActiveTableObjectIndex = GlobalData.optManager.svgObjectLayer.GetElementIndex(o),
              GlobalData.optManager.svgObjectLayer.MoveElementToFront(o)
            )
      }
    }
    this.ShowSVGSelectionState(e, !1)
  }

ListManager.LM.prototypeTable_RotateClickPoint = function (e, t) {
  if (e.RotationAngle) {
    var a = - e.RotationAngle / (180 / ConstantData.Geometry.PI),
      r = {};
    r.x = e.trect.width / 2,
      r.y = e.trect.height / 2,
      t = GlobalData.optManager.RotatePointAroundPoint(r, t, a)
  }
  return t
}

ListManager.LM.prototypeTable_GetCellClicked = function (e, t) {
  var a = this.svgDoc.ConvertWindowToDocCoords(t.gesture.center.clientX, t.gesture.center.clientY);
  a.x -= e.trect.x,
    a.y -= e.trect.y,
    a = this.Table_RotateClickPoint(e, a);
  var r = e.GetTable(!1);
  return this.Table_Hit(r, a.x, a.y)
}

ListManager.LM.prototypeTable_CellFromDataID = function (e, t) {
  var a,
    r;
  for (r = e.cells.length, a = 0; a < r; a++) if (e.cells[a].DataID === t) return a;
  return - 1
}

ListManager.LM.prototypeTable_SetupAction = function (e, t, a, r) {
  var i = this.GetObjectPtr(t, !1);
  if (null != i && i instanceof ListManager.BaseDrawingObject) {
    var n = i.GetTable(!1);
    if (null != n) {
      (
        L = this.svgDoc.ConvertWindowToDocCoords(e.gesture.center.clientX, e.gesture.center.clientY)
      ).x -= i.trect.x,
        L.y -= i.trect.y,
        L = this.Table_RotateClickPoint(i, L);
      var o,
        s,
        l,
        S = - 1,
        c = !1,
        u = [],
        p = e.gesture.srcEvent.ctrlKey;
      switch (a) {
        case ConstantData.Defines.TableRowZone:
          if (GlobalData.optManager.IsJiraIssueShape(i)) break;
          S = this.Table_Hit(n, L.x, L.y),
            this.Table_Load(t),
            i.LM_ActionClick(e, !1, t, ConstantData.ActionTriggerType.TABLE_ROWSELECT, r),
            this.Table_Load(t),
            n.select = S,
            this.Table_Select(
              i,
              n,
              L,
              !0,
              ConstantData.ActionTriggerType.TABLE_ROWSELECT,
              p
            ),
            (
              - 1 === (s = this.GetObjectPtr(this.theSelectedListBlockID, !1)).indexOf(t) ||
              s.length > 1
            ) &&
            ((u = []).push(t), this.SelectObjects(u, !1, !0)),
            this.Table_Load(t);
          break;
        case ConstantData.Defines.TableColZone:
          if (GlobalData.optManager.IsJiraIssueShape(i)) break;
          S = this.Table_Hit(n, L.x, L.y),
            this.Table_Load(t),
            i.LM_ActionClick(e, !1, t, ConstantData.ActionTriggerType.TABLE_COLSELECT, r),
            this.Table_Load(t),
            n.select = S,
            this.Table_Select(
              i,
              n,
              L,
              !0,
              ConstantData.ActionTriggerType.TABLE_COLSELECT,
              p
            ),
            (
              - 1 === (s = this.GetObjectPtr(this.theSelectedListBlockID, !1)).indexOf(t) ||
              s.length > 1
            ) &&
            ((u = []).push(t), this.SelectObjects(u, !1, !0)),
            this.Table_Load(t);
          break;
        case ConstantData.SVGElementClass.BACKGROUNDIMAGE:
          switch (i.subtype) {
            case ConstantData.ObjectSubTypes.SD_SUBT_UI_HTABBED:
            case ConstantData.ObjectSubTypes.SD_SUBT_UI_VTABBED:
              c = !1
          }
        case ConstantData.Defines.TableTextHit:
          S = this.Table_CellFromDataID(n, r);
        case ConstantData.Defines.TableCellHit:
        case ConstantData.Defines.TableCells:
          var d = !1;
          if (
            !(l = e.gesture.srcEvent.shiftKey || c || p) &&
            (S < 0 && (S = this.Table_Hit(n, L.x, L.y)), S >= 0)
          ) {
            var D = GlobalData.optManager.Table_GetActiveID();
            if (S != n.select || i.DataID < 0) {
              (n.select >= 0 || t !== D) &&
                this.Table_CloseEdit(i, n);
              var g = e;
              switch (i.subtype) {
                case ConstantData.ObjectSubTypes.SD_SUBT_UI_ACCORDION:
                case ConstantData.ObjectSubTypes.SD_SUBT_UI_HTABBED:
                case ConstantData.ObjectSubTypes.SD_SUBT_UI_VTABBED:
                  var h = gUIElementManager.HandleIconClick(i, n, S, e);
                  h &&
                    (S = h.cellhit),
                    d = !0
              }
              if (this.Table_AllowCellTextEdit(n, S)) i.BlockID === D &&
                this.Table_Release(!1),
                this.Table_OpenEdit(t, n, S, g);
              else if ('doubletap' == e.type) {
                var m = GlobalData.optManager.Table_GetNextTextCell(n, S, Resources.Keys.Right_Arrow);
                if (
                  m < 0 &&
                  (
                    m = GlobalData.optManager.Table_GetNextTextCell(n, 0, Resources.Keys.Right_Arrow)
                  ),
                  m < 0
                ) n.select = S,
                  l = !0;
                else {
                  S = m,
                    i.BlockID === D &&
                    this.Table_Release(!1);
                  var C = n.cells[S],
                    y = C.trect.x + i.trect.x + i.trect.width,
                    f = C.trect.y + i.trect.y + i.trect.height,
                    L = this.svgDoc.ConvertDocToWindowCoords(y, f);
                  g.gesture.center.clientX = L.x,
                    g.gesture.center.clientY = L.y,
                    this.Table_OpenEdit(t, n, S, g)
                }
              } else n.select = S,
                l = !0
            }
          }
          if (l) {
            var I = n.select;
            c &&
              (I = - 1),
              this.Table_CloseEdit(i, n),
              this.Table_Load(t),
              (
                - 1 === (s = this.GetObjectPtr(this.theSelectedListBlockID, !1)).indexOf(t) ||
                s.length > 1
              ) &&
              ((u = []).push(t), this.SelectObjects(u, !1, !0)),
              p ||
              i.LM_ActionClick(e, !1, t, ConstantData.ActionTriggerType.TABLE_SELECT, r),
              this.Table_Load(t),
              n.select = I,
              this.Table_Select(i, n, L, !0, null, p)
          }
          d &&
            (Collab.UnLockMessages(), Collab.UnBlockMessages());
          break;
        case ConstantData.Defines.TableRowHit:
        case ConstantData.Defines.TableRowHitHidden:
        case ConstantData.Defines.TableRowSelection:
          if (i.ObjGrow === ConstantData.GrowBehavior.HCONSTRAIN) break;
          this.Table_Load(t),
            (
              - 1 === (s = this.GetObjectPtr(this.theSelectedListBlockID, !1)).indexOf(t) ||
              s.length > 1
            ) &&
            ((u = []).push(t), this.SelectObjects(u, !1, !0)),
            e.gesture.srcEvent.shiftKey ? (
              o = this.Table_GetRowAndSegment(r),
              this.Table_SelectRowDivider(i, o.row, !0)
            ) : i.LM_ActionClick(e, !1, t, ConstantData.ActionTriggerType.TABLE_ROW, r),
            this.Table_Load(t);
          break;
        case ConstantData.Defines.TableColHit:
        case ConstantData.Defines.TableColHitHidden:
        case ConstantData.Defines.TableColSelection:
          if (i.ObjGrow === ConstantData.GrowBehavior.VCONSTRAIN) break;
          this.Table_Load(t),
            (
              - 1 === (s = this.GetObjectPtr(this.theSelectedListBlockID, !1)).indexOf(t) ||
              s.length > 1
            ) &&
            ((u = []).push(t), this.SelectObjects(u, !1, !0)),
            e.gesture.srcEvent.shiftKey ? (
              o = this.Table_GetColumnAndSegment(r),
              this.Table_SelectColDivider(i, o.column, !0)
            ) : i.LM_ActionClick(e, !1, t, ConstantData.ActionTriggerType.TABLE_COL, r),
            this.Table_Load(t)
      }
    }
  }
}

ListManager.LM.prototypeTable_SizeChildContainer = function (e, t, a) {
  var r = GlobalData.optManager.GetObjectPtr(e, !0);
  if (r) {
    var i = Utils1.DeepCopy(r.Frame);
    i.height = a,
      i.width = t,
      r.UpdateFrame(i),
      r.flags = Utils2.SetFlag(r.flags, ConstantData.ObjFlags.SEDO_Obj1, !0);
    var n = GlobalData.optManager.svgObjectLayer.GetElementByID(r.BlockID);
    if (n) {
      var o = n.GetElementByID(ConstantData.SVGElementClass.SHAPE);
      o &&
        o.SetSize(i.width, i.height)
    }
    GlobalData.optManager.AddToDirtyList(e)
  }
}

ListManager.LM.prototypeTable_Resize = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _,
    E,
    w,
    F,
    v,
    G,
    N,
    k,
    U,
    J,
    x,
    O = 0,
    B = 0,
    H = {},
    V = !1,
    j = e.TextGrow,
    z = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID);
  if (i) {
    if (S = a.ht, o = t.rows.length, i - S < - 0.01) if (i < t.minht && (i = t.minht), i - S < - 0.01) for (G = S, v = S, m = i, u = 0; v > i;) {
      for (u += m / G, G = 0, v = 0, n = 0; n < o; n++) {
        for (
          (s = t.rows[n]).frame.y = v,
          l = t.cells[s.start],
          d = a.rows[n],
          s.fixed ? w = d.frame.height : (
            (w = d.frame.height * u) - (F = d.textht + t.tmargin.top + t.tmargin.bottom + l.hdisp) < - 0.1 &&
            (w = F),
            w > F &&
            (G += d.frame.height)
          ),
          p = 0;
          p < s.ncells;
          p++
        ) (l = t.cells[s.start + p]).frame.height = w,
          l.sizedim.height = w,
          l.frame.y = v,
          l.trect.y = l.frame.y + t.tmargin.top,
          l.trect.height = w - t.tmargin.bottom - t.tmargin.top - l.hdisp;
        s.frame.height = w,
          v += w
      }
      if (m = i - v, O = v, G < 0.001) break
    } else O = t.ht;
    else {
      var W = 0;
      for (n = 0; n < o; n++) s = t.rows[n],
        d = a.rows[n],
        s.fixed &&
        (W += d.frame.height);
      for (u = (i - W) / (S - W), n = 0; n < o; n++) {
        for (
          s = t.rows[n],
          d = a.rows[n],
          s.frame.y = O,
          (w = s.fixed ? d.frame.height : d.frame.height * u) < s.textht &&
          (w = s.textht),
          p = 0;
          p < s.ncells;
          p++
        ) (l = t.cells[s.start + p]).frame.height = w,
          l.sizedim.height = w,
          l.frame.y = O,
          l.trect.y = l.frame.y + t.tmargin.top,
          l.trect.height = w - t.tmargin.bottom - t.tmargin.top,
          n < o - 1 &&
          (l.trect.height -= l.hdisp);
        s.frame.height = w,
          O += s.frame.height
      }
    }
    for (o = t.cols.length, n = 0; n < o; n++) for (_ = (D = t.cols[n]).segments.length, p = 0; p < _; p++) E = D.segments[p],
      s = t.rows[E.rowstart],
      E.y = s.frame.y,
      s = t.rows[E.rowend],
      E.bottom = s.frame.y + s.frame.height;
    if (
      t.ht = O,
      (D = t.cols[0]).fixed === ListManager.Table.CellTypes.SDT_CT_ICONPHOTOCELL &&
      1 === D.segments.length
    ) {
      for (
        o = t.rows.length,
        u = i / S,
        m = (y = (l = a.cells[0]).frame.width * u) - l.frame.width,
        D.x = y,
        x = y,
        n = 0;
        n < o;
        n++
      ) s.ncells > 1 &&
        (
          s = t.rows[n],
          (l = t.cells[s.start]).frame.width += m,
          l.trect.width += m,
          l.sizedim.width += m,
          (l = t.cells[s.start + 1]).frame.width -= m,
          l.frame.x += m,
          l.trect.width -= m,
          l.trect.x += m,
          l.sizedim.width -= m
        );
      r ||
        (r = a.wd)
    }
  }
  if (r) {
    if (c = a.wd, o = t.cols.length, r - c < - 0.01) {
      if (r < t.minwd && (r = t.minwd), r - c < - 0.01) for (C = c, y = c, m = r, u = 0; y > r;) {
        for (u += m / C, C = 0, y = 0, P = 0, A = 0, n = 0; n < o; n++) D = t.cols[n],
          M = (f = (g = a.cols[n]).x - A) * u + P,
          R = P + (g.minx - A),
          D.fixed &&
          (R = void 0 !== x ? x : P + f),
          M - R < - 0.1 &&
          (M = R),
          M > R &&
          (C += f),
          y += 0 === n ? M : M - t.cols[n - 1].x,
          D.x = M,
          P = D.x,
          A = g.x;
        if (m = r - y, C < 0.001) break
      }
    } else {
      var q = 0;
      for (A = 0, n = 0; n < o; n++) D = t.cols[n],
        g = a.cols[n],
        D.fixed &&
        (q += g.x - A),
        A = g.x;
      u = (r - q) / (c - q),
        D = t.cols[0],
        0,
        o = t.cols.length,
        A = 0;
      var K = 0;
      for (n = 0; n < o; n++) D = t.cols[n],
        g = a.cols[n],
        m = (M = D.fixed ? g.x - A + K : K + (g.x - A) * u) - g.x,
        D.x = M,
        K = D.x,
        A = g.x
    }
    for (o = t.rows.length, O = 0, n = 0; n < o; n++) {
      for (B = 0, L = O - (s = t.rows[n]).frame.y, s.frame.y = O, p = 0; p < s.ncells; p++) (h = a.cells[s.start + p].colindex) >= 0 &&
        (
          (l = t.cells[s.start + p]).frame.x = B,
          l.frame.y += L,
          l.trect.y += L,
          l.frame.width = t.cols[h].x - B,
          l.sizedim.width = t.cols[h].x - B,
          B = t.cols[h].x,
          l.trect.x = l.frame.x + t.tmargin.left,
          l.trect.width = l.frame.width - t.tmargin.right - t.tmargin.left,
          p < s.ncells - 1 &&
          (l.trect.width -= l.vdisp),
          b = l.minwd,
          j !== ConstantData.TextGrowBehavior.VERTICAL ||
            l.childcontainer >= 0 ? l.textwd > b &&
          (b = l.textwd) : (
            k = l.textht,
            (N = this.Table_GetTextDimensions(z, l, t, j, null)) &&
            (
              l.textwd = N.width,
              l.nextra ? l.textht = this.Table_GetJoinedCellTextHt(t, s.start + p, N.height) : l.textht = N.height,
              Math.abs(k - l.textht) > 0.01 &&
              (V = !0)
            )
          )
        );
      if (V) {
        for (J = 0, F = 0, p = 0; p < s.ncells; p++) (l = t.cells[s.start + p]).textht > J &&
          (J = l.textht),
          l.sizedim.height > F &&
          (F = l.sizedim.height);
        if (
          s.textht != J &&
          (
            (U = J + t.tmargin.top + t.tmargin.bottom + l.hdisp) < F &&
            (U = F),
            U != s.frame.height
          )
        ) for (
            I = U - s.frame.height,
            s.frame.height = U,
            s.textht = J,
            p = 0;
            p < s.ncells;
            p++
          ) (l = t.cells[s.start + p]).frame.height += I,
            l.trect.height += I
      }
      O += s.frame.height;
      var X = s.segments.length;
      for (T = 0; T < X; T++) E = s.segments[T],
        l = t.cells[s.start + E.start],
        E.x_start = l.frame.x,
        l = t.cells[s.start + E.start + E.ncells - 1],
        E.x_end = l.frame.x + l.frame.width;
      s.frame.width = B
    }
    if (this.Table_UpdateColumns(e, - 1, t), t.ht = O, t.wd = B, V) for (o = t.cols.length, n = 0; n < o; n++) for (_ = (D = t.cols[n]).segments.length, p = 0; p < _; p++) E = D.segments[p],
      s = t.rows[E.rowstart],
      E.y = s.frame.y,
      s = t.rows[E.rowend],
      E.bottom = s.frame.y + s.frame.height
  }
  if (
    e.objecttype === ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER
  ) {
    var Y,
      $ = t.cells.length;
    for (p = 0; p < $; p++) if ((l = t.cells[p]).childcontainer >= 0) {
      var Z = l.trect;
      Z = this.Table_GetJoinedCellFrame(t, p, !0, !0),
        (Y = GlobalData.optManager.GetObjectPtr(l.childcontainer, !1)).Frame.height == Z.height &&
        Y.Frame.width == Z.width ||
        this.Table_SizeChildContainer(l.childcontainer, Z.width, Z.height)
    }
  }
  return H.x = t.wd,
    H.y = t.ht,
    e.GetGanttInfo() &&
    ListManager.SDData.GetTable(e.datasetTableID, !1) &&
    GlobalData.optManager.PlanningTableUpdateGeometry(e, !0),
    H
},



  ListManager.LM.prototype.Table_GrowRow = function (e, t, a, r) {
    var i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y = e.rows.length;
    if (t >= 0 && t < y && this.theActionTable) {
      for (
        o = e.rows[t],
        S = (u = this.theActionTable.rows[t].frame.height + a) - e.tmargin.top - e.tmargin.bottom,
        t < y - 1 ? (
          (s = e.cells[o.start]).flags & ListManager.Table.CellFlags.SDT_F_AllowMin &&
          (S += e.tmargin.top + e.tmargin.bottom),
          S -= s.hdisp
        ) : (s = e.cells[o.start]).flags & ListManager.Table.CellFlags.SDT_F_AllowMin &&
        (S += e.tmargin.top + e.tmargin.bottom),
        c = u - S,
        i = 0;
        i < o.ncells;
        i++
      ) (s = e.cells[o.start + i]).textht > S &&
        (S = s.textht);
      for (
        (h = S + c) > u &&
        (u = h),
        l = u - o.frame.height,
        o.frame.height = u,
        i = 0;
        i < o.ncells;
        i++
      ) {
        if (
          (s = e.cells[o.start + i]).frame.height += l,
          s.trect.height += l,
          r ||
          (s.sizedim.height = s.frame.height),
          C = s,
          m = o.start + i,
          s.flags & ListManager.Table.CellFlags.SDT_F_SilentF
        ) m = this.Table_GetJoinedCellParent(e, s.colindex, t).cellindex,
          C = e.cells[m];
        if (C.childcontainer >= 0) {
          var f = C.trect;
          f = this.Table_GetJoinedCellFrame(e, m, !0, !0),
            this.Table_SizeChildContainer(C.childcontainer, f.width, f.height)
        }
      }
      for (i = t + 1; i < y; i++) for ((o = e.rows[i]).frame.y += l, d = 0; d < o.ncells; d++) (s = e.cells[o.start + d]).frame.y += l,
        s.trect.y += l;
      for (n = e.cols.length, i = 0; i < n; i++) for (g = (p = e.cols[i]).segments.length, d = 0; d < g; d++) t >= (D = p.segments[d]).rowstart &&
        t <= D.rowend ? D.bottom += l : D.rowstart > t &&
      (D.y += l, D.bottom += l);
      e.ht += l
    }
    return {
      x: e.wd,
      y: e.ht
    }
  }

ListManager.LM.prototypeTable_ShiftColumn = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g;
  for (s = (o = t.cols[a]).segments.length, l = 0; l < s; l++) for (p = (S = o.segments[l]).rowstart; p <= S.rowend; p++) for (u = t.rows[p], d = 0; d < u.ncells; d++) if ((c = t.cells[u.start + d]).frame.x + c.frame.width, c.colindex === a) {
    D = this.theActionTable.cells[u.start + d],
      Utils2.IsEqual(c.frame.x, i) ? (
        c.frame.x = c.frame.x + r,
        c.trect.x = c.trect.x + r,
        (g = this.Table_GetTextDimensions(e, c, t, n, null)) &&
        (
          c.textwd = g.width,
          c.nextra ? c.textht = this.Table_GetJoinedCellTextHt(t, u.start + d, g.height) : c.textht = g.height
        )
      ) : c.frame.x < i ? (c.frame.width = D.frame.width + r, c.trect.width = D.trect.width + r) : (c.frame.x = D.frame.x + r, c.trect.x = D.trect.x + r);
    break
  }
  o.x += r
}

ListManager.LM.prototypeTable_GetTextDimensions = function (e, t, a, r, i) {
  var n;
  if (!(t.DataID < 0)) {
    if (null == e) return 0;
    var o = e.GetElementByID(ConstantData.SVGElementClass.TEXT, t.DataID);
    if (o) {
      i &&
        o.SetFormat(i);
      var s = t.trect;
      r === ConstantData.TextGrowBehavior.HORIZONTAL ? o.SetConstraints(
        GlobalData.optManager.theContentHeader.MaxWorkDim.x - a.wd + s.width,
        s.width,
        s.height
      ) : o.SetConstraints(s.width, s.width, s.height),
        n = o.GetTextMinDimensions()
    }
    return n
  }
}

ListManager.LM.prototypeTable_FixColumn = function (e, t) {
  var a,
    r,
    i;
  for (r = e.cells.length, a = 0; a < r; a++) (i = e.cells[a]).colindex === t &&
    (
      i.flags = Utils2.SetFlag(i.flags, ListManager.Table.CellFlags.SDT_F_FixedWidth, !0)
    );
  e.cols[t].fixed = !0
}

ListManager.LM.prototypeTable_FixRow = function (e, t) {
  var a,
    r,
    i;
  for (r = e.rows[t], ncells = r.ncells, a = 0; a < ncells; a++) (i = e.cells[r.start + a]).flags = Utils2.SetFlag(
    i.flags,
    ListManager.Table.CellFlags.SDT_F_FixedHeight,
    !0
  );
  r.fixed = !0
}

ListManager.LM.prototypeTable_GrowColumn = function (e, t, a, r, i, n, o, s, l) {
  var S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _,
    E,
    w,
    F,
    v,
    G,
    N,
    k,
    U = 0,
    J = 0,
    x = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID),
    O = !0;
  ConstantData.ObjectTypes;
  if (
    n &&
    i === ConstantData.TextGrowBehavior.PROPORTIONAL &&
    (O = !1),
    A = {
      x: t.wd,
      y: t.ht
    },
    Utils2.IsEqual(r, 0) &&
    !o
  ) return A;
  if (S = t.cols.length, t.cells.length, T = t.rows.length, a < 0 || a >= S) return A;
  if (
    c = t.cols[a],
    !s &&
    c.fixed &&
    c.fixed !== ListManager.Table.CellFlags.SDT_F_FixedWidth
  ) return A;
  D = c.segments.length,
    m = this.theActionTable.cols[a],
    R = this.theActionTable.wd,
    C = (y = m.x + r) - t.tmargin.right - t.tmargin.left - c.vdisp;
  var B = !n &&
    !s;
  if (e.IsSwimlane() && (B = !1), r < 0) {
    for (h = 0; h < D; h++) for (p = (g = c.segments[h]).rowstart; p <= g.rowend; p++) for (b = t.rows[p], d = 0; d < b.ncells; d++) if ((u = t.cells[b.start + d]).colindex === a) {
      f = C - u.frame.x,
        L = u.minwd,
        k = i === ConstantData.TextGrowBehavior.HORIZONTAL ||
        i === ConstantData.TextGrowBehavior.PROPORTIONAL &&
        !n,
        u.childcontainer >= 0 &&
        (k = !0),
        k &&
        L < u.textwd &&
        (L = u.textwd),
        f < L &&
        (
          y = (C = L + u.frame.x) + c.vdisp,
          0 == (u.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) &&
          (y += t.tmargin.right + t.tmargin.left)
        ),
        d >= b.ncells - 1 &&
        (B = !1);
      break
    }
    U = y - m.x - J,
      Utils2.IsEqual(U, 0) &&
      (U = 0),
      B ||
      (J = U, U = 0)
  } else if (B) {
    for (U = r, h = 0; h < D; h++) {
      for (p = (g = c.segments[h]).rowstart; p <= g.rowend; p++) {
        for (b = t.rows[p], d = 0; d < b.ncells; d++) if ((u = t.cells[b.start + d]).colindex === a) {
          d < b.ncells - 1 ? (
            u = this.theActionTable.cells[b.start + d + 1],
            M = (I = this.theActionTable.cols[u.colindex]).x - I.vdisp,
            0 == (u.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) &&
            (M = M - t.tmargin.right - t.tmargin.left),
            f = M - u.frame.x - U,
            L = u.minwd,
            (
              i !== ConstantData.TextGrowBehavior.VERTICAL ||
              u.childcontainer >= 0
            ) &&
            L < u.textwd &&
            (L = u.textwd),
            f < L &&
            (U -= L - f)
          ) : U = 0;
          break
        }
        if (U <= 0) break
      }
      if (U <= 0) break
    }
    J = r - U
  } else J = r;
  for (h = 0; h < D; h++) for (p = (g = c.segments[h]).rowstart; p <= g.rowend; p++) for (b = t.rows[p], d = 0; d < b.ncells; d++) if ((u = t.cells[b.start + d]).colindex === a) {
    if (
      _ = this.theActionTable.cells[b.start + d],
      u.frame.width = _.frame.width + U + J,
      u.trect.width = _.trect.width + U + J,
      u.childcontainer >= 0
    ) {
      var H = u.trect;
      H = this.Table_GetJoinedCellFrame(t, b.start + d, !0, !0),
        this.Table_SizeChildContainer(u.childcontainer, H.width, H.height)
    }
    if (
      n &&
      !s ||
      (u.sizedim.width = u.frame.width),
      (
        k = i === ConstantData.TextGrowBehavior.VERTICAL ||
        i === ConstantData.TextGrowBehavior.PROPORTIONAL &&
        n
      ) &&
      (E = this.Table_GetTextDimensions(x, u, t, i, null)) &&
      (
        u.textwd = E.width,
        u.nextra ? u.textht = this.Table_GetJoinedCellTextHt(t, b.start + d, E.height) : u.textht = E.height
      ),
      d < b.ncells - 1
    ) {
      if (
        P = t.cells[b.start + d + 1],
        _ = this.theActionTable.cells[b.start + d + 1],
        P.frame.x = _.frame.x + U,
        P.frame.width = _.frame.width - U,
        P.trect.x = _.trect.x + U,
        P.trect.width = _.trect.width - U,
        n &&
        !s ||
        (P.sizedim.width = P.frame.width),
        P.childcontainer >= 0
      ) {
        H = P.trect;
        H = this.Table_GetJoinedCellFrame(t, b.start + d + 1, !0, !0),
          this.Table_SizeChildContainer(P.childcontainer, P.trect.width, P.trect.height)
      }
      if (
        i === ConstantData.TextGrowBehavior.VERTICAL &&
        P.childcontainer <= 0 &&
        (E = this.Table_GetTextDimensions(x, P, t, i, null))
      ) {
        P.textwd = E.width,
          P.nextra ? P.textht = this.Table_GetJoinedCellTextHt(t, b.start + d + 1, E.height) : P.textht = E.height;
        break
      }
    }
  }
  if (Utils2.IsEqual(J, 0)) for (c.x = m.x + U, p = a + 1; p < S; p++) this.Table_ShiftColumn(x, t, p, 0, c.x, i);
  else for (c.x = m.x + U, p = a + 1; p < S; p++) this.Table_ShiftColumn(x, t, p, J, c.x, i);
  if (i !== ConstantData.TextGrowBehavior.HORIZONTAL && !l) {
    for (v = 0, p = 0; p < T; p++) {
      for (b = t.rows[p], w = 0, F = 0, d = 0; d < b.ncells; d++) (u = t.cells[d + b.start]).textht > F &&
        (F = u.textht),
        (G = u.textht + t.tmargin.top + t.tmargin.top + u.hdisp) < u.sizedim.height &&
        (G = u.sizedim.height),
        G > w &&
        (w = G);
      if (O) {
        for (
          N = Utils2.IsEqual(w, b.frame.height) ? 0 : w - b.frame.height,
          d = 0;
          d < b.ncells;
          d++
        ) if (
            (u = t.cells[d + b.start]).frame.height += N,
            u.trect.height += N,
            u.frame.y += v,
            u.trect.y += v,
            u.childcontainer >= 0
          ) {
            H = u.trect;
            H = this.Table_GetJoinedCellFrame(t, b.start + d, !0, !0),
              this.Table_SizeChildContainer(u.childcontainer, u.trect.width, u.trect.height)
          }
        b.frame.height += N,
          b.frame.y += v
      } else N = 0;
      b.textht = F,
        v += N
    }
    t.ht += v
  }
  for (t.cols = this.Table_BuildColumns(e, t, i), t.wd = R + J, p = 0; p < T; p++) {
    for ((b = t.rows[p]).frame.width = t.wd, b.minwd = 0, d = 0; d < b.ncells; d++) L = (u = t.cells[b.start + d]).minwd,
      i != ConstantData.TextGrowBehavior.VERTICAL &&
      L < u.textwd &&
      (L = u.textwd),
      L += t.tmargin.left + t.tmargin.right + u.vdisp,
      b.minwd += L;
    for (D = b.segments.length, h = 0; h < D; h++) g = b.segments[h],
      u = t.cells[b.start + g.start],
      g.x_start = u.frame.x,
      u = t.cells[b.start + g.start + g.ncells - 1],
      g.x_end = u.frame.x + u.frame.width
  }
  return {
    x: t.wd,
    y: t.ht
  }
}

ListManager.LM.prototypeTable_GetColumnAndSegment = function (e) {
  var t;
  return t = e.split('.'),
  {
    column: parseInt(t[0], 10),
    segment: parseInt(t[1], 10)
  }
}

ListManager.LM.prototypeTable_GetRowAndSegment = function (e) {
  var t,
    a = 0,
    r = 0;
  if (e) {
    if (!e.split) return null;
    t = e.split('.'),
      r = parseInt(t[0], 10),
      a = parseInt(t[1], 10)
  }
  return {
    row: r,
    segment: a
  }
}

ListManager.LM.prototypeTable_SetCursors = function (e, t, a, r) {
  var i,
    n,
    o,
    s = !1;
  ConstantData.ObjectTypes;
  a.rows.length,
    a.cols.length,
    a.cells.length,
    n = e.ElementCount();
  var l = t.RotationAngle;
  for (l > 180 && (l = 360 - l), l >= 90 && (l = 180 - l), l > 45 && (s = !0), i = 0; i < n; i++) if (o = e.GetElementByIndex(i)) switch (o.GetID()) {
    case ConstantData.Defines.TableRowHit:
    case ConstantData.Defines.TableRowHitHidden:
    case ConstantData.Defines.TableRowSelection:
      t &&
        t.ObjGrow === ConstantData.GrowBehavior.HCONSTRAIN ? o.SetCursor(ConstantData.CursorType.DEFAULT) : t &&
          this.Table_HideUI(t) ? o.SetCursor(ConstantData.CursorType.TEXT) : r ||
      (
        s ? o.SetCursor(ConstantData.CursorType.COL_RESIZE) : o.SetCursor(ConstantData.CursorType.ROW_RESIZE)
      );
      break;
    case ConstantData.Defines.TableColHit:
    case ConstantData.Defines.TableColHitHidden:
    case ConstantData.Defines.TableColSelection:
      t &&
        t.ObjGrow === ConstantData.GrowBehavior.VCONSTRAIN ? o.SetCursor(ConstantData.CursorType.DEFAULT) : t &&
          this.Table_HideUI(t) ? o.SetCursor(ConstantData.CursorType.TEXT) : r ||
      (
        s ? o.SetCursor(ConstantData.CursorType.ROW_RESIZE) : o.SetCursor(ConstantData.CursorType.COL_RESIZE)
      );
      break;
    case ConstantData.SVGElementClass.SLOP:
      r ||
        o.SetCursor(ConstantData.CursorType.ADD);
      break;
    case ConstantData.Defines.TableRowZone:
      r ||
        o.SetCursor(ConstantData.CursorType.ARR_RIGHT);
      break;
    case ConstantData.Defines.TableColZone:
      r ||
        o.SetCursor(ConstantData.CursorType.ARR_DOWN);
      break;
    case ConstantData.ShapeIconType.HYPERLINK:
    case ConstantData.ShapeIconType.TRELLOLINK:
    case ConstantData.ShapeIconType.NOTES:
    case ConstantData.ShapeIconType.EXPANDEDVIEW:
    case ConstantData.ShapeIconType.COMMENT:
      r ||
        o.SetCursor(ConstantData.CursorType.POINTER);
      break;
    case ConstantData.ShapeIconType.EXPANDTABLE:
    case ConstantData.ShapeIconType.COLLAPSETABLE:
      r ||
        o.SetCursor(ConstantData.CursorType.ADD_PLUS);
      break;
    case ConstantData.SVGElementClass.TEXT:
      o === GlobalData.optManager.svgDoc.GetActiveEdit() ? (
        r ||
        o.SetCursorState(SDGraphics.ConstantData.CursorState.EDITLINK),
        o.SetCursorState(SDGraphics.ConstantData.CursorState.EDITLINK)
      ) : r ? o.SetCursorState(SDGraphics.ConstantData.CursorState.LINKONLY) : o.SetCursorState(SDGraphics.ConstantData.CursorState.EDITLINK);
      break;
    case ConstantData.Defines.TableCellNoHit:
      r ||
        o.SetCursor(ConstantData.CursorType.DEFAULT);
      break;
    default:
      r ||
        o.SetCursor(ConstantData.CursorType.TEXT)
  }
}

ListManager.LM.prototypeTable_TextGrow = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _,
    E,
    w,
    F = !1,
    v = {
      x: t.wd,
      y: t.ht
    },
    G = !1;
  if (a >= 0) switch (
    m = t.rows.length,
    M = t.cols.length,
    I = t.cells[a],
    c = this.Table_GetCol(t.cols, I, !1),
    D = this.Table_GetRow(t, a),
    (I = t.cells[a]).childcontainer >= 0 &&
    (
      G = this.GetObjectPtr(I.childcontainer, !1).ContainerList.flags & ConstantData.ContainerListFlags.Sparse
    ),
    r
  ) {
      case ConstantData.TextGrowBehavior.PROPORTIONAL:
        for (
          I.nextra ? I.textht = this.Table_GetJoinedCellTextHt(t, a, i.height) : I.textht = i.height,
          I.textwd = i.width,
          this.theActionTable = t,
          v = this.Table_GrowColumn(e, t, c, n.width, r, !0, !1, !1),
          this.theActionTable = null,
          (p = t.rows[D]).textht = 0,
          d = 0;
          d < p.ncells;
          d++
        ) (E = (o = t.cells[p.start + d]).textht) > p.textht &&
          (p.textht = E);
        this.theActionTable = t,
          v = this.Table_GrowRow(t, D, n.height, !0),
          this.theActionTable = null;
        break;
      case ConstantData.TextGrowBehavior.HORIZONTAL:
        if (
          _ = (I = t.cells[a]).minwd,
          I.textwd > _ &&
          (_ = I.textwd),
          I.textwd = i.width,
          h = I.minwd,
          I.textwd > h &&
          (h = I.textwd),
          t.rows[D].minwd += h - _,
          w = I.nextra ? this.Table_GetJoinedCellTextHt(t, a, i.height) : i.height,
          Utils2.IsEqual(I.textht, w) ||
          (I.textht = w, F = !0),
          c = this.Table_GetCol(t.cols, I, !1),
          (D = this.Table_GetRow(t, a)) >= 0
        ) {
          for ((p = t.rows[D]).minwd = 0, S = 0; S < p.ncells; S++) (h = (g = t.cells[S + p.start]).minwd) < g.textwd &&
            (h = g.textwd),
            h += t.tmargin.left + t.tmargin.right + g.vdisp,
            p.minwd += h;
          for (h = 0, S = 0; S < m; S++) (p = t.rows[S]).minwd > h &&
            (h = p.minwd);
          t.minwd = h
        }
        if (i.width < I.trect.width) {
          if (
            h = I.sizedim.width - t.tmargin.left - t.tmargin.right - I.vdisp,
            i.width < h &&
            (i.width = h),
            s = i.width - I.trect.width,
            Utils2.IsEqual(s, 0)
          ) s = 0;
          else if (
            I.frame.width + s,
            P = I.frame.x + I.frame.width + s,
            (c = I.colindex) >= 0
          ) {
            for (C = 0, L = (u = t.cols[c]).segments.length, y = 0; y < L; y++) for (S = (f = u.segments[y]).rowstart; S <= f.rowend; S++) for (p = t.rows[S], d = 0; d < p.ncells; d++) (o = t.cells[p.start + d]).colindex === c &&
              (
                R = P - t.tmargin.right - t.tmargin.left - o.vdisp - o.frame.x,
                (h = o.minwd) < o.textwd &&
                (h = o.textwd),
                (A = o.frame.x + h + t.tmargin.right + t.tmargin.left + o.vdisp) > C &&
                (C = A),
                R < h &&
                (s += h - R)
              );
            s > 0 &&
              (s = 0),
              u.minx = C
          }
        } else s = i.width - I.trect.width,
          c >= 0 &&
          (
            (u = t.cols[c]).minx = i.width + I.vdisp + t.tmargin.left + t.tmargin.right
          );
        var N = I.childcontainer >= 0 &&
          s < 0;
        if (
          c >= 0 &&
          !N &&
          (
            this.theActionTable = t,
            v = this.Table_GrowColumn(e, t, c, s, r, !0, !1, !1),
            this.theActionTable = null
          ),
          !F
        ) break;
      case ConstantData.TextGrowBehavior.VERTICAL:
        for (
          (I = t.cells[a]).minwd > I.trect.width &&
          I.DataID < 0 &&
          (
            s = I.minwd - I.trect.width,
            c = I.colindex,
            this.theActionTable = t,
            v = this.Table_GrowColumn(e, t, c, s, r, !0, !1, !1),
            this.theActionTable = null
          ),
          I.nextra ? (
            I.textht = this.Table_GetJoinedCellTextHt(t, a, i.height),
            w = I.textht
          ) : (I.textht = i.height, w = i.height),
          c = this.Table_GetCol(t.cols, I, !1),
          D = this.Table_GetRow(t, a),
          (p = t.rows[D]).textht = 0,
          d = 0;
          d < p.ncells;
          d++
        ) (E = (o = t.cells[p.start + d]).textht) > p.textht &&
          (p.textht = E);
        if (w < I.trect.height) {
          for (T = 0, S = 0; S < p.ncells; S++) (
            b = (o = t.cells[p.start + S]).sizedim.height - t.tmargin.top - t.tmargin.bottom - o.hdisp
          ) < o.textht &&
            (b = o.textht),
            T < b &&
            (T = b);
          w < T &&
            (w = T),
            l = w + t.tmargin.top + t.tmargin.bottom + I.hdisp - p.frame.height,
            Utils2.IsEqual(l, 0) &&
            (l = 0)
        } else l = w - I.trect.height,
          Utils2.IsEqual(l, 0) &&
          (l = 0);
        if (I.childcontainer >= 0 && G && l < 0 && (l = 0), 0 !== l) {
          var k,
            U;
          for (p.frame.height += l, S = 0; S < p.ncells; S++) {
            if (
              (o = t.cells[p.start + S]).trect.height += l,
              o.frame.height += l,
              U = p.start + S,
              k = o,
              o.flags & ListManager.Table.CellFlags.SDT_F_SilentF
            ) U = this.Table_GetJoinedCellParent(t, o.colindex, D).cellindex,
              k = t.cells[U];
            if (k.childcontainer >= 0 && I.childcontainer !== k.childcontainer) {
              var J = k.trect;
              J = this.Table_GetJoinedCellFrame(t, U, !0, !0),
                this.Table_SizeChildContainer(k.childcontainer, J.width, J.height)
            }
          }
          for (S = D + 1; S < m; S++) for ((p = t.rows[S]).frame.y += l, d = 0; d < p.ncells; d++) (o = t.cells[p.start + d]).frame.y += l,
            o.trect.y += l;
          for (t.ht += l, S = 0; S < M; S++) for (L = (u = t.cols[S]).segments.length, y = 0; y < L; y++) (f = u.segments[y]).y = t.rows[f.rowstart].frame.y,
            f.bottom = t.rows[f.rowend].frame.y + t.rows[f.rowend].frame.height;
          v = {
            x: t.wd,
            y: t.ht
          }
        }
    }
  for (t.minwd = 0, t.minht = 0, S = 0; S < m; S++) for (
    p = t.rows[S],
    o = t.cells[p.start],
    t.minwd < p.minwd &&
    (t.minwd = p.minwd),
    t.minht += p.textht + o.hdisp + t.tmargin.top + t.tmargin.bottom,
    L = p.segments.length,
    y = 0;
    y < L;
    y++
  ) f = p.segments[y],
    o = t.cells[p.start + f.start],
    f.x_start = o.frame.x,
    o = t.cells[p.start + f.start + f.ncells - 1],
    f.x_end = o.frame.x + o.frame.width;
  return v
},




  ListManager.LM.prototype.Table_UpdateColumns = function (e, t, a) {
    var r,
      i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g;
    for (
      null == a &&
      (a = e.GetTable(!0)),
      t >= 0 ? i = (r = t) + 1 : (r = 0, i = a.cols.length),
      l = r;
      l < i;
      l++
    ) for ((u = a.cols[l]).minx = 0, D = u.segments.length, s = 0; s < D; s++) for (n = (p = u.segments[s]).rowstart; n <= p.rowend; n++) for (S = a.rows[n], o = 0; o < S.ncells; o++) if ((c = a.cells[o + S.start]).colindex === l) {
      d = c.minwd,
        (
          e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL ||
          c.childcontainer >= 0
        ) &&
        c.textwd > d &&
        (d = c.textwd),
        (g = c.frame.x + d + c.vdisp + a.tmargin.left + a.tmargin.right) > u.minx &&
        (u.minx = g);
      break
    }
  }

ListManager.LM.prototypeTable_SaveTextStyle = function (e, t) {
  if (e && e.select >= 0) {
    var a = e.cells[e.select];
    this.TextStyleToSDText(a.Text, t)
  }
}

ListManager.LM.prototypeTable_DeActivateText = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = Business.GetSelectionBusinessManager(e.BlockID);
  if (t && t.select >= 0) {
    var C = this.svgObjectLayer.GetElementByID(e.BlockID);
    if (
      n = t.select,
      (a = t.cells[t.select]).flags = Utils2.SetFlag(a.flags, ListManager.Table.CellFlags.SDT_F_Select, !0),
      C
    ) var y = C.GetElementByID(ConstantData.SVGElementClass.TEXT, a.DataID);
    if (a.DataID < 0) return void (
      m &&
      m.TableDataSaveField(e, t, e.datasetTableID, a.datarecordID, a.celltype, null)
    );
    if (y) {
      m &&
        m.TableDataSaveField(e, t, e.datasetTableID, a.datarecordID, a.celltype, y);
      var f = y.GetTextMinDimensions();
      a.nextra ? a.textht = this.Table_GetJoinedCellTextHt(t, n, f.height) : a.textht = f.height,
        a.textwd = f.width;
      var L = this.CalcDefaultInitialTextStyle(a.Text),
        I = this.svgDoc.CalcStyleMetrics(L);
      if (
        0 == (a.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) &&
        (a.minwd = 5 * I.width, a.minht = I.height),
        0 == (a.flags & ListManager.Table.CellFlags.SDT_F_Select) &&
        (t.select = - 1),
        i = a.colindex,
        r = this.Table_GetRow(t, n),
        h = t.rows.length,
        r >= 0
      ) {
        for ((o = t.rows[r]).minwd = 0, o.textht = 0, s = 0; s < o.ncells; s++) c = (S = t.cells[s + o.start]).minwd,
          e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
          S.textwd > c &&
          (c = S.textwd),
          c += t.tmargin.left + t.tmargin.right + S.vdisp,
          o.minwd += c,
          S.textht > o.textht &&
          (o.textht = S.textht);
        for (c = 0, t.minht = 0, s = 0; s < h; s++) (o = t.rows[s]).minwd > c &&
          (c = o.minwd),
          S = t.cells[o.start],
          t.minht += o.textht + S.hdisp + t.tmargin.top + t.tmargin.bottom;
        t.minwd = c
      }
      for (u = (d = t.cols[i]).segments.length, d.minx = 0, D = 0; D < u; D++) for (s = (p = d.segments[D]).rowstart; s <= p.rowend; s++) for (o = t.rows[s], l = 0; l < o.ncells; l++) if ((S = t.cells[l + o.start]).colindex === i) {
        c = S.minwd,
          e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
          S.textwd > c &&
          (c = S.textwd),
          (g = S.frame.x + c + S.vdisp + t.tmargin.left + t.tmargin.right) > d.minx &&
          (d.minx = g);
        break
      }
    }
  }
}

ListManager.LM.prototypeTable_DeleteObject = function (e) {
  var t,
    a,
    r,
    i;
  for (t = e.cells.length, a = 0; a < t; a++) (i = e.cells[a]).DataID >= 0 &&
    (
      (r = GlobalData.objectStore.PreserveBlock(i.DataID)) &&
      r.Delete(),
      i.DataID = - 1
    ),
    i.NoteID >= 0 &&
    (
      (r = GlobalData.objectStore.PreserveBlock(i.NoteID)) &&
      r.Delete(),
      i.NoteID = - 1
    ),
    i.BlobBytesID >= 0 &&
    (r = GlobalData.objectStore.PreserveBlock(i.BlobBytesID)) &&
    r.Delete(),
    i.EMFBlobBytesID >= 0 &&
    (r = GlobalData.objectStore.PreserveBlock(i.EMFBlobBytesID)) &&
    r.Delete(),
    this.IsBlobURL(i.ImageURL) &&
    this.DeleteURL(i.ImageURL)
}

ListManager.LM.prototypeTable_Select = function (e, t, a, r, i, n, o) {
  var s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L = this.Table_Hit(t, a.x, a.y),
    I = {},
    T = [],
    b = [],
    M = ListManager.Table.CellFlags.SDT_F_Select;
  if (!(L < 0)) if (
    (u = t.cells[L]).flags & ListManager.Table.CellFlags.SDT_F_ToggleIcon &&
    u.Image &&
    u.Image.iconid > 0
  ) gUIElementManager.HandleIconClick(e, t, L);
  else {
    switch (t.select < 0 && (t.select = L), i) {
      case ConstantData.ActionTriggerType.TABLE_ROWSELECT:
        if (d = this.Table_GetRow(t, L), L = (m = t.rows[d]).start + m.ncells - 1, n) for (h = 0 == ((u = t.cells[m.start]).flags & M), f = 0; f < m.ncells; f++) (u = t.cells[m.start + f]).flags = Utils2.SetFlag(u.flags, M, h);
        break;
      case ConstantData.ActionTriggerType.TABLE_COLSELECT:
        D = (u = t.cells[L]).colindex;
        var P = t.cols[D];
        for (
          y = P.segments.length,
          C = P.segments[y - 1],
          m = t.rows[C.rowend],
          f = 0;
          f < m.ncells;
          f++
        ) if ((u = t.cells[m.start + f]).colindex === D) {
          L = m.start + f;
          break
        }
        n &&
          (g = D, h = 0 == (u.flags & M));
        break;
      case ConstantData.ActionTriggerType.TABLE_SELECT:
        o &&
          o.length &&
          (t.select = o[0], L = o[1]);
        break;
      default:
        n &&
          (
            t.select = L,
            (u = t.cells[L]).flags = Utils2.SetFlag(u.flags, M, 0 == (u.flags & M))
          )
    }
    for (
      s = t.cells[t.select],
      l = t.cells[L],
      I = Utils2.UnionRect(s.frame, l.frame, I),
      c = t.cells.length,
      S = 0;
      S < c;
      S++
    ) u = t.cells[S],
      n ? (
        u.colindex === g &&
        (u.flags = Utils2.SetFlag(u.flags, M, h)),
        u.flags & M &&
        (
          p = u.frame,
          u.nextra &&
          (p = this.Table_GetJoinedCellFrame(t, S, !1, !1)),
          T.push(p),
          u.childcontainer >= 0 &&
          b.push(u.childcontainer)
        )
      ) : Utils2.IntersectRect(u.frame, I) ? (
        u.flags = Utils2.SetFlag(u.flags, ListManager.Table.CellFlags.SDT_F_Select, !0),
        p = u.frame,
        u.nextra &&
        (p = this.Table_GetJoinedCellFrame(t, S, !1, !1)),
        T.push(p),
        u.childcontainer >= 0 &&
        b.push(u.childcontainer)
      ) : u.flags = Utils2.SetFlag(u.flags, ListManager.Table.CellFlags.SDT_F_Select, !1),
      u.childcontainer >= 0 &&
      b[b.length - 1] !== u.childcontainer &&
      b.push(- u.childcontainer);
    var R = this.svgObjectLayer.GetElementByID(e.BlockID);
    this.LM_SelectSVGTableObject(e, this.svgDoc, R, T, b),
      this.Table_UpdateSelectionAttributes(e.BlockID, !1);
    var A = new ListManager.SelectionAttributes;
    $.extend(!0, A, this.SelectionState),
      SDUI.Commands.MainController.UpdateActiveSelection(A, !1)
  }
}

ListManager.LM.prototypeTable_SelectRowDivider = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = e.GetTable(!0);
  for (
    i = s.rows.length,
    s.rselect >= 0 &&
      a ? t > s.rselect ? (n = s.rselect, o = t) : t === s.rselect ? (s.rselect = - 1, n = i, o = - 1) : (o = s.rselect, n = t) : (n = t, o = t, s.rselect = t),
    r = 0;
    r < i;
    r++
  ) s.rows[r].selected = r >= n &&
    r <= o;
  this.AddToDirtyList(e.BlockID),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeTable_SelectColDivider = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = e.GetTable(!0);
  for (
    i = s.cols.length,
    s.cselect >= 0 &&
      a ? t > s.cselect ? (n = s.cselect, o = t) : t === s.cselect ? (s.cselect = - 1, n = i, o = - 1) : (o = s.cselect, n = t) : (n = t, o = t, s.cselect = t),
    r = 0;
    r < i;
    r++
  ) s.cols[r].selected = r >= n &&
    r <= o;
  this.AddToDirtyList(e.BlockID),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeTable_ChangeTextAttributes = function (e, t, a, r, i, n, o, s, l, S) {
  var c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P = {},
    R = !1,
    A = !1,
    _ = GlobalData.optManager.Table_GetActiveID();
  (e.BlockID !== _ || null != o || s) &&
    (c = !0, null != o && e.TextGrow != o && (A = !0, e.TextGrow = o));
  var E = e.TextGrow === ConstantData.TextGrowBehavior.PROPORTIONAL,
    w = e.TextGrow === ConstantData.TextGrowBehavior.VERTICAL,
    F = e.GetTable(!0);
  if (null != F) {
    if (d = F.cells.length, l) var v = l;
    else v = this.svgObjectLayer.GetElementByID(e.BlockID);
    for (u = 0; u < d; u++) p = F.cells[u],
      D = !1,
      (c || p.flags & ListManager.Table.CellFlags.SDT_F_Select) &&
      (
        a &&
        (
          void 0 !== a.FontName &&
          (p.Text.FontName = a.FontName, D = !0),
          void 0 !== a.FontId &&
          (p.Text.FontId = a.FontId, D = !0),
          void 0 !== a.FontSize &&
          (p.Text.FontSize = a.FontSize, D = !0),
          void 0 !== a.Scale &&
          (
            p.Text.FontSize = p.Text.FontSize * a.Scale,
            t &&
            (t.size = SDF.PointSizeToFontSize(p.Text.FontSize)),
            D = !0
          ),
          void 0 !== a.Face &&
          (p.Text.Face = a.Face, D = !0),
          a.Color ? p.Text.Paint.Color = a.Color : a.Paint &&
            a.Paint.Color &&
            (p.Text.Paint.Color = a.Paint.Color),
          a.Opacity ? p.Text.Paint.Opacity = a.Opacity : a.Paint &&
            a.Paint.Opacity &&
            (p.Text.Paint.Opacity = a.Paint.Opacity)
        ),
        r &&
        (p.just = r, p.vjust = n),
        g = null,
        p.DataID >= 0 &&
        v &&
        (
          g = v.GetElementByID(ConstantData.SVGElementClass.TEXT, p.DataID)
        ) &&
        (
          r &&
          (g.SetParagraphAlignment(r), n && g.SetVerticalAlignment(n)),
          i &&
          (g.SetParagraphStyle(i), D = !0),
          t &&
          g.SetFormat(t),
          S &&
          g.HasDataFields() &&
          (g.UpdateFromData(e.fieldDataTableID, e.fieldDataElemID), D = !0),
          y = g.GetRuntimeText(),
          (f = this.GetObjectPtr(p.DataID, !0)) &&
          (f.runtimeText = y)
        ),
        (D || A) &&
        (
          R = !0,
          h = this.CalcDefaultInitialTextStyle(p.Text),
          m = this.svgDoc.CalcStyleMetrics(h),
          p.minht,
          0 == (p.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) &&
          (p.minwd = 5 * m.width, p.textht = m.height),
          p.minht = p.textht,
          M = this.Table_GetTRect(e, F, !0, u),
          p.DataID >= 0 &&
          v &&
          (
            C = w ? (
              g = v.GetElementByID(ConstantData.SVGElementClass.TEXT, p.DataID)
            ) ? g.CalcFormatChange(h) : null : this.Table_GetTextDimensions(v, p, F, e.TextGrow, null)
          ) &&
          (
            p.nextra ? p.textht = this.Table_GetJoinedCellTextHt(F, u, C.height) : p.textht = C.height,
            p.textwd = C.width
          ),
          E &&
          (
            (L = p.textht) < M.tsizedim.height &&
            (L = M.tsizedim.height),
            Utils2.IsEqual(L, p.trect.height) ||
            (
              I = L - p.trect.height,
              P = this.FitProp(e, g, I, u),
              T = g ? g.GetTextMinDimensions() : {
                width: m.width,
                height: m.height
              },
              C = {
                width: P.x - e.Frame.width,
                height: P.y - e.Frame.height
              },
              (b = this.Table_TextGrow(e, F, u, e.TextGrow, T, C)).x += e.Frame.width - e.trect.width,
              b.y += e.Frame.height - e.trect.height,
              e.SetSize(b.x, b.y, ConstantData.ActionTriggerType.TABLE_EDIT),
              this.AddToDirtyList(e.BlockID)
            )
          )
        )
      );
    if (E && (R = !1), R) {
      C = this.Table_TextResize(e, F);
      var G = Utils1.DeepCopy(e);
      G.trect.width = C.x,
        G.trect.height = C.y,
        G.TRectToFrame(G.trect, !1),
        C.x = G.Frame.width,
        C.y = G.Frame.height,
        e.SetSize(C.x, C.y, ConstantData.ActionTriggerType.TABLE_EDIT),
        this.AddToDirtyList(e.BlockID)
    }
    this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE)
  }
}

ListManager.LM.prototypeTable_FindNext = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u = 0,
    p = this.svgObjectLayer.GetElementByID(e.BlockID);
  if (null != p) {
    for (
      o = t.cells.length,
      t.select >= 0 &&
      (u = t.select, i && n && (u++, n && (i = !1))),
      s = u;
      s < o;
      s++
    ) {
      if (
        (l = t.cells[s]).DataID >= 0 &&
        !i &&
        (
          S = p.GetElementByID(ConstantData.SVGElementClass.TEXT, l.DataID)
        ) &&
        (c = S.GetText(0).search(a)) >= 0
      ) return t.select = s,
        this.ActivateTextEdit(p),
        (S = p.textElem).SetSelectedRange(c, c + r),
        !0;
      if (i = !1, l.NoteID >= 0) {
        var d = this.GetObjectPtr(l.NoteID, !1);
        if (d && (c = d.runtimeText.text.search(a)) >= 0) {
          GlobalData.optManager.ScrollObjectIntoView(e.BlockID, !1),
            t.select = s,
            this.ToggleNote(e.BlockID, l);
          var D = this.svgDoc.GetActiveEdit();
          if (D) return D.SetSelectedRange(c, c + r),
            !0
        }
      }
    }
    return !1
  }
}

ListManager.LM.prototypeTable_TextResize = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = !1,
    L = !1,
    I = [],
    T = !1;
  for (
    s = t.rows.length,
    l = t.cols.length,
    p = 0,
    t.minht = 0,
    e.objecttype === ConstantData.ObjectTypes.SD_OBJT_FRAME_CONTAINER &&
    2 === s &&
    (s = 1, T = !0),
    a = 0;
    a < s;
    a++
  ) {
    for (C = 0, (n = t.rows[a]).textht = 0, r = 0; r < n.ncells; r++) S = p - (i = t.cells[n.start + r]).frame.y,
      i.frame.y += S,
      i.trect.y += S,
      n.textht < i.textht &&
      (n.textht = i.textht),
      0 == (i.flags & ListManager.Table.CellFlags.SDT_F_AllowMin) ? (
        (m = i.textht + i.hdisp + t.tmargin.top + t.tmargin.bottom) < i.sizedim.height &&
        (m = i.sizedim.height),
        m > C &&
        (C = m),
        y = i.minwd,
        i.textwd > y &&
        (y = i.textwd),
        (y += t.tmargin.left + t.tmargin.right + i.vdisp) < i.sizedim.width &&
        (y = i.sizedim.width)
      ) : (y = i.frame.width, m = i.frame.height),
      u = y - i.frame.width,
      Utils2.IsEqual(u, 0) ||
      (
        u < 0 ? I[i.colindex] ? u < I[i.colindex] &&
          (I[i.colindex] = u) : I[i.colindex] = u : I[i.colindex] ? u > I[i.colindex] &&
            (I[i.colindex] = u) : I[i.colindex] = u,
        L = !0
      );
    if (n.frame.y = p, c = C - n.frame.height, !Utils2.IsEqual(c, 0)) {
      for (r = 0; r < n.ncells; r++) (i = t.cells[n.start + r]).frame.height += c,
        i.trect.height += c;
      f = !0
    }
    n.frame.height = C,
      t.minht += n.textht + i.hdisp + t.tmargin.top + t.tmargin.bottom,
      p += n.frame.height
  }
  if (
    T &&
    (t.minht += t.rows[1].textht, p += t.rows[1].frame.height),
    t.ht = p,
    e.objecttype === ConstantData.ObjectTypes.SD_OBJT_ANNOTATION &&
    (L = !1),
    L
  ) for (h = I.length, t.cols, a = 0; a < h; a++) I[a] &&
    (
      this.theActionTable = t,
      this.Table_GrowColumn(e, t, a, I[a], e.TextGrow, !0, !1, !1),
      this.theActionTable = null
    );
  if (f) for (a = 0; a < l; a++) for (d = (o = t.cols[a]).segments.length, g = 0; g < d; g++) (D = o.segments[g]).y = t.rows[D.rowstart].frame.y,
    D.bottom = t.rows[D.rowend].frame.y + t.rows[D.rowend].frame.height;
  return {
    x: t.wd,
    y: t.ht
  }
}

ListManager.LM.prototypeTable_SetCellFlags = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = ListManager.Table.CellFlags.SDT_F_Select,
    l = GlobalData.optManager.Table_GetActiveID();
  if (l >= 0 && (this.CloseEdit(!0), r = this.GetObjectPtr(l, !1))) {
    var S = r.GetTable(!0);
    if (S) {
      for (i = S.cells.length, o = 0; o < i; o++) (n = S.cells[o]).flags & s &&
        (n.flags = Utils2.SetFlag(n.flags, e, t));
      r.moreflags & ConstantData.ObjMoreFlags.SED_MF_Container &&
        e === ListManager.Table.CellFlags.SDT_F_NoText &&
        (
          this.Table_BuildFills(r, S, r.StyleRecord.Fill),
          this.AddToDirtyList(l)
        ),
        a ||
        this.CompleteOperation()
    }
  }
}

ListManager.LM.prototypeTable_SetHyperlink = function (e, t) {
  if (e.select >= 0) {
    var a = e.cells[e.select];
    a.hyperlink = '' === t ? null : t
  }
  a.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
    a.datarecordID >= 0 &&
    GlobalData.optManager.DataAddHyperlinkToRecord(t, a.datarecordID)
}

ListManager.LM.prototypeTable_SetTheme = function (e, t) {
  var a = e.GetTable(!0);
  if (a && !e.IsSwimlane()) {
    for (var r = 0; r < t.length; r++) if (e.StyleRecord.Name === t[r].Name) {
      e.ApplyStyle(t[r], !0);
      break
    }
    for (var i = 0; i < a.rows.length; i++) for (var n = 0; n < a.rows[i].ncells; n++) {
      var o = a.cells[a.rows[i].start + n];
      if (
        o.celltype !== ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER &&
        !(
          e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
          i > 1 &&
          o.stylename != ListManager.GanttDefines.GANTT_NONEDIT_STYLE
        )
      ) for (r = 0; r < t.length; r++) if (o.stylename === t[r].Name) {
        var s = {
          StyleRecord: t[r]
        },
          l = GlobalData.optManager.ApplyColorFilter(s, null, o.fill, e.colorfilter);
        l.StyleRecord &&
          l.StyleRecord.Fill &&
          this.ApplyProperties(l.StyleRecord.Fill, o.fill)
      }
    }
    this.Table_BuildFills(e, a, null),
      this.AddToDirtyList(e.BlockID)
  }
}

ListManager.LM.prototypeTable_FillSwimlane = function (e, t, a, r) {
  var i,
    n = ConstantData.ObjectTypes,
    o = GlobalData.optManager.GetObjectPtr(e, !1),
    s = ListManager.Table.CellTypes.SD_CT_SWIMLANE_TITLE;
  if (null != o) {
    'TableCell' === t &&
      o.objecttype === ConstantData.ObjectTypes.SD_OBJT_SHAPECONTAINER &&
      o.hooks.length &&
      (e = o.hooks[0].objid, o = GlobalData.optManager.GetObjectPtr(e, !1));
    var l = o.GetTable(!1);
    if (null != l) {
      var S = l.rows.length,
        c = (
          l.cols.length,
          ConstantData.ActionTriggerType.TABLE_ROWSELECT
        ),
        u = 1,
        p = 0;
      if (GlobalData.optManager.CloseEdit(!0), Collab.AllowMessage()) {
        Collab.BeginSecondaryEdit();
        var d = {
          BlockID: e,
          context: t,
          Fill: Utils1.DeepCopy(a),
          cellindex: r
        }
      }
      var D = function (e, t) {
        null != t.Paint.FillType &&
          (e.Paint.FillType = t.Paint.FillType),
          null != t.Paint.Color &&
          (
            e.Paint.Color = t.Paint.Color,
            e.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
          ),
          null != t.Paint.Opacity &&
          (e.Paint.Opacity = t.Paint.Opacity)
      };
      switch (t) {
        case 'Header':
          if (i = 0, o.objecttype === n.SD_OBJT_SWIMLANE_ROWS) c = ConstantData.ActionTriggerType.TABLE_COLSELECT;
          l = o.GetTable(!0);
          break;
        case 'RowHeader':
          i = 0,
            c = ConstantData.ActionTriggerType.TABLE_COLSELECT,
            o.RotationAngle &&
            (c = ConstantData.ActionTriggerType.TABLE_ROWSELECT),
            l = o.GetTable(!0);
          break;
        case 'Lanes':
          switch (i = 1, o.objecttype) {
            case n.SD_OBJT_FRAME_CONTAINER:
              c = ConstantData.ActionTriggerType.TABLE_ROWSELECT;
              break;
            case n.SD_OBJT_SWIMLANE_ROWS:
              c = ConstantData.ActionTriggerType.TABLE_COLSELECT;
              break;
            case n.SD_OBJT_SWIMLANE_COLS:
              l.cells[0].celltype === s ? u = 2 : c = ConstantData.ActionTriggerType.TABLE_ROWSELECT;
              break;
            case n.SD_OBJT_SWIMLANE_GRID:
              p = 1,
                u = S - 1
          }
          l = o.GetTable(!0);
          break;
        case 'TableCell':
          var g = (l = o.GetTable(!0)).cells[r];
          if (D(g.fill, a), g.childcontainer >= 0) {
            var h = this.GetObjectPtr(g.childcontainer, !0);
            h &&
              (
                this.ApplyProperties(a, h.StyleRecord.Fill),
                this.AddToDirtyList(g.childcontainer)
              )
          }
          c = 0;
          break;
        default:
          return !1
      }
      switch (c) {
        case ConstantData.ActionTriggerType.TABLE_ROWSELECT:
          !function (e) {
            var t,
              r,
              i,
              n,
              o;
            for (o = 0; o < u; o++) for (n = (r = l.rows[e + o]).ncells, t = p; t < n; t++) i = l.cells[r.start + t],
              D(i.fill, a)
          }(i);
          break;
        case ConstantData.ActionTriggerType.TABLE_COLSELECT:
          !function (e) {
            var t,
              r,
              i;
            for (t = 0; t < S; t++) r = l.rows[t],
              i = l.cells[r.start + e],
              D(i.fill, a)
          }(i)
      }
      this.Table_BuildFills(o, l, null);
      var m,
        C,
        y = l.fills.length,
        f = 0,
        L = 0,
        I = !0;
      for (m = 0; m < y; m++) {
        if (
          l.fills[m].fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TRANSPARENT ||
          1 != l.fills[m].fill.Paint.Opacity
        ) {
          f = m,
            I = !1;
          break
        } (C = l.fills[m].list.length) > L &&
          (L = C, f = m)
      }
      var T = {
        StyleRecord: {
        }
      };
      return T.StyleRecord.Fill = Utils1.DeepCopy(l.fills[f].fill),
        I ? l.fills.splice(f, 1) : T.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT,
        o = GlobalData.optManager.GetObjectPtr(o.BlockID, !0),
        GlobalData.optManager.ApplyProperties(T, o),
        GlobalData.optManager.AddToDirtyList(e),
        Collab.AllowMessage() &&
        (
          message = Collab.BuildMessage(ConstantData.CollabMessages.Table_FillSwimlane, d, !1)
        ),
        GlobalData.optManager.CompleteOperation(),
        !0
    }
  }
},



  ListManager.LM.prototype.Table_ApplyProperties = function (e, t, a, r) {
    var i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b,
      M,
      P,
      R,
      A,
      _,
      E,
      w,
      F = !1,
      v = [],
      G = !1,
      N = !1,
      k = [],
      U = {},
      J = ListManager.Table.CellFlags.SDT_F_Select,
      x = ListManager.Table.CellFlags.SDT_F_SilentF;
    if (null != (u = e.GetTable(!0))) {
      if (
        i = GlobalData.optManager.Table_GetActiveID() !== e.BlockID,
        c = u.rows.length,
        p = u.cols.length,
        (!i || r) &&
        t.StyleRecord &&
        (t.StyleRecord.Line || t.StyleRecord.hline || t.StyleRecord.vline)
      ) {
        for (
          t.StyleRecord.Line ? (t.StyleRecord.Line, t.StyleRecord.Line) : (t.StyleRecord.hline, t.StyleRecord.vline),
          T = 0,
          u.minht = 0,
          n = 0;
          n < c;
          n++
        ) {
          for (l = u.rows[n], L = 0, o = 0; o < l.ncells; o++) d = (s = u.cells[l.start + o]).hdisp,
            D = s.vdisp,
            g = T - s.frame.y,
            s.frame.y += g,
            s.trect.y += g,
            l.selected &&
            (
              a.StyleRecord &&
              a.StyleRecord.hline &&
              (a.StyleRecord.Line = a.StyleRecord.hline),
              U.Line = s.hline,
              y = GlobalData.optManager.ApplyColorFilter(a, null, U, e.colorfilter),
              this.ApplyProperties(y.StyleRecord.Line, s.hline),
              F = !0,
              n < c - 1 &&
              (
                s.hdisp = this.Table_GetGridLineThickness(s.hline),
                s.hdisp != d &&
                (
                  g = s.hdisp - d,
                  s.trect.height -= g,
                  s.trect.height < s.textht &&
                  (
                    (h = s.textht - s.trect.height) > L &&
                    (L = h),
                    s.trect.height = s.textht,
                    s.frame.height += h,
                    G = !0
                  ),
                  g < 0 &&
                  (
                    I = s.sizedim.height - u.tmargin.top - u.tmargin.bottom - s.hdisp,
                    s.textht > I &&
                    (I = s.textht),
                    I < s.trect.height &&
                    (
                      (h = I - s.trect.height) < g &&
                      (h = g),
                      s.frame.height += h,
                      s.trect.height += h,
                      h < L &&
                      (L = h),
                      G = !0
                    )
                  )
                )
              )
            ),
            (S = u.cols[s.colindex]).selected &&
            (
              F = !0,
              a.StyleRecord &&
              a.StyleRecord.vline &&
              (a.StyleRecord.Line = a.StyleRecord.vline),
              U.Line = s.vline,
              y = GlobalData.optManager.ApplyColorFilter(a, null, U, e.colorfilter),
              this.ApplyProperties(y.StyleRecord.Line, s.vline),
              s.colindex < p - 1 &&
              (
                S.vline = s.vline,
                s.vdisp = this.Table_GetGridLineThickness(s.vline),
                s.vdisp != D &&
                (
                  m = s.vdisp - D,
                  S.vdisp = s.vdisp,
                  s.trect.width -= m,
                  s.DataID >= 0 &&
                  v.push(l.start + o),
                  s.trect.width < s.minwd &&
                  (
                    C = s.minwd - s.trect.width,
                    k[s.colindex] ? C > k[s.colindex] &&
                      (k[s.colindex] = C) : k[s.colindex] = C,
                    N = !0
                  ),
                  m < 0 &&
                  (
                    A = s.sizedim.width - u.tmargin.left - u.tmargin.right - S.vdisp,
                    e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
                    s.textwd > A &&
                    (A = s.textwd),
                    A < s.trect.width &&
                    (
                      (C = A - s.trect.width) < m &&
                      (C = m),
                      k[s.colindex] ? C < k[s.colindex] &&
                        (k[s.colindex] = C) : k[s.colindex] = C,
                      N = !0,
                      s.DataID >= 0 &&
                      v.push(l.start + o)
                    )
                  )
                )
              )
            );
          l.frame.y = T,
            l.frame.height += L,
            u.minht += l.textht + s.hdisp + u.tmargin.top + u.tmargin.bottom,
            T += l.frame.height
        }
        if (N) {
          for (R = k.length, _ = u.cols, n = 0; n < R; n++) k[n] &&
            (
              this.theActionTable = u,
              this.Table_GrowColumn(e, u, n, k[n], e.TextGrow, !0, !1, !1),
              this.theActionTable = null
            );
          for (n = 0; n < p; n++) _[n].selected &&
            (u.cols[n].selected = !0)
        }
        if (u.ht = T, v.length) for (_ = u.cols, this.Table_ReformatText(e, u, 0, 0, v), n = 0; n < p; n++) _[n].selected &&
          (u.cols[n].selected = !0);
        if (G) for (n = 0; n < p; n++) for (b = (S = u.cols[n]).segments.length, P = 0; P < b; P++) (M = S.segments[P]).y = u.rows[M.rowstart].frame.y,
          M.bottom = u.rows[M.rowend].frame.y + u.rows[M.rowend].frame.height;
        if (G || N) {
          var O = $.extend(!0, {
          }, e.trect);
          O.width = u.wd,
            O.height = u.ht,
            e.TRectToFrame(O, !0),
            this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE)
        }
      }
      if (
        F &&
        (t.StyleRecord.Line = null),
        r &&
        (i = !0),
        t.StyleRecord &&
        t.StyleRecord.Fill
      ) {
        for (n = 0; n < c; n++) for (l = u.rows[n], o = 0; o < l.ncells; o++) if (
          s = u.cells[l.start + o],
          !i &&
            (s.flags & x) > 0 ? (w = this.Table_GetJoinedCellParent(u, s.colindex, n)) &&
          (E = (u.cells[w.cellindex].flags & J) > 0) : E = i ||
          (s.flags & J) > 0,
          E
        ) {
          if (
            U.Fill = s.fill,
            t.StyleRecord.Name &&
            (s.stylename = t.StyleRecord.Name),
            y = GlobalData.optManager.ApplyColorFilter(a, null, U, e.colorfilter),
            e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
            s.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
            y.StyleRecord &&
            y.StyleRecord.Fill &&
            y.StyleRecord.Fill.Paint &&
            y.StyleRecord.Fill.Paint.Color
          ) {
            var B = {
              Fill: s.fill
            };
            GlobalData.optManager.GanttStoreStyleExceptions(s.datarecordID, B, y.StyleRecord.Fill)
          }
          s.childcontainer >= 0 ? (f = this.GetObjectPtr(s.childcontainer, !0)) &&
            (
              this.ApplyProperties(y.StyleRecord.Fill, f.StyleRecord.Fill),
              this.ApplyProperties(y.StyleRecord.Fill, s.fill),
              this.AddToDirtyList(s.childcontainer)
            ) : this.ApplyProperties(y.StyleRecord.Fill, s.fill)
        }
        this.Table_BuildFills(e, u, null),
          R = u.fills.length;
        var H,
          V = 0,
          j = 0,
          z = !0;
        for (n = 0; n < R; n++) {
          if (
            u.fills[n].fill.Paint.FillType === ConstantData.FillTypes.SDFILL_TRANSPARENT ||
            1 != u.fills[n].fill.Paint.Opacity
          ) {
            V = n,
              z = !1;
            break
          } (H = u.fills[n].list.length) > j &&
            (j = H, V = n)
        }
        t.StyleRecord.Fill = Utils1.DeepCopy(u.fills[V].fill),
          z ? u.fills.splice(V, 1) : t.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT
      }
    }
  }

ListManager.LM.prototypeTable_PasteFormat = function (e, t, a) {
  this.CloseEdit(!0);
  var r = this.GetObjectPtr(e, !0);
  if (null != r) {
    var i = r.GetTable(!0);
    if (null != i) {
      var n,
        o,
        s,
        l,
        S,
        c;
      Collab.AllowMessage() &&
        (
          Collab_Data = {
            BlockID: e
          },
          Collab_Data.FormatPainterMode = this.FormatPainterMode,
          Collab_Data.FormatPainterStyle = Utils1.DeepCopy(this.FormatPainterStyle),
          Collab_Data.FormatPainterText = Utils1.DeepCopy(this.FormatPainterText),
          Collab_Data.FormatPainterParaFormat = Utils1.DeepCopy(this.FormatPainterParaFormat),
          Collab.BuildMessage(
            ConstantData.CollabMessages.Table_PasteFormat,
            Collab_Data,
            !1
          )
        );
      var u = ListManager.Table.CellFlags.SDT_F_Select;
      for (n = i.rows.length, l = 0; l < n; l++) for (o = i.rows[l], S = 0; S < o.ncells; S++) s = i.cells[o.start + S],
        (a || s.flags & u) &&
        (o.selected = !0, i.cols[s.colindex].selected = !0);
      var p = {};
      t.vline &&
        (p.vline = t.vline, null == t.hline && (p.hline = t.vline)),
        t.hline &&
        (p.hline = t.hline, null == t.vline && (p.vline = t.hline)),
        t.Fill &&
        (p.Fill = t.Fill);
      var d = {};
      for (
        d.StyleRecord = p,
        this.Table_ApplyProperties(r, d, d, a),
        d.StyleRecord.Fill &&
        (r.StyleRecord.Fill = d.StyleRecord.Fill),
        l = 0;
        l < n;
        l++
      ) (o = i.rows[l]).selected = !1;
      for (c = i.cols.length, l = 0; l < c; l++) i.cols[l].selected = !1;
      this.Table_ChangeTextAttributes(
        r,
        this.FormatPainterText,
        t.Text,
        t.just,
        this.FormatPainterParaFormat,
        t.vjust,
        null,
        a
      ),
        this.AddToDirtyList(r.BlockID),
        this.SetLinkFlag(r.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        this.CompleteOperation()
    }
  }
}

ListManager.LM.prototypeTable_ChangeTextMargin = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b = [],
    M = !1,
    P = !1,
    R = [];
  ListManager.Table.CellFlags.SDT_F_Select,
    ListManager.Table.CellFlags.SDT_F_SilentF;
  if (null == (l = e.GetTable(!0))) return !1;
  if (t === l.tmargin.left) return !1;
  for (
    c = t - l.tmargin.left,
    l.tmargin.left = t,
    l.tmargin.right = t,
    l.tmargin.top = t,
    l.tmargin.bottom = t,
    s = l.rows.length,
    S = l.cols.length,
    m = 0,
    l.minht = 0,
    a = 0;
    a < s;
    a++
  ) {
    for (n = l.rows[a], g = 0, r = 0; r < n.ncells; r++) u = m - (i = l.cells[n.start + r]).frame.y,
      i.frame.y += u,
      i.trect.y += u,
      i.flags & ListManager.Table.CellFlags.SDT_F_AllowMin ||
      (
        Utils2.InflateRect(i.trect, - c, - c),
        u = 2 * c,
        i.trect.height < i.textht &&
        (
          (p = i.textht - i.trect.height) > g &&
          (g = p),
          i.trect.height = i.textht,
          i.frame.height += p,
          M = !0
        ),
        u <= 0 &&
        (
          h = i.sizedim.height - l.tmargin.top - l.tmargin.bottom - i.hdisp,
          i.textht > h &&
          (h = i.textht),
          h < i.trect.height &&
          (
            (p = h - i.trect.height) < u &&
            (p = u),
            i.frame.height += p,
            i.trect.height += p,
            p < g &&
            (g = p),
            M = !0
          )
        ),
        o = l.cols[i.colindex],
        i.DataID >= 0 &&
        b.push(n.start + r),
        i.trect.width < i.minwd &&
        (
          D = i.minwd - i.trect.width,
          R[i.colindex] ? D > R[i.colindex] &&
            (R[i.colindex] = D) : R[i.colindex] = D,
          P = !0
        ),
        (d = 2 * c) < 0 &&
        (
          I = i.sizedim.width - l.tmargin.left - l.tmargin.right - o.vdisp,
          e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
          i.textwd > I &&
          (I = i.textwd),
          I < i.trect.width &&
          (
            (D = I - i.trect.width) < d &&
            (D = d),
            R[i.colindex] ? D < R[i.colindex] &&
              (R[i.colindex] = D) : R[i.colindex] = D,
            P = !0
          )
        )
      );
    n.frame.y = m,
      n.frame.height += g,
      l.minht += n.textht + i.hdisp + l.tmargin.top + l.tmargin.bottom,
      m += n.frame.height
  }
  if (P) {
    for (L = R.length, T = l.cols, a = 0; a < L; a++) R[a] &&
      (
        this.theActionTable = l,
        this.Table_GrowColumn(e, l, a, R[a], e.TextGrow, !0, !1, !1),
        this.theActionTable = null
      );
    for (a = 0; a < S; a++) T[a].selected &&
      (l.cols[a].selected = !0)
  }
  if (l.ht = m, b.length) for (T = l.cols, this.Table_ReformatText(e, l, 0, 0, b), a = 0; a < S; a++) T[a].selected &&
    (l.cols[a].selected = !0);
  if (M) for (a = 0; a < S; a++) for (C = (o = l.cols[a]).segments.length, f = 0; f < C; f++) (y = o.segments[f]).y = l.rows[y.rowstart].frame.y,
    y.bottom = l.rows[y.rowend].frame.y + l.rows[y.rowend].frame.height;
  if (M || P) {
    var A = $.extend(!0, {
    }, e.trect);
    A.width = l.wd,
      A.height = l.ht,
      e.TRectToFrame(A, !0),
      this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE)
  }
  return !0
}

ListManager.LM.prototypeTable_JoinCells = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = !1,
    g = - 1,
    h = ListManager.Table.CellFlags.SDT_F_Select,
    m = !1,
    C = GlobalData.optManager.Table_GetActiveID();
  if (!(C < 0)) {
    if (!a) {
      var y = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
      if (y && y.theActiveTextEditObjectID >= 0) return
    }
    var f = this.GetObjectPtr(C, !1);
    if (null != f) {
      var L = f.GetTable(!1);
      if (null != L) {
        var I = this.svgObjectLayer.GetElementByID(f.BlockID);
        for (
          a &&
          Collab.IsSecondary() &&
          a.EditorID === Collab.EditorID &&
          (m = !0),
          l = L.rows.length,
          s = 0;
          s < l;
          s++
        ) for (u = L.rows[s], S = 0; S < u.ncells; S++) (c = L.cells[u.start + S]).flags & h &&
          (
            m &&
            c.DataID >= 0 &&
            (
              (
                d = I.GetElementByID(ConstantData.SVGElementClass.TEXT, c.DataID)
              ) &&
              I.RemoveElement(d),
              this.Table_AddSVGTextObject(f, this.svgDoc, I, c, u.start + S)
            ),
            void 0 === n ? (n = s, o = s + c.nextra, g = u.start + S) : (p = s + c.nextra) > o &&
              (o = p),
            void 0 === r ? (r = c.colindex, i = c.colindex) : (c.colindex < r && (r = c.colindex), c.colindex > i && (i = c.colindex))
          );
        if (i > r) {
          if (e) return !0;
          L = (f = this.GetObjectPtr(C, !0)).GetTable(!0),
            D = !0,
            this.Table_JoinHorizontally(f, L, r, i, n, o)
        } else if (o > n) {
          if (e) return !0;
          L = (f = this.GetObjectPtr(C, !0)).GetTable(!0),
            D = !0,
            this.Table_JoinVertically(f, L, r, n, o)
        }
        return D ? (
          L.select = g,
          this.AddToDirtyList(C),
          this.SetLinkFlag(f.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          t ||
          this.CompleteOperation(null),
          !0
        ) : void 0
      }
    }
  }
}

ListManager.LM.prototypeTable_JoinText = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l;
  return r.DataID >= 0 &&
    (
      n = e.GetElementByID(ConstantData.SVGElementClass.TEXT, r.DataID)
    ) &&
    (
      a ? (
        (o = n.GetRuntimeText()) &&
        (
          s = a.GetTextLength(),
          i ? a.SetText('\r', null, s, 0) : a.SetText(' ', null, s, 0),
          s++,
          a.SetRuntimeText(o, s, 0, !0),
          e.RemoveElement(n)
        ),
        (l = GlobalData.objectStore.GetObject(r.DataID)) &&
        l.Delete(),
        r.DataID = - 1
      ) : t &&
      (a = n, t.DataID = r.DataID, r.DataID = - 1),
      r.NoteID &&
      ((l = GlobalData.objectStore.GetObject(r.NoteID)) && l.Delete(), r.NoteID = - 1)
    ),
    a
}

ListManager.LM.prototypeTable_JoinVertically = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b = this.svgObjectLayer.GetElementByID(e.BlockID);
  for (u = (S = t.cols[a]).segments.length, n = 0; n < u; n++) if (!(r > (c = S.segments[n]).rowend)) {
    if (i < c.rowstart) break;
    if (
      p = r,
      c.rowstart > p &&
      (p = c.rowstart),
      d = i,
      c.rowend < d &&
      (d = c.rowend),
      g = !1,
      y = null,
      d > p
    ) {
      for (o = p; o <= d; o++) {
        for (
          l = t.rows[o],
          h = [],
          m = new ListManager.Table.RowSegment(0, 0, 0, 0),
          s = 0;
          s < l.ncells;
          s++
        ) (D = t.cells[l.start + s]).colindex === a &&
          (
            !1 === g ? (
              g = !0,
              f = D,
              I = l.start + s,
              D.nextra = d - p,
              D.DataID >= 0 &&
              (
                y = b.GetElementByID(ConstantData.SVGElementClass.TEXT, D.DataID)
              )
            ) : (
              D.flags = Utils2.SetFlag(D.flags, ListManager.Table.CellFlags.SDT_F_SilentF, !0),
              D.flags = Utils2.SetFlag(D.flags, ListManager.Table.CellFlags.SDT_F_Select, !1),
              D.fill = Utils1.DeepCopy(f.fill),
              D.DataID >= 0 &&
              (y = this.Table_JoinText(b, f, y, D, !0)),
              this.Table_ClearImage(D)
            ),
            o < d &&
            (
              D.flags = Utils2.SetFlag(D.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !0)
            )
          ),
          D.flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
          (
            m.start === s ? m.start = s + 1 : (
              m.ncells = s - m.start,
              m.x_end = D.frame.x,
              C = t.cells[l.start + m.start],
              m.x_start = C.frame.x,
              h.push(m),
              m = new ListManager.Table.RowSegment(s + 1, 0, 0, 0)
            )
          );
        m.start < s &&
          (
            m.ncells = s - m.start,
            m.x_end = l.frame.x + l.frame.width,
            C = t.cells[l.start + m.start],
            m.x_start = C.frame.x,
            h.push(m)
          ),
          l.segments = h
      }
      if (y) {
        L = y.GetRuntimeText();
        var M = this.GetObjectPtr(f.DataID, !0);
        M &&
          (M.runtimeText = L),
          b.RemoveElement(y),
          this.Table_AddSVGTextObject(e, this.svgDoc, b, f, I),
          T = t.select,
          t.select = I,
          this.Table_DeActivateText(e, t),
          t.select = T
      }
    }
  }
  this.Table_BuildFills(e, t, e.StyleRecord.Fill)
}

ListManager.LM.prototypeTable_JoinHorizontally = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A = this.svgObjectLayer.GetElementByID(e.BlockID);
  for (D = 0, C = t.rows.length, o = i; o <= n; o++) {
    for ((s = t.rows[o]).start -= D, p = [], y = null, l = 0; l < s.ncells; l++) if ((S = t.cells[s.start + l]).colindex === a) {
      for (
        T = S,
        b = s.start + l,
        S.DataID >= 0 &&
        (
          y = A.GetElementByID(ConstantData.SVGElementClass.TEXT, S.DataID)
        ),
        R = S.flags & ListManager.Table.CellFlags.SDT_F_FixedWidth,
        c = l + 1;
        c < s.ncells &&
        (u = t.cells[s.start + c]).colindex <= r;
        c++
      ) 0 == (u.flags & ListManager.Table.CellFlags.SDT_F_FixedWidth) &&
        (R = !1),
        S.frame.width += u.frame.width,
        S.sizedim.width = S.frame.width,
        S.trect.width = u.trect.x + u.trect.width - S.trect.x,
        R ||
        (
          S.flags = Utils2.SetFlag(S.flags, ListManager.Table.CellFlags.SDT_F_FixedWidth, !1)
        ),
        p.push(s.start + c),
        u.DataID >= 0 &&
        (
          this.Table_CellIsFixed(S) ? ((P = GlobalData.objectStore.GetObject(S.DataID)) && P.Delete(), S.DataID = - 1) : y = this.Table_JoinText(A, S, y, u, !1)
        ),
        this.Table_ClearImage(u);
      break
    }
    for (c = (d = p.length) - 1; c >= 0; c--) t.cells.splice(p[c], 1),
      s.ncells--;
    for (
      D += d,
      s.textht = 0,
      s.minwd = 0,
      h = [],
      m = new ListManager.Table.RowSegment(0, 0, 0, 0),
      l = 0;
      l < s.ncells;
      l++
    ) (S = t.cells[s.start + l]).textht > s.textht &&
      (s.textht = S.textht),
      g = S.minwd,
      e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
      S.textwd > g &&
      (g = S.textwd),
      g += t.tmargin.left + t.tmargin.right + S.vdisp,
      s.minwd += S.minwd,
      S.flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
      (
        m.start === l ? m.start = l + 1 : (
          m.ncells = l - m.start,
          m.x_end = S.frame.x,
          f = t.cells[s.start + m.start],
          m.x_start = f.frame.x,
          h.push(m),
          m = new ListManager.Table.RowSegment(l + 1, 0, 0, 0)
        )
      );
    m.start < l &&
      (
        m.ncells = l - m.start,
        m.x_end = s.frame.x + s.frame.width,
        f = t.cells[s.start + m.start],
        m.x_start = f.frame.x,
        h.push(m)
      ),
      s.segments = h,
      y &&
      (
        L = y.GetRuntimeText(),
        (I = this.GetObjectPtr(T.DataID, !0)) &&
        (I.runtimeText = L),
        A.RemoveElement(y),
        this.Table_AddSVGTextObject(e, this.svgDoc, A, T, b),
        (
          y = A.GetElementByID(ConstantData.SVGElementClass.TEXT, T.DataID)
        ) &&
        (
          M = y.GetTextMinDimensions(),
          T.textwd = M.width,
          T.textht = M.height
        )
      )
  }
  for (o = n + 1; o < C; o++) (s = t.rows[o]).start -= D;
  t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
    this.Table_BuildFills(e, t, e.StyleRecord.Fill),
    this.Table_ReformatText(e, t, i, n, null)
}

ListManager.LM.prototypeTable_ReformatText = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = [],
    C = {},
    y = {},
    f = {},
    L = this.svgObjectLayer.GetElementByID(e.BlockID),
    I = ListManager.Table.CellFlags.SDT_F_Select;
  if (null === i) for (o = a; o <= r; o++) for (n = t.rows[o], s = 0; s < n.ncells; s++) (l = t.cells[n.start + s]).flags & I &&
    m.push(n.start + s);
  else m = i;
  for (S = m.length, o = 0; o < S; o++) (l = t.cells[m[o]]).DataID >= 0 ? (y = this.Table_GetTextDimensions(L, l, t, e.TextGrow, null)) ||
    ((y = {}).width = l.minwd, y.height = l.minht) : (y.width = l.minwd, y.height = l.minht),
    p = this.Table_GetTRect(e, t, !0, m[o]),
    C.width = p.tsizedim.width,
    C.height = p.tsizedim.height,
    y.width < C.width &&
    (y.width = C.width),
    y.height < C.height &&
    (y.height = C.height),
    g = $.extend(!0, {
    }, e.trect),
    c = !Utils2.IsEqual(l.trect.height, y.height),
    u = !Utils2.IsEqual(l.trect.width, y.width),
    e.TextGrow === ConstantData.TextGrowBehavior.PROPORTIONAL ? c ? (
      D = L.GetElementByID(ConstantData.SVGElementClass.TEXT, l.DataID),
      h = $.extend(!0, {
      }, e.Frame),
      d = this.FitProp(e, D, y.height - l.trect.height, m[o]),
      D &&
      (y = D.GetTextMinDimensions()),
      h.width = d.x,
      h.height = d.y,
      e.UpdateFrame(h),
      f.width = e.trect.width - g.width,
      f.height = e.trect.height - g.height,
      d = this.Table_TextGrow(e, t, m[o], e.TextGrow, y, f)
    ) : u = !1 : (u || c) &&
    (d = this.Table_TextGrow(e, t, m[o], e.TextGrow, y, null)),
    (u || c) &&
    (
      g.width = d.x,
      g.height = d.y,
      e.TRectToFrame(g, !1),
      this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE)
    )
}

ListManager.LM.prototypeTable_GetJoinedCellFrame = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S;
  i = e.cells[t],
    o = this.Table_GetRow(e, t);
  var c = i.vdisp,
    u = i.hdisp;
  return n = new Rectangle(i.frame.x, i.frame.y, i.frame.width, i.frame.height),
    i.nextra &&
    (
      l = e.rows.length,
      (s = o + i.nextra) > l - 1 &&
      (s = l - 1),
      S = e.rows[s],
      n.height = S.frame.y + S.frame.height - i.frame.y,
      u = e.cells[S.start].hdisp
    ),
    r ? (n.width -= c, n.height -= u) : a &&
      (Utils2.SubRect(n, e.tmargin), n.width -= c, n.height -= u),
    n
}

ListManager.LM.prototypeTable_GetJoinedCellParent = function (e, t, a) {
  var r,
    i,
    n,
    o;
  e.rows.length;
  for (o = a - 1; o >= 0; o--) for (n = e.rows[o], r = 0; r < n.ncells; r++) if ((i = e.cells[n.start + r]).colindex === t) {
    if (i.nextra > 0) return {
      cellindex: n.start + r,
      rowindex: o
    };
    break
  }
  return null
}

ListManager.LM.prototypeTable_GetJoinedCellTextHt = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = [];
  for (
    r = e.cells[t],
    (
      i = a - (
        this.Table_GetJoinedCellFrame(e, t, !0, !1).height - r.trect.height
      )
    ) < (n = r.minht) &&
    (i = n),
    o = a - i,
    p = 0,
    l = (s = this.Table_GetRow(e, t)) + 1;
    l <= s + r.nextra;
    l++
  ) for (u = e.rows[l], S = 0; S < u.ncells; S++) if ((c = e.cells[u.start + S]).colindex === r.colindex) {
    C.push(u.start + S),
      (n = c.minht + e.tmargin.top + e.tmargin.top + c.hdisp) < c.sizedim.height &&
      (n = c.sizedim.height),
      p += n;
    break
  }
  if (h = 0, d = r.nextra, (o -= p) <= 0) for (l = 0; l < d; l++) if ((c = e.cells[C[l]]).textht > c.minht) for (
    c.textht = c.minht,
    (u = e.rows[s + 1 + l]).textht = 0,
    S = 0;
    S < u.ncells;
    S++
  ) (m = e.cells[u.start + S]).textht > u.textht &&
    (u.textht = m.textht);
  for (; o > 0;) {
    if (
      (D = (c = e.cells[C[h]]).trect.height - c.minht) > 0 &&
      (D > o && (D = o), g = c.minht + D, o -= D, !Utils2.IsEqual(c.textht, g))
    ) for (c.textht = g, (u = e.rows[s + 1 + h]).textht = 0, S = 0; S < u.ncells; S++) (m = e.cells[u.start + S]).textht > u.textht &&
      (u.textht = m.textht);
    if (++h >= d) break
  }
  return i
}

ListManager.LM.prototypeTable_GetJoinedCellSizeDim = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s = {};
  a = e.cells[t],
    s.height = a.sizedim.height,
    s.width = a.sizedim.width;
  var l = this.Table_GetRow(e, t);
  if (a.nextra) for (i = l + 1; i <= l + a.nextra; i++) for (n = e.rows[i], o = 0; o < n.ncells; o++) if ((r = e.cells[n.start + o]).colindex === a.colindex) {
    s.height += r.sizedim.height;
    break
  }
  return s
}

ListManager.LM.prototypeTable_SplitCells = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = !1,
    D = ListManager.Table.CellFlags.SDT_F_Select,
    g = [],
    h = GlobalData.optManager.Table_GetActiveID();
  if (!(h < 0)) {
    Collab.IsProcessingMessage() ||
      this.DeactivateAllTextEdit(!1);
    var m = this.GetObjectPtr(h, !1);
    if (null != m) {
      var C = m.GetTable(!1);
      if (null != C) {
        for (s = C.rows.length, o = 0; o < s; o++) for (c = C.rows[o], l = 0; l < c.ncells; l++) (S = C.cells[c.start + l]).flags & D &&
          (
            void 0 === i ? (i = o, n = o + S.nextra) : (u = o + S.nextra) > n &&
              (n = u),
            void 0 === a ? (a = S.colindex, r = S.colindex) : (S.colindex < a && (a = S.colindex), S.colindex > r && (r = S.colindex)),
            S.nextra &&
            g.push(c.start + l)
          );
        if ((p = g.length) > 0) {
          if (e) return !0;
          for (C = (m = this.GetObjectPtr(h, !0)).GetTable(!0), d = !0, o = 0; o < p; o++) this.Table_SplitVertically(m, C, g[o]);
          this.Table_BuildFills(m, C, m.StyleRecord.Fill)
        } else {
          if (e) return !0;
          C = (m = this.GetObjectPtr(h, !0)).GetTable(!0),
            d = !0,
            this.Table_SplitHorizontally(m, C, i, n)
        }
        return d ? (
          this.AddToDirtyList(h),
          this.SetLinkFlag(m.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          t ||
          this.CompleteOperation(null),
          !0
        ) : void 0
      }
    }
  }
}

ListManager.LM.prototypeTable_SplitVertically = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = this.svgObjectLayer.GetElementByID(e.BlockID);
  if ((r = t.cells[a]).nextra) {
    for (
      r.flags = Utils2.SetFlag(r.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !1),
      l = this.Table_GetRow(t, a),
      c = t.rows.length,
      i = 0;
      i <= r.nextra;
      i++
    ) if ((S = l + i) <= c - 1) {
      for (
        o = t.rows[S],
        u = [],
        p = new ListManager.Table.RowSegment(0, 0, 0, 0),
        o.textht = 0,
        n = 0;
        n < o.ncells;
        n++
      ) (s = t.cells[o.start + n]).colindex === r.colindex &&
        (
          s.flags = Utils2.SetFlag(s.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !1),
          s.flags = Utils2.SetFlag(s.flags, ListManager.Table.CellFlags.SDT_F_SilentF, !1),
          s.DataID < 0 &&
          (s.textht = s.minht)
        ),
        s.textht > o.textht &&
        (o.textht = s.textht),
        s.flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
        (
          p.start === n ? p.start = n + 1 : (
            p.ncells = n - p.start,
            p.x_end = s.frame.x,
            d = t.cells[o.start + p.start],
            p.x_start = d.frame.x,
            u.push(p),
            p = new ListManager.Table.RowSegment(n + 1, 0, 0, 0)
          )
        );
      p.start < n &&
        (
          p.ncells = n - p.start,
          p.x_end = o.frame.x + o.frame.width,
          d = t.cells[o.start + p.start],
          p.x_start = d.frame.x,
          u.push(p)
        ),
        o.segments = u
    }
    if (r.nextra = 0, r.DataID >= 0) {
      o = t.rows[l];
      var L = f.GetElementByID(ConstantData.SVGElementClass.TEXT, r.DataID);
      if (L) {
        var I = L.GetTextMinDimensions();
        if (r.textht = I.height, r.textht > r.trect.height) {
          for (D = r.textht - r.trect.height, o.textht = 0, n = 0; n < o.ncells; n++) (s = t.cells[o.start + n]).trect.height += D,
            s.frame.height += D,
            s.textht > o.textht &&
            (o.textht = s.textht);
          for (o.frame.height += D, i = l + 1; i < c; i++) for ((o = t.rows[i]).frame.y += D, n = 0; n < o.ncells; n++) (s = t.cells[o.start + n]).trect.y += D,
            s.frame.y += D,
            s.textht > o.textht &&
            (o.textht = s.textht);
          for (g = t.cols.length, i = 0; i < g; i++) for (m = (y = t.cols[i]).segments.length, C = 0; C < m; C++) (h = y.segments[C]).y = t.rows[h.rowstart].frame.y,
            h.bottom = t.rows[h.rowend].frame.y + t.rows[h.rowend].frame.height;
          for (t.minht = 0, i = 0; i < c; i++) o = t.rows[i],
            s = t.cells[o.start],
            t.minht += o.textht + s.hdisp + t.tmargin.top + t.tmargin.bottom;
          t.ht += D,
            e.trect.height = t.ht,
            e.TRectToFrame(e.trect, !0)
        }
      }
    }
  }
}

ListManager.LM.prototypeTable_SplitHorizontally = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y = 0,
    f = ListManager.Table.CellFlags.SDT_F_Select;
  this.svgObjectLayer.GetElementByID(e.BlockID);
  for (i = a; i <= r; i++) {
    for ((n = t.rows[i]).start += y, p = !1, C = !1, m = !1, o = 0; o < n.ncells; o++) {
      if ((s = t.cells[n.start + o]).flags & f) {
        if (S = s.frame.x + s.frame.width / 2, (l = s.colindex) > 0) {
          if (
            l >= 3 &&
            (h = Math.floor((l + 1) / 2), t.cols[h - 1].x > s.frame.x && (l = h)),
            t.cols[l - 1].x > s.frame.x
          ) S = t.cols[l - 1].x,
            C = !0;
          else if (C || !m) {
            m ||
              C ||
              o !== n.ncells - 1 ||
              (m = !0, o = - 1);
            continue
          }
        } else if (n.ncells > 1) {
          if (!m) continue
        } else m = !0;
        c = Utils1.DeepCopy(s),
          o === n.ncells - 1 &&
          (s.vdisp = this.Table_GetGridLineThickness(s.vline), c.vdisp = 0),
          this.Table_ClearCell(c),
          c.textwd = 0,
          c.textht = 0,
          c.frame.x = S,
          c.frame.width = s.frame.x + s.frame.width - c.frame.x,
          c.trect.x = c.frame.x + t.tmargin.left,
          c.trect.width = c.frame.width - t.tmargin.left - t.tmargin.right - c.vdisp,
          c.uniqueid = ++t.tunique,
          c.sizedim.width = c.frame.width,
          s.frame.width = c.frame.x - s.frame.x,
          s.sizedim.width = s.frame.width,
          s.trect.width = s.frame.width - t.tmargin.left - t.tmargin.right - s.vdisp,
          t.cells.splice(n.start + o + 1, 0, c),
          n.ncells++,
          y++,
          o++,
          p = !0,
          n.minwd += c.minwd + t.tmargin.left + t.tmargin.right + c.vdisp
      }
      m ||
        C ||
        o !== n.ncells - 1 ||
        (m = !0, o = - 1)
    }
    if (p) {
      for (
        d = [],
        D = new ListManager.Table.RowSegment(0, 0, 0, 0),
        o = 0;
        o < n.ncells;
        o++
      ) (s = t.cells[n.start + o]).flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
        (
          D.start === o ? D.start = o + 1 : (
            D.ncells = o - D.start,
            D.x_end = s.frame.x,
            g = t.cells[n.start + D.start],
            D.x_start = g.frame.x,
            d.push(D),
            D = new ListManager.Table.RowSegment(o + 1, 0, 0, 0)
          )
        );
      D.start < o &&
        (
          D.ncells = o - D.start,
          D.x_end = n.frame.x + n.frame.width,
          g = t.cells[n.start + D.start],
          D.x_start = g.frame.x,
          d.push(D)
        ),
        n.segments = d
    }
  }
  for (u = t.rows.length, i = r + 1; i < u; i++) (n = t.rows[i]).start += y;
  t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
    this.Table_BuildFills(e, t, e.StyleRecord.Fill),
    this.Table_ReformatText(e, t, a, r, null)
}

ListManager.LM.prototypeTable_DistributeRowandCols = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = ListManager.Table.CellFlags.SDT_F_Select,
    h = GlobalData.optManager.Table_GetActiveID();
  if (!(h < 0)) {
    Collab.IsProcessingMessage() ||
      this.DeactivateAllTextEdit(!1);
    var m = this.GetObjectPtr(h, !1);
    if (null != m && null != (r = m.GetTable(!1))) {
      for (s = r.rows.length, o = 0; o < s; o++) for (c = r.rows[o], l = 0; l < c.ncells; l++) (S = r.cells[c.start + l]).flags & g &&
        (
          void 0 === i ? (i = o, n = o + S.nextra) : (D = o + S.nextra) > n &&
            (n = D),
          d = 0 === l ? - 1 : r.cells[c.start + l - 1].colindex,
          void 0 === u ? (u = d, p = S.colindex) : (d < u && (u = d), S.colindex > p && (p = S.colindex))
        );
      if (t) return !0;
      r = (m = this.GetObjectPtr(h, !0)).GetTable(!0),
        e ? this.Table_DistributeRows(m, r, i, n) : this.Table_DistributeCols(m, r, u, p),
        a ||
        this.CompleteOperation(null)
    }
  }
}

ListManager.LM.prototypeTable_DistributeRows = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y;
  for (
    i = t.rows.length,
    void 0 !== a &&
    a !== r ||
    (a = 0, r = i - 1),
    n = t.rows[a],
    c = ((o = t.rows[r]).frame.y + o.frame.height - n.frame.y) / (r - a + 1),
    l = a;
    l <= r;
    l++
  ) S = t.rows[l],
    u = t.cells[S.start],
    (s = S.textht + t.tmargin.top + t.tmargin.bottom + u.hdisp) > c &&
    (c = s);
  for (l = a; l <= r; l++) {
    for (
      S = t.rows[l],
      void 0 === p ? (p = S.frame.y, d = 0) : (d = p - S.frame.y, S.frame.y = p),
      S.frame.height = c,
      D = 0;
      D < S.ncells;
      D++
    ) (u = t.cells[S.start + D]).frame.y += d,
      u.trect.y += d,
      g = u.frame.height - u.trect.height,
      u.frame.height = c,
      u.sizedim.height = c,
      u.trect.height = c - g;
    p = S.frame.y + S.frame.height
  }
  for (t.ht = 0, l = 0; l < i; l++) S = t.rows[l],
    t.ht += S.frame.height;
  for (h = t.cols.length, l = 0; l < h; l++) for (C = (m = t.cols[l]).segments.length, D = 0; D < C; D++) y = m.segments[D],
    S = t.rows[y.rowstart],
    y.y = S.frame.y,
    S = t.rows[y.rowend],
    y.bottom = S.frame.y + S.frame.height;
  this.Table_BuildFills(e, t, e.StyleRecord.Fill);
  var f = $.extend(!0, {
  }, e.trect);
  f.width = t.wd,
    f.height = t.ht,
    e.TRectToFrame(f, !0),
    this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
    this.AddToDirtyList(e.BlockID)
}

ListManager.LM.prototypeTable_DistributeCols = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S;
  if ((i = t.cols.length) <= 1) return !1;
  for (
    void 0 !== a &&
    r - a != 1 ||
    (a = - 1, r = i - 1),
    n = a < 0 ? 0 : t.cols[a].x,
    s = (t.cols[r].x - n) / (r - a),
    o = a + 1;
    o <= r;
    o++
  ) n = 0 === o ? 0 : t.cols[o - 1].x,
    (l = t.cols[o].minx - n) > s &&
    (s = l);
  for (o = a + 1; o <= r; o++) n = 0 === o ? 0 : t.cols[o - 1].x,
    S = s - (t.cols[o].x - n),
    this.theActionTable = t,
    this.Table_GrowColumn(e, t, o, S, e.TextGrow, !1, !1, !1),
    this.theActionTable = null;
  this.Table_BuildFills(e, t, e.StyleRecord.Fill);
  var c = $.extend(!0, {
  }, e.trect);
  c.width = t.wd,
    c.height = t.ht,
    e.TRectToFrame(c, !0),
    this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
    this.AddToDirtyList(e.BlockID)
}

ListManager.LM.prototypeTable_InsertRows = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = !1,
    h = ListManager.Table.CellFlags.SDT_F_Select,
    m = GlobalData.optManager.Table_GetActiveID();
  if (null != t && (m = t), !(m < 0)) {
    Collab.IsProcessingMessage() ||
      this.DeactivateAllTextEdit(!1);
    var C = this.GetObjectPtr(m, !1);
    if (null != C && null != (n = C.GetTable(!1))) {
      if (S = n.rows.length, null != t) n.select >= 0 ? (
        u = n.cells[n.select],
        this.Table_CellIsFixed(u) ? (o = S - 1, s = S - 1) : (s = o = this.Table_GetRow(n, n.select), g = !0)
      ) : (o = S - 1, s = S - 1);
      else for (l = 0; l < S; l++) for (p = n.rows[l], c = 0; c < p.ncells; c++) (u = n.cells[p.start + c]).flags & h &&
        (
          void 0 === o ? (o = l, s = l + u.nextra) : (d = l + u.nextra) > s &&
            (s = d),
          Collab.IsProcessingMessage() &&
          (u.flags = Utils2.SetFlag(u.flags, h, !1))
        );
      if (void 0 !== o) {
        if (r) return !0;
        if (
          n = (C = this.GetObjectPtr(m, !0)).GetTable(!0),
          this.Table_AddRows(C, n, o, s, e, !1, a),
          (null == t || g) &&
          !Collab.IsProcessingMessage()
        ) {
          for (l = o; l <= s; l++) for (p = n.rows[l], c = 0; c < p.ncells; c++) (u = n.cells[c + p.start]).flags = Utils2.SetFlag(u.flags, h, !1);
          e ? (D = o, d = s) : (D = s + 1, d = s + (s - o) + 1),
            p = n.rows[D],
            n.select = p.start,
            p = n.rows[d];
          var y = {
            x: (u = n.cells[p.start + p.ncells - 1]).frame.x + 1,
            y: u.frame.y + 1
          };
          this.Table_Select(
            C,
            n,
            y,
            !0,
            ConstantData.ActionTriggerType.TABLE_ROWSELECT,
            !1
          )
        }
        return C.sizedim.height = C.Frame.height,
          C.sizedim.width = C.Frame.width,
          this.AddToDirtyList(m),
          this.SetLinkFlag(C.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          i ||
          this.CompleteOperation(null),
          !0
      }
    }
  }
}

ListManager.LM.prototypeTable_InsertDeleteGroupRows = function (e, t, a, r, i) {
  var n,
    o = ListManager.Table.CellTypes,
    s = !1,
    l = !1,
    S = GlobalData.optManager.GetObjectPtr(t, !1);
  if (S) {
    var c = GlobalData.optManager.ContainerIsInCell(S);
    if (null == c) {
      var u = S.GetTable(!1);
      if (u) {
        var p = u.select;
        p < 0 &&
          (p = u.cells.length - 1),
          c = {
            obj: S,
            theTable: u,
            cellindex: p,
            cell: u.cells[p]
          }
      }
    }
    if (c) {
      switch (c.cell.celltype) {
        case o.SD_CT_ROWCOL_HEADER:
        case o.SD_CT_ROW_HEADER:
        case o.SD_CT_ROW_HEADER_COL_BODY:
          s = !0;
          break;
        case o.SD_CT_ROW_BODY_COL_HEADER:
        case o.SD_CT_ROW_BODY:
        case o.SD_CT_ROW_BODY_COL_BODY:
          l = !0
      }
      if (!l && !s) return !1;
      var d,
        D = this.Table_GetColumnCells(c.theTable, c.cell.colindex),
        g = D.length,
        h = - 1;
      for (n = 0; n < g; n++) if ((d = c.theTable.cells[D[n]]).uniqueid === c.cell.uniqueid) {
        h = n;
        break
      }
      if (!(h >= 0)) return !1;
      var m = !1;
      if (l) for (n = h; n >= 0; n--) {
        switch ((d = c.theTable.cells[D[n]]).celltype) {
          case o.SD_CT_ROWCOL_HEADER:
          case o.SD_CT_ROW_HEADER:
          case o.SD_CT_ROW_HEADER_COL_BODY:
            h = n,
              m = !0
        }
        if (m) break
      } else m = !0;
      var C = 0,
        y = !1;
      if (m) {
        var f = (d = c.theTable.cells[D[h]]).nextra;
        for (n = h + 1; n < g; n++) {
          switch ((d = c.theTable.cells[D[n]]).celltype) {
            case o.SD_CT_ROW_BODY_COL_HEADER:
            case o.SD_CT_ROW_BODY:
            case o.SD_CT_ROW_BODY_COL_BODY:
              C++;
              break;
            default:
              y = !0,
                C < f &&
                (C = f)
          }
          if (y) break
        }
        var L = {};
        if (
          d = c.theTable.cells[D[h]],
          GlobalData.optManager.Table_GetCellWithID(c.theTable, d.uniqueid, L),
          null != L.index
        ) {
          var I = this.Table_GetRow(c.theTable, L.index),
            T = I + C;
          if (!a) if (T - I + 1 >= c.theTable.rows.length) return !1;
          if (r) return !0;
          GlobalData.optManager.CloseEdit(!0);
          var b = this.GetObjectPtr(c.obj.BlockID, !0);
          return c.theTable = b.GetTable(!0),
            a ? this.Table_AddRows(b, c.theTable, I, T, e, !1, !1) : this.Table_RemoveRows(b, c.theTable, I, T),
            b.sizedim.height = b.Frame.height,
            b.sizedim.width = b.Frame.width,
            this.AddToDirtyList(c.obj.BlockID),
            this.SetLinkFlag(c.obj.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
            i ||
            this.CompleteOperation(null),
            !0
        }
      }
    }
  }
  return !1
}

ListManager.LM.prototypeTable_InsertDeleteGroupCols = function (e, t, a, r, i) {
  var n,
    o = ListManager.Table.CellTypes,
    s = !1,
    l = !1;
  Collab.IsProcessingMessage() ||
    this.DeactivateAllTextEdit(!1);
  var S = GlobalData.optManager.GetObjectPtr(t, !1);
  if (S) {
    var c,
      u = GlobalData.optManager.ContainerIsInCell(S);
    if (null == u) {
      if (c = S.GetTable(!1)) {
        var p = c.select;
        p < 0 &&
          (p = c.cells.length - 1),
          u = {
            obj: S,
            theTable: c,
            cellindex: p,
            cell: c.cells[p]
          }
      }
    } else c = u.theTable;
    if (u) {
      switch (u.cell.celltype) {
        case o.SD_CT_ROWCOL_HEADER:
        case o.SD_CT_COL_HEADER:
        case o.SD_CT_ROW_BODY_COL_HEADER:
          s = !0;
          break;
        case o.SD_CT_ROW_HEADER_COL_BODY:
        case o.SD_CT_COL_BODY:
        case o.SD_CT_ROW_BODY_COL_BODY:
          l = !0
      }
      if (!s && !l) return !1;
      var d,
        D,
        g = this.Table_GetRow(u.theTable, u.cellindex),
        h = c.rows[g],
        m = h.ncells,
        C = u.cellindex - h.start,
        y = !1,
        f = - 1,
        L = 0;
      if (l) for (n = C - 1; n >= 0; n--) switch (c.cells[h.start + n].celltype) {
        case o.SD_CT_ROWCOL_HEADER:
        case o.SD_CT_COL_HEADER:
        case o.SD_CT_ROW_BODY_COL_HEADER:
          y = !0,
            f = n
      } else y = !0,
        f = C;
      if (y) {
        var I = !1;
        for (n = f + 1; n < m; n++) {
          switch (u.theTable.cells[h.start + n].celltype) {
            case o.SD_CT_ROW_HEADER_COL_BODY:
            case o.SD_CT_COL_BODY:
            case o.SD_CT_ROW_BODY_COL_BODY:
              L++;
              break;
            default:
              I = !0
          }
          if (I) break
        }
        var T = c.cells[h.start + f + L].colindex - c.cells[h.start + f].colindex + 1;
        if (
          D = 0 === f ? - 1 : c.cells[h.start + f - 1].colindex,
          d = c.cells[h.start + f + L].colindex,
          !a &&
          T >= m
        ) return !1;
        if (r) return !0;
        var b = this.GetObjectPtr(u.obj.BlockID, !0);
        return u.theTable = b.GetTable(!0),
          a ? this.Table_AddCols(b, u.theTable, D, d, e, !1) : this.Table_RemoveCols(b, u.theTable, D, d),
          u.obj.objecttype === ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER &&
          GlobalData.optManager.Table_SortChildContainers(u.obj, c),
          b.sizedim.height = b.Frame.height,
          b.sizedim.width = b.Frame.width,
          this.AddToDirtyList(u.obj.BlockID),
          this.SetLinkFlag(u.obj.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          i ||
          this.CompleteOperation(null),
          !0
      }
      return !1
    }
  }
  return !1
}

ListManager.LM.prototypeTable_DeleteCell = function (e) {
  var t;
  e.DataID >= 0 &&
    (t = GlobalData.objectStore.GetObject(e.DataID), e.DataID = - 1, t && t.Delete()),
    e.NoteID >= 0 &&
    ((t = GlobalData.objectStore.GetObject(e.NoteID)) && t.Delete(), e.NoteID = - 1),
    this.Table_ClearImage(e),
    this.Table_ClearCell(e)
}

ListManager.LM.prototypeTable_ClearCell = function (e) {
  e.DataID = - 1,
    e.textht = e.minht,
    e.textwd = e.minwd,
    e.ImageURL = null,
    e.BlobBytesID = - 1,
    e.EMFBlobBytesID = - 1,
    e.Image = null,
    e.hyperlink = null,
    e.ExpandedViewID = - 1,
    this.GanttGetFieldName(e.celltype) ||
    (e.datarecordID = - 1),
    e.NoteID = - 1
}

ListManager.LM.prototypeTable_CopyContainer = function (e, t, a, r) {
  var i = gContainerManager.DuplicateShape(t.childcontainer, !0, !1, !1);
  this.PutBehindObject(t.childcontainer, i),
    this.AddToDirtyList(i);
  var n = {
    x: 0,
    y: 0
  };
  if (r) {
    var o = t.childcontainer;
    GlobalData.optManager.UpdateHook(
      i,
      - 1,
      e.BlockID,
      ConstantData.HookPts.SED_KCTL,
      n,
      t.uniqueid
    ),
      GlobalData.optManager.UpdateHook(o, 0, e.BlockID, ConstantData.HookPts.SED_KCTL, n, a.uniqueid),
      a.childcontainer = o,
      t.childcontainer = i
  } else a.childcontainer = i,
    GlobalData.optManager.UpdateHook(
      i,
      - 1,
      e.BlockID,
      ConstantData.HookPts.SED_KCTL,
      n,
      a.uniqueid
    );
  var s = GlobalData.optManager.GetObjectPtr(i, !0);
  s.flags = Utils2.SetFlag(s.flags, ConstantData.ObjFlags.SEDO_Obj1, !0)
},



  ListManager.LM.prototype.Table_AddRows = function (e, t, a, r, i, n, o) {
    var s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b,
      M,
      P,
      R,
      A,
      _,
      E = [],
      w = [],
      F = !1,
      v = ListManager.Table.CellFlags.SDT_F_Select,
      G = ListManager.Table.CellTypes,
      N = !1;
    for (I = 0, C = t.rows.length, T = 0, S = a; S <= r; S++) {
      for (
        g = S,
        S > C - 1 &&
        (g = C - 1),
        u = t.rows[g],
        D = Utils1.DeepCopy(u),
        w.push(D),
        S > C - 1 &&
        (D.start += E.length, T += u.frame.height, D.frame.y += T),
        D.textht = 0,
        D.minwd = 0,
        c = 0;
        c < u.ncells;
        c++
      ) {
        if (
          p = t.cells[u.start + c],
          (d = Utils1.DeepCopy(p)).frame.y += T,
          d.trect.y += T,
          (R = d.DataID) < 0 &&
          (
            e.objecttype == ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_ROWS ||
            e.objecttype == ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_GRID
          ) &&
          0 === c &&
          (R = t.cells[0].DataID),
          o &&
          d.celltype === G.SDT_CT_ROWREPEATER &&
          R >= 0
        ) {
          var k = this.GetObjectPtr(R, !1),
            U = Utils1.DeepCopy(k),
            J = new ListManager.TextObject(U);
          k = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, J),
            this.Table_ClearCell(d),
            d.DataID = k.ID
        } else this.Table_ClearCell(d);
        d.uniqueid = ++t.tunique,
          d.textht > D.textht &&
          (D.textht = d.textht),
          D.minwd += d.minwd + t.tmargin.left + t.tmargin.right + d.vdisp,
          n ? (
            d.nextra = 0,
            d.flags = Utils2.SetFlag(d.flags, ListManager.Table.CellFlags.SDT_F_SilentF, !1),
            d.flags = Utils2.SetFlag(d.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !1),
            p.childcontainer >= 0 &&
            this.Table_CopyContainer(e, p, d, !1)
          ) : p.nextra &&
            S + p.nextra > r ? (
            p.childcontainer >= 0 &&
            (N = !0),
            i ? (
              p.nextra = 0,
              p.flags = Utils2.SetFlag(d.flags, ListManager.Table.CellFlags.SDT_F_SilentF, !0),
              d.nextra++,
              p.childcontainer = - 1
            ) : (
              d.nextra = 0,
              d.flags = Utils2.SetFlag(d.flags, ListManager.Table.CellFlags.SDT_F_SilentF, !0),
              p.nextra++
            ),
            F = !0
          ) : p.flags & ListManager.Table.CellFlags.SDT_F_SilentF ? (f = this.Table_GetJoinedCellParent(t, p.colindex, S)) &&
            (
              0 == ((L = t.cells[f.cellindex]).flags & v) &&
              (L.nextra++, L.childcontainer >= 0 && (N = !0)),
              0 == (L.flags & v) &&
              (
                0 == (p.flags & ListManager.Table.CellFlags.SDT_F_SilentL) &&
                (
                  i ? d.flags = Utils2.SetFlag(d.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !0) : p.flags = Utils2.SetFlag(p.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !0)
                ),
                F = !0
              )
            ) : p.childcontainer >= 0 &&
          this.Table_CopyContainer(e, p, d, !1),
          E.push(d)
      }
      I += D.textht + p.hdisp + t.tmargin.top + t.tmargin.bottom
    }
    if (s = E.length, l = w.length, s > 0) {
      var x,
        O = s;
      for (
        i ? (h = (u = t.rows[a]).start, m = a) : (
          r > C - 1 &&
          (r = C - 1, O = t.rows[r].ncells),
          h = (u = t.rows[r]).start + u.ncells,
          m = r + 1
        ),
        y = t.rows[r].frame.y + t.rows[r].frame.height - t.rows[a].frame.y,
        S = 0;
        S < l;
        S++
      ) t.rows.splice(m + S, 0, w[S]);
      for (S = 0; S < s; S++) t.cells.splice(h + S, 0, E[S]);
      for (C = t.rows.length, S = r + 1; S < C; S++) for ((u = t.rows[S]).start += O, u.frame.y += y, c = 0; c < u.ncells; c++) (p = t.cells[u.start + c]).frame.y += y,
        p.trect.y += y;
      if (A = t.cells.length, N) for (S = 0; S < A; S++) (p = t.cells[S]).childcontainer >= 0 &&
        p.nextra > 0 &&
        (
          x = p.trect,
          x = this.Table_GetJoinedCellFrame(t, S, !0, !0),
          (_ = GlobalData.optManager.GetObjectPtr(p.childcontainer, !1)).Frame.height == x.height &&
          _.Frame.width == x.width ||
          this.Table_SizeChildContainer(p.childcontainer, x.width, x.height)
        );
      if (F) for (S = a; S <= r + l; S++) {
        for (
          u = t.rows[S],
          b = [],
          M = new ListManager.Table.RowSegment(0, 0, 0, 0),
          c = 0;
          c < u.ncells;
          c++
        ) (p = t.cells[u.start + c]).flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
          (
            M.start === c ? M.start = c + 1 : (
              M.ncells = c - M.start,
              M.x_end = p.frame.x,
              P = t.cells[u.start + M.start],
              M.x_start = P.frame.x,
              b.push(M),
              M = new ListManager.Table.RowSegment(c + 1, 0, 0, 0)
            )
          );
        M.start < c &&
          (
            M.ncells = c - M.start,
            M.x_end = u.frame.x + u.frame.width,
            P = t.cells[u.start + M.start],
            M.x_start = P.frame.x,
            b.push(M)
          ),
          u.segments = b
      }
      t.ht += y + T,
        t.minht += I,
        e.sizedim.height += I,
        t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
        this.Table_BuildFills(e, t, e.StyleRecord.Fill),
        (x = $.extend(!0, {
        }, e.trect)).width = t.wd,
        x.height = t.ht,
        e.TRectToFrame(x, !0),
        this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        this.AddToDirtyList(e.BlockID)
    }
  }

ListManager.LM.prototypeTable_CellIsFixed = function (e) {
  switch (e.celltype) {
    case ListManager.Table.CellTypes.SDT_CT_ICONCELL:
    case ListManager.Table.CellTypes.SDT_CT_ICONPHOTOCELL:
      return e.celltype
  }
  return !1
}

ListManager.LM.prototypeTable_ColIsFixed = function (e) {
  var t = ListManager.Table.CellFlags.SDT_F_FixedWidth;
  return 0 == (e.flags & t) &&
    (t = 0),
    t
}

ListManager.LM.prototypeTable_ColumnIsFixed = function (e, t) {
  var a,
    r,
    i,
    n,
    o = ListManager.Table.CellTypes;
  for (a = (r = e.cells[t]).colindex, n = e.cells.length, i = 0; i < n; i++) if ((r = e.cells[i]).colindex === a) switch (r.celltype) {
    case o.SDT_CT_SUBCOLHEADER:
    case o.SDT_CT_PREFIX_COUNT:
      return !1;
    case o.SDT_CT_ROWREPEATER:
      return !0
  }
  return !0
}

ListManager.LM.prototypeTable_AllowRemoveColumn = function () {
  var e = GlobalData.optManager.GetTargetSelect();
  if (e >= 0) {
    var t = this.GetObjectPtr(e, !1).GetTable(!1);
    if (this.Table_AutoGetMinCols(t) >= t.cols.length) return !1
  }
  return !0
}

ListManager.LM.prototypeTable_AutoGetMinRows = function (e) {
  var t,
    a,
    r,
    i,
    n = ListManager.Table.CellTypes,
    o = 1;
  for (a = e.rows.length, t = 0; t < a; t++) for (i = e.rows[t], r = 0; r < i.ncells; r++) if (e.cells[i.start + r].celltype === n.SDT_CT_ROWREPEATER) return o = t + 1;
  return o
}

ListManager.LM.prototypeTable_AllowRemoveColumn = function () {
  var e = GlobalData.optManager.GetTargetSelect();
  if (e >= 0) {
    var t = this.GetObjectPtr(e, !1).GetTable(!1);
    if (this.Table_AutoGetMinCols(t) >= t.cols.length) return !1
  }
  return !0
}

ListManager.LM.prototypeTable_AutoGetMinCols = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o = ListManager.Table.CellTypes,
    s = 1;
  for (r = e.rows.length, a = 0; a < r; a++) for (n = e.rows[a], i = 0; i < n.ncells; i++) switch ((t = e.cells[n.start + i]).celltype) {
    case o.SDT_CT_PREFIX_COUNT:
    case o.SDT_CT_SUBCOLHEADER:
      return s = t.colindex + 1
  }
  return s
}

ListManager.LM.prototypeTable_DeleteRows = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = - 1,
    D = 1,
    g = ListManager.Table.CellFlags.SDT_F_Select;
  if (d = GlobalData.optManager.Table_GetActiveID(), null != e && (d = e, p = !0), d < 0) return !1;
  Collab.IsProcessingMessage() ||
    this.DeactivateAllTextEdit(!1);
  var h = this.GetObjectPtr(d, !1);
  if (null == h) return !1;
  var m = h.GetTable(!1);
  if (null != m) {
    if (
      p &&
      (D = this.Table_AutoGetMinRows(m)),
      o = m.rows.length,
      (
        p ||
        h.objecttype === ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_ROWS ||
        h.objecttype === ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_GRID
      ) &&
      o <= D
    ) return !1;
    if (null != e) m.select >= 0 ? (
      l = m.cells[m.select],
      this.Table_CellIsFixed(l) ? (r = o - 1, i = o - 1) : i = r = this.Table_GetRow(m, m.select)
    ) : (r = o - 1, i = o - 1);
    else for (n = 0; n < o; n++) for (S = m.rows[n], s = 0; s < S.ncells; s++) (l = m.cells[S.start + s]).flags & g &&
      (void 0 === r ? (r = n, i = n + l.nextra) : (u = n + l.nextra) > i && (i = u));
    return c = o - (i - r + 1),
      r >= 0 &&
      (
        t ||
        (
          m = (h = this.GetObjectPtr(d, !0)).GetTable(!0),
          c <= 0 ? (h.SetTable(null), this.AddToDirtyList(h.BlockID)) : this.Table_RemoveRows(h, m, r, i),
          h.sizedim.height = h.Frame.height,
          h.sizedim.width = h.Frame.width,
          this.AddToDirtyList(d),
          this.SetLinkFlag(h.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          a ||
          this.CompleteOperation(null)
        ),
        !0
      )
  }
}

ListManager.LM.prototypeTable_RemoveRows = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T = 0,
    b = !1,
    M = [],
    P = [],
    R = [];
  for (h = 0, m = 0, n = a; n <= r; n++) {
    for (h += (l = t.rows[n]).frame.height, o = 0; o < l.ncells; o++) {
      if ((S = t.cells[l.start + o]).nextra) {
        if (n + S.nextra > r) for (d = t.rows[r + 1], s = 0; s < d.ncells; s++) (p = t.cells[d.start + s]).colindex === S.colindex &&
          (
            u = S.nextra - (r - n + 1),
            p.flags = Utils2.SetFlag(p.flags, ListManager.Table.CellFlags.SDT_F_SilentF, !1),
            S.DataID >= 0 &&
            (
              p.DataID = S.DataID,
              e.DataID === S.DataID &&
              (e.DataID = - 1),
              S.DataID = - 1,
              M.push(p.DataID)
            ),
            u > 0 ? (
              p.nextra = u,
              p.flags = Utils2.SetFlag(p.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !0),
              b = !0
            ) : (
              p.flags = Utils2.SetFlag(p.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !1),
              b = !0
            )
          )
      } else if (S.flags & ListManager.Table.CellFlags.SDT_F_SilentF) {
        var A = this.Table_GetJoinedCellParent(t, S.colindex, n);
        A &&
          A.rowindex < a &&
          (p = t.cells[A.cellindex]).nextra &&
          (
            p.nextra--,
            p.nextra <= 0 &&
            (
              p.flags = Utils2.SetFlag(p.flags, ListManager.Table.CellFlags.SDT_F_SilentL, !1),
              b = !0
            ),
            p.DataID >= 0 &&
            M.push(p.DataID)
          )
      }
      S.childcontainer >= 0 &&
        (
          R.push(S.childcontainer),
          I = this.GetObjectPtr(S.childcontainer, !1),
          this.ContainerAddtoDelete(I, R, !0),
          S.childcontainer = - 1
        ),
        S.DataID >= 0 &&
        ((i = GlobalData.objectStore.GetObject(S.DataID)) && i.Delete(), S.DataID = - 1),
        S.NoteID >= 0 &&
        ((i = GlobalData.objectStore.GetObject(S.NoteID)) && i.Delete(), S.NoteID = - 1),
        void 0 === c &&
        (c = l.start + o),
        T++
    }
    m += l.textht + S.hdisp + t.tmargin.top + t.tmargin.bottom
  }
  if (R.length && this.DeleteObjects(R, !1), T > 0) {
    for (t.select = - 1, D = t.rows.length, n = r + 1; n < D; n++) {
      for ((l = t.rows[n]).frame.y -= h, o = 0; o < l.ncells; o++) (S = t.cells[l.start + o]).frame.y -= h,
        S.trect.y -= h;
      l.start -= T
    }
    for (
      t.cells.splice(c, T),
      t.rows.splice(a, r - a + 1),
      t.ht -= h,
      t.minht -= m,
      e.sizedim.height -= m,
      e.sizedim.height < 0 &&
      (e.sizedim.height = 0),
      t.minwd = 0,
      D = t.rows.length,
      n = 0;
      n < D;
      n++
    ) if ((l = t.rows[n]).minwd > t.minwd && (t.minwd = l.minwd), b) {
      for (
        C = [],
        y = new ListManager.Table.RowSegment(0, 0, 0, 0),
        o = 0;
        o < l.ncells;
        o++
      ) (S = t.cells[l.start + o]).flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
        (
          y.start === o ? y.start = o + 1 : (
            y.ncells = o - y.start,
            y.x_end = S.frame.x,
            f = t.cells[l.start + y.start],
            y.x_start = f.frame.x,
            C.push(y),
            y = new ListManager.Table.RowSegment(o + 1, 0, 0, 0)
          )
        );
      y.start < o &&
        (
          y.ncells = o - y.start,
          y.x_end = l.frame.x + l.frame.width,
          f = t.cells[l.start + y.start],
          y.x_start = f.frame.x,
          C.push(y)
        ),
        l.segments = C
    }
    if (
      t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
      this.Table_BuildFills(e, t, e.StyleRecord.Fill),
      L = M.length,
      g = t.cells.length,
      L > 0
    ) {
      for (n = 0; n < g; n++) S = t.cells[n],
        M.indexOf(S.DataID) >= 0 &&
        P.push(n);
      this.Table_ReformatText(e, t, 0, 0, P)
    }
    var _ = $.extend(!0, {
    }, e.trect);
    _.width = t.wd,
      _.height = t.ht,
      e.TRectToFrame(_, !0),
      this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
      this.AddToDirtyList(e.BlockID)
  }
}

ListManager.LM.prototypeTable_InsertColumns = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T = !1,
    b = ListManager.Table.CellFlags.SDT_F_Select,
    M = !1,
    P = GlobalData.optManager.Table_GetActiveID();
  if (t && (P = t), !(P < 0)) {
    Collab.IsProcessingMessage() ||
      this.DeactivateAllTextEdit(!1);
    var R = this.GetObjectPtr(P, !1);
    if (null != R) {
      R.objecttype === ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_COLS &&
        0 !== R.RotationAngle &&
        (n || (e = !0), M = !0);
      var A = Utils1.DeepCopy(R.Frame);
      if (null != (c = R.GetTable(!1))) {
        if (null != t) c.select >= 0 ? (
          p = c.cells[c.select],
          this.Table_ColumnIsFixed(c, c.select) ? (o = (D = c.cols.length) - 2, s = D - 1) : (o = p.colindex - 1, s = p.colindex, T = !0)
        ) : (o = (D = c.cols.length) - 2, s = D - 1);
        else for (S = c.rows.length, l = 0; l < S; l++) for (d = c.rows[l], u = 0; u < d.ncells; u++) (p = c.cells[d.start + u]).flags & b &&
          (
            g = 0 === u ? - 1 : c.cells[d.start + u - 1].colindex,
            void 0 === o ? (o = g, s = p.colindex) : (
              g < o &&
              p.colindex < o &&
              (o = p.colindex),
              p.colindex > s &&
              (s = p.colindex)
            ),
            Collab.IsProcessingMessage() &&
            (p.flags = Utils2.SetFlag(p.flags, b, !1))
          );
        if (o >= - 1) {
          if (r) return !0;
          if (
            c = (R = this.GetObjectPtr(P, !0)).GetTable(!0),
            this.Table_AddCols(R, c, o, s, e, a),
            (null == t || T) &&
            !Collab.IsProcessingMessage()
          ) {
            for (
              e ? (g = o + 1, h = s) : (g = s + 1, h = s + (s - o)),
              c.select = - 1,
              L = (m = c.cols[g]).segments.length,
              y = m.segments[0].rowstart,
              f = m.segments[L - 1].rowend,
              L = (m = c.cols[h]).segments.length,
              (I = m.segments[0].rowstart) < y &&
              (y = I),
              (I = m.segments[L - 1].rowend) > f &&
              (f = I),
              l = y;
              l <= f;
              l++
            ) for (d = c.rows[l], u = 0; u < d.ncells; u++) (p = c.cells[u + d.start]).flags = Utils2.SetFlag(p.flags, b, !1),
              p.colindex === g &&
              c.select < 0 &&
              (c.select = u + d.start),
              p.colindex === h &&
              (C = p);
            if (C) {
              var _ = {
                x: C.frame.x + 1,
                y: C.frame.y + 1
              };
              this.Table_Select(
                R,
                c,
                _,
                !0,
                ConstantData.ActionTriggerType.TABLE_COLSELECT,
                !1
              )
            }
          }
          var E = 0;
          M &&
            (E = A.width - R.Frame.width, R.OffsetShape(E, 0)),
            R.sizedim.height = R.Frame.height,
            R.sizedim.width = R.Frame.width;
          var w = Utils1.DeepCopy(R.Frame);
          if (0 !== R.RotationAngle) {
            var F = GlobalData.optManager.svgDoc.CalculateRotatedOffsetForResize(A, w, R.RotationAngle),
              v = R.r.x + F.x;
            v < 0 &&
              (F.x -= v);
            var G = R.r.y + F.y;
            G < 0 &&
              (F.y -= G),
              R.OffsetShape(F.x, F.y)
          }
          this.AddToDirtyList(P),
            this.SetLinkFlag(R.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
            R.objecttype === ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER &&
            GlobalData.optManager.Table_SortChildContainers(R, c),
            i ||
            this.CompleteOperation(null)
        }
      }
    }
  }
}

ListManager.LM.prototypeTable_RowIsInColumn = function (e, t) {
  var a,
    r,
    i;
  for (i = e.segments.length, a = 0; a < i; a++) if (t >= (r = e.segments[a]).rowstart && t <= r.rowend) return !0;
  return !1
}

ListManager.LM.prototypeTable_AddCols = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _,
    E = [],
    w = [],
    F = !1,
    v = ListManager.Table.CellTypes;
  if (
    (o = t.cols[r]).segments.length,
    m = t.rows.length,
    e.objecttype === ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_COLS &&
    t.cells[0].celltype === v.SD_CT_SWIMLANE_TITLE &&
    (F = !0),
    !((C = a < 0 ? o.x : o.x - t.cols[a].x) <= 0)
  ) {
    for (t.minwd = 0, s = 0; s < m; s++) {
      if (
        y = !1,
        (S = t.rows[s]).frame.width += C,
        s > 0 &&
        (F = !1),
        !F &&
        this.Table_RowIsInColumn(o, s)
      ) {
        for (u = [], d = - 1, g = 0, l = 0; l < S.ncells; l++) if (
          c = t.cells[S.start + l],
          b = 0 === l ? - 1 : t.cells[S.start + l - 1].colindex,
          c.colindex > r
        ) c.frame.x += C,
          c.trect.x += C;
        else if (c.colindex > a) if (b < a) {
          if (
            c.frame.width += C,
            c.trect.width += C,
            c.sizedim.width += C,
            c.DataID >= 0 &&
            w.push(c.DataID),
            c.childcontainer >= 0
          ) {
            var G = c.trect;
            G = this.Table_GetJoinedCellFrame(t, S.start + l, !0, !0),
              this.Table_SizeChildContainer(c.childcontainer, G.width, G.height)
          }
        } else (p = Utils1.DeepCopy(c)).uniqueid = ++t.tunique,
          c.childcontainer >= 0 &&
          this.Table_CopyContainer(e, c, p, i),
          i ? this.Table_ClearCell(c) : (
            (_ = p.DataID) < 0 &&
            (
              e.objecttype == ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_COLS ||
              e.objecttype == ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_GRID
            ) &&
            0 === s &&
            (_ = t.cells[0].DataID),
            n &&
              p.celltype === v.SDT_CT_SUBCOLHEADER &&
              _ >= 0 ? (
              P = this.GetObjectPtr(_, !1),
              M = Utils1.DeepCopy(P),
              R = new ListManager.TextObject(M),
              P = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, R),
              this.Table_ClearCell(p),
              p.DataID = P.ID
            ) : this.Table_ClearCell(p)
          ),
          u.push(p),
          d < 0 &&
          (d = S.start + l),
          D = S.start + l + 1,
          g += c.frame.width;
        h = u.length;
        var N = D;
        for (l = 0; l < h; l++) u[l].frame.x += g,
          u[l].trect.x += g,
          t.cells.splice(N + l, 0, u[l]);
        for (S.ncells += h, l = s + 1; l < m; l++) t.rows[l].start += h
      } else for (l = 0; l < S.ncells; l++) if ((c = t.cells[S.start + l]).colindex >= r) if (y) c.frame.x += C,
        c.trect.x += C;
      else if (
        c.frame.width += C,
        c.trect.width += C,
        c.sizedim.width += C,
        y = !0,
        c.DataID >= 0 &&
        w.push(c.DataID),
        c.childcontainer >= 0
      ) {
        G = c.trect;
        G = this.Table_GetJoinedCellFrame(t, S.start + l, !0, !0),
          this.Table_SizeChildContainer(c.childcontainer, G.width, G.height)
      }
      for (
        S.textht = 0,
        S.minwd = 0,
        L = [],
        f = new ListManager.Table.RowSegment(0, 0, 0, 0),
        l = 0;
        l < S.ncells;
        l++
      ) (c = t.cells[S.start + l]).textht > S.textht &&
        (S.textht = c.textht),
        I = c.minwd,
        e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
        c.textwd > I &&
        (I = c.textwd),
        I += t.tmargin.left + t.tmargin.right + c.vdisp,
        S.minwd += c.minwd,
        c.flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
        (
          f.start === l ? f.start = l + 1 : (
            f.ncells = l - f.start,
            f.x_end = c.frame.x,
            T = t.cells[S.start + f.start],
            f.x_start = T.frame.x,
            L.push(f),
            f = new ListManager.Table.RowSegment(l + 1, 0, 0, 0)
          )
        );
      f.start < l &&
        (
          f.ncells = l - f.start,
          f.x_end = S.frame.x + S.frame.width,
          T = t.cells[S.start + f.start],
          f.x_start = T.frame.x,
          L.push(f)
        ),
        S.segments = L,
        S.minwd >= t.minwd &&
        (t.minwd = S.minwd)
    }
    if (
      t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
      t.wd += C,
      e.sizedim.width += C,
      this.Table_BuildFills(e, t, e.StyleRecord.Fill),
      h = w.length,
      A = t.cells.length,
      h > 0
    ) {
      for (s = 0; s < A; s++) c = t.cells[s],
        w.indexOf(c.DataID) >= 0 &&
        E.push(s);
      this.Table_ReformatText(e, t, 0, 0, E)
    } (G = $.extend(!0, {
    }, e.trect)).width = t.wd,
      G.height = t.ht,
      e.TRectToFrame(G, !0),
      this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
      this.AddToDirtyList(e.BlockID)
  }
}

ListManager.LM.prototypeTable_SetNumberofColumns = function (e, t, a, r) {
  var i = t.cols.length;
  if (a !== i) {
    var n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L;
    if (o = t.rows.length, (s = i - a) > 0) for (n = o - 1; n >= 0; n--) {
      for (u = t.rows[n], S = i - 1; S >= a; S--) p = u.start + S,
        c = t.cells[p],
        this.Table_DeleteCell(c),
        t.cells.splice(p, 1),
        u.ncells--;
      u.start -= n * s
    } else if (s < 0) for (l = - s, n = o - 1; n >= 0; n--) {
      for (
        p = (u = t.rows[n]).ncells > 1 ? u.start + u.ncells - 2 : u.start + u.ncells - 1,
        c = t.cells[p],
        (L = Utils1.DeepCopy(c)).uniqueid = ++t.tunique,
        this.Table_ClearCell(L),
        S = 0;
        S < l;
        S++
      ) t.cells.splice(p, 0, L),
        (L = Utils1.DeepCopy(L)).uniqueid = ++t.tunique;
      u.start += n * l,
        u.ncells += l
    }
    for (
      d = t.wd / a,
      t.cols[0].fixed &&
      (d = (t.wd - t.cols[0].x) / (a - 1)),
      n = 0;
      n < o;
      n++
    ) {
      for (u = t.rows[n], D = 0, S = 0; S < u.ncells; S++) (c = t.cells[u.start + S]).flags & ListManager.Table.CellFlags.SDT_F_FixedWidth ? D = c.frame.x + c.frame.width : (
        g = D - c.frame.x,
        h = d - c.frame.width,
        c.frame.x = D,
        c.trect.x += g,
        c.frame.width = d,
        c.trect.width += h,
        c.sizedim.width = d,
        D += d
      );
      for (
        u.frame.width = t.wd,
        u.textht = 0,
        u.minwd = 0,
        m = [],
        C = new ListManager.Table.RowSegment(0, 0, 0, 0),
        S = 0;
        S < u.ncells;
        S++
      ) (c = t.cells[u.start + S]).textht > u.textht &&
        (u.textht = c.textht),
        y = c.minwd,
        e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
        c.textwd > y &&
        (y = c.textwd),
        y += t.tmargin.left + t.tmargin.right + c.vdisp,
        u.minwd += c.minwd,
        c.flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
        (
          C.start === S ? C.start = S + 1 : (
            C.ncells = S - C.start,
            C.x_end = c.frame.x,
            f = t.cells[u.start + C.start],
            C.x_start = f.frame.x,
            m.push(C),
            C = new ListManager.Table.RowSegment(S + 1, 0, 0, 0)
          )
        );
      C.start < S &&
        (
          C.ncells = S - C.start,
          C.x_end = u.frame.x + u.frame.width,
          f = t.cells[u.start + C.start],
          C.x_start = f.frame.x,
          m.push(C)
        ),
        u.segments = m,
        u.minwd >= t.minwd &&
        (t.minwd = u.minwd)
    }
    t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
      this.Table_BuildFills(t, e.StyleRecord.Fill),
      this.AddToDirtyList(e.BlockID)
  }
}

ListManager.LM.prototypeTable_SetNumberofTitleColumns = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = ListManager.Table.CellTypes,
    g = null,
    h = 0;
  i = t.rows.length,
    p = t.cells.length;
  var m = 0;
  for (r = 0; r < p; r++) if ((l = t.cells[r]).celltype !== D.SD_CT_TIMELINE_ROWLABEL) {
    if (l.celltype !== D.SD_CT_TIMELINE_DATETITLE) break;
    m++
  } else h = 1;
  if (m === a) return !1;
  if (0 === m && a > 0) {
    S = t.rows[0];
    var C = Utils1.DeepCopy(S);
    t.rows.splice(0, 0, C);
    var y = C.frame.height;
    for (
      l = t.cells[0],
      (u = Utils1.DeepCopy(l)).uniqueid = ++t.tunique,
      this.Table_ClearCell(u),
      u.hdisp > 0 &&
      (
        d = u.hdisp,
        u.hline.Thickness = 0,
        u.hdisp = 0,
        u.frame.height -= d,
        u.trect.height -= d,
        C.frame.height -= d,
        y -= d
      ),
      h > 0 ? (
        (g = Utils1.DeepCopy(u)).uniqueid = ++t.tunique,
        g.flags = Utils2.SetFlag(g.flags, ListManager.Table.CellFlags.SDT_F_FixedWidth, !1),
        g.frame.x += g.frame.width,
        g.trect.x += g.frame.width,
        g.celltype = D.SD_CT_TIMELINE_DATETITLE
      ) : u.celltype = D.SD_CT_TIMELINE_DATETITLE,
      r = 0;
      r < p;
      r++
    ) (l = t.cells[r]).frame.y += y,
      l.trect.y += y;
    for (
      t.cells.splice(0, 0, u),
      null != g &&
      t.cells.splice(1, 0, g),
      C.ncells = 1 + h,
      i++,
      r = 1;
      r < i;
      r++
    ) (S = t.rows[r]).start += 1 + h,
      S.frame.y += y;
    if (
      t.ht += y,
      (f = Utils1.DeepCopy(e.trect)).height += y,
      e.TRectToFrame(f, !1),
      (m = 1) === a
    ) return !0
  } else if (m > 0 && 0 === a) {
    for (n = (S = t.rows[0]).ncells, r = 0; r < S.ncells; r++) l = t.cells[r],
      this.Table_DeleteCell(l);
    var f;
    y = S.frame.height;
    for (r = 0; r < p; r++) (l = t.cells[r]).frame.y -= y,
      l.trect.y -= y;
    for (
      t.cells.splice(0, n),
      t.rows.splice(0, 1),
      i = t.rows.length,
      r = 0;
      r < i;
      r++
    ) t.rows[r].start -= n,
      t.rows[r].frame.y -= y;
    return t.ht -= y,
      (f = Utils1.DeepCopy(e.trect)).height -= y,
      e.TRectToFrame(f, !1),
      !0
  }
  if (m > a) {
    for (d = m - a, S = t.rows[0], s = m - 1 + h; s >= a + h; s--) l = t.cells[s],
      this.Table_DeleteCell(l),
      t.cells.splice(s, 1),
      S.ncells--;
    for (r = 1; r < i; r++) (S = t.rows[r]).start -= d
  } else if (m < a) {
    for (
      o = a - m,
      (S = t.rows[0]).ncells += o,
      c = m + h,
      l = t.cells[h],
      (u = Utils1.DeepCopy(l)).uniqueid = ++t.tunique,
      u.celltype = D.SD_CT_TIMELINE_DATETITLE,
      this.Table_ClearCell(u),
      s = 0;
      s < o;
      s++
    ) t.cells.splice(c, 0, u),
      (u = Utils1.DeepCopy(u)).uniqueid = ++t.tunique,
      u.celltype = D.SD_CT_TIMELINE_DATETITLE;
    for (r = 1; r < i; r++) (S = t.rows[r]).start += o
  }
  return !0
}

ListManager.LM.prototypeTable_AlignTitleCellWithColumn = function (e, t, a) {
  var r = e.rows[0].ncells;
  if (t !== r - 1) {
    var i,
      n,
      o = e.cells[t],
      s = e.cols[a].x - (o.frame.x + o.frame.width);
    for (
      o.frame.width += s,
      o.trect.width += s,
      o.sizedim.width += s,
      o.colindex = a,
      n = t + 1;
      n < r;
      n++
    ) (i = e.cells[n]).frame.x += s,
      i.trect.x += s;
    i.frame.width -= s,
      i.trect.width -= s,
      i.sizedim.width -= s
  }
}

ListManager.LM.prototypeTable_SetNumberofColumns = function (e, t, a, r) {
  var i = t.cols.length;
  if (a !== i || r) {
    var n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b,
      M = ListManager.Table.CellTypes;
    o = t.rows.length,
      s = i - a,
      I = t.cells.length;
    var P = 0,
      R = 0;
    for (n = 0; n < I; n++) if ((c = t.cells[n]).celltype !== M.SD_CT_TIMELINE_ROWLABEL) {
      if (c.celltype !== M.SD_CT_TIMELINE_DATETITLE) break;
      R++
    } else 1;
    if (R > 0 && (P = 1), s > 0) {
      for (b = 0, n = o - 1; n >= P; n--) u = t.rows[n],
        (c = t.cells[u.start]).celltype === M.SD_CT_TIMELINE_LABELROW &&
        (b += s);
      for (n = o - 1; n >= P; n--) if (
        u = t.rows[n],
        (c = t.cells[u.start]).celltype !== M.SD_CT_TIMELINE_LABELROW
      ) {
        for (S = i - 1; S >= a; S--) p = u.start + S,
          c = t.cells[p],
          this.Table_DeleteCell(c),
          t.cells.splice(p, 1),
          u.ncells--;
        u.start -= (n - P) * s - b
      } else b -= s,
        u.start -= (n - P) * s - b
    } else if (s < 0) {
      for (l = - s, b = 0, n = o - 1; n >= P; n--) u = t.rows[n],
        (c = t.cells[u.start]).celltype === M.SD_CT_TIMELINE_LABELROW &&
        (b += l);
      for (n = o - 1; n >= P; n--) if (
        u = t.rows[n],
        (c = t.cells[u.start]).celltype !== M.SD_CT_TIMELINE_LABELROW
      ) {
        for (
          p = u.ncells > 1 ? u.start + u.ncells - 2 : u.start + u.ncells - 1,
          c = t.cells[p],
          (L = Utils1.DeepCopy(c)).uniqueid = ++t.tunique,
          this.Table_ClearCell(L),
          S = 0;
          S < l;
          S++
        ) t.cells.splice(p, 0, L),
          (L = Utils1.DeepCopy(L)).uniqueid = ++t.tunique;
        u.start += (n - P) * l - b,
          u.ncells += l
      } else b -= l,
        u.start += (n - P) * l - b
    }
    for (
      d = t.wd / a,
      t.cols[0].fixed &&
      (d = (t.wd - t.cols[0].x) / (a - 1)),
      n = 0;
      n < o;
      n++
    ) {
      for (u = t.rows[n], D = 0, S = 0; S < u.ncells; S++) (c = t.cells[u.start + S]).flags & ListManager.Table.CellFlags.SDT_F_FixedWidth ? D = c.frame.x + c.frame.width : (
        T = d,
        S === u.ncells - 1 &&
        P > 0 &&
        (0 === n || c.celltype === M.SD_CT_TIMELINE_LABELROW) &&
        (d = t.wd - D),
        g = D - c.frame.x,
        h = d - c.frame.width,
        c.frame.x = D,
        c.trect.x += g,
        c.frame.width = d,
        c.trect.width += h,
        c.sizedim.width = d,
        D += d,
        d = T
      );
      for (
        u.frame.width = t.wd,
        u.textht = 0,
        u.minwd = 0,
        m = [],
        C = new ListManager.Table.RowSegment(0, 0, 0, 0),
        S = 0;
        S < u.ncells;
        S++
      ) (c = t.cells[u.start + S]).textht > u.textht &&
        (u.textht = c.textht),
        y = c.minwd,
        e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
        c.textwd > y &&
        (y = c.textwd),
        y += t.tmargin.left + t.tmargin.right + c.vdisp,
        u.minwd += c.minwd,
        c.flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
        (
          C.start === S ? C.start = S + 1 : (
            C.ncells = S - C.start,
            C.x_end = c.frame.x,
            f = t.cells[u.start + C.start],
            C.x_start = f.frame.x,
            m.push(C),
            C = new ListManager.Table.RowSegment(S + 1, 0, 0, 0)
          )
        );
      C.start < S &&
        (
          C.ncells = S - C.start,
          C.x_end = u.frame.x + u.frame.width,
          f = t.cells[u.start + C.start],
          C.x_start = f.frame.x,
          m.push(C)
        ),
        u.segments = m,
        u.minwd >= t.minwd &&
        (t.minwd = u.minwd)
    }
    t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
      this.Table_BuildFills(e, t, e.StyleRecord.Fill),
      this.AddToDirtyList(e.BlockID)
  }
},




  ListManager.LM.prototype.Table_DeleteColumns = function (e, t, a, r) {
    var i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g = ListManager.Table.CellFlags.SDT_F_Select,
      h = GlobalData.optManager.Table_GetActiveID(),
      m = !1;
    if (null != e && (h = e, D = !0), !(h < 0)) {
      Collab.IsProcessingMessage() ||
        this.DeactivateAllTextEdit(!1);
      var C = this.GetObjectPtr(h, !1);
      if (null != C) {
        C.objecttype === ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_COLS &&
          0 !== C.RotationAngle &&
          (r || (left = !0), m = !0);
        var y = Utils1.DeepCopy(C.Frame);
        if (null != (l = C.GetTable(!1))) {
          if (s = l.rows.length, d = l.cols.length, D) if (d <= this.Table_AutoGetMinCols(l)) return;
          if (
            C.objecttype !== ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_COLS &&
            C.objecttype !== ConstantData.ObjectTypes.SD_OBJT_SWIMLANE_GRID ||
            1 !== d
          ) {
            if (null != e) l.select >= 0 ? this.Table_ColumnIsFixed(l, l.select) ? (i = d - 2, n = d - 1) : (i = (u = l.cells[l.select]).colindex - 1, n = u.colindex) : (i = d - 2, n = d - 1, m && (i = - 1, n = 0));
            else for (o = 0; o < s; o++) for (p = l.rows[o], S = 0; S < p.ncells; S++) (u = l.cells[p.start + S]).flags & g &&
              (
                c = 0 === S ? - 1 : l.cells[p.start + S - 1].colindex,
                void 0 === i ? (i = c, n = u.colindex) : (c < i && (i = u.colindex), u.colindex > n && (n = u.colindex))
              );
            if (i >= - 1) {
              if (t) return !0;
              l = (C = this.GetObjectPtr(h, !0)).GetTable(!0),
                d - (n - i) <= 0 ? C.SetTable(null) : this.Table_RemoveCols(C, l, i, n),
                C.sizedim.height = C.Frame.height,
                C.sizedim.width = C.Frame.width;
              var f = 0;
              m &&
                (f = y.width - C.Frame.width, C.OffsetShape(f, 0));
              var L = Utils1.DeepCopy(C.Frame);
              if (0 !== C.RotationAngle) {
                var I = GlobalData.optManager.svgDoc.CalculateRotatedOffsetForResize(y, L, C.RotationAngle);
                C.OffsetShape(I.x, I.y)
              }
              this.AddToDirtyList(h),
                this.SetLinkFlag(C.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
                a ||
                this.CompleteOperation(null)
            }
          }
        }
      }
    }
  }

ListManager.LM.prototypeTable_RemoveCols = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T = [],
    b = [],
    M = [];
  if (
    (i = t.cols[r]).segments.length,
    p = t.rows.length,
    !((d = a < 0 ? i.x : i.x - t.cols[a].x) <= 0)
  ) {
    for (n = 0; n < p; n++) {
      if (
        D = !1,
        (s = t.rows[n]).frame.width -= d,
        this.Table_RowIsInColumn(i, n)
      ) {
        for (S = - 1, c = 0, o = 0; o < s.ncells; o++) if (
          l = t.cells[s.start + o],
          y = 0 === o ? - 1 : t.cells[s.start + o - 1].colindex,
          l.colindex > r
        ) l.frame.x -= d,
          l.trect.x -= d;
        else if (l.colindex > a) if (y < a) {
          if (
            l.frame.width -= d,
            l.trect.width -= d,
            l.sizedim.width = l.frame.width,
            l.DataID >= 0 &&
            b.push(l.DataID),
            l.childcontainer >= 0
          ) {
            var P = l.trect;
            P = this.Table_GetJoinedCellFrame(t, s.start + o, !0, !0),
              this.Table_SizeChildContainer(l.childcontainer, P.width, P.height)
          }
        } else l.childcontainer >= 0 &&
          (
            M.push(l.childcontainer),
            L = this.GetObjectPtr(l.childcontainer, !1),
            this.ContainerAddtoDelete(L, M, !0),
            l.childcontainer = - 1
          ),
          l.DataID >= 0 &&
          (
            (I = GlobalData.objectStore.GetObject(l.DataID)) &&
            I.Delete(),
            e.DataID === l.DataID &&
            (e.DataID = - 1),
            l.DataID = - 1
          ),
          l.NoteID >= 0 &&
          ((I = GlobalData.objectStore.GetObject(l.NoteID)) && I.Delete(), l.NoteID = - 1),
          S < 0 &&
          (S = s.start + o),
          c++;
        for (t.cells.splice(S, c), s.ncells -= c, o = n + 1; o < p; o++) t.rows[o].start -= c
      } else for (o = 0; o < s.ncells; o++) if ((l = t.cells[s.start + o]).colindex >= r) if (D) l.frame.x -= d,
        l.trect.x -= d;
      else if (
        l.frame.width -= d,
        l.trect.width -= d,
        l.sizedim.width = l.frame.width,
        D = !0,
        l.DataID >= 0 &&
        b.push(l.DataID),
        l.childcontainer >= 0
      ) {
        P = l.trect;
        P = this.Table_GetJoinedCellFrame(t, s.start + o, !0, !0),
          this.Table_SizeChildContainer(l.childcontainer, P.width, P.height)
      }
      for (
        s.textht = 0,
        s.minwd = 0,
        h = [],
        t.minwd = 0,
        g = new ListManager.Table.RowSegment(0, 0, 0, 0),
        o = 0;
        o < s.ncells;
        o++
      ) (l = t.cells[s.start + o]).textht > s.textht &&
        (s.textht = l.textht),
        m = l.minwd,
        e.TextGrow !== ConstantData.TextGrowBehavior.VERTICAL &&
        l.textwd > m &&
        (m = l.textwd),
        m += t.tmargin.left + t.tmargin.right + l.vdisp,
        s.minwd += m,
        l.flags & ListManager.Table.CellFlags.SDT_F_SilentL &&
        (
          g.start === o ? g.start = o + 1 : (
            g.ncells = o - g.start,
            g.x_end = l.frame.x,
            C = t.cells[s.start + g.start],
            g.x_start = C.frame.x,
            h.push(g),
            g = new ListManager.Table.RowSegment(o + 1, 0, 0, 0)
          )
        );
      g.start < o &&
        (
          g.ncells = o - g.start,
          g.x_end = s.frame.x + s.frame.width,
          C = t.cells[s.start + g.start],
          g.x_start = C.frame.x,
          h.push(g)
        ),
        s.segments = h,
        s.minwd >= t.minwd &&
        (t.minwd = s.minwd)
    }
    if (
      M.length &&
      this.DeleteObjects(M, !1),
      t.cols = this.Table_BuildColumns(e, t, e.TextGrow),
      t.wd -= d,
      e.sizedim.width -= d,
      e.sizedim.width < 0 &&
      (e.sizedim.width = 0),
      this.Table_BuildFills(e, t, e.StyleRecord.Fill),
      u = b.length,
      f = t.cells.length,
      u > 0
    ) {
      for (n = 0; n < f; n++) l = t.cells[n],
        b.indexOf(l.DataID) >= 0 &&
        T.push(n);
      this.Table_ReformatText(e, t, 0, 0, T)
    } (P = $.extend(!0, {
    }, e.trect)).width = t.wd,
      P.height = t.ht,
      t.select = - 1,
      e.TRectToFrame(P, !0),
      this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
      this.AddToDirtyList(e.BlockID)
  }
}

ListManager.LM.prototypeTable_GetTextRect = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l = {
      right: 0,
      bottom: 0,
      left: e.wd,
      top: e.ht
    };
  a = e.cells.length;
  var S = e.cells[0].celltype === ListManager.Table.CellTypes.SD_CT_SWIMLANE_TITLE;
  if (t) {
    for (a = (S ? e.rows[1] : e.rows[0]).ncells, r = 0; r < a; r++) (i = e.cells[r]).DataID >= 0 &&
      (
        n = i.frame.width + i.frame.x,
        l.left > i.frame.x &&
        (l.left = i.frame.x),
        l.right < n &&
        (l.right = n)
      );
    s = e.rows.length;
    var c = 0;
    for (S && (c = 1), r = c; r < s; r++) (i = e.cells[e.rows[r].start]).DataID >= 0 &&
      (
        o = i.frame.height + i.frame.y,
        l.top > i.frame.y &&
        (l.top = i.frame.y),
        l.bottom < o &&
        (l.bottom = o)
      );
    return l
  }
  for (r = 0; r < a; r++) S &&
    0 == r ||
    (i = e.cells[r]).DataID >= 0 &&
    (
      n = i.frame.width + i.frame.x,
      o = i.frame.height + i.frame.y,
      l.right < n &&
      (l.right = n),
      l.bottom < o &&
      (l.bottom = o),
      l.left > i.frame.x &&
      (l.left = i.frame.x),
      l.top > i.frame.y &&
      (l.top = i.frame.y)
    );
  return l
}

ListManager.LM.prototypeTable_GetRowConnectPoints = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c = t.rows.length,
    u = [],
    p = e.Frame.height,
    d = ConstantData.Defines.SED_CDim;
  s = {
    x: d / 2,
    y: 0
  },
    u.push(s),
    s = {
      x: d / 2,
      y: d
    },
    u.push(s);
  var D = e.trect.y - e.Frame.y;
  for (a = 0; a < c; a++) {
    for (
      l = t.rows[a],
      o = (n = t.cells[l.start]).frame.y + D,
      i = n.frame.height,
      S = n.nextra,
      r = 1;
      r <= S;
      r++
    ) i += (n = t.cells[t.rows[a + r].start]).frame.height;
    a += S,
      o += i / 2,
      (s = {
        x: 0,
        y: 0
      }).x = 0,
      s.y = o / p * d,
      u.push(s)
  }
  for (a = 0; a < c; a++) {
    for (
      l = t.rows[a],
      o = (n = t.cells[l.start + l.ncells - 1]).frame.y + D,
      i = n.frame.height,
      S = n.nextra,
      r = 1;
      r <= S;
      r++
    ) i += (n = t.cells[t.rows[a + r].start + t.rows[a + r].ncells - 1]).frame.height;
    a += S,
      o += i / 2,
      (s = {
        x: 0,
        y: 0
      }).x = d,
      s.y = o / p * d,
      u.push(s)
  }
  return u
}

ListManager.LM.prototypeTable_SetProperties = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = !1;
  if (null == e) return !1;
  var S = e.GetTable(!1);
  if (S) {
    if (
      this.Table_GetCellWithType(S, ListManager.Table.CellTypes.SD_CT_JIRA_ISSUEKEY)
    ) return !1;
    if (
      r = S.rows.length,
      i = S.cols.length,
      null == t &&
      (t = r),
      null == a &&
      (a = i),
      t < 1 &&
      (t = 1),
      a < 1 &&
      (a = 1),
      t !== r ||
      a !== i
    ) {
      if (
        S = (e = this.GetObjectPtr(e.BlockID, !0)).GetTable(!0),
        t > r ? (n = t - r, this.Table_AddRows(e, S, r - 1, r - 1 + n - 1, !1, !0, !1)) : t < r &&
          (n = r - t, this.Table_RemoveRows(e, S, r - n, r - 1)),
        a > (i = S.cols.length)
      ) for (o = a - i, s = 0; s < o; s++) this.Table_AddCols(e, S, i - 2, i - 1, !1, !1),
        i++;
      else a < i &&
        (o = i - a, this.Table_RemoveCols(e, S, i - o - 1, i - 1));
      e.objecttype === ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER &&
        GlobalData.optManager.Table_SortChildContainers(e, S),
        l = !0
    }
  }
  return l
}

ListManager.LM.prototypeTable_Remove = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = this.svgObjectLayer.GetElementByID(e.BlockID),
    g = !1;
  if (
    t &&
    Collab.IsSecondary() &&
    t.EditorID === Collab.EditorID &&
    (g = !0),
    a = e.GetTable(!0)
  ) {
    for (r = a.rows.length, i = 0; i < r; i++) for (s = a.rows[i], c = !0, n = 0; n < s.ncells; n++) {
      if ((o = a.cells[s.start + n]).DataID >= 0) if (
        g &&
        (
          (
            d = D.GetElementByID(ConstantData.SVGElementClass.TEXT, o.DataID)
          ) &&
          D.RemoveElement(d),
          this.Table_AddSVGTextObject(e, this.svgDoc, D, o, s.start + n)
        ),
        o.celltype === ListManager.Table.CellTypes.SDT_CT_PERSON
      ) {
        var h = GlobalData.objectStore.GetObject(o.DataID);
        h &&
          h.Delete(),
          o.DataID = - 1
      } else void 0 === l ? (
        l = o.DataID,
        S = D.GetElementByID(ConstantData.SVGElementClass.TEXT, o.DataID),
        o.DataID = - 1,
        c = !1
      ) : (S = this.Table_JoinText(D, null, S, o, c), c = !1);
      this.Table_ClearImage(o)
    }
    e.SetTable(null),
      e.UpdateFrame(e.Frame),
      l >= 0 &&
      (
        e.DataID = l,
        S ? (u = S.GetRuntimeText(), D.RemoveElement(S)) : u = null,
        (p = this.GetObjectPtr(l, !0)) ? u &&
          (p.runtimeText = u) : e.DataID = - 1
      )
  }
}

ListManager.LM.prototypeTable_GetSelectedRange = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = - 1,
    c = ListManager.Table.CellFlags.SDT_F_Select;
  for (r = e.rows.length, t = 0; t < r; t++) for (i = e.rows[t], a = 0; a < i.ncells; a++) (n = e.cells[i.start + a]).flags & c &&
    (
      - 1 === S &&
      (S = t, o = n.colindex, s = n.colindex),
      l = t,
      n.colindex < o &&
      (o = n.colindex),
      n.colindex > s &&
      (s = n.colindex)
    );
  return {
    rowstart: S,
    rowend: l,
    colstart: o,
    colend: s
  }
}

ListManager.LM.prototypeTable_GetSelectArea = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c = ListManager.Table.CellFlags.SDT_F_Select;
  for (o = e.rows.length, null == t && (t = 0), null == a && (a = o - 1), i = t; i <= a; i++) for (l = e.rows[i], n = 0; n < l.ncells; n++) (s = e.cells[l.start + n]).flags & c &&
    (
      S = s.nextra ? this.Table_GetJoinedCellFrame(e, l.start + n, !1) : s.frame,
      r.push(S)
    )
}

ListManager.LM.prototypeTable_Navigate = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = !1,
    g = [],
    h = !1,
    m = - 1,
    C = [],
    y = this.GetObjectPtr(this.theTEDSessionBlockID, !1),
    f = ListManager.Table.CellFlags.SDT_F_Select;
  if (
    e < 0 &&
    (e = GlobalData.optManager.Table_GetActiveID()),
    null == (i = this.GetObjectPtr(e, !1))
  ) return !1;
  if (
    d = i.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART,
    n = i.GetTable(!1)
  ) {
    if (l = n.rows.length, y.theActiveTextEditObjectID === e) if (D = !0, t === Resources.Keys.Enter) {
      if (0 == (i.TextFlags & ConstantData.TextFlags.SED_TF_FormCR) || r) return !1;
      if ((S = this.Table_GetRow(n, n.select)) >= 0) if (
        M = n.cells[n.select],
        d &&
        M.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
      ) {
        var L = GlobalData.optManager.Table_GetFirstTextCell(n);
        n.select !== L &&
          (h = !0)
      } else i.objecttype === ConstantData.ObjectTypes.SD_OBJT_UIELEMENT &&
        (h = !0);
      S < l - 1 &&
        !h ? t = Resources.Keys.Down_Arrow : (
        m = n.select,
        this.CloseEdit(!0),
        n.select < 0 &&
        h &&
        m >= 0 &&
        (n.select = m, M.flags = Utils2.SetFlag(M.flags, f, !0)),
        D = !1
      )
    } else if (a) switch (t) {
      case Resources.Keys.Down_Arrow:
      case Resources.Keys.Up_Arrow:
      case Resources.Keys.Left_Arrow:
      case Resources.Keys.Right_Arrow:
        this.CloseEdit(!0),
          D = !1
    } else if (r && t === Resources.Keys.Down_Arrow) h = !0,
      t = Resources.Keys.Enter;
    if (D) return (o = this.Table_GetNextTextCell(n, n.select, t, a)) >= 0 &&
      (
        this.CloseEdit(!0),
        s = this.svgObjectLayer.GetElementByID(e),
        n.select = o,
        this.ActivateTextEdit(s),
        p = (u = this.svgDoc.GetActiveEdit()).GetText().length,
        u.SetSelectedRange(p, p),
        u.SetSelectedRange(0, p),
        !0
      );
    var I,
      T,
      b,
      M,
      P,
      R,
      A,
      _,
      E,
      w,
      F,
      v,
      G,
      N,
      k,
      U,
      J,
      x = this.svgObjectLayer.GetElementByID(e);
    for (n.cols.length, c = this.Table_GetRow(n, n.select), I = 0; I < l; I++) for (b = n.rows[I], T = 0; T < b.ncells; T++) (M = n.cells[b.start + T]).childcontainer >= 0 &&
      C.push(- M.childcontainer),
      M.flags & f &&
      (
        A = 0 === T ? - 1 : n.cells[b.start + T - 1].colindex,
        void 0 === _ ? (_ = I, E = I, U = I + M.nextra, F = b.start + T, v = b.start + T, J = F) : (E = I, (k = I + M.nextra) > U && (U = k), v = b.start + T),
        c === I &&
        (J = v),
        void 0 === P ? (P = A, R = M.colindex) : (A < P && (P = M.colindex), M.colindex > R && (R = M.colindex)),
        w = M.nextra ? this.Table_GetJoinedCellFrame(n, b.start + T, !1, !1) : M.frame,
        g.push(w)
      );
    if (void 0 !== _) switch (N = n.cells.length, t) {
      case Resources.Keys.Right_Arrow:
        if (v > F || v < N - 1) {
          if (a) {
            if (k = U, n.select === J && J > F) return this.Table_SelectCells(n, _, k, P, P + 1, a, g, !0, C),
              g = [],
              this.Table_GetSelectArea(n, _, k, g),
              this.LM_SelectSVGTableObject(i, this.svgDoc, x, g),
              !0
          } else this.Table_ClearSelection(n, _, E),
            g = [],
            k = _;
          return v < N - 1 ? (G = v + 1) >= (b = n.rows[E]).start + b.ncells &&
            (_ < l - 1 && !a ? k = ++_ : G = v) : G = v,
            M = n.cells[G],
            this.Table_SelectCells(n, _, k, M.colindex - 1, M.colindex, a, g, !1, C),
            this.LM_SelectSVGTableObject(i, this.svgDoc, x, g, C),
            !0
        }
        break;
      case Resources.Keys.Left_Arrow:
        if (v > F || F > 0) {
          if (a) {
            if (k = U, n.select === F && J > F) return this.Table_SelectCells(n, _, k, R - 1, R, a, g, !0, C),
              g = [],
              this.Table_GetSelectArea(n, _, k, g),
              this.LM_SelectSVGTableObject(i, this.svgDoc, x, g, C),
              !0
          } else this.Table_ClearSelection(n, _, E),
            g = [],
            k = _;
          return F > 0 ? (G = F - 1) < (b = n.rows[_]).start &&
            (a ? G = b.start : k = --_) : G = F,
            M = n.cells[G],
            this.Table_SelectCells(n, _, k, M.colindex - 1, M.colindex, a, g, !1, C),
            this.LM_SelectSVGTableObject(i, this.svgDoc, x, g, C),
            !0
        }
        break;
      case Resources.Keys.Down_Arrow:
        if (U < l - 1) {
          if (a) {
            if ((c = this.Table_GetRow(n, n.select)) === E && E > _) return this.Table_SelectCells(n, _, _, P, R, a, g, 2, C),
              this.LM_SelectSVGTableObject(i, this.svgDoc, x, g, C),
              !0
          } else this.Table_ClearSelection(n, _, U),
            g = [];
          return this.Table_SelectCells(n, U + 1, U + 1, P, R, a, g, !1, C),
            this.LM_SelectSVGTableObject(i, this.svgDoc, x, g, C),
            !0
        }
        break;
      case Resources.Keys.Up_Arrow:
        if (_ > 0 || _ >= 0 && a) {
          if (a) {
            if ((c = this.Table_GetRow(n, n.select)) === _ && E > _) return this.Table_SelectCells(n, E, E, P, R, a, g, !0, C),
              this.LM_SelectSVGTableObject(i, this.svgDoc, x, g, C),
              !0
          } else this.Table_ClearSelection(n, _, E),
            g = [];
          return _ > 0 &&
            (
              this.Table_SelectCells(n, _ - 1, _ - 1, P, R, a, g, !1, C),
              this.LM_SelectSVGTableObject(i, this.svgDoc, x, g, C)
            ),
            !0
        }
        break;
      case Resources.Keys.Enter:
        if (h) {
          if (
            i.objecttype === ConstantData.ObjectTypes.SD_OBJT_UIELEMENT
          ) return gUIElementManager.HandleInsertRemove(!1, !1),
            !0;
          this.CloseEdit(!0),
            i = this.GetObjectPtr(e, !0);
          var O = GlobalData.optManager.Table_GetActiveID();
          if (
            i.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
          ) return GlobalData.optManager.GanttAddTask(!1),
            !0;
          this.Table_AddRows(i, n, E, E, !1, !0, !1),
            this.AddToDirtyList(O),
            this.SetLinkFlag(i.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
            this.CompleteOperation(null),
            l++
        }
        if (E < l - 1) {
          for (
            this.Table_ClearSelection(n, _, E),
            G = (b = n.rows[E + 1]).start,
            T = 0;
            T < b.ncells;
            T++
          ) if ((M = n.cells[b.start + T]).colindex >= R) {
            G = b.start + T;
            break
          }
          return s = this.svgObjectLayer.GetElementByID(e),
            n.select = G,
            this.ActivateTextEdit(s),
            p = (u = this.svgDoc.GetActiveEdit()).GetText().length,
            u.SetSelectedRange(p, p),
            u.SetSelectedRange(0, p),
            !0
        }
        return !0
    }
  }
  return !1
}

ListManager.LM.prototypeTable_OpenEditInCell = function (e, t, a) {
  this.CloseEdit(!0);
  var r = this.svgObjectLayer.GetElementByID(e);
  t.select = a,
    this.ActivateTextEdit(r);
  var i = this.svgDoc.GetActiveEdit(),
    n = i.GetText().length;
  i.SetSelectedRange(n, n),
    i.SetSelectedRange(0, n)
}

ListManager.LM.prototypeTable_SelectCells = function (e, t, a, r, i, n, o, s, l) {
  var S,
    c,
    u,
    p,
    d,
    D,
    g,
    h = !0,
    m = ListManager.Table.CellFlags.SDT_F_Select,
    C = ListManager.Table.CellFlags.SDT_F_SilentF;
  for (e.rows.length, e.cols.length, n && (h = !1), s && (h = !1), S = t; S <= a; S++) for (u = e.rows[S], c = 0; c < u.ncells; c++) if (g = u.start + c, (p = e.cells[g]).colindex > r && p.colindex <= i) if (
    p.flags & C &&
    (d = this.Table_GetJoinedCellParent(e, p.colindex, S)) &&
    (p = e.cells[d.cellindex], g = d.cellindex),
    h &&
    (e.select = u.start + c, h = !1),
    s
  ) 2 === s ? o.splice(0, 1) : o.pop(),
    p.flags = Utils2.SetFlag(p.flags, m, !1);
  else {
    var y;
    if (
      D = p.frame,
      p.nextra &&
      (D = this.Table_GetJoinedCellFrame(e, g, !1, !1)),
      o.push(D),
      l &&
      p.childcontainer >= 0
    ) if ((y = l.indexOf(- p.childcontainer)) >= 0) l[y] = p.childcontainer;
      else (y = l.indexOf(p.childcontainer)) < 0 &&
        l.push(p.childcontainer);
    p.flags = Utils2.SetFlag(p.flags, m, !0)
  } else if (p.colindex > i) break
}

ListManager.LM.prototypeTable_ClearSelection = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = ListManager.Table.CellFlags.SDT_F_Select;
  for (n = t; n <= a; n++) for (r = e.rows[n], o = 0; o < r.ncells; o++) (i = e.cells[r.start + o]).flags = Utils2.SetFlag(i.flags, s, !1)
}

ListManager.LM.prototypeTable_ClearImage = function (e) {
  var t;
  this.IsBlobURL(e.ImageURL) &&
    (this.DeleteURL(e.ImageURL), e.ImageURL = ''),
    e.ImageURL = '',
    - 1 != e.BlobBytesID &&
    (
      (t = GlobalData.objectStore.GetObject(e.BlobBytesID)) &&
      t.Delete(),
      e.BlobBytesID = - 1
    ),
    - 1 != e.EMFBlobBytesID &&
    (
      (t = GlobalData.objectStore.GetObject(e.EMFBlobBytesID)) &&
      t.Delete(),
      e.EMFBlobBytesID = - 1
    )
}

ListManager.LM.prototypeTable_ClearTableImage = function (e, t, a) {
  var r,
    i,
    n,
    o = ListManager.Table.CellTypes.SDT_CT_ICONCELL;
  if (t.select >= 0) {
    if ((r = t.cells[t.select]).ImageURL) return a ||
      (t = e.GetTable(!0), this.Table_ClearImage(r)),
      !0
  } else for (n = t.cells.length, i = 0; i < n; i++) if ((r = t.cells[i]).celltype !== o && r.ImageURL) return a ||
    (t = e.GetTable(!0), this.Table_ClearImage(r), r.ImageURL = null),
    !0;
  return !1
}

ListManager.LM.prototypeTable_AllowClear = function (e, t) {
  var a = e.cells[t],
    r = ListManager.Table.CellTypes;
  switch (a.celltype) {
    case r.SDT_CT_GANTT_START:
    case r.SDT_CT_GANTT_START_TIME:
    case r.SDT_CT_GANTT_END:
    case r.SDT_CT_GANTT_END_TIME:
    case r.SDT_CT_GANTT_LENGTH:
    case r.SDT_CT_GANTT_PC:
    case r.SDT_CT_GANTT_TASKNUMBER:
      return !1
  }
  return !0
}

ListManager.LM.prototypeTable_ClearText = function (e) {
  var t = this.GetObjectPtr(e, !0).GetTable(!0),
    a = t.cols.length,
    r = t.rows.length;
  this.Table_SelectCells(t, 0, r - 1, - 1, a - 1, !0, [], !1, null),
    this.Table_DeleteCellContent(e, null, !0, !0)
}

ListManager.LM.prototypeTable_DeleteCellContent = function (e, t, a, r, i) {
  null == e &&
    (e = GlobalData.optManager.Table_GetActiveID()),
    this.CloseEdit(!0),
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit();
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = this.GetObjectPtr(e, !0),
    C = ListManager.Table.CellFlags.SDT_F_Select,
    y = !1,
    f = [],
    L = [],
    I = - 1,
    T = m.GetTable(!0);
  if (T) {
    if (S = T.rows.length, i) L = i.Data.selectlist;
    else if (null != t) {
      for (n = 0; n < S; n++) for (u = T.rows[n], c = 0; c < u.ncells; c++) (o = T.cells[u.start + c]).flags & C &&
        (
          void 0 === p ? (p = n, d = n) : d = n,
          void 0 === D ? (D = o.colindex, g = o.colindex) : (o.colindex < D && (D = o.colindex), o.colindex > g && (g = o.colindex))
        );
      if (t) {
        var b = (u = T.rows[p]).start;
        for (s = (u = T.rows[d]).start + u.ncells - b, n = 0; n < s; n++) this.Table_AllowClear(T, b + n) &&
          L.push(b + n)
      } else for (s = T.cells.length, n = 0; n < s; n++) (o = T.cells[n]).colindex >= D &&
        o.colindex <= g &&
        this.Table_AllowClear(T, n) &&
        L.push(n)
    } else for (s = T.cells.length, n = 0; n < s; n++) (o = T.cells[n]).flags & C &&
      this.Table_AllowClear(T, n) &&
      L.push(n);
    if (h = L.length) {
      if (!a && Collab.AllowMessage()) {
        var M = {
          BlockID: e,
          dorow: t
        };
        M.selectlist = Utils1.DeepCopy(L),
          Collab.BuildMessage(ConstantData.CollabMessages.Table_DeleteCellContent, M, !1)
      }
      for (n = 0; n < h; n++) I = (o = T.cells[L[n]]).DataID,
        o.DataID >= 0 &&
        0 == (o.flags & ListManager.Table.CellFlags.SDT_F_NoText) &&
        (
          l = GlobalData.objectStore.GetObject(o.DataID),
          o.DataID = - 1,
          I = - 1,
          l &&
          l.Delete(),
          y = !0,
          f.push(L[n])
        ),
        o.NoteID >= 0 &&
        ((l = GlobalData.objectStore.GetObject(o.NoteID)) && l.Delete(), o.NoteID = - 1),
        this.Table_ClearImage(o),
        r ||
        (this.Table_ClearCell(o), o.DataID = I);
      y &&
        this.Table_ReformatText(m, T, 0, 0, f),
        this.AddToDirtyList(e),
        a ||
        this.CompleteOperation()
    }
  }
}

ListManager.LM.prototypeTable_CopyCellContent = function (e) {
  var t = this.GetObjectPtr(e, !1);
  if (null != t) if (
    t.objecttype !== ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
  ) {
    var a = ListManager.Table.CellFlags.SDT_F_Select,
      r = new ListManager.Table,
      i = t.GetTable(!1);
    if (i && i.select >= 0) {
      var n,
        o,
        s,
        l,
        S,
        c,
        u,
        p,
        d,
        D = 0;
      for (s = i.rows.length, n = 0; n < s; n++) for (c = !1, S = i.rows[n], u = null, l = 0; l < S.ncells; l++) (o = i.cells[S.start + l]).flags & a &&
        (
          c ||
          (u = new ListManager.Table.Row(D, 0), r.rows.push(u), c = !0),
          (p = new ListManager.Table.Cell).Text = $.extend(!0, {
          }, o.Text),
          p.minwd = o.minwd,
          p.minht = o.minht,
          p.textht = o.textht,
          p.textwd = o.textwd,
          r.cells.push(p),
          D++,
          u.ncells++,
          o.DataID >= 0 ? (
            d = this.GetObjectPtr(o.DataID, !1),
            p.DataID = Utils1.DeepCopy(d)
          ) : p.DataID = null
        );
      this.theContentHeader.ClipboardBuffer = r,
        this.theContentHeader.ClipboardType = ConstantData.ClipboardType.Table
    }
  } else this.Gantt_CopyTableContent(t)
}

ListManager.LM.prototypeTable_PasteCellContent = function (e, t) {
  var a;
  if (t) a = t.Data.ClipTable;
  else if (
    this.theContentHeader.ClipboardType === ConstantData.ClipboardType.Table &&
    this.theContentHeader.ClipboardBuffer
  ) a = this.theContentHeader.ClipboardBuffer;
  else if (this.theTextClipboard) {
    (a = new ListManager.Table).rows.push(new ListManager.Table.Row(0, 1));
    var r = new ListManager.Table.Cell;
    a.cells.push(r),
      r.DataID = {
        runtimeText: this.theTextClipboard,
        selrange: {
          start: 1,
          line: void 0,
          end: this.theTextClipboard.text.length
        }
      }
  }
  if (a) {
    var i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b = [],
      M = {},
      P = ListManager.Table.CellFlags.SDT_F_Select,
      R = this.svgObjectLayer.GetElementByID(e);
    if (
      Collab.BeginSecondaryEdit(),
      null == (i = this.GetObjectPtr(e, !0))
    ) return;
    if (n = i.GetTable(!0)) {
      if (m = a.rows.length, o = n.rows.length, g = n.cols.length, t) S = t.Data.colstart,
        c = t.Data.colend,
        s = t.Data.rowstart,
        l = t.Data.rowend;
      else {
        var A = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
        if (
          - 1 != A.theActiveTextEditObjectID &&
          A.theActiveTableObjectID === e &&
          n.select >= 0
        ) S = (D = n.cells[n.select]).colindex,
          s = this.Table_GetRow(n, n.select),
          c = g - 1,
          l = o - 1,
          this.CloseEdit(!0);
        else for (p = 0; p < o; p++) for (d = n.rows[p], u = 0; u < d.ncells; u++) (D = n.cells[d.start + u]).flags & P &&
          (
            void 0 === s ? (s = p, l = p) : l = p,
            void 0 === S ? (S = D.colindex, c = D.colindex) : (D.colindex < S && (S = D.colindex), D.colindex > c && (c = D.colindex))
          )
      }
      if (void 0 !== S) {
        if (Collab.AllowMessage()) {
          var _ = {};
          _.BlockID = e,
            _.ClipTable = Utils1.DeepCopy(a),
            _.colend = c,
            _.colstart = S,
            _.rowstart = s,
            _.rowend = l,
            Collab.BuildMessage(ConstantData.CollabMessages.Table_PasteCellContent, _, !1)
        }
        for (y = 0, p = s; p <= l; p++) {
          for (
            d = n.rows[p],
            C = 0,
            L = a.rows[y],
            u = 0;
            u < d.ncells &&
            !((D = n.cells[d.start + u]).colindex > c) &&
            !(
              D.colindex >= S &&
              (
                f = a.cells[L.start + C],
                C++,
                this.Table_AllowCellTextEdit(n, d.start + u) &&
                (
                  null != f.Text &&
                  (
                    D.Text = $.extend(!0, {
                    }, f.Text),
                    D.minwd = f.minwd,
                    D.minht = f.minht,
                    D.textht = f.textht,
                    D.textwd = f.textwd
                  ),
                  b.push(d.start + u),
                  D.DataID >= 0 ? (
                    (
                      T = R.GetElementByID(ConstantData.SVGElementClass.TEXT, D.DataID)
                    ) &&
                    R.RemoveElement(T),
                    (h = this.GetObjectPtr(D.DataID, !0)) &&
                      null != f.DataID ? (
                      h.runtimeText = f.DataID.runtimeText,
                      h.selrange = f.DataID.selrange,
                      T = this.Table_AddSVGTextObject(i, this.svgDoc, R, D, d.start + u)
                    ) : this.Table_ClearCell(D)
                  ) : null != f.DataID &&
                  (
                    M.runtimeText = f.DataID.runtimeText,
                    M.selrange = f.DataID.selrange,
                    I = new ListManager.TextObject(M),
                    (
                      h = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, I)
                    ) &&
                    (D.DataID = h.ID),
                    T = this.Table_AddSVGTextObject(i, this.svgDoc, R, D, d.start + u)
                  )
                ),
                C >= L.ncells
              )
            );
            u++
          );
          if (++y >= m) break
        }
        b.length > 0 &&
          this.Table_ReformatText(i, n, 0, 0, b),
          this.AddToDirtyList(e),
          this.CompleteOperation()
      }
    }
  }
},




  ListManager.LM.prototype.Table_GetNextTextCell = function (e, t, a, r) {
    if (t < 0) t = this.Table_GetFirstTextCell(e);
    else {
      var i,
        n,
        o,
        s,
        l,
        S = - 1;
      ListManager.Table.CellFlags.SDT_F_NoText;
      if (
        n = e.rows.length,
        e.cols.length,
        i = this.Table_GetRow(e, t),
        s = e.cells[t].colindex,
        a === Resources.Keys.Tab
      ) a = r ? Resources.Keys.Left_Arrow : Resources.Keys.Right_Arrow;
      switch (a) {
        case Resources.Keys.Right_Arrow:
          if (t - (o = e.rows[i]).start < o.ncells - 1) S = t + 1;
          else {
            if (!(i < n - 1)) return - 1;
            S = (o = e.rows[i + 1]).start
          }
          break;
        case Resources.Keys.Left_Arrow:
          if (t - (o = e.rows[i]).start > 0) S = t - 1;
          else {
            if (!(i > 0)) return - 1;
            S = (o = e.rows[i - 1]).start + o.ncells - 1
          }
          break;
        case Resources.Keys.Down_Arrow:
          if (!(i < n - 1)) return - 1;
          for (o = e.rows[i + 1], l = 0; l < o.ncells; l++) if (e.cells[o.start + l].colindex >= s) {
            S = o.start + l;
            break
          }
          break;
        case Resources.Keys.Up_Arrow:
          if (!(i > 0)) return - 1;
          for (o = e.rows[i - 1], l = 0; l < o.ncells; l++) if (e.cells[o.start + l].colindex >= s) {
            S = o.start + l;
            break
          }
      }
      if (S >= 0) return this.Table_AllowCellTextEdit(e, S) ? S : this.Table_GetNextTextCell(e, S, a, r)
    }
  }

ListManager.LM.prototypeTable_CellSetBlobBytes = function (e, t, a) {
  var r = new ListManager.BlobBytes(a, t);
  if (e.BlobBytesID >= 0) {
    var i = GlobalData.objectStore.PreserveBlock(e.BlobBytesID);
    i &&
      (i.Data = r)
  } else {
    var n = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.BLOBBYTES_OBJECT, r);
    n &&
      (e.BlobBytesID = n.ID)
  }
}

ListManager.LM.prototypeTable_CellSetEMFBlobBytes = function (e, t, a) {
  var r = new ListManager.BlobBytes(a, t);
  if (e.EMFBlobBytesID >= 0) {
    var i = GlobalData.objectStore.PreserveBlock(e.EMFBlobBytesID);
    i &&
      (i.Data = r)
  } else {
    var n = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.BLOBBYTES_OBJECT, r);
    n &&
      (e.EMFBlobBytesID = n.ID)
  }
}

ListManager.LM.prototypeTable_CellGetBlobBytes = function (e) {
  var t = null;
  return e.BlobBytesID >= 0 &&
    (t = GlobalData.optManager.GetObjectPtr(e.BlobBytesID, !1)),
    t
}

ListManager.LM.prototypeTable_CellGetEMFBlobBytes = function (e) {
  var t = null;
  return e.EMFBlobBytesID >= 0 &&
    (t = GlobalData.optManager.GetObjectPtr(e.EMFBlobBytesID, !1)),
    t
}

ListManager.LM.prototypeTable_GetImportPictureDim = function (e) {
  var t,
    a,
    r,
    i,
    n = {};
  if (e >= 0) {
    if (null == (t = this.GetObjectPtr(e, !1))) return;
    if (
      (r = t.GetTable(!1)) &&
      ((i = r.select) < 0 && (i = this.Table_GetFirstImageCell(r)), i >= 0)
    ) return a = r.cells[i],
      n.x = a.frame.width,
      n.y = a.frame.height,
      n
  }
}

ListManager.LM.prototypeTable_ImportPicture = function (e, t, a, r, i, n, o) {
  var s,
    l,
    S;
  if (e >= 0) {
    if (null == (s = this.GetObjectPtr(e, !1))) return;
    if (
      (S = s.GetTable(!1)) &&
      (
        null == n &&
        (n = S.select) < 0 &&
        (n = this.Table_GetFirstImageCell(S)),
        n >= 0
      )
    ) {
      if (
        Collab.AllowMessage() &&
        Collab.BeginSecondaryEdit(),
        (
          l = (S = (s = GlobalData.optManager.GetObjectPtr(e, !0)).GetTable(!0)).cells[n]
        ).DataID >= 0
      ) {
        var c = GlobalData.objectStore.GetObject(l.DataID);
        l.DataID = - 1,
          c &&
          c.Delete()
      }
      if (
        l.Image,
        l.Image = new ListManager.ImageRecord,
        l.ImageURL = t,
        l.SVGDim = i,
        this.Table_CellSetBlobBytes(l, r, a),
        GlobalData.optManager.Table_GetActiveID() >= 0 &&
        (
          this.Table_Release(!0),
          l.flags = Utils2.SetFlag(l.flags, ListManager.Table.CellFlags.SDT_F_Select, !0),
          s.objecttype === ConstantData.ObjectTypes.SD_OBJT_UIELEMENT &&
          (
            l.flags = Utils2.SetFlag(l.flags, ListManager.Table.CellFlags.SDT_F_DontScale, !0)
          ),
          S.select = n
        ),
        this.AddToDirtyList(e),
        Collab.AllowMessage()
      ) {
        var u = {
          BlockID: e,
          ImageDir: a,
          bytes: r,
          uniqueid: l.uniqueid
        };
        u.SVGDim = Utils1.DeepCopy(i),
          o ? Collab.BuildMessage(o.messageID, u, !1) : Collab.BuildMessage(ConstantData.CollabMessages.Table_ImportPicture, u, !1)
      }
      this.CompleteOperation(null)
    }
  }
}

ListManager.LM.prototypeTable_AdjustCellIcon = function (e, t, a) {
}

ListManager.LM.prototypeTable_SetCellIcon = function (e, t, a, r) {
  var i,
    n,
    o,
    s = GlobalData.optManager.GetTargetSelect();
  s >= 0 &&
    (
      !(n = (i = this.GetObjectPtr(s, !1)).GetTable(!1)) ||
      null != e &&
      e !== i.objecttype ||
      t < n.cells.length &&
      (
        (o = (n = (i = this.GetObjectPtr(s, !0)).GetTable(!0)).cells[t]).ImageURL = null,
        a < 0 ? o.Image &&
          delete o.Image : (
          null == o.Image &&
          (o.Image = new ListManager.ImageRecord),
          o.Image.iconid = a
        ),
        r ||
        (this.AddToDirtyList(s), this.CompleteOperation(null))
      )
    )
}

ListManager.LM.prototypeTable_ToggleCellIcon = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S = [
      0,
      0,
      0,
      0
    ],
    c = 0,
    u = [],
    p = GlobalData.optManager.GetTargetSelect();
  if (
    p >= 0 &&
    (
      (n = (i = this.GetObjectPtr(p, !1)).GetTable(!1)) &&
      (null == e || e === i.objecttype) &&
      t < n.cells.length
    )
  ) {
    n = (i = this.GetObjectPtr(p, !0)).GetTable(!0);
    var d = GlobalData.optManager.Table_GetRow(n, t);
    l = n.rows[d];
    var D = - 1;
    for (s = 0; s < 4; s++) (o = n.cells[t + s]) &&
      o.Image &&
      (S[s] = o.Image.iconid, o.Image.iconid === a && (D = s));
    if (D >= 0) (o = n.cells[t + D]).Image.iconid = - 1,
      S[D] = 0;
    else for (o = n.cells[t + 0], s = 0; s < 4; s++) if (0 === S[s]) {
      S[s] = a;
      break
    }
    for (s = 0; s < 4; s++) S[s] > 0 &&
      u.push(S[s]),
      (o = n.cells[t + s]) &&
      delete o.Image;
    c = u.length,
      nrow = l.ncells,
      c % 2 ? 4 === nrow &&
        (this.Table_JoinHorizontally(i, n, 1, 2, d, d), nrow--) : nrow < 4 &&
      (
        (o = n.cells[l.start + 1]).flags = Utils2.SetFlag(o.flags, ListManager.Table.CellFlags.SDT_F_Select, !0),
        this.Table_SplitHorizontally(i, n, d, d),
        nrow++,
        (o = n.cells[l.start + 1]).flags = Utils2.SetFlag(o.flags, ListManager.Table.CellFlags.SDT_F_Select, !1),
        (o = n.cells[l.start + 2]).flags = Utils2.SetFlag(o.flags, ListManager.Table.CellFlags.SDT_F_Select, !1)
      ),
      nrow === c &&
      (g = 0);
    var g = 0;
    for (nrow > c && (g = Math.ceil((nrow - c) / 2)), s = 0; s < c; s++) (o = n.cells[t + g + s]) &&
      (o.Image = new ListManager.ImageRecord, o.Image.iconid = u[s]);
    r ||
      (this.AddToDirtyList(p), this.CompleteOperation(null))
  }
},


  ListManager.LM.prototype.Table_GetCellIcons = function (e) {
    var t = [],
      a = this.GetObjectPtr(e, !1);
    if (a) {
      var r,
        i,
        n,
        o = a.GetTable(!1);
      if (o) for (i = o.cells.length, r = 0; r < i; r++) (n = o.cells[r]).Image &&
        n.Image.iconid > 0 &&
        t.push(n.Image.iconid)
    }
    return t
  }

ListManager.LM.prototypeTable_BPMNChoreo_AddRemoveRow = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S = 0,
    c = GlobalData.optManager.GetTargetSelect();
  if (
    c >= 0 &&
    (n = (i = this.GetObjectPtr(c, !1)).GetTable(!1)) &&
    e === i.objecttype
  ) {
    rowindex = n.rows.length - 1;
    var u = this.Table_GetSelectedRange(n);
    if (
      u.rowstart >= 0 &&
      n.cells[n.rows[u.rowstart].start].celltype === ListManager.Table.CellTypes.SD_CT_BPMN_PARTICIPANT &&
      (rowindex = u.rowstart),
      t
    ) {
      for (l = n.rows.length, o = 0; o < l; o++) s = n.rows[o],
        n.cells[s.start].celltype === ListManager.Table.CellTypes.SD_CT_BPMN_PARTICIPANT &&
        S++;
      if (S <= 1) return !1;
      if (a) return !0
    }
    n = (i = this.GetObjectPtr(c, !0)).GetTable(!0),
      t ? this.Table_RemoveRows(i, n, rowindex, rowindex) : this.Table_AddRows(i, n, rowindex, rowindex, !1, !1, !1),
      r ||
      this.CompleteOperation()
  }
}

ListManager.LM.prototypeTable_CellStdCopy = function (e, t) {
  e.uniqueid = t.uniqueid,
    e.NoteID = t.NoteID,
    e.hyperlink = t.hyperlink,
    e.sequence = t.sequence
}

ListManager.LM.prototypeTable_CellImageCopy = function (e, t) {
  e.ImageURL = t.ImageURL,
    e.Image = t.Image,
    e.BlobBytesID = t.BlobBytesID,
    e.EMFBlobBytesID = t.EMFBlobBytesID,
    e.EmfHash = t.EmfHash
}

ListManager.LM.prototypeTable_CellTextCopy = function (e, t) {
  e.textht = t.textht,
    e.textwd = t.textwd,
    e.DataID = t.DataID
}

ListManager.LM.prototypeTable_CellFormatCopy = function (e, t) {
  var a = {
    dx: t.vdisp - e.vdisp,
    dy: t.hdisp - e.hdisp
  };
  return e.vjust = t.vjust,
    e.just = t.just,
    e.hdisp = t.hdisp,
    e.vdisp = t.vdisp,
    e.hline = Utils1.DeepCopy(t.hline),
    e.vline = Utils1.DeepCopy(t.vline),
    e.Text = Utils1.DeepCopy(t.Text),
    e.stylename = t.stylename,
    a
}

ListManager.LM.prototypeTable_ResetTable = function (e, t, a, r) {
  var i = e.GetTable(!0);
  if (null != i) {
    var n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m = ListManager.Table.CellTypes.SDT_CT_ICONCELL,
      C = ListManager.Table.CellTypes.SDT_CT_ICONPHOTOCELL,
      y = 0,
      f = 0,
      L = 0,
      I = 0,
      T = 0,
      b = 0,
      M = 0,
      P = 0,
      R = [],
      A = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !1);
    n = Utils1.DeepCopy(t);
    var _ = $.extend(!0, {
    }, A.def.style.Text);
    for (
      _.FontId = GlobalData.optManager.GetFontIdByName(A.def.lf.fontName),
      _.FontName = A.def.lf.fontName,
      g = n.cells.length,
      o = 0;
      o < g;
      o++
    ) (p = n.cells[o]).Text = Utils1.DeepCopy(_),
      p.fill = $.extend(!0, {
      }, e.StyleRecord.Fill);
    for (
      e.StyleRecord.Text = _,
      u = n.cells[0],
      p = i.cells[0],
      c = i.rows.length,
      d = n.rows.length,
      n.tunique = i.tunique,
      u.celltype !== m &&
      u.celltype !== C ||
      (f = 1, M = u.nextra),
      p.celltype !== m &&
      p.celltype !== C ||
      (y = 1, P = p.nextra),
      1 === y &&
        1 === f ? (
        this.Table_CellStdCopy(u, p),
        this.Table_CellImageCopy(u, p),
        a &&
        (
          (h = this.Table_CellFormatCopy(u, p)).dx &&
          (L = h.dx),
          h.dy &&
          (I = h.dy)
        )
      ) : 1 === f &&
      (u.uniqueid = ++n.tunique),
      o = 0;
      o < d &&
      !(o >= c);
      o++
    ) {
      for (
        D = n.rows[o],
        S = i.rows[o],
        T = L,
        o > M &&
        (f = 0),
        o > P &&
        (y = 0),
        s = 0;
        s < D.ncells - f &&
        (u = n.cells[D.start + s + f], !((l = s + y) >= S.ncells));
        s++
      ) p = i.cells[S.start + l],
        o == c - 1 &&
        (p.hline.Thickness = 0),
        s == S.ncells - 1 &&
        (p.vline.Thickness = 0),
        this.Table_CellStdCopy(u, p),
        0 == (u.flags & ListManager.Table.CellFlags.SDT_F_PhotoPH) &&
        0 == (u.flags & ListManager.Table.CellFlags.SDT_F_SilentF) &&
        null == u.ImageURL &&
        p.DataID >= 0 &&
        (R.push(D.start + s + f), this.Table_CellTextCopy(u, p)),
        a &&
        (
          h = this.Table_CellFormatCopy(u, p),
          T &&
          (u.frame.x += T, u.trect.x += T),
          h.dx &&
          (T += h.dx),
          h.dy > I &&
          (I = h.dy)
        );
      u.frame.y += b,
        u.trect.y += b,
        D.frame.y += b,
        D.frame.width += b,
        b += I,
        L = 0,
        I = 0
    }
    if (
      e.SetTable(n),
      (i = n).cols = this.Table_BuildColumns(e, i, e.TextGrow),
      this.Table_ReformatText(e, n, 0, 0, R),
      this.Table_BuildFills(e, i, e.StyleRecord.Fill),
      r
    ) {
      var E = Utils1.DeepCopy(e);
      E.Frame.width = e.sizedim.width,
        E.Frame.height = e.sizedim.height,
        E.UpdateFrame(E.Frame),
        this.Table_Resize(e, i, t, E.trect.width, e.trect.height)
    }
    var w = $.extend(!0, {
    }, e.trect);
    w.width = i.wd,
      w.height = i.ht,
      e.TRectToFrame(w, !0),
      this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
      this.AddToDirtyList(e.BlockID)
  }
}

ListManager.LM.prototypeTable_ApplyTable = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = ConstantData.TextFace,
    l = GlobalData.optManager.GetObjectPtr(this.theSEDSessionBlockID, !1);
  r = Utils1.DeepCopy(t),
    e.SetTable(r),
    GlobalData.optManager.AddToDirtyList(e.BlockID),
    GlobalData.optManager.RenderDirtySVGObjects();
  var S = $.extend(!0, {
  }, l.def.style.Text);
  for (
    S.FontId = GlobalData.optManager.GetFontIdByName(l.def.lf.fontName),
    S.FontName = l.def.lf.fontName,
    this.Table_ChangeTextAttributes(e, null, S, null, null, null, null, !0),
    e.StyleRecord.Text = S,
    o = r.cells.length,
    n = 0;
    n < o;
    n++
  ) (i = r.cells[n]).fill = $.extend(!0, {
  }, e.StyleRecord.Fill);
  if (e.DataID >= 0) {
    var c = this.Table_GetFirstTextCell(r);
    (i = r.cells[c]).DataID = e.DataID,
      e.DataID = - 1,
      GlobalData.optManager.AddToDirtyList(e.BlockID),
      GlobalData.optManager.RenderDirtySVGObjects();
    var u = this.svgObjectLayer.GetElementByID(e.BlockID).GetElementByID(ConstantData.SVGElementClass.TEXT);
    u.SetUserData(i.DataID);
    var p = u.GetSelectedFormat();
    if (p) {
      i.Text.FontSize = GlobalData.optManager.FontSizeToPoints(p.size),
        i.Text.FontId = GlobalData.optManager.GetFontIdByName(p.font),
        i.Text.FontName = p.font;
      var d = 'bold' === p.weight;
      i.Text.Face = Utils2.SetFlag(S.Face, s.Bold, d);
      var D = 'italic' === p.style;
      i.Text.Face = Utils2.SetFlag(S.Face, s.Italic, D);
      var g = 'underline' === p.decoration;
      i.Text.Face = Utils2.SetFlag(S.Face, s.Underline, g);
      var h = 'super' === p.baseOffset;
      i.Text.Face = Utils2.SetFlag(S.Face, s.Superscript, h);
      var m = 'sub' === p.baseOffset;
      i.Text.Face = Utils2.SetFlag(S.Face, s.Subscript, m),
        p.color &&
        (i.Text.Paint.Color = p.color),
        p.colorTrans &&
        (i.Text.Paint.Opacity = p.colorTrans)
    }
    var C = [];
    C.push(c),
      this.Table_ReformatText(e, r, 0, 0, C)
  }
  if (a) {
    var y = Utils1.DeepCopy(e),
      f = Utils1.DeepCopy(e.Frame);
    f.width = e.sizedim.width,
      f.height = e.sizedim.height,
      y.UpdateFrame(f),
      this.Table_Resize(e, r, t, y.trect.width, y.trect.height)
  }
  var L = $.extend(!0, {
  }, e.trect);
  L.width = r.wd,
    L.height = r.ht,
    e.TRectToFrame &&
    e.TRectToFrame(L, !0),
    this.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
    this.AddToDirtyList(e.BlockID)
},




  ListManager.LM.prototype.Table_ScaleTable = function (e, t, a, r) {
    var i,
      n,
      o,
      s,
      l,
      S,
      c;
    Utils1.DeepCopy(t);
    for (
      i = t.cells.length,
      t.minwd *= a,
      t.minht *= r,
      t.wd *= a,
      t.ht *= r,
      t.tmargin.left *= a,
      t.tmargin.right *= a,
      t.tmargin.top *= r,
      t.tmargin.bottom *= r,
      n = 0;
      n < i;
      n++
    ) {
      var u = t.cells[n];
      if (u.Text.FontSize = u.Text.FontSize * r, u.DataID >= 0) for (
        o = (s = GlobalData.optManager.GetObjectPtr(u.DataID, !0).runtimeText.styles).length,
        l = 0;
        l < o;
        ++l
      ) s[l].size *= r;
      u.hline.Thickness *= r,
        u.vline.Thickness *= a,
        u.hdisp *= r,
        u.vdisp *= a,
        u.minht *= r,
        u.minwd *= a,
        u.textht *= r,
        u.textwd *= a,
        u.frame.x *= a,
        u.frame.y *= r,
        u.frame.width *= a,
        u.frame.height *= r,
        u.trect.x *= a,
        u.trect.y *= r,
        u.trect.width *= a,
        u.trect.height *= r,
        u.sizedim.width = u.frame.width,
        u.sizedim.height = u.frame.height
    }
    for (S = t.rows.length, n = 0; n < S; n++) (c = t.rows[n]).frame.x *= a,
      c.frame.y *= r,
      c.frame.width *= a,
      c.frame.height *= r,
      c.minwd *= a,
      c.textht *= r;
    this.Table_Format(e, t, e.TextGrow, !1)
  }

ListManager.LM.prototypeTable_Match = function (e, t) {
  var a,
    r,
    i;
  return a = e.rows.length,
    i = e.cells.length,
    r = t.rows.length,
    t.cells.length === i &&
    r === a
}

ListManager.LM.prototypeTable_GetPerimPts = function (e, t, a, r) {
  var i = GlobalData.optManager.Table_GetCellWithID(t, a),
    n = [];
  return i ? (
    n[0] = {
      x: 0,
      y: 0,
      id: 0
    },
    n[0].x = r[0].x / ConstantData.Defines.SED_CDim * i.frame.width + e.trect.x + i.frame.x,
    n[0].y = r[0].y / ConstantData.Defines.SED_CDim * i.frame.height + e.trect.y + i.frame.y,
    null != r[0].id &&
    (n[0].id = r[0].id),
    n
  ) : null
}

ListManager.LM.prototypeTable_GetTargetPoints = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S = ConstantData.Defines.SED_CDim;
  if (Utils2.pointInRect(e.trect, a)) {
    i.x = a.x - e.trect.x,
      i.y = a.y - e.trect.y;
    var c = GlobalData.optManager.Table_Hit(t, i.x, i.y);
    if (c >= 0) return GlobalData.optManager.Table_GetRow(t, c),
      t.rows.length,
      (o = t.cells[c]).frame.y + o.frame.height / 2,
      s = o.frame.height / 4,
      !0,
      e.extraflags & ConstantData.ExtraFlags.SEDE_LinkVCenter ? i.y = S / 2 : i.y < o.frame.y + s ? i.y = 0 : i.y > o.frame.y + 3 * s ? i.y = S : i.y = S / 2,
      l = a.x - e.trect.x - o.frame.x,
      i.x = l / o.frame.width * S,
      i.cellid = o.uniqueid,
      !0
  }
  return !1
}

ListManager.LM.prototypeTable_RebuildURLs = function (e) {
  var t,
    a,
    r,
    i,
    n;
  for (t = e.cells.length, a = 0; a < t; a++) (r = e.cells[a]).BlobBytesID >= 0 &&
    this.IsBlobURL(r.ImageURL) &&
    (
      i = this.Table_CellGetBlobBytes(r),
      n = FileParser.GetImageBlobType(i.ImageDir),
      r.ImageURL = GlobalData.optManager.MakeURL(null, i.Bytes, n)
    )
}

ListManager.LM.prototypeTable_DeleteURLs = function (e) {
  var t,
    a,
    r;
  for (t = e.cells.length, a = 0; a < t; a++) (r = e.cells[a]).BlobBytesID >= 0 &&
    this.IsBlobURL(r.ImageURL) &&
    this.DeleteURL(r.ImageURL)
}

ListManager.LM.prototypeTable_RefreshURLs = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l;
  for (r = e.cells.length, i = 0; i < r; i++) n = e.cells[i],
    this.IsBlobURL(n.ImageURL) &&
    (
      (l = this.Table_GetCellWithID(t, n.uniqueid, null)) ? n.ImageURL !== l.ImageURL &&
        (
          this.DeleteURL(n.ImageURL),
          a ||
          this.IsBlobURL(l.ImageURL) &&
          (o = this.Table_CellGetBlobBytes(l)) &&
          (
            s = FileParser.GetImageBlobType(o.ImageDir),
            this.IsBlobURL(l.ImageURL) &&
            (l.ImageURL = GlobalData.optManager.MakeURL(null, o.Bytes, s))
          )
        ) : this.DeleteURL(n.ImageURL)
    );
  if (!a) for (r = t.cells.length, i = 0; i < r; i++) l = t.cells[i],
    this.IsBlobURL(l.ImageURL) &&
    (
      null !== (n = this.Table_GetCellWithID(e, l.uniqueid, null)) &&
      !1 !== this.IsBlobURL(n.ImageURL) ||
      (o = this.Table_CellGetBlobBytes(l)) &&
      (
        s = FileParser.GetImageBlobType(o.ImageDir),
        this.IsBlobURL(l.ImageURL) &&
        (l.ImageURL = GlobalData.optManager.MakeURL(null, o.Bytes, s))
      )
    )
}

ListManager.LM.prototypeTable_ConvertToVisio = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = {},
    g = [],
    h = ConstantData.SDRShapeTypes.SED_S_Rect,
    m = {
      x: e.Frame.x + e.Frame.width / 2,
      y: e.Frame.y + e.Frame.height / 2
    },
    C = function (a, r, i, n) {
      var s = a.frame.height - a.hdisp;
      (D = Utils1.DeepCopy(e)).RotationAngle = 0,
        delete D.BlockID,
        D.TableID = - 1,
        D.StyleRecord.Fill = Utils1.DeepCopy(a.fill),
        D.StyleRecord.Text = Utils1.DeepCopy(a.Text),
        D.StyleRecord.Line.Thickness = 0,
        D.StyleRecord.OutsideEffect.OutsideType = 0,
        a.nextra &&
        (
          r += a.nextra,
          s = t.rows[r].frame.y + t.rows[r].frame.height - a.frame.y - a.hdisp
        ),
        D.Frame.x = d.x + a.frame.x,
        D.Frame.y = d.y + a.frame.y,
        D.Frame.width = a.frame.width - a.vdisp,
        D.Frame.height = s;
      var c = e.StyleRecord.Line.Thickness;
      i &&
        (D.Frame.x += c, D.Frame.width -= c),
        n &&
        (D.Frame.width -= c),
        0 === r &&
        (D.Frame.y += c, D.Frame.height -= c),
        r === o - 1 &&
        (D.Frame.height -= c),
        D.TextAlign = SDF.W32JustToTextAlign(a.just, a.vjust),
        D.sizedim.width = a.sizedim.width,
        D.sizedim.height = a.sizedim.height,
        D.DataID = a.DataID,
        D.dataclass = h,
        u = new ListManager.Rect(D),
        l = GlobalData.optManager.AddNewObject(u, !1, !1),
        (p = GlobalData.optManager.GetObjectPtr(l, !1)).DataID = a.DataID,
        p.BlobBytesID = a.BlobBytesID,
        p.BlobBytesID >= 0 &&
        (p.ImageHeader = Utils1.DeepCopy(a.Image)),
        0 !== e.RotationAngle &&
        p.ScaleObject(0, 0, m, e.RotationAngle, 1, 1, !1),
        S = p.ConvertToVisio([]),
        g.push(S[0]),
        selectedlist.push(S[0])
    },
    y = function (a, r, i) {
      (D = Utils1.DeepCopy(e)).RotationAngle = 0,
        delete D.BlockID,
        D.TableID = - 1,
        D.DataID = - 1,
        D.StartPoint = {},
        D.EndPoint = {};
      var n = a.frame.height,
        s = e.StyleRecord.Line.Thickness;
      a.nextra &&
        (n = t.rows[c].frame.y + t.rows[c].frame.height - a.frame.y),
        r ? (
          D.StyleRecord.Line = Utils1.DeepCopy(a.vline),
          D.StartPoint.x = d.x + a.frame.x + a.frame.width - a.vdisp / 2,
          D.StartPoint.y = d.y + a.frame.y,
          D.EndPoint.x = D.StartPoint.x,
          D.EndPoint.y = d.y + a.frame.y + n,
          c === o - 1 &&
          (D.EndPoint.y -= s)
        ) : (
          D.StyleRecord.Line = Utils1.DeepCopy(a.hline),
          D.StartPoint.y = d.y + a.frame.y + n - a.hdisp / 2,
          D.StartPoint.x = d.x + a.frame.x,
          D.EndPoint.y = D.StartPoint.y,
          D.EndPoint.x = d.x + a.frame.x + a.frame.width,
          i &&
          (D.EndPoint.x -= s)
        ),
        D.StyleRecord.OutsideEffect.OutsideType = 0,
        u = new ListManager.Line(D),
        l = GlobalData.optManager.AddNewObject(u, !1, !1),
        p = GlobalData.optManager.GetObjectPtr(l, !1),
        0 !== e.RotationAngle &&
        p.ScaleObject(0, 0, m, e.RotationAngle, 1, 1, !1),
        S = p.ConvertToVisio([]),
        g.push(S[0]),
        selectedlist.push(S[0])
    };
  GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSelectedListBlockID, !1);
  for (
    selectedlist = [],
    e.TableID = - 1,
    d = $.extend(!0, {
    }, e.trect),
    e.dataclass !== h &&
    (i = t.cells[0], e.StyleRecord.Fill = Utils1.DeepCopy(i.fill)),
    S = e.ConvertToVisio([]),
    g.push(S[0]),
    selectedlist.push(S[0]),
    o = t.rows.length,
    a = 0;
    a < o;
    a++
  ) for (s = (n = t.rows[a]).ncells, r = 0; r < s; r++) if (
    c = a,
    !(
      (i = t.cells[n.start + r]).flags & ListManager.Table.CellFlags.SDT_F_SilentF
    )
  ) if (i.Image && i.Image.iconid > 0) {
    var f = Utils1.DeepCopy(i),
      L = Utils1.DeepCopy(i);
    f.BlobBytesID = null,
      f.Image = null,
      f.ImageURL = null,
      C(f, a, 0 === r, r === s - 1);
    var I = ConstantData.Defines.Icon_Dim,
      T = (L.frame.width - I) / 2,
      b = (L.frame.height - I) / 2;
    Utils2.InflateRect(L.frame, - T, - b),
      C(L, a, !1, !1)
  } else C(i, a, 0 === r, r === s - 1);
  for (a = 0; a < o; a++) for (s = (n = t.rows[a]).ncells, r = 0; r < s; r++) c = a,
    (i = t.cells[n.start + r]).flags & ListManager.Table.CellFlags.SDT_F_SilentF ||
    (
      i.nextra &&
      (c += i.nextra),
      r < s - 1 &&
      i.vline.Thickness > 0 &&
      y(i, !0, r === s - 1),
      c < o - 1 &&
      i.hline.Thickness > 0 &&
      y(i, !1, r === s - 1)
    );
  l = GlobalData.optManager.GroupSelectedShapes(!0, selectedlist, !0, !1),
    (g = []).push(l);
  var M = GlobalData.optManager.GetObjectPtr(l, !1);
  return M &&
    (
      M.moreflags = Utils2.SetFlag(
        M.moreflags,
        ConstantData.ObjMoreFlags.SED_MF_VisioExportTable,
        !0
      )
    ),
    g
},



  ListManager.LM.prototype.Table_ExportText = function (e) {
    var t,
      a,
      r,
      i,
      n,
      o = '';
    for (a = e.rows.length, t = 0; t < a; t++) {
      for (
        n = (i = e.rows[t]).start,
        r = e.cells[n];
        !(this.Table_AllowCellTextEdit(e, n) || ++n >= i.start + i.ncells);
      ) r = e.cells[n];
      o += '"',
        r.DataID >= 0 &&
        (
          TextBlock = GlobalData.optManager.GetObjectPtr(r.DataID, !1),
          TextBlock &&
          (o += TextBlock.runtimeText.text)
        ),
        o += '"',
        t < a - 1 &&
        (o += ',')
    }
    return o
  }

ListManager.LM.prototypeLoadHolidays = function (e) {
  return e ? ListManager.Holidays : ListManager.ProjectHolidays
}

ListManager.LM.prototypeCountryNameFromHolidayMask = function (e) {
  var t = '';
  return e == ListManager.Table.HolidayCountryMask.SDT_HT_ALL ? t = ListManager.Table.HolidayCountries.SDT_Country_All : e & ListManager.Table.HolidayCountryMask.SDT_HT_USA ? t = ListManager.Table.HolidayCountries.SDT_Country_USA : e & ListManager.Table.HolidayCountryMask.SDT_HT_CANADA ? t = ListManager.Table.HolidayCountries.SDT_Country_Canada : e & ListManager.Table.HolidayCountryMask.SDT_HT_UK ? t = ListManager.Table.HolidayCountries.SDT_Country_UK : e & ListManager.Table.HolidayCountryMask.SDT_HT_AUSTRALIA &&
    (
      t = ListManager.Table.HolidayCountries.SDT_Country_Australia
    ),
    t
}

ListManager.LM.prototypeGetHolidayStr = function (e, t, a) {

  var r,
    i = Utils2.FiletimeToJSDate(a),
    n = e[('0' + (i.getMonth() + 1)).slice(- 2) + '/' + i.getDate() + '/' + i.getFullYear()];
  if (!n) return null;
  for (r = 0; r < n.length; r++) if (n[r].Country.indexOf(t) >= 0) return n[r].Holiday;
  return null
}

ListManager.LM.prototypeSDTable_GetPeriodEnd = function (e, t) {

  var a;
  switch (e) {
    case ListManager.Table.CellTypes.SDT_CT_HOUR_VALUE:
      t += ListManager.TimeAmounts.OneHourNS;
      break;
    case ListManager.Table.CellTypes.SDT_CT_DAY_VALUE:
      t += ListManager.TimeAmounts.OneDayNS;
      break;
    case ListManager.Table.CellTypes.SDT_CT_WEEK_VALUE:
      t += ListManager.TimeAmounts.OneWeekNS;
      break;
    case ListManager.Table.CellTypes.SDT_CT_MONTH_VALUE:
      (a = Utils2.SDRLocalTime(t)).wMonth++,
        a.wMonth > 12 &&
        (a.wMonth = 1, a.wYear++),
        t = Utils2.SDRmktime(a);
      break;
    case ListManager.Table.CellTypes.SDT_CT_QUARTER_VALUE:
      (a = Utils2.SDRLocalTime(t)).wMonth += 3,
        a.wMonth > 12 &&
        (a.wMonth = 1, a.wYear++),
        t = Utils2.SDRmktime(a);
      break;
    case ListManager.Table.CellTypes.SDT_CT_YEAR_VALUE:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID:
      theTime = Utils2.SDRLocalTime(t),
        a.wYear++,
        t = Utils2.SDRmktime(a)
  }
  return t
}

ListManager.LM.prototypeTable_EnsureDateFormatCorrect = function (e, t) {
  var a,
    r,
    i = null,
    n = null,
    o = null,
    s = !1;
  if (
    (i = GlobalData.optManager.GetObjectPtr(e, !1)) &&
    (n = i.GetTable(!1)) &&
    (
      systemUsingEuroFormat = Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat) == ListManager.DateCodes.SDEURODATE,
      t ? systemUsingEuroFormat &&
        (
          s = !0,
          n.flags = Utils2.SetFlag(n.flags, ListManager.Table.TableFlags.SDT_TF_EURODATE, !0)
        ) : n.flags & ListManager.Table.TableFlags.SDT_TF_EURODATE ? systemUsingEuroFormat ||
          (
            s = !0,
            n.flags = Utils2.SetFlag(n.flags, ListManager.Table.TableFlags.SDT_TF_EURODATE, !1)
          ) : systemUsingEuroFormat &&
      (
        s = !0,
        n.flags = Utils2.SetFlag(n.flags, ListManager.Table.TableFlags.SDT_TF_EURODATE, !0)
      ),
      s
    )
  ) for (rowsLen = n.rows.length, a = 0; a < rowsLen; a++) for (r = 0; r < n.rows[a].ncells; r++) (o = n.cells[n.rows[a].start + r]).celltype !== ListManager.Table.CellTypes.SDT_CT_GANTT_START &&
    o.celltype !== ListManager.Table.CellTypes.SDT_CT_GANTT_END ||
    (
      textObj = GlobalData.optManager.GetObjectPtr(o.DataID, !1),
      dateText = textObj.runtimeText.text,
      dateText = Utils2.FlipDate(dateText),
      dateText &&
      (textObj.runtimeText.text = dateText)
    )
}

ListManager.LM.prototypeTable_HasFieldDataInText = function (e, t) {
  var a,
    r,
    i,
    n,
    o = this.svgObjectLayer.FindElement(e);
  if (!o) return !1;
  for (r = t.cells.length, a = 0; a < r; a++) if (
    (i = t.cells[a]).DataID >= 0 &&
    (
      n = o.GetElementByID(ConstantData.SVGElementClass.TEXT, i.DataID)
    ) &&
    n.HasDataFields()
  ) return !0;
  return !1
}

ListManager.LM.prototypeTable_CellHasContainer = function (e, t, a) {
  return null == e &&
    (e = thetable.cells[a]),
    e.childcontainer > 0 &&
    e.childcontainer
}

ListManager.LM.prototypeContainerIsInCell = function (e) {
  if (e.hooks.length && null != e.hooks[0].cellid) {
    var t = GlobalData.optManager.GetObjectPtr(e.hooks[0].objid, !1);
    if (t) {
      var a = t.GetTable(!1);
      if (a) {
        var r = {},
          i = GlobalData.optManager.Table_GetCellWithID(a, e.hooks[0].cellid, r);
        if (i) return {
          cell: i,
          cellindex: r.index,
          theTable: a,
          obj: t
        }
      }
    }
  }
  return null
}

ListManager.LM.prototypeTable_ShowContainerMenu = function (e, t) {
  if (null == e) {
    var a = GlobalData.optManager.Table_GetActiveID();
    if (a >= 0) {
      var r = GlobalData.optManager.GetObjectPtr(a, !1);
      if (r) {
        var i = r.GetTable(!1),
          n = {
            x: GlobalData.optManager.RightClickParams.HitPt.x - r.trect.x,
            y: GlobalData.optManager.RightClickParams.HitPt.y - r.trect.y
          },
          o = GlobalData.optManager.Table_Hit(i, n.x, n.y);
        if (o < 0 && (o = i.select), i && o >= 0) e = {
          obj: r,
          theTable: i,
          cellindex: o,
          cell: i.cells[o]
        }
      }
    }
    if (null == e) return
  }
  GlobalData.optManager.RightClickParams.CellIndex = e.cellindex;
  var s = ListManager.Table.CellTypes,
    l = !1,
    S = !1;
  switch (e.cell.celltype) {
    case s.SD_CT_ROW_HEADER:
    case s.SD_CT_ROW_BODY:
      S = !0;
      break;
    case s.SD_CT_COL_HEADER:
    case s.SD_CT_COL_BODY:
      l = !0;
      break;
    case s.SD_CT_ROWCOL_HEADER:
    case s.SD_CT_ROW_HEADER_COL_BODY:
    case s.SD_CT_ROW_BODY_COL_HEADER:
    case s.SD_CT_ROW_BODY_COL_BODY:
      l = !0,
        S = !0
  }
  S &&
    l ? SDUI.Commands.MainController.ShowContextualMenu(
      Resources.Controls.ContextMenus.TableRowandCol.Id.toLowerCase(),
      t.gesture.center.clientX,
      t.gesture.center.clientY
    ) : S ? SDUI.Commands.MainController.ShowContextualMenu(
      Resources.Controls.ContextMenus.TableRows.Id.toLowerCase(),
      t.gesture.center.clientX,
      t.gesture.center.clientY
    ) : l &&
  SDUI.Commands.MainController.ShowContextualMenu(
    Resources.Controls.ContextMenus.TableCols.Id.toLowerCase(),
    t.gesture.center.clientX,
    t.gesture.center.clientY
  )
}

ListManager.LM.prototypeAddContainerToCell = function (e) {
  var t = GlobalData.optManager.Table_GetActiveID();
  if (t >= 0) {
    var a = GlobalData.optManager.GetObjectPtr(t, !0);
    if (a) {
      var r = a.GetTable(!0);
      if (r && r.select >= 0) {
        var i = r.cells[r.select];
        if (i.childcontainer < 0) {
          var n = new ListManager.ContainerList,
            o = i.trect;
          o = this.Table_GetJoinedCellFrame(r, r.select, !0, !0);
          var s = function (t, a, r) {
            var i,
              n = Utils1.DeepCopy(r);
            n.Line.Thickness = 0;
            var o = {
              Frame: {
                x: a.x,
                y: a.y,
                width: a.width,
                height: a.height
              },
              TextGrow: ConstantData.TextGrowBehavior.VERTICAL,
              StyleRecord: n
            };
            if (o.ContainerList = t, e) {
              var s = new ContainerListShape();
              t.List.push(s),
                t.flags = ConstantData.ContainerListFlags.Sparse
            }
            t.flags |= ConstantData.ContainerListFlags.AllowOnlyNonContainers;
            var l = new ListManager.ShapeContainer(o);
            return i = GlobalData.optManager.AddNewObject(l, !1, !0),
              Collab.AddNewBlockToSecondary(i),
              i
          }(
            n,
            {
              x: a.trect.x + o.x,
              y: a.trect.y + o.y,
              width: o.width,
              height: o.height
            },
            a.StyleRecord
          );
          GlobalData.optManager.GetObjectPtr(s, !1);
          GlobalData.optManager.UpdateHook(
            s,
            - 1,
            t,
            ConstantData.HookPts.SED_KCTL,
            {
              x: 0,
              y: 0
            },
            i.uniqueid
          ),
            a.objecttype = ConstantData.ObjectTypes.SD_OBJT_TABLE_WITH_SHAPECONTAINER,
            GlobalData.optManager.SetLinkFlag(t, ConstantData.LinkFlags.SED_L_MOVE),
            i.childcontainer = s;
          var l = {
            width: i.trect.width,
            height: i.trect.height
          },
            S = (
              o = Utils1.DeepCopy(a.trect),
              GlobalData.optManager.Table_TextGrow(
                a,
                r,
                r.select,
                ConstantData.TextGrowBehavior.HORIZONTAL,
                l,
                null
              )
            );
          o.width = S.x,
            o.height = S.y,
            a.TRectToFrame(o, !1),
            GlobalData.optManager.AddToDirtyList(t),
            GlobalData.optManager.CompleteOperation()
        }
      }
    }
  }
}

ListManager.LM.prototypeToggleNote = function (e, t, a) {
  var r = this.GetObjectPtr(e, !1);
  if (null != a && (t = r.IsNoteCell(a)), !t) {
    var i = r ? r.GetTable(!1) : null;
    if (i && i.select >= 0) {
      var n = GlobalData.optManager.Table_GetActiveID();
      if (r.BlockID === n) {
        var o = i.select;
        t = i.cells[o]
      }
    }
  }
  if (this.bInNoteEdit = !this.bInNoteEdit, this.bInNoteEdit) {
    if (this.ShowNote(e, t), GlobalData.docHandler.IsReadOnly()) return;
    var s;
    this.ActivateNote(e),
      (
        s = t ? this.GetObjectPtr(t.NoteID, !1) : r ? this.GetObjectPtr(r.NoteID, !1) : null
      ) &&
      !s.runtimeText &&
      this.ActiveNoteSelectAll(),
      this.UpdateSelectionAttributes([]),
      this.bNoteChanged = !1,
      Collab.UnBlockMessages()
  } else {
    if (
      this.DeactivateNote(e, t),
      this.HideNote(e),
      GlobalData.docHandler.IsReadOnly()
    ) return;
    this.UpdateSelectionAttributes([]),
      Collab.UnBlockMessages()
  }
}

ListManager.LM.prototypeGetNoteElement = function (e, t) {
  var a = this.svgObjectLayer.GetElementByID(e);
  if (
    a &&
    null != a.GetElementByID(ConstantData.SVGElementClass.SHAPE)
  ) {
    var r = 'note_' + e;
    return this.svgHighlightLayer.GetElementByID(r)
  }
  return null
}

ListManager.LM.prototypeShowNote = function (e, t) {
  var a,
    r = null,
    i = null;
  null != (a = this.GetObjectPtr(e, !1)) &&
    null != this.svgObjectLayer.GetElementByID(e).GetElementByID(ConstantData.SVGElementClass.SHAPE) &&
    (
      i = 'note_' + e,
      null == (r = this.svgHighlightLayer.GetElementByID(i)) &&
      null != (r = this.CreateNoteSVG(this.svgDoc, a, t)) &&
      (
        this.curNoteShape = e,
        this.curNoteTableCell = t,
        this.svgHighlightLayer.AddElement(r)
      )
    )
},
  ,
  ListManager.LM.prototype.HideNote = function (e) {
    var t = null,
      a = null;
    null != this.GetObjectPtr(e, !1) &&
      (
        null != this.svgObjectLayer.GetElementByID(e).GetElementByID(ConstantData.SVGElementClass.SHAPE) &&
        (
          a = 'note_' + e,
          null != (t = this.svgHighlightLayer.GetElementByID(a)) &&
          this.svgHighlightLayer.RemoveElement(t)
        ),
        this.curNoteShape = - 1,
        this.curNoteTableCell = null,
        this.bInNoteEdit = !1,
        this.bNoteChanged = !1
      )
  }

ListManager.LM.prototypeCreateNoteSVG = function (e, t, a) {
  var r = e.CreateShape(ConstantData.CreateShapeType.GROUP),
    i = 250,
    n = ConstantData.Defines.Note_TextMargin,
    o = ConstantData.Defines.NoteHeight + 2 * n;
  r.SetSize(i, o);
  var s = t.GetNotePos(t, a),
    l = s.x,
    S = s.y,
    c = e.CreateShape(ConstantData.CreateShapeType.RECT);
  c.SetSize(i, o),
    c.SetStrokeColor('transparent'),
    c.SetOpacity(1),
    c.SetStrokeWidth(1),
    c.SetFillColor('#FFFFE1'),
    c.SetID(ConstantData.SVGElementClass.SHAPE);
  var u = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT),
    p = i - 2 * n,
    d = o - 2 * n;
  u.SetPos(n, n),
    u.SetSize(p, d),
    u.SetVerticalAlignment('top'),
    u.SetID(ConstantData.SVGElementClass.NOTETEXT),
    u.SetEditCallback(this.NoteEditCallback, this),
    u.SetSpellCheck(GlobalData.optManager.DocAllowSpell()),
    u.SetConstraints(p, 0, 0);
  var D = t;
  a &&
    (D = a);
  var g = new SDGraphics.Text.Formatter.DefaultStyle;
  if (
    g.size = SDF.PointSizeToFontSize(ConstantData.Defines.Note_FontSize),
    - 1 != D.NoteID
  ) {
    var h = this.GetObjectPtr(D.NoteID, !1);
    h.runtimeText ? u.SetRuntimeText(h.runtimeText) : (
      u.SetText(Resources.Strings.DefaultNotesText),
      u.SetFormat(g)
    )
  } else u.SetText(Resources.Strings.DefaultNotesText),
    u.SetFormat(g);
  u.SetParagraphAlignment(ConstantData.TextAlign.LEFT),
    u.SetParagraphStyle({
      spacing: ConstantData.Defines.Note_Spacing
    });
  var m = u.GetTextMinDimensions();
  m.height > d &&
    (
      o = m.height + 2 * n,
      u.SetSize(p, m.height),
      c.SetSize(i, o),
      r.SetSize(i, o)
    );
  var C = this.PinNote(e, l, S, i, o);
  return r.SetPos(C.x, C.y),
    r.AddElement(c),
    r.AddElement(u),
    r.isShape = !0,
    r.SetID('note_' + t.BlockID),
    r
}

ListManager.LM.prototypeNoteEditCallback = function (e, t, a, r) {

  switch (e) {
    case 'edit':
      GlobalData.optManager.NoteResize(GlobalData.optManager.curNoteShape, GlobalData.optManager.curNoteTableCell),
        GlobalData.optManager.bNoteChanged = !0;
      break;
    case 'willresize':
      GlobalData.optManager.bNoteChanged = !0;
      break;
    case 'keyend':
    case 'charfilter':
    case 'activate':
      break;
    case 'deactivate':
      if (GlobalData.optManager.curNoteShape) {
        var i = Business.GetSelectionBusinessManager(GlobalData.optManager.curNoteShape);
        i &&
          i.OnDeactivateNote(a)
      }
      break;
    case 'select':
      GlobalData.optManager.TextSelectIdle(a)
  }
}

ListManager.LM.prototypeActivateNote = function (e) {
  var t,
    a = null;
  if (
    !GlobalData.docHandler.IsReadOnly() &&
    (
      t = 'note_' + e,
      null != (a = this.svgHighlightLayer.GetElementByID(t))
    )
  ) {
    var r = a.GetElementByID(ConstantData.SVGElementClass.NOTETEXT),
      i = a.GetElementByID(ConstantData.SVGElementClass.SHAPE);
    i.SetFillColor('#f5f7f9'),
      null != r &&
      null != i &&
      GlobalData.optManager.TERegisterNoteEvents(r, i)
  }
}

ListManager.LM.prototypeDeactivateNote = function (e, t) {
  if (!GlobalData.docHandler.IsReadOnly()) {
    var a = this.svgDoc.GetActiveEdit(),
      r = !1,
      i = - 1;
    if (null != a) {
      var n = 0 === a.GetTextMinDimensions().width ||
        ' ' === a.GetText() ||
        a.GetText() === Resources.Strings.DefaultNotesText;
      if (a) {
        var o = a.GetRuntimeText(),
          s = this.GetObjectPtr(e, !1),
          l = s,
          S = e;
        t ? (l = t, i = t.uniqueid) : S = s.GetIconShape();
        var c = this.GetObjectPtr(l.NoteID, !1);
        if (
          r = this.bNoteChanged,
          this.bNoteChanged = !1,
          null != c ||
          n ||
          (r = !0),
          r
        ) {
          if (
            Collab.AllowMessage() &&
            Collab.BeginSecondaryEdit(),
            l = s = this.GetObjectPtr(e, !1),
            t
          ) {
            if (p = s.GetTable(!1)) {
              var u = GlobalData.optManager.Table_GetCellWithID(p, t.uniqueid);
              u &&
                (l = u)
            }
            i = t.uniqueid
          }
          if (
            (l.NoteID < 0 || null == c) &&
            !n &&
            this.AddObjectNote(s, t, !0),
            - 1 != l.NoteID &&
            (
              (c = this.GetObjectPtr(l.NoteID, !0)).runtimeText = o,
              this.TEUnregisterNoteEvents(),
              n
            )
          ) {
            var p = (s = this.GetObjectPtr(e, !0)).GetTable(!0),
              d = GlobalData.objectStore.GetObject(l.NoteID);
            l.NoteID = - 1,
              this.curNoteShape = - 1,
              this.curNoteTableCell = null,
              d &&
              d.Delete(),
              this.AddToDirtyList(S)
          }
        } else - 1 === l.NoteID &&
          (
            this.curNoteShape = - 1,
            this.curNoteTableCell = null,
            this.AddToDirtyList(S)
          );
        if (r) {
          if (Collab.AllowMessage()) {
            var D = {
              BlockID: e,
              CellID: i
            };
            D.runtimeText = Utils1.DeepCopy(o),
              Collab.BuildMessage(ConstantData.CollabMessages.Edit_Note, D, !1)
          }
          this.CompleteOperation(null, !1),
            this.curNoteShape = e,
            this.curNoteTableCell = t
        } else this.RenderDirtySVGObjects(),
          this.curNoteShape = e,
          this.curNoteTableCell = t
      }
    }
  }
}

ListManager.LM.prototypeAddObjectNoteBlock = function (e, t) {
  var a = {},
    r = new ListManager.BaseShape,
    i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  r.StyleRecord = $.extend(!0, {
  }, i.def.style);
  var n = Resources.FindStyle(ConstantData.Defines.TextBlockStyle);
  n &&
    (r.StyleRecord.Text = Utils1.DeepCopy(n.Text));
  var o = r.GetTextDefault(a),
    s = this.CalcDefaultInitialTextStyle(o),
    l = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
  if (l.SetText(e), l.SetFormat(s), l.SetParagraphStyle(a), t) {
    var S = l.CalcTextFit(32000);
    t.height = S.height,
      t.width = S.width
  }
  var c = l.GetRuntimeText(),
    u = l.GetSelectedRange(),
    p = new ListManager.TextObject({
    });
  return p.runtimeText = c,
    p.selrange = u,
    GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_NOTES_OBJECT, p).ID
}

ListManager.LM.prototypeAddObjectNote = function (e, t, a) {
  var r = e.BlockID,
    i = e = this.GetObjectPtr(r, !0),
    n = r;
  if (t) {
    e.GetTable(!0);
    i = t
  } else n = e.GetIconShape();
  if (i.NoteID < 0) {
    var o = new ListManager.TextObject({
    }),
      s = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_NOTES_OBJECT, o);
    if (null === s) throw new Error('ActivateTextEdit.CreateBlock: CreateBlock failed');

    // new SDJSError({
    //   source: 'ActivateTextEdit.CreateBlock',
    //   message: 'ActivateTextEdit got a null new text block allocation'
    // });
    i.NoteID = s.ID
  }
  a ||
    (this.AddToDirtyList(n), this.RenderDirtySVGObjects())
}

ListManager.LM.prototypeNote_CloseEdit = function () {
  - 1 != this.curNoteShape &&
    (
      this.DeactivateNote(this.curNoteShape, this.curNoteTableCell),
      this.HideNote(this.curNoteShape)
    )
}

ListManager.LM.prototypeActiveNoteSelectAll = function () {
  var e = this.svgDoc.GetActiveEdit();
  if (e) {
    var t = e.GetText().length;
    e.SetSelectedRange(0, t)
  }
}

ListManager.LM.prototypeEditNote = function () {
  if (!GlobalData.docHandler.IsReadOnly()) {
    this.CloseEdit(!0),
      this.bInNoteEdit ||
      this.DeactivateAllTextEdit(!1);
    var e = GlobalData.optManager.GetTargetSelect();
    if (e < 0) Utils2.Alert(Resources.Strings.NoShape, null);
    else {
      var t,
        a = this.GetObjectPtr(e, !1),
        r = null,
        i = !0;
      if (a) {
        if (a.flags & ConstantData.ObjFlags.SEDO_Lock) return;
        var n = GlobalData.optManager.SD_GetVisioTextChild(a.BlockID);
        n >= 0 &&
          (a = this.GetObjectPtr(n, !1));
        var o = a.BlockID;
        if (!this.bInNoteEdit) {
          r = null;
          var s = - 1;
          if ((t = a.GetTable(!1)) && t.select >= 0) {
            var l = GlobalData.optManager.Table_GetActiveID();
            a.BlockID === l &&
              (
                s = t.select,
                - 1 == (r = t.cells[s]).NoteID &&
                (
                  i = !1,
                  this.curNoteShape = a.BlockID,
                  this.curNoteTableCell = r,
                  this.AddToDirtyList(o),
                  this.RenderDirtySVGObjects()
                )
              )
          }
          i &&
            - 1 == a.NoteID &&
            (
              o = a.GetIconShape(),
              this.curNoteShape = a.BlockID,
              this.curNoteTableCell = null,
              this.AddToDirtyList(o),
              this.RenderDirtySVGObjects()
            )
        }
        this.ToggleNote(a.BlockID, r)
      }
    }
  }
}

ListManager.LM.prototypePinNote = function (e, t, a, r, i) {
  var n = e.docInfo.docVisX + e.docInfo.docVisWidth,
    o = e.docInfo.docVisY + e.docInfo.docVisHeight;
  return t + r > n &&
    (t = n - r - 1),
    a + i > o &&
    (a = o - i - 1),
  {
    x: t,
    y: a
  }
}

ListManager.LM.prototypeNoteResize = function (e, t) {
  var a = this.svgDoc.GetActiveEdit(),
    r = ConstantData.Defines.Note_TextMargin,
    i = ConstantData.Defines.NoteHeight + 2 * r;
  if (a) {
    var n = 'note_' + e,
      o = this.svgHighlightLayer.GetElementByID(n);
    if (null != o) {
      var s = o.GetElementByID(ConstantData.SVGElementClass.SHAPE),
        l = o.GetElementByID(ConstantData.SVGElementClass.NOTETEXT),
        S = l.GetTextMinDimensions(),
        c = this.GetObjectPtr(e, !1),
        u = c.GetNotePos(c, t),
        p = u.x,
        d = u.y,
        D = 250,
        g = S.height + 6;
      g < i &&
        (g = i);
      var h = D - 2 * r,
        m = g - 2 * r,
        C = this.PinNote(this.svgDoc, p, d, D, g);
      o.SetPos(C.x, C.y),
        o.SetSize(D, g),
        s.SetSize(D, g),
        l.SetConstraints(h, 0, 0),
        l.SetPos(r, r),
        l.SetSize(h, m),
        l.SetVerticalAlignment('top')
    }
  }
}

ListManager.LM.prototypeTERegisterNoteEvents = function (e, t) {
  var a = function (t) {
    var a;
    Utils2.StopPropagationAndDefaults(t),
      GlobalData.optManager.IsRightClick(t) &&
      GlobalData.optManager.bInNoteEdit &&
      (
        e &&
        (
          a = e.GetSpellAtLocation(t.gesture.center.clientX, t.gesture.center.clientY)
        ),
        a >= 0 &&
        GlobalData.optManager.svgDoc.GetSpellCheck().ShowSpellMenu(e, a, t.gesture.center.clientX, t.gesture.center.clientY)
      )
  };
  this.SetVirtualKeyboardLifter(e),
    e.Activate(),
    this.TETextHammer = Hammer(e.editor.parent.textElem.node),
    this.TEClickAreaHammer = Hammer(e.editor.parent.clickAreaElem.node),
    this.TEWorkAreaHammer = Hammer(document.getElementById('svg-area')),
    this.TENoteAreaHammer = Hammer(t.svgObj.node),
    this.TETextHammer.on('dragstart', this.TEDragStartFactory(e.editor)),
    this.TEClickAreaHammer.on('dragstart', this.TEClickAreaDragStartFactory(e.editor)),
    this.TEWorkAreaHammer.on('drag', this.TEDragFactory(e.editor)),
    this.TEWorkAreaHammer.on('dragend', this.TEDragEndFactory(e.editor)),
    this.TEClickAreaHammer.on('tap', a),
    this.TETextHammer.on('tap', a),
    this.TENoteAreaHammer.on('tap', a),
    this.TENoteAreaHammer.on('dragstart', this.TEDragStartFactory(e.editor))
}

ListManager.LM.prototypeTEUnregisterNoteEvents = function () {
  this.svgDoc.ClearActiveEdit(),
    this.TETextHammer.off('dragstart'),
    this.TEClickAreaHammer.off('dragstart'),
    this.TEWorkAreaHammer.off('drag'),
    this.TEWorkAreaHammer.off('dragend'),
    this.TEClickAreaHammer.off('tap'),
    this.TETextHammer.off('tap'),
    this.TENoteAreaHammer.off('dragstart'),
    this.TENoteAreaHammer.off('tap'),
    this.TETextHammer.dispose(),
    this.TETextHammer = null,
    this.TEClickAreaHammer.dispose(),
    this.TEClickAreaHammer = null,
    this.TEWorkAreaHammer.dispose(),
    this.TEWorkAreaHammer = null,
    this.TENoteAreaHammer.dispose(),
    this.TENoteAreaHammer = null
}

ListManager.LM.prototypeNoteTextResizeCommon = function () {
  this.NoteResize(GlobalData.optManager.curNoteShape, GlobalData.optManager.curNoteTableCell)
},



  ListManager.LM.prototype.CommentClick = function (e) {
    e.stopPropagation(),
      e.preventDefault()
  }

ListManager.LM.prototypeComment_CreateList = function (e) {
  var t = new ListManager.CommentList;
  return t.threads.push(e),
    GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_COMMENT_LIST, t)
}

ListManager.LM.prototypeComment_CreateThread = function (e, t) {
  var a = new ListManager.CommentThread;
  a.blocks.push(e);
  var r,
    i = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_COMMENT_THREAD, a);
  if (i && !t) {
    var n = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
    n.CommentListID < 0 ? (
      (r = this.Comment_CreateList(i.ID)) &&
      (
        (n = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).CommentListID = r.ID
      ),
      GlobalData.optManager.CommentShowTab(!0)
    ) : (r = this.GetObjectPtr(n.CommentListID, !0)) &&
    (
      0 === r.threads.length &&
      GlobalData.optManager.CommentShowTab(!0),
      r.threads.push(i.ID)
    )
  }
  return i
}

ListManager.LM.prototypeComment_Ungroup = function (e) {
  if (e && e.length) {
    var t,
      a,
      r,
      i = e.length,
      n = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
    for (t = 0; t < i; t++) a = e[t],
      n.CommentListID < 0 ? (
        (r = this.Comment_CreateList(a)) &&
        (
          (n = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).CommentListID = r.ID
        ),
        GlobalData.optManager.CommentShowTab(!0)
      ) : (r = this.GetObjectPtr(n.CommentListID, !0)) &&
      (
        0 === r.threads.length &&
        GlobalData.optManager.CommentShowTab(!0),
        r.threads.indexOf(a) < 0 &&
        r.threads.push(a)
      )
  }
}

ListManager.LM.prototypeComment_InitBlock = function (e, t) {
  e.year = t.getFullYear(),
    e.month = t.getMonth(),
    e.day = t.getDate(),
    e.timestring = t.toLocaleTimeString(void 0, {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }),
    e.userName
}

ListManager.LM.prototypeComment_CreateBlock = function (e, t, a) {
  var r = new ListManager.CommentBlock,
    i = new Date;
  return r.comment = t,
    a &&
      a.Data &&
      a.Data.userID ? r.userID = a.Data.userID : r.userID = ConstantData.DocumentContext.UserId,
    a &&
      a.Data &&
      a.Data.UserName ? r.userName = a.Data.UserName : r.userName = ConstantData.DocumentContext.UserName,
    r.objectID = e,
    r.timestamp = i.getTime(),
    this.Comment_InitBlock(r, i),
    GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_COMMENT_BLOCK, r)
}

ListManager.LM.prototypeCommentEnter = function (e, t, a, r, i) {
  if (null == a) {
    a = GlobalData.optManager.GetTargetSelect();
    var n = GlobalData.optManager.SD_GetVisioTextChild(a);
    n >= 0 &&
      (a = n)
  }
  var o,
    s,
    l = this.GetObjectPtr(a, !1),
    S = !1;
  if (t && null == l ? s = - 1 : l && (s = l.BlockID), null != s && e && e.length > 0) {
    Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit();
    var c,
      u = this.Comment_CreateBlock(s, e, i);
    if (u) if (l) if (l.CommentID < 0) {
      (o = this.Comment_CreateThread(u.ID, !1)).Data.objID = a,
        (l = this.GetObjectPtr(a, !0)).CommentID = o.ID,
        o.Data.timestamp = u.Data.timestamp,
        ConstantData.CommentParams.CommentID = l.CommentID;
      var p = l.GetIconShape();
      GlobalData.optManager.AddToDirtyList(p),
        S = !0
    } else (o = this.GetObjectPtr(l.CommentID, !0)).blocks.push(u.ID);
    else if (
      (c = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).CommentID >= 0 &&
      ConstantData.CommentParams.DocumentThreadID < 0 &&
      (ConstantData.CommentParams.DocumentThreadID = c.CommentID),
      ConstantData.CommentParams.DocumentThreadID < 0
    ) (o = this.Comment_CreateThread(u.ID, !1)).Data.objID = - 1,
      (c = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0)).CommentID = o.ID,
      ConstantData.CommentParams.DocumentThreadID = o.ID,
      o.Data.timestamp = u.Data.timestamp,
      ConstantData.CommentParams.CommentID = o.ID;
    else 0 === (
      o = this.GetObjectPtr(ConstantData.CommentParams.DocumentThreadID, !0)
    ).blocks.length &&
      GlobalData.optManager.CommentShowTab(!0),
      o.blocks.push(u.ID);
    if (
      t ? GlobalData.optManager.Comment_BuildPanel() : (
        r ||
        GlobalData.optManager.Comment_BuildDropDown(),
        GlobalData.optManager.Comment_UpdatePanel(null)
      ),
      $(window).trigger('SDJS.Notify', {
        action: `commented: "${e}"`
      }),
      Collab.AllowMessage()
    ) {
      var d = {
        BlockID: s,
        comment: e,
        userID: ConstantData.DocumentContext.UserId,
        UserName: ConstantData.DocumentContext.UserName
      };
      Collab.BuildMessage(ConstantData.CollabMessages.Comment_Add, d, !1)
    }
    GlobalData.optManager.PreserveUndoState(!1),
      S &&
      GlobalData.optManager.RenderDirtySVGObjects(),
      Collab.UnBlockMessages()
  }
}




ListManager.LM.prototypeCommentSetDeleteTarget = function (e) {
  ConstantData.CommentParams.DeleteTarget = e
}

ListManager.LM.prototypeCommentDelete = function () {
  var e = ConstantData.CommentParams.DeleteTarget;
  if (!(e < 0)) {
    var t = !1,
      a = GlobalData.optManager.GetObjectPtr(ConstantData.CommentParams.CommentID, !0);
    if (null != a) {
      var r = GlobalData.objectStore.GetObject(e);
      r &&
        r.Delete();
      var i = a.blocks.indexOf(e);
      if (i >= 0 && a.blocks.splice(i, 1), 0 === a.blocks.length) {
        var n = GlobalData.optManager.GetObjectPtr(a.objID, !0);
        if (n) {
          n.CommentID = - 1,
            t = !0;
          var o = n.GetIconShape();
          GlobalData.optManager.AddToDirtyList(o)
        }
        var s = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
          l = this.GetObjectPtr(s.CommentListID, !0);
        l &&
          (i = l.threads.indexOf(a.BlockID)) >= 0 &&
          (
            l.threads.splice(i, 1),
            0 === l.threads.length &&
            GlobalData.optManager.CommentShowTab(!1)
          ),
          (r = GlobalData.objectStore.GetObject(a.BlockID)) &&
          r.Delete()
      }
      GlobalData.optManager.Comment_BuildDropDown(),
        GlobalData.optManager.PreserveUndoState(!1),
        t &&
        GlobalData.optManager.RenderDirtySVGObjects(),
        Collab.UnBlockMessages()
    }
  }
}

ListManager.LM.prototypeComment_Group = function (e) {
  var t,
    a,
    r,
    i,
    n = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    o = this.GetObjectPtr(n.CommentListID, !0);
  if (o) {
    for (r = e.length, a = 0; a < r; a++) i = e[a],
      (t = o.threads.indexOf(i)) >= 0 &&
      (
        o.threads.splice(t, 1),
        0 === o.threads.length &&
        GlobalData.optManager.CommentShowTab(!1)
      );
    o.threads.length > 0 &&
      this.Comment_UpdatePanel(- 2)
  }
}

ListManager.LM.prototypeCommentObjectDelete = function (e) {
  if (e.CommentID >= 0) {
    var t,
      a,
      r,
      i,
      n;
    if (
      e = GlobalData.optManager.GetObjectPtr(e.BlockID, !0),
      t = GlobalData.optManager.GetObjectPtr(e.CommentID, !0)
    ) {
      var o = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
        s = this.GetObjectPtr(o.CommentListID, !0);
      for (r = t.blocks.length, a = 0; a < r; a++) (i = GlobalData.objectStore.GetObject(t.blocks[a])) &&
        i.Delete(),
        s &&
        (n = s.threads.indexOf(t.BlockID)) >= 0 &&
        (
          s.threads.splice(n, 1),
          0 === s.threads.length &&
          GlobalData.optManager.CommentShowTab(!1)
        ),
        (i = GlobalData.objectStore.GetObject(t.BlockID)) &&
        i.Delete()
    }
    e.CommentID = - 1
  }
}

ListManager.LM.prototypeComment_MakeDayList = function (e) {
  var t = [];
  if (e) {
    var a,
      r,
      i,
      n;
    i = e.blocks.length;
    var o,
      s,
      l = new Date,
      S = l.getTime() - ListManager.TimeAmounts.OneDayMS,
      c = (l.getFullYear(), l.getMonth(), l.getDate(), new Date(S)),
      u = {
        year: c.getFullYear(),
        month: c.getMonth(),
        day: c.getDate()
      },
      p = {
        label: 'Today',
        start: - 1,
        n: 0
      },
      d = {
        label: 'Yesterday',
        start: - 1,
        n: 0
      };
    for (r = 0; r < i; r++) if (n = GlobalData.optManager.GetObjectPtr(e.blocks[r], !1)) switch (
      '' == n.userName &&
      (n.userName = GlobalData.optManager.CommentUserIDs[n.userID]),
      0 == n.year &&
      n &&
      (a = new Date(n.timestamp), this.Comment_InitBlock(n, a)),
      Utils2.EqualDate(n, u)
    ) {
        case - 1:
          null == s ? (
            s = {
              year: n.year,
              month: n.month,
              day: n.day,
              label: '',
              start: r,
              n: 1
            },
            o = new Date(n.year, n.month, n.day),
            s.label = o.toLocaleDateString(),
            t.push(s)
          ) : 0 === Utils2.EqualDate(s, n) ? s.n++ : (
            s = {
              year: n.year,
              month: n.month,
              day: n.day,
              label: '',
              start: r,
              n: 1
            },
            o = new Date(n.year, n.month, n.day),
            s.label = o.toLocaleDateString(),
            t.push(s)
          );
          break;
        case 0:
          d.start < 0 &&
            (d.start = r),
            d.n++;
          break;
        default:
          p.start < 0 &&
            (p.start = r),
            p.n++
      }
    d.n > 0 &&
      t.push(d),
      p.n > 0 &&
      t.push(p)
  }
  return t
}





ListManager.LM.prototypeComment_BuildPanel = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s = new ListManager.CommentThread,
    l = (new ListManager.CommentThread, new SDUI.Appender),
    S = [],
    c = null,
    u = - 1,
    p = 200;
  null == ConstantData.CommentParams.Panel &&
    (
      ConstantData.CommentParams.Panel = Resources.Controls.SmartPanel_Comments.Panel.GetControl(!0)
    ),
    null == ConstantData.CommentParams.PanelContainer &&
    (
      ConstantData.CommentParams.PanelContainer = Resources.Controls.SmartPanel_Comments.ThreadContainer.GetControl(!0)
    ),
    ConstantData.CommentParams.PanelContainer.empty(),
    a = ConstantData.CommentParams.PanelContainer,
    r = ConstantData.CommentParams.Panel;
  var d,
    D = GlobalData.optManager.GetTargetSelect();
  ConstantData.CommentParams.PanelTargetID = D;
  var g = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  if (g.CommentListID >= 0) {
    var h = this.GetObjectPtr(g.CommentListID, !1);
    for (i = h.threads.length, n = 0; n < i; n++) (o = this.GetObjectPtr(h.threads[n])) &&
      o.blocks.length &&
      (s.blocks.push(o.blocks[o.blocks.length - 1]), o.objID === D && o)
  }
  s.blocks.sort(
    (
      function (e, t) {
        var a = GlobalData.optManager.GetObjectPtr(e, !1),
          r = GlobalData.optManager.GetObjectPtr(t, !1);
        return a.timestamp - r.timestamp
      }
    )
  ),
    i = s.blocks.length;
  var m = Resources.Controls.SmartPanel_Comments.NoCommentsPlaceholder.GetControl(!0);
  for (0 === i ? m.removeClass('hide') : m.addClass('hide'), n = 0; n < i; n++) (e = GlobalData.optManager.GetObjectPtr(s.blocks[n], !1)).objectID === D &&
    (d = n);
  var C,
    y,
    f,
    L,
    I,
    T = this.Comment_MakeDayList(s),
    b = '',
    M = [];
  i = T.length,
    b = '';
  var P,
    R = !1,
    A = !1;
  p = r.height();
  $('.comments-commentContainer');
  for (n = 0; n < i; n++) {
    for (
      y = T[n],
      (f = []).push(y),
      ConstantData.CommentParams.DateTemplate &&
      y.n > 0 &&
      b !== y.label &&
      (
        l.Append(a, ConstantData.CommentParams.DateTemplate, f),
        b = y.label
      ),
      S = [],
      R = !1,
      C = 0;
      C < y.n;
      C++
    ) L = C + y.start,
      e = GlobalData.optManager.GetObjectPtr(s.blocks[L], !1),
      t = new ListManager.CommentData,
      P = e.comment.replace(/</g, '&lt;'),
      t.Comment = P,
      t.Time = e.timestring,
      t.CommenterName = e.userName,
      t.BlockID = e.objectID,
      S.push(t),
      L === d &&
      (u = r[0].scrollHeight, R = !0, A = !0);
    ConstantData.CommentParams.PanelCommentTemplate &&
      S.length > 0 &&
      (
        I = l.Append(a, ConstantData.CommentParams.PanelCommentTemplate, S),
        M = M.concat(M, I)
      ),
      R &&
      r[0].scrollHeight
  }
  for (i = M.length, n = 0; n < i; n++) M[n].SourceObject.BlockID === D &&
    (c = M[n].Node);
  if (c && (u = c.position().top, u + c.height()), A) {
    var _ = D.toString();
    ConstantData.CommentParams.Panel.find('[itemId=' + _ + ']').addClass('active')
  }
  u < 0 ? r[0].scrollTop = r[0].scrollHeight : r[0].scrollTop > u ? r[0].scrollTop = u : u > r[0].scrollTop + p &&
    r.scrollTop(u),
    0 === u &&
    setTimeout(
      (
        function () {
          p = r.height(),
            c &&
            (u = c.position().top, u + c.height()),
            u < 0 ? r[0].scrollTop = r[0].scrollHeight : r[0].scrollTop > u ? r[0].scrollTop = u : u > r[0].scrollTop + p &&
              r.scrollTop(u)
        }
      ),
      100
    )
}

ListManager.LM.prototypeComment_BuildDropDown = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = null,
    p = [],
    d = new SDUI.Appender;
  if (
    null == ConstantData.CommentParams.DropDownContainer &&
    (
      ConstantData.CommentParams.DropDownContainer = Resources.Controls.DD_Comments.ThreadContainer.GetControl(!0)
    ),
    null == ConstantData.CommentParams.DropDownTextArea &&
    (
      ConstantData.CommentParams.DropDownTextArea = Resources.Controls.DD_Comments.TextArea.GetControl(!0)
    ),
    n = ConstantData.CommentParams.DropDownContainer,
    ConstantData.CommentParams.DropDownContainer.empty(),
    ConstantData.CommentParams.DropDownTextArea[0].value = '',
    ConstantData.CommentParams.CommentID >= 0 &&
    (
      u = GlobalData.optManager.GetObjectPtr(ConstantData.CommentParams.CommentID, !1)
    ),
    u
  ) for (t = (a = this.Comment_MakeDayList(u)).length, e = 0; e < t; e++) {
    for (
      o = a[e],
      (S = []).push(o),
      ConstantData.CommentParams.DateTemplate &&
      o.n > 0 &&
      d.Append(n, ConstantData.CommentParams.DateTemplate, S),
      p = [],
      s = 0;
      s < o.n;
      s++
    ) l = s + o.start,
      '' == (r = GlobalData.optManager.GetObjectPtr(u.blocks[l], !1)).userName &&
      (r.userName = GlobalData.optManager.CommentUserIDs[r.userID]),
      i = new ListManager.CommentData,
      c = r.comment.replace(/</g, '&lt;'),
      i.Comment = c,
      i.Time = r.timestring,
      i.CommenterName = r.userName,
      i.BlockID = r.BlockID,
      p.push(i);
    ConstantData.CommentParams.CommentTemplate &&
      d.Append(n, ConstantData.CommentParams.CommentTemplate, p)
  }
  GlobalData.docHandler.IsReadOnly() ? ConstantData.CommentParams.DropDownTextArea.addClass('hide') : (
    ConstantData.CommentParams.DropDownTextArea.removeClass('hide'),
    n[0].scrollTop = n[0].scrollHeight,
    ConstantData.CommentParams.DropDownTextArea[0].onblur = null,
    setTimeout(
      (
        function () {
          ConstantData.CommentParams.DropDownTextArea[0].focus()
        }
      )
    )
  )
}

ListManager.LM.prototypeComment_GetDocumentThread = function () {
  var e = this.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  if (e.CommentListID < 0) ConstantData.CommentParams.DocumentThreadID = - 1;
  else {
    var t,
      a,
      r,
      i = this.GetObjectPtr(e.CommentListID, !1);
    if (i) for (t = i.length, a = 0; a < t; a++) if (- 1 === (r = this.GetObjectPtr(i[a], !1)).objID) return void (ConstantData.CommentParams.DocumentThreadID = r.BlockID)
  }
}

ListManager.LM.prototypePanelCommentSelect = function (e) {
  GlobalData.optManager.ScrollObjectIntoView(e, !1),
    GlobalData.optManager.EditComments(e)
}

ListManager.LM.prototypeEditComments = function (e) {
  SDUI.Commands.MainController.Dropdowns.HideAllDropdowns(),
    '' === ConstantData.DocumentContext.UserName &&
    SDUI.Utils.GetUser(ConstantData.DocumentContext.UserId);
  var t = GlobalData.optManager.GetTargetSelect(),
    a = GlobalData.optManager.SD_GetVisioTextChild(t);
  if (a >= 0 && (t = a), null == e) {
    if (- 1 === (e = t)) return void Utils2.Alert(Resources.Strings.NoShape, null)
  } else if (e != t) {
    var r = [];
    r.push(e),
      GlobalData.optManager.SelectObjects(r, !1, !1)
  }
  var i = this.GetObjectPtr(e, !1),
    n = {};
  i &&
    (
      n.x = i.Frame.x + i.Frame.width + 10,
      n.y = i.Frame.y,
      n = GlobalData.docHandler.DocObject().ConvertDocToWindowCoords(n.x, n.y),
      ConstantData.CommentParams.CommentID = i.CommentID
    );
  var o = null,
    s = null;
  if (null == ConstantData.CommentParams.CommentTemplate) {
    var l = new SDUI.HTMLPartialLoader;
    o = new SDUI.HTMLPartialLoader.PartialLoadRequest('commentTemplate', 'views/partials/Comment.html'),
      s = new SDUI.HTMLPartialLoader.PartialLoadRequest('dateTemplate', 'views/partials/CommentDateBracket.html'),
      l.LoadHTMLPartials(
        [o,
          s],
        (
          function () {
            null == ConstantData.CommentParams.CommentTemplate &&
              (ConstantData.CommentParams.CommentTemplate = o.HTML),
              null == ConstantData.CommentParams.DateTemplate &&
              (ConstantData.CommentParams.DateTemplate = s.HTML),
              SDUI.Commands.MainController.ShowDropdown(
                Resources.Controls.Dropdowns.CommentPopup.Id,
                n.x,
                n.y,
                'below'
              )
          }
        )
      )
  } else SDUI.Commands.MainController.ShowDropdown(
    Resources.Controls.Dropdowns.CommentPopup.Id,
    n.x,
    n.y,
    'below'
  )
}

ListManager.LM.prototypeShowCommentsPanel = function () {
  SDUI.Commands.MainController.Dropdowns.HideAllDropdowns(),
    '' === ConstantData.DocumentContext.UserName &&
    SDUI.Utils.GetUser(ConstantData.DocumentContext.UserId),
    ConstantData.CommentParams.DocumentThreadID < 0 &&
    this.Comment_GetDocumentThread(),
    ConstantData.CommentParams.PanelTargetID = GlobalData.optManager.GetTargetSelect();
  var e = this.GetObjectPtr(ConstantData.CommentParams.PanelTargetID, !1);
  e ? ConstantData.CommentParams.CommentID = e.CommentID : ConstantData.CommentParams.DocumentThreadID < 0 ? ConstantData.CommentParams.CommentID = - 1 : ConstantData.CommentParams.CommentID = ConstantData.CommentParams.DocumentThreadID;
  var t = null,
    a = null;
  if (null == ConstantData.CommentParams.PanelCommentTemplate) {
    var r = new SDUI.HTMLPartialLoader;
    t = new SDUI.HTMLPartialLoader.PartialLoadRequest('panelcommentTemplate', 'views/partials/PanelComment.html'),
      a = new SDUI.HTMLPartialLoader.PartialLoadRequest('dateTemplate', 'views/partials/CommentDateBracket.html'),
      r.LoadHTMLPartials(
        [t,
          a],
        (
          function () {
            null == ConstantData.CommentParams.PanelCommentTemplate &&
              (ConstantData.CommentParams.PanelCommentTemplate = t.HTML),
              null == ConstantData.CommentParams.DateTemplate &&
              (ConstantData.CommentParams.DateTemplate = a.HTML),
              GlobalData.optManager.Comment_BuildPanel()
          }
        )
      )
  } else GlobalData.optManager.Comment_BuildPanel()
}

ListManager.LM.prototypeComment_Cancel = function () {
  var e = Resources.Controls.Dropdowns.CommentPopup.GetControl(!1);
  e &&
    'block' === e[0].style.display &&
    (
      ConstantData.CommentParams.DropDownTextArea &&
      (ConstantData.CommentParams.DropDownTextArea[0].value = ''),
      SDUI.Commands.MainController.Dropdowns.HideAllDropdowns()
    )
}

ListManager.LM.prototypeDebugHops = function (e) {
  var t,
    a = e.hoplist.nhops;
  for (t = 0; t < a; ++t) e.hoplist.hops[t]
}

ListManager.LM.prototypeRecalculateLineHops = function () {
  this.ResetLineHops(),
    this.ForceAllLinesModified(),
    this.UpdateLineHops(!0),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeResetLineHops = function () {
  this.ClearLineHops(),
    this.HideHopTargets(),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeEnableGlobalLineHops = function () {
  var e = this.GetObjectPtr(this.theSEDSessionBlockID, !0);
  e.flags = Utils2.SetFlag(e.flags, ListManager.SessionFlags.SEDS_AllowHops, !0),
    this.RecalculateLineHops()
}

ListManager.LM.prototypeDisableGlobalLineHops = function () {
  var e = this.GetObjectPtr(this.theSEDSessionBlockID, !0);
  e.flags = Utils2.SetFlag(e.flags, ListManager.SessionFlags.SEDS_AllowHops, !1),
    this.RecalculateLineHops()
}

ListManager.LM.prototypeEnableSelectedLinesLineHops = function () {
  this.SetSelectedLineHops(!0),
    this.UpdateLineHops(!0),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeDisableSelectedLinesLineHops = function () {
  this.SetSelectedLineHops(!1),
    this.UpdateLineHops(!0),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeEnableTargetLineLineHops = function () {
  this.SetTargetLineHops(!0),
    this.UpdateLineHops(!0),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeDisableTargetLineLineHops = function () {
  this.SetTargetLineHops(!1),
    this.UpdateLineHops(!0),
    this.RenderDirtySVGObjects()
}

ListManager.LM.prototypeHideHopTargets = function () {
  var e = this.svgOverlayLayer.GetElementListWithID('hoptarget');
  if (null != e) {
    var t,
      a = e.length;
    for (t = 0; t < a; ++t) this.svgOverlayLayer.RemoveElement(e[t])
  }
}

ListManager.LM.prototypeSetSelectedLineHops = function (e) {
  var t,
    a,
    r,
    i = this.GetObjectPtr(this.theSelectedListBlockID, !1),
    n = i.length;
  for (t = 0; t < n; ++t) a = i[t],
    (r = this.GetObjectPtr(a, !0)) instanceof ListManager.BaseLine &&
    !(r instanceof ListManager.PolyLine) &&
    (
      r.flags = Utils2.SetFlag(r.flags, ConstantData.ObjFlags.SEDO_LineHop, e),
      r.hoplist.nhops = 0,
      r.hoplist.hops = [],
      this.AddToDirtyList(a)
    )
}

ListManager.LM.prototypeSetTargetLineHops = function (e) {
  var t,
    a = this.GetTargetSelect();
  a >= 0 &&
    (t = this.GetObjectPtr(a, !0)) instanceof ListManager.BaseLine &&
    !(t instanceof ListManager.PolyLine) &&
    (
      t.flags = Utils2.SetFlag(t.flags, ConstantData.ObjFlags.SEDO_LineHop, e),
      t.hoplist.nhops = 0,
      t.hoplist.hops = [],
      this.AddToDirtyList(a)
    )
}

ListManager.LM.prototypeHop_Compare = function (e, t) {
  return e.segment > t.segment ? 1 : e.segment < t.segment ||
    e.dist > t.dist ? - 1 : e.dist < t.dist ? 1 : 0
},





  ListManager.LM.prototype.ClearLineHops = function () {
    var e,
      t,
      a,
      r = this.VisibleZList(),
      i = r.length;
    for (e = 0; e < i; ++e) t = r[e],
      (a = this.GetObjectPtr(t, !1)) instanceof ListManager.BaseLine &&
      !(a instanceof ListManager.PolyLine) &&
      (a.hoplist.nhops = 0, a.hoplist.hops = [], this.AddToDirtyList(t))
  }

ListManager.LM.prototypeForceAllLinesModified = function () {
  var e,
    t,
    a,
    r = this.VisibleZList(),
    i = r.length;
  for (e = 0; e < i; ++e) t = r[e],
    (a = this.GetObjectPtr(t, !1)) instanceof ListManager.BaseLine &&
    !(a instanceof ListManager.PolyLine) &&
    (
      a.flags = Utils2.SetFlag(a.flags, ConstantData.ObjFlags.SEDO_LineMod, !0)
    )
}

ListManager.LM.prototypeIsHopableLineSelected = function () {
  var e,
    t,
    a,
    r = this.GetObjectPtr(this.theSelectedListBlockID, !1),
    i = r.length;
  for (e = 0; e < i; ++e) if (
    t = r[e],
    (a = this.GetObjectPtr(t, !1)) instanceof ListManager.BaseLine &&
    !(a instanceof ListManager.PolyLine)
  ) return !0;
  return !1
}

ListManager.LM.prototypeIsTargetLineHopEnabled = function () {
  var e = this.GetTargetSelect();
  if (e >= 0) {
    var t = this.GetObjectPtr(e, !0);
    if (
      t instanceof ListManager.BaseLine &&
      !(t instanceof ListManager.PolyLine)
    ) return t.flags & ConstantData.ObjFlags.SEDO_LineHop
  }
  return !1
}

ListManager.LM.prototypeInsertPoints = function (e, t, a, r) {
  var i;
  if (t + r > ConstantData.Defines.SED_MaxPoints) return {
    bSuccess: !1,
    npts: t
  };
  for (i = 0; i < r; ++i) {
    var n = new Point;
    e.push(n)
  }
  for (i = t - 1; i >= a; i--) e[i + r] = {
    x: e[i].x,
    y: e[i].y
  };
  for (t += r, i = a; i < a + r; i++) e[i] = {
    x: i - a,
    y: i - a
  };
  return {
    bSuccess: !0,
    npts: t
  }
}

ListManager.LM.prototypeBuildHop = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u = [
      {
        x: 0,
        y: 0
      },
      {
        x: 0,
        y: 0
      }
    ],
    p = [],
    d = new Rectangle,
    D = {};
  d = Utils2.Pt2Rect(a, r),
    S = r.x - a.x;
  var g = !1;
  switch (
  0 === (c = r.y - a.y) ? (o = 0, g = !0) : 0 === S ? c > 0 ? (o = 2 * Math.PI * - 0.25, g = !0) : o = 2 * Math.PI * 0.25 : (
    (o = - 180 * Math.atan(c / S) / Math.PI) > 0 &&
    (o += - 180),
    g = o >= - 90 &&
    o <= 0,
    o = 2 * Math.PI * (o / 360)
  ),
  u[0] = {
    x: a.x,
    y: a.y
  },
  u[1] = {
    x: r.x,
    y: r.y
  },
  o &&
  this.RotatePointsAboutCenter(d, - o, u),
  u[0].y = u[1].y,
  e
  ) {
    case ListManager.HopStyle.SDH_Box:
      (D = new Point).x = u[0].x,
        D.y = u[0].y,
        p.push(D),
        (D = new Point).x = u[0].x,
        D.y = g ? u[0].y - t : u[0].y + t,
        p.push(D),
        (D = new Point).x = u[1].x,
        D.y = g ? u[1].y - t : u[1].y + t,
        p.push(D),
        (D = new Point).x = u[1].x,
        D.y = u[1].y,
        p.push(D),
        n = 4;
      break;
    case ListManager.HopStyle.SDH_Arc:
      s = Math.sqrt(S * S + c * c) / 2,
        n = ConstantData.Defines.HOPPOLYPTS,
        l = u[0].x <= u[1].x ? {
          x: u[0].y,
          y: u[0].x + s
        }
          : {
            x: u[1].y,
            y: u[1].x + s
          },
        this.HopToPolySeg(p, ConstantData.Defines.HOPPOLYPTS, l, s, u[0].x, u[1].x, g)
  }
  return o &&
    this.RotatePointsAboutCenter(d, o, p),
  {
    npts: n,
    pts: p
  }
}

ListManager.LM.prototypeHopToPolySeg = function (e, t, a, r, i, n, o) {
  var s,
    l,
    S,
    c,
    u,
    p,
    d = r * r;
  for (s = (n - i) / t, S = 0; S < t; S++) c = s * S,
    u = a.y - (i + c),
    l = Utils2.sqrt(d - u * u),
    p = o ? {
      x: a.y - u,
      y: a.x - l
    }
      : {
        x: a.y - u,
        y: a.x + l
      },
    e.push(p);
  return e
}

ListManager.LM.prototypeInsertHops = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = e.hoplist.nhops,
    h = {},
    m = new Point,
    C = new Point,
    y = new Point,
    f = new Point,
    L = [],
    I = this.GetObjectPtr(this.theSEDSessionBlockID, !1);
  for (D = I.hopdim.x, d = I.hopdim.y, r = g - 1; r >= 0; r--) if (!e.hoplist.hops[r].cons) {
    for (
      c = i = e.hoplist.hops[r].segment,
      s = r,
      p = r;
      s > 0 &&
      e.hoplist.hops[s - 1].cons;
    ) c = e.hoplist.hops[s - 1].segment,
      p = s - 1,
      s--;
    if (!(i < a)) return {
      bSuccess: !1,
      npts: a
    };
    if (a = (h = this.InsertPoints(t, a, i, 2)).npts, h.bSuccess) {
      if (
        t[i] = {
          x: e.hoplist.hops[p].pt.x,
          y: e.hoplist.hops[p].pt.y
        },
        t[i + 1] = {
          x: e.hoplist.hops[r].pt.x,
          y: e.hoplist.hops[r].pt.y
        },
        c < i
      ) {
        for (s = i; s < a; s++) t[c + s - i] = {
          x: t[s].x,
          y: t[s].y
        };
        a -= i - c
      }
      if (
        n = (i = c) + 1,
        o = u = c + 1,
        u = (h = this.PolyTrimForArrow(t, 0, u, D, D, m, C, !1)).npts,
        m = h.spt,
        C = h.ept,
        u < o
      ) {
        for (s = o; s < a; s++) t[u + s - o] = {
          x: t[s].x,
          y: t[s].y
        };
        a -= o - u,
          n -= o - u
      }
      if (
        y = {
          x: m.x,
          y: m.y
        },
        o = l = a - n,
        l = (h = this.PolyTrimForArrow(t, n, l, D, D, m, C, !0)).npts,
        m = h.spt,
        l < o &&
        (a -= o - l),
        f = {
          x: (C = h.ept).x,
          y: C.y
        },
        L = (h = this.BuildHop(I.hopstyle, d, y, f, S)).pts,
        S = h.npts,
        a = (h = this.InsertPoints(t, a, u, S)).npts,
        h.bSuccess
      ) for (s = 0; s < S; s++) t[u + s] = {
        x: L[s].x,
        y: L[s].y
      }
    }
  }
  return {
    bSuccess: !0,
    npts: a
  }
}

ListManager.LM.prototypeGetPartialLength = function (e, t, a) {
  var r,
    i,
    n;
  return r = t.x - e.x,
    i = t.y - e.y,
    !((n = Math.sqrt(r * r + i * i)) < 0.001) &&
    (r = r / n * a, i = i / n * a, t.x = e.x + r, t.y = e.y + i, !0)
}

ListManager.LM.prototypeGetSegLength = function (e, t) {
  var a,
    r;
  return a = e.x - t.x,
    r = e.y - t.y,
    Math.sqrt(a * a + r * r)
}

ListManager.LM.prototypePolyFindLength = function (e, t, a, r, i, n, o) {
  var s,
    l,
    S,
    c,
    u = new Point;
  if (l = a, i) {
    if (S = 0, o = {
      x: e[t].x,
      y: e[t].y
    }, r < 1) return {
      pts: e,
      npts: a,
      findpt: o = {
        x: e[t].x,
        y: e[t].y
      }
    };
    for (s = 1; s < l; s++) {
      if (r < (c = this.GetSegLength(e[s + t], e[s - 1 + t]))) {
        o = {
          x: e[s - 1 + t].x,
          y: e[s - 1 + t].y
        },
          n &&
          (S = s - 1),
          u = {
            x: e[s + t].x,
            y: e[s + t].y
          },
          this.GetPartialLength(u, o, c - r),
          n &&
          (e[s - 1 + t] = {
            x: o.x,
            y: o.y
          }),
          S = s - 1;
        break
      }
      r -= c
    }
    if (n && S) {
      for (s = 0; s < l - S; s++) e[s + t] = e[s + S + t];
      l -= S
    }
  } else {
    if (S = 0, o = {
      x: e[l - 1 + t].x,
      y: e[l - 1 + t].y
    }, r < 1) return {
      pts: e,
      npts: a,
      findpt: o
    };
    for (s = l - 1; s >= 1; s--) {
      if (r < (c = this.GetSegLength(e[s + t], e[s - 1 + t]))) {
        o = {
          x: e[s + t].x,
          y: e[s + t].y
        },
          n &&
          (S = s),
          u = {
            x: e[s - 1 + t].x,
            y: e[s - 1 + t].y
          },
          this.GetPartialLength(u, o, c - r),
          n &&
          (e[s + t] = {
            x: o.x,
            y: o.y
          }),
          S = s;
        break
      }
      r -= c
    }
    n &&
      S &&
      (l = S + 1)
  }
  return {
    pts: e,
    npts: a = l,
    findpt: o
  }
}

ListManager.LM.prototypePolyTrimForArrow = function (e, t, a, r, i, n, o, s) {
  var l = new Point,
    S = {},
    c = {};
  return l = (S = this.PolyFindLength(e, t, a, i, s, !1, l)).findpt,
    a = S.npts,
    s ? (c.spt = {
      x: e[t].x,
      y: e[t].y
    }, c.ept = {
      x: l.x,
      y: l.y
    }) : (c.ept = {
      x: e[t + a - 1].x,
      y: e[t + a - 1].y
    }, c.spt = {
      x: l.x,
      y: l.y
    }),
    l = (S = this.PolyFindLength(e, t, a, r, s, !0, l)).findpt,
    a = S.npts,
    c.pts = S.pts,
    c.npts = a,
    c
}

ListManager.LM.prototypeApplyLineHopDialog = function (e, t, a, r, i) {
  // try {
  Collab.AllowMessage() &&
    (
      Collab.BeginSecondaryEdit(),
      Collab_Data = {
        lineHopsSize: e,
        bGlobalLineHops: t,
        bLineHopsStyle: a,
        bHopableLineSelected: r,
        bLineHopsThisLine: i
      }
    );
  var n = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
  n.hopdimindex = e,
    n.hopdim = {
      x: ListManager.HopDimX[e],
      y: ListManager.HopDimY[e]
    },
    t ? GlobalData.optManager.EnableGlobalLineHops() : GlobalData.optManager.DisableGlobalLineHops(),
    n.hopstyle = a ? ListManager.HopStyle.SDH_Box : ListManager.HopStyle.SDH_Arc,
    r &&
    (
      i ? GlobalData.optManager.SetSelectedLineHops(!0) : GlobalData.optManager.SetSelectedLineHops(!1)
    ),
    Collab.AllowMessage() &&
    Collab.BuildMessage(
      ConstantData.CollabMessages.ApplyLineHopDialog,
      Collab_Data,
      !0
    ),
    GlobalData.optManager.CompleteOperation()
  // } catch (e) {
  //   GlobalData.optManager.ExceptionCleanup(e)
  // }
},

























  ListManager.LM.prototype.GraphGetGraphSubtype = function (e) {

    return (
      e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
      e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE
    ) &&
      e.pointflags & ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA ? ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_AREA : ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_NONE
  }

ListManager.LM.prototypeGraph_GetActiveID = function (e) {

  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  return t.theActiveGraphObjectID >= 0 ? t.theActiveGraphObjectID : e ? this.Graph_GetFirstGraphID(!0) : - 1
}

ListManager.LM.prototypeGraph_GetFirstGraphID = function (e) {

  var t = GlobalData.optManager.ActiveVisibleZList(),
    a = null,
    r = 0,
    i = - 1;
  for (r = 0; r < t.length; r++) if ((a = this.GetObjectPtr(t[r], !1)).GetGraph()) {
    i = a.BlockID;
    break
  }
  if (i < 0) return - 1;
  e &&
    (
      this.GetObjectPtr(this.theTEDSessionBlockID, !1).theActiveGraphObjectID = i
    );
  return i
}

ListManager.LM.prototypeGraph_Load = function (e) {

  var t = this.GetObjectPtr(this.theTEDSessionBlockID, !0);
  t.theActiveTableObjectID >= 0 &&
    t.theActiveTableObjectID !== e &&
    this.Table_Release(!1),
    t.theActiveGraphObjectID = e
}

ListManager.LM.prototypeGraph_Release = function () {

  var e = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  e.theActiveGraphObjectID >= 0 &&
    (
      this.GetObjectPtr(this.theTEDSessionBlockID, !0),
      e.theActiveGraphObjectID = - 1
    )
}

ListManager.LM.prototypeTangleToRadians = function (e) {

  var t = 0;
  return e < 0 &&
    (e += 360),
    - 0 === (t = 2 * Math.PI * (e / 360)) &&
    (t = 0),
    t
}

ListManager.LM.prototypeRadiansToTangle = function (e) {

  return e < 0 &&
    (e += 2 * Math.PI),
    e / (2 * Math.PI) * 360
}

ListManager.LM.prototypeGraphAddNew = function (e, t) {

  new Point(0, 0);
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = {
      cx: 0,
      cy: 0
    },
    p = [],
    d = 0,
    D = 0;
  for (
    n = this.svgDoc.GetWorkArea(),
    u.cx = Math.round(0.9 * n.docWidth),
    e === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? u.cy = Math.round(0.75 * n.docHeight) : u.cy = Math.round(0.5 * n.docHeight),
    o = Utils2.SetRect(0, 0, u.cx, u.cy),
    r = GlobalData.optManager.ActiveVisibleZList(),
    l = 0;
    l < r.length;
    l++
  ) (a = GlobalData.optManager.GetObjectPtr(r[l], !1)).GetGraph() &&
    d++;
  for (l = 0; l < d; l++) Utils2.OffsetRect(o, 20, 20),
    (o.x + o.width > n.docWidth || o.y + o.height > n.docHeight) &&
    (o = Utils2.SetRect(0, 0, u.cx, u.cy));
  var g = {
    Frame: o,
    TextGrow: ConstantData.TextGrowBehavior.VERTICAL,
    TextFlags: ConstantData.TextFlags.SED_TF_OneClick
  };
  if (
    a = new ListManager.Rect(g),
    GlobalData.optManager.AddNewObject(a, !0, !0),
    GlobalData.optManager.SelectObjects([a.BlockID], !1, !1),
    GlobalData.optManager.PreserveUndoState(!1),
    s = new ListManager.Graph,
    a.SetGraph(s),
    s.graphlegendTitle.DataID = - 1,
    s.lastEditedTextid = - 1,
    s.areaBGImageID = - 1,
    s.bgImageID = - 1,
    i = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0),
    s.style = Utils1.DeepCopy(i.graphDef.style),
    s.flags = i.graphDef.flags,
    s.pointflags = i.graphDef.pointflags,
    s.graphtitle.style = Utils1.DeepCopy(i.graphDef.titleStyle),
    s.graphlegendTitle.style = Utils1.DeepCopy(i.graphDef.legendTitleStyle),
    s.graphlegendTitle.lflags = i.graphDef.legendlayoutflags,
    s.graphLegendType = i.graphDef.legendType,
    s.gridStyle = Utils1.DeepCopy(i.graphDef.gridStyle),
    s.areaStyle = Utils1.DeepCopy(i.graphDef.areaStyle),
    s.axes.push(new ListManager.Graph.Axis),
    s.axes.push(new ListManager.Graph.Axis),
    s.axes[ListManager.Graph.Defines.SDAX_HORIZ].orientation = ListManager.Graph.Defines.SDAX_HORIZ,
    s.axes[ListManager.Graph.Defines.SDAX_HORIZ].style = Utils1.DeepCopy(i.graphDef.catAxisStyle),
    s.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.style = Utils1.DeepCopy(i.graphDef.catAxisTitleStyle),
    s.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = i.graphDef.catAxisflags,
    s.axes[ListManager.Graph.Defines.SDAX_VERT].orientation = ListManager.Graph.Defines.SDAX_VERT,
    s.axes[ListManager.Graph.Defines.SDAX_VERT].style = Utils1.DeepCopy(i.graphDef.magAxisStyle),
    s.axes[ListManager.Graph.Defines.SDAX_VERT].title.style = Utils1.DeepCopy(i.graphDef.magAxisTitleStyle),
    s.axes[ListManager.Graph.Defines.SDAX_VERT].flags = i.graphDef.magAxisflags,
    s.graphtype = e,
    t === ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_AREA &&
    (
      s.pointflags = Utils2.SetFlag(
        s.pointflags,
        ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
        !0
      )
    ),
    a.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT,
    a.StyleRecord.Line.LinePattern = Resources.Windows_LinePatterns.SEP_None,
    a.StyleRecord.Line.Thickness = 0,
    this.GraphLoadInitialChart(a, s),
    this.GraphSetGraphType(a, s, e, t, null, !0),
    ListManager.Graph.Static.LastGraphType = e,
    ListManager.Graph.Static.LastGraphSubType = t,
    e === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
    e === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) {
    for (l = (p = this.GraphGetCategoryList(s)).length - 1; l > 0; l--) this.GraphDelCategory(a, s, p[l].categoryid, !0);
    s.gpoint.length > 0 &&
      (s.gpoint[0].explodeAmt = 10)
  }
  if (
    e == ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR &&
    t == ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_HISTOGRAM
  ) for (
      ;
      s.graphLegend.length > 1 &&
      0 == (D = this.GraphDelSeries(a, s, s.gpoint[0].seriesid, !0));
    );
  for (s.valuePrecision = 0, l = 0; l < s.gpoint.length; l++) c = s.gpoint[l].value.toFixed(7),
    c = parseFloat(c).toString(),
    (S = this.GraphGetNumericStringPrecision(c)) > s.valuePrecision &&
    (s.valuePrecision = S);
  return GlobalData.optManager.GraphFormat(a, s, a.Frame, !0),
    GlobalData.optManager.AddToDirtyList(a.BlockID),
    GlobalData.optManager.RenderDirtySVGObjects(),
    D
}

ListManager.LM.prototypeGraphLoadInitialChart = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0),
    c = this.GraphGetAxesIndexes(t);
  for (
    a = t.axes[c.category],
    r = t.axes[c.magnitude],
    t.graphtitle.DataID = this.GraphCreateText(
      e,
      e.Frame,
      t.graphtitle.style,
      ConstantData.TextAlign.CENTER,
      'middle',
      ListManager.Graph.Defines.SDAX_DEFAULT_GRAPH_TITLE
    ),
    t.graphtitle.margin = 4,
    t.graphtitle.just = ConstantData.TextAlign.CENTER,
    t.graphlegendTitle.DataID = this.GraphCreateText(
      e,
      e.Frame,
      t.graphlegendTitle.style,
      ConstantData.TextAlign.CENTER,
      'middle',
      ListManager.Graph.Defines.SDAX_DEFAULT_GRAPH_TITLE
    ),
    t.graphlegendTitle.margin = 4,
    t.graphlegendTitle.just = ConstantData.TextAlign.CENTER,
    a.margin = 3,
    a.title.DataID = this.GraphCreateText(
      e,
      e.Frame,
      a.title.style,
      ConstantData.TextAlign.CENTER,
      'middle',
      ListManager.Graph.Defines.SDAX_DEFAULT_AXIS_TITLE_CATEGORIES
    ),
    a.title.just = ConstantData.TextAlign.CENTER,
    a.margin = 4,
    a.title.margin = 4,
    r.margin = 3,
    r.title.DataID = this.GraphCreateText(
      e,
      e.Frame,
      r.title.style,
      ConstantData.TextAlign.CENTER,
      'middle',
      ListManager.Graph.Defines.SDAX_DEFAULT_AXIS_TITLE_MAGNITUDE
    ),
    r.title.just = ConstantData.TextAlign.CENTER,
    r.title.tangle = 270,
    r.title.margin = 4,
    n = 0;
    n < ListManager.Graph.Defines.SDAX_NUM_SAMPLE_SERIES;
    n++
  ) l = this.GraphGenerateUniqueSeriesName(e, t),
    this.GraphAddLegendEntry(
      e,
      t,
      l,
      S.graphDef.legendStyle,
      S.graphDef.pointLabelStyle,
      null,
      !1
    );
  for (
    n = 0;
    n < ListManager.Graph.Defines.SDAX_NUM_SAMPLE_CATS;
    n++
  ) s = this.GraphGenerateUniqueCategoryName(e, t, a),
    this.GraphAddCategoryLabel(e, t, a, s, n);
  for (
    n = 0;
    n < ListManager.Graph.Defines.SDAX_NUM_SAMPLE_SERIES;
    n++
  ) for (
      o = 0;
      o < ListManager.Graph.Defines.SDAX_NUM_SAMPLE_CATS;
      o++
    ) i = Math.floor(Math.random() % (n + 1) * 100),
      i /= 10,
      i += 2,
      this.GraphAddPoint(
        e,
        t,
        t.graphLegend[n].style,
        t.graphLegend[n].labelStyle,
        n,
        o,
        i,
        !1
      )
}

ListManager.LM.prototypeGraphSetGraphType = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c,
    u,
    p = [],
    d = - 1,
    D = - 1,
    g = null,
    h = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
  if (
    null != i &&
    i >= 0 &&
    (g = this.BuildGraphStyle(e, t, d, D, i)),
    g &&
    (- 1 === a && (d = g.graphType), - 1 === r && (D = g.graphSubType)),
    - 1 === d &&
    (d = a),
    - 1 === D &&
    (D = r),
    t.graphtype != d &&
    (
      d !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
      d !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE ||
      1 == this.GraphGetNumCategories(t) &&
      this.GraphGetNumSeries(t) > 1 &&
      this.GraphSwapSeriesAndCategories(e, t),
      d !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
      d !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
      1 == this.GraphGetNumSeries(t) &&
      this.GraphGetNumCategories(t) > 1 &&
      this.GraphSwapSeriesAndCategories(e, t)
    ),
    this.GraphSetPointLineAttributes(e, t, t.graphtype, d),
    t.flags = Utils2.SetFlag(t.flags, ListManager.Graph.Flags.SDAX_SHOW_TABLE, !1),
    t.flags = Utils2.SetFlag(
      t.flags,
      ListManager.Graph.Flags.SDAX_DATATABLE_USER_MANAGED_GEOMETRY,
      !1
    ),
    t.flags = Utils2.SetFlag(
      t.flags,
      ListManager.Graph.Flags.SDAX_FLIP_ROW_COL_ORIENTATION,
      !1
    ),
    t.flags = Utils2.SetFlag(
      t.flags,
      ListManager.Graph.Flags.SDAX_FLAG_DATA_MODIFIED,
      !1
    ),
    t.pointflags = t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = 0,
    t.graphtype = d,
    n
  ) t.flags = h.graphDef.flags,
    t.pointflags = h.graphDef.pointflags,
    t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = h.graphDef.catAxisflags,
    t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = h.graphDef.magAxisflags,
    t.graphLegendType = h.graphDef.legendType,
    t.graphlegendTitle.lflags = h.graphDef.legendlayoutflags,
    t.quadrant = h.graphDef.quadrant;
  else switch (d) {
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE:
      t.flags = Utils2.SetFlag(
        t.flags,
        ListManager.Graph.Flags.SDAX_SEQUENCE_BY_SERIES,
        !0
      ),
        t.pointflags = Utils2.SetFlag(
          t.pointflags,
          ListManager.Graph.Flags.SDAX_VALUELABELS | ListManager.Graph.Flags.SDAX_VALUELABELS_EXTERNAL_LEADERS | ListManager.Graph.Flags.SDAX_VALUELABELS_SERIES_NAME | ListManager.Graph.Flags.SDAX_VALUELABELS_PERCENT,
          !0
        ),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE | ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS | ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE | ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS | ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        t.graphLegendType = ListManager.Graph.LegendType.SDAX_LEGEND_NONE,
        this.GraphSetQuadrant(ctp, t, 3);
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE:
      t.flags = Utils2.SetFlag(
        t.flags,
        ListManager.Graph.Flags.SDAX_SEQUENCE_BY_SERIES,
        !0
      ),
        t.pointflags = Utils2.SetFlag(
          t.pointflags,
          ListManager.Graph.Flags.SDAX_VALUELABELS | ListManager.Graph.Flags.SDAX_VALUELABELS_EXTERNAL | ListManager.Graph.Flags.SDAX_VALUELABELS_SERIES_NAME | ListManager.Graph.Flags.SDAX_VALUELABELS_PERCENT,
          !0
        ),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE | ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS | ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS | ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE | ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS | ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        t.graphLegendType = ListManager.Graph.LegendType.SDAX_LEGEND_NONE,
        this.GraphSetQuadrant(ctp, t, 0);
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE:
      t.flags = Utils2.SetFlag(
        t.flags,
        ListManager.Graph.Flags.SDAX_SEQUENCE_BY_SERIES,
        !0
      ),
        t.graphLegendType = ListManager.Graph.LegendType.SDAX_LEGEND_FULL,
        this.GraphSetQuadrant(ctp, t, 0),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR | ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !0
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          !0
        );
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR:
      t.flags = Utils2.SetFlag(
        t.flags,
        ListManager.Graph.Flags.SDAX_SEQUENCE_BY_CATEGORY,
        !0
      ),
        t.pointflags = Utils2.SetFlag(
          t.pointflags,
          ListManager.Graph.Flags.SDAX_VALUELABELS | ListManager.Graph.Flags.SDAX_VALUELABELS_ANGLED,
          !0
        ),
        t.graphLegendType = ListManager.Graph.LegendType.SDAX_LEGEND_FULL,
        this.GraphSetQuadrant(ctp, t, 0),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR | ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !0
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          !0
        );
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR:
    default:
      t.flags = Utils2.SetFlag(
        t.flags,
        ListManager.Graph.Flags.SDAX_SEQUENCE_BY_CATEGORY,
        !0
      ),
        t.graphLegendType = ListManager.Graph.LegendType.SDAX_LEGEND_FULL,
        this.GraphSetQuadrant(e, t, 0),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR | ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !0
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          !0
        )
  }
  switch (g && this.GraphSetGalleryOptions(e, t, g), D) {
    case ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_AREA:
      if (
        t.pointflags = Utils2.SetFlag(
          t.pointflags,
          ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
          !0
        ),
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE
      ) {
        for (c = 0; c < t.gpoint.length; c++) t.gpoint[c].style.Fill.Paint.Opacity = Math.round(191.25);
        for (c = 0; c < t.graphLegend.length; c++) t.graphLegend[c].style.Fill.Paint.Opacity = Math.round(191.25)
      }
      break;
    case ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_HISTOGRAM:
      t.graphLegendType = ListManager.Graph.LegendType.SDAX_LEGEND_NONE,
        t.barAreaAmount = 1,
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          !1
        ),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR,
          !1
        )
  }
  if (
    u = this.GraphGetAxesIndexes(t),
    0 === (l = t.axes[u.category]).labels.length &&
    !(l.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS)
  ) for (p = this.GraphGetCategoryList(t), c = 0; c < p.length; c++) S = this.GraphGenerateUniqueCategoryName(e, t, l),
    this.GraphAddCategoryLabel(e, t, l, S, p[c].categoryid);
  if (
    ListManager.Graph.Static.LastGraphType = d,
    ListManager.Graph.Static.LastGraphSubType = D,
    this.GraphThemeHasStylesForGraphType(Resources.CurrentTheme, d, D)
  ) {
    for (c = 0; c < t.graphLegend.length; c++) o = t.graphLegend[c].style,
      s = t.graphLegend[c].labelStyle,
      this.GraphFormatLegendEntry(
        e,
        t,
        c,
        h.graphDef.legendStyle,
        h.graphDef.pointLabelStyle,
        t.graphLegend[c].seriesid
      ),
      t.graphLegend[c].style.Fill.Paint.Color = o.Fill.Paint.Color,
      t.graphLegend[c].style.Fill.Paint.Endcolor = o.Fill.Paint.Endcolor,
      t.graphLegend[c].style.Line.Paint.Color = o.Line.Paint.Color,
      t.graphLegend[c].style.Line.Paint.Endcolor = o.Line.Paint.Endcolor,
      n &&
      (
        t.graphLegend[c].style.Fill.Paint.FillType = o.Fill.Paint.FillType
      ),
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE ||
      (t.graphLegend[c].style.line.thickness = o.line.thickness),
      t.graphLegend[c].style.Fill.Paint.FillType !== ConstantData.FillTypes.SDFILL_TEXTURE &&
      t.graphLegend[c].style.Fill.Paint.FillType !== ConstantData.FillTypes.SDFILL_IMAGE ||
      (
        t.graphLegend[c].style.Fill.Paint.FillType = t.imageValueRep == ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE ? ConstantData.FillTypes.SDFILL_SOLID : o.Fill.Paint.FillType
      ),
      t.graphLegend[c].style.Fill.Paint.Texture = t.imageValueRep == ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE ? - 1 : o.fill.paint.texture,
      t.graphLegend[c].style.Fill.Paint.Txscale = t.imageValueRep == ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE ? h.def.style.fill.paint.txscale : o.fill.paint.txscale,
      t.graphLegend[c].labelStyle.Fill.Paint.Color = oldLegendLabelStyleFill.Paint.Color,
      t.graphLegend[c].labelStyle.Fill.Paint.EndColor = s.Fill.Paint.EndColor,
      t.graphLegend[c].labelStyle.Line.Paint.Color = s.Line.Paint.Color,
      t.graphLegend[c].labelStyle.Line.Paint.EndColor = s.Line.Paint.EndColor,
      t.graphLegend[c].labelStyle.Text.Paint.Color = s.Text.Paint.Color;
    for (
      c = 0;
      c < t.gpoint.length &&
      0 == this.GraphSetPointStyle(
        e,
        t,
        SDGraphLegend(t, t.gpoint[c]).style,
        SDGraphLegend(t, t.gpoint[c]).style.line,
        !1,
        !1,
        t.gpoint[c].style,
        t.gpoint[c].label.style,
        t.gpoint[c].label.DataID,
        !0,
        t.gpoint[c].label.frame
      );
      c++
    );
  }
  n ||
    this.GraphSetDefaultsFromGraph(e, t)
}

ListManager.LM.prototypeGraphSetDefaultsFromGraph = function (e) {

  var t,
    a = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
  a.graphDef.type = e.graphtype,
    a.graphDef.flags = e.flags,
    a.graphDef.flags &= ~ListManager.Graph.Flags.SDAX_FLAG_DATA_MODIFIED,
    a.graphDef.pointflags = e.pointflags,
    a.graphDef.legendType = e.graphLegendType,
    a.graphDef.legendlayoutflags = e.graphlegendTitle.lflags,
    a.graphDef.quadrant = e.quadrant,
    t = this.GraphGetAxesIndexes(e),
    a.graphDef.catAxisflags = e.axes[t.category].flags,
    a.graphDef.magAxisflags = e.axes[t.magnitude].flags
}

ListManager.LM.prototypeGraphStyleMatchesChart = function (e, t, a) {

  var r;
  return (r = this.GraphGetStylePrefix(t, a)) ? 0 === e.Name.toUpperCase().indexOf(r.toUpperCase()) : null
}

ListManager.LM.prototypeGraphThemeGraphTypeBase = function (e, t, a) {

  var r;
  for (r = 0; r < e.Styles.length; r++) if (this.GraphStyleMatchesChart(e.Styles[r], t, a)) return r;
  return - 1
}

ListManager.LM.prototypeGraphThemeHasStylesForGraphType = function (e, t, a) {

  return this.GraphThemeGraphTypeBase(e, t, a) >= 0
}

ListManager.LM.prototypeGraphSetPointLineAttributes = function (e, t, a, r) {

  var i,
    n,
    o = !0;
  if (
    r === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
    r === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE
  ) {
    if (
      a !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
      a !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE
    ) for (n = 0; n < t.graphLegend.length; n++) i = (
      t.graphLegend[n].style.fill.paint.filltype,
      FileParser.SDRFillTypes.SDFILL_GRADIENT,
      t.graphLegend[n].style.Fill.Paint.Color
    ),
      t.graphLegend[n].style.Fill.Paint.Color = i,
      t.graphLegend[n].style.Fill.Paint.FillType = FileParser.SDRFillTypes.SDFILL_SOLID,
      t.graphLegend[n].style.Line.Paint.Color = i,
      t.graphLegend[n].style.Line.Paint.FillType = FileParser.SDRFillTypes.SDFILL_SOLID;
    for (n = 0; n < t.gpoint.length; n++) t.gpoint[n].style.Line.LinePattern = Resources.Windows_LinePatterns.SEP_Solid,
      t.gpoint[n].style.Line.Thickness = 3 * ListManager.Graph.Defines.SDAX_DefThick,
      this.GraphLegend(t, t.gpoint[n]).style.Line.Thickness = 3 * ListManager.Graph.Defines.SDAX_DefThick,
      t.gpoint[n].style.Line.Paint.Color = this.GraphLegend(t, t.gpoint[n]).style.Line.Paint.Color
  } else {
    if (
      t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE
    ) {
      for (n = 0; n < t.graphLegend.length; n++) i = t.graphLegend[n].style.Line.Paint.Color,
        t.graphLegend[n].style.Fill.Paint.Color = i;
      for (n = 0; n < t.gpoint.length; n++) t.gpoint[n].style.Fill.Paint.Color = SDGraphLegend(t, t.gpoint[n]).style.line.paint.color,
        SDGraphLegend(t, t.gpoint[n]).style.fill.paint.filltype = t.gpoint[n].style.fill.paint.filltype
    }
    for (
      o = t.imageValueRep === ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE,
      r !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
      r !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
      (o = !0),
      n = 0;
      n < t.gpoint.length;
      n++
    ) t.gpoint[n].style.Line.LinePattern = o ? Resources.Windows_LinePatterns.SEP_Solid : Resources.Windows_LinePatterns.SEP_None,
      t.gpoint[n].style.Line.Paint.Color = ConstantData.Colors.Color_Black,
      o &&
        r === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ? t.gpoint[n].style.Line.Thickness = 2 * ListManager.Graph.Defines.SDAX_DefThick : t.gpoint[n].style.Line.Thickness = o ? ListManager.Graph.Defines.SDAX_DefThick : 0
  }
}

ListManager.LM.prototypeGraphGetNumCategories = function (e) {

  var t = this.GetCategoryList(e);
  return t ? t.length : 0
}

ListManager.LM.prototypeGraphGetNumSeries = function (e) {

  return e.graphLegend.length
}

ListManager.LM.prototypeLM_AddSVGGraphObject = function (e, t, a, r) {

  var i,
    n = {},
    o = e.GetSVGFrame(e.Frame);
  e.trect.x,
    o.x,
    e.trect.y,
    o.y,
    i = GlobalData.objectStore.GetObject(r.graphtitle.DataID),
    n = this.Graph_AddSVGTextObject(
      e,
      t,
      a,
      i.Data.runtimeText,
      r.graphtitle.DataID,
      r.graphtitle.frame,
      ConstantData.TextAlign.CENTER,
      'top'
    );
  var s = this.CalcDefaultInitialTextStyle(r.graphtitle.style.Text);
  switch (
  n.SetFormat(s),
  this.LM_AddSVGLegend(e, t, a, r),
  r.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
  this.LM_AddSVGBarOrLineAddAxes(e, t, a, r),
  r.graphtype
  ) {
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR:
      this.LM_AddSVGBarChartBars(e, t, a, r);
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE:
      this.LM_AddSVGLineChartLines(e, t, a, r);
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE:
      this.LM_AddSVGPieChartWedges(e, t, a, r);
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE:
      this.LM_AddSVGLinearPieChartPieces(e, t, a, r)
  }
}

ListManager.LM.prototypeGraphShiftTitle = function (e, t, a) {

  Utils2.OffsetRect(e.frame, t, a),
    Utils2.OffsetRect(e.drawpt, t, a),
    e.center.x += t,
    e.center.y += a
}

ListManager.LM.prototypeGraphShiftAxis = function (e, t, a) {

  var r = 0;
  for (
    Utils2.OffsetRect(e.frame, t, a),
    this.GraphShiftTitle(e.title, t, a),
    r = 0;
    r < e.labels;
    r++
  ) Utils2.OffsetRect(e.labels[r].frame, t, a),
    e.title.labels[r].x += t,
    e.title.labels[r].y += a
}

ListManager.LM.prototypeGraphShift = function (e, t, a) {

  var r,
    i = e.GetGraph(!0);
  for (
    Utils2.OffsetRect(i.layoutFrame, t, a),
    this.GraphShiftTitle(i.graphtitle, t, a),
    r = 0;
    r < i.axes.length;
    r++
  ) this.GraphShiftAxis(i.axes[r], t, a);
  for (
    this.GraphShiftTitle(i.graphlegendTitle, t, a),
    r = 0;
    r < i.graphLegend.length;
    r++
  ) Utils2.OffsetRect(i.graphLegend[r].textFrame, t, a),
    Utils2.OffsetRect(i.graphLegend[r].swatchFrame, t, a);
  for (r = 0; r < i.gpoint.length; r++) Utils2.OffsetRect(i.gpoint[r].frame, t, a),
    Utils2.OffsetRect(i.gpoint[r].label.frame, t, a),
    i.gpoint[r].label.center.x += t,
    i.gpoint[r].label.center.y += a,
    Utils2.OffsetRect(i.gpoint[r].imagerect, t, a),
    Utils2.OffsetRect(i.gpoint[r].imagerectBottom, t, a),
    Utils2.OffsetRect(i.gpoint[r].imagerectMiddle, t, a),
    Utils2.OffsetRect(i.gpoint[r].imagerectTop, t, a),
    Utils2.OffsetRect(i.gpoint[r].imagePaintBounds, t, a)
}

ListManager.LM.prototypeLM_AddSVGLinearPieChartPieces = function (e, t, a, r) {

  var i;
  for (
    this.LM_AddSVGBarChartBars(e, t, a, r),
    i = 0;
    i < r.gpoint.length;
    i++
  ) r.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
    (r.gpoint[i].categoryid, r.pieChartCategory)
}

ListManager.LM.prototypeGraphGetAdjacentPointInfo = function (e, t) {

  var a,
    r = [],
    i = 0,
    n = - 1,
    o = {
      intBeforeIndx: 0,
      intAfterIndx: 0,
      dCatSum: 0
    };
  for (
    a = 0;
    a < e.gpoint.length &&
    !(
      e.gpoint[a].categoryid == e.gpoint[t].categoryid &&
      (
        r[i] = a,
        a == t &&
        (n = i),
        i++,
        o.dCatSum += Math.abs(e.gpoint[a].value),
        i >= 2048
      )
    );
    a++
  );
  return o.intBeforeIndx = n > 0 ? r[n - 1] : - 1,
    o.intAfterIndx = n < i - 1 ? r[n + 1] : - 1,
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
    (
      - 1 == o.intBeforeIndx &&
      (o.intBeforeIndx = r[i - 1]),
      - 1 == o.intAfterIndx &&
      (o.intAfterIndx = r[0])
    ),
    o
}

ListManager.LM.prototypeGraphGetWedgeDrawPts = function (e, t) {

  var a = [];
  switch (this.GraphGetCircleQuadrant(t.tangle)) {
    case 1:
      a.push(
        new Point(t.frame.x, t.frame.y + t.frame.height)
      ),
        a.push(new Point(t.frame.x + t.frame.width, t.frame.y));
      break;
    case 2:
      a.push(
        new Point(t.frame.x + t.frame.width, t.frame.y + t.frame.height)
      ),
        a.push(new Point(t.frame.x, t.frame.y));
      break;
    case 3:
      a.push(new Point(t.frame.x + t.frame.width, t.frame.y)),
        a.push(
          new Point(t.frame.x, t.frame.y + t.frame.height)
        );
      break;
    case 4:
      a.push(new Point(t.frame.x, t.frame.y)),
        a.push(
          new Point(t.frame.x + t.frame.width, t.frame.y + t.frame.height)
        )
  }
  return a
}

ListManager.LM.prototypeLM_AddSVGPieChartWedges = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = {},
    h = {},
    m = null,
    C = null,
    y = null,
    f = [],
    L = [],
    I = [],
    T = [],
    b = {},
    M = {},
    P = {},
    R = 0,
    A = [],
    _ = {
      dx: 0,
      dy: 0
    },
    E = new ListManager.Graph;
  for (l = 0; l < r.gpoint.length; l++) r.gpoint[l].categoryid == r.pieChartCategory &&
    (A[R++] = l);
  for (
    o = this.GraphGetPieCoreArea(r),
    Utils2.CopyRect({
    }, o),
    Utils2.CopyRect(M, r.area),
    Utils2.InflateRect(M, 1, 1),
    L.push(new Point(o.x + o.width / 2, o.y + o.height / 2)),
    L.push(new Point(o.x + o.width, o.y + o.height / 2)),
    l = 0;
    l < r.gpoint.length;
    l++
  ) if ((m = r.gpoint[l]).categoryid == r.pieChartCategory) {
    if (y = m.style.Line, R > 1) {
      for (c = - 1, S = 0; S < R && - 1 == c; S++) A[S] == l &&
        (c = S > 0 ? A[S - 1] : A[R - 1]);
      L = this.GraphGetWedgeDrawPts(r, r.gpoint[c])
    }
    if (
      I = Utils1.DeepCopy(L),
      f = this.GraphGetWedgeDrawPts(r, m),
      T = Utils1.DeepCopy(f),
      this.LineLength(I[1], T[1]) < 2
    ) {
      var w;
      if (w = this.GraphGetAdjacentPointInfo(r, l), m.value > 0.95 * w.dCatSum) switch (this.GraphGetCircleQuadrant(m.tangle)) {
        case 2:
        case 3:
          T[1].x = I[1].x + 2,
            T[1].y = I[1].y - 2;
          break;
        case 1:
        case 4:
          T[1].x = I[1].x - 2,
            T[1].y = I[1].y + 2
      } else switch (this.GraphGetCircleQuadrant(m.tangle)) {
        case 2:
        case 3:
          T[1].x = I[1].x - 2,
            T[1].y = I[1].y + 2;
          break;
        case 1:
        case 4:
          T[1].x = I[1].x + 2,
            T[1].y = I[1].y - 2
      }
    }
    m.explodeAmt > 0 &&
      (_ = this.GraphGetExplodeOffsets(r, l)),
      h = null,
      (g = Utils1.DeepCopy(m.style.Fill)).Paint.FillType === ConstantData.FillTypes.SDFILL_TEXTURE &&
        null === lpTxL ? g.Paint.Filltype = ConstantData.FillTypes.SDFILL_SOLID : r.imageValueRep === ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SPAN &&
        this.GraphIsImageChartPaint(r, m.style.Fill.Paint, lpTxL) &&
      (
        g.Paint.Filltype = ConstantData.FillTypes.SDFILL_IMAGE,
        (h = m.imageFill).imagetype = lpTxL.tx[g.Paint.texture].imagetype,
        h.sdgImgH = lpTxL.tx[g.Paint.texture].h,
        m.imagePaintBounds,
        u = b.height / o.height,
        p = b.width / o.width,
        D = (b.y + _.dy - o.y) / double(o.height),
        d = (b.x - _.dx - o.x) / double(o.width),
        s = Utils1.DeepCopy(m.imgFillSize),
        h.scaletype === ConstantData.ImageScales.SDIMAGE_CROP_TO_FIT &&
        (s.cx = s.cy = min(m.imgFillSize.cx, m.imgFillSize.cy)),
        h.crop = Utils2.SetRect(
          Math.round(s.cx * d),
          Math.round(s.cy * D),
          Math.round(s.cx * d + s.cx * p),
          Math.round(s.cy * D + s.cy * u)
        )
      );
    var F = GlobalData.optManager.SD_GetCounterClockwiseAngleBetween2Points(I[0], I[1]);
    F = this.RadiansToTangle(F);
    var v = GlobalData.optManager.SD_GetCounterClockwiseAngleBetween2Points(T[0], T[1]),
      G = 90 - F;
    G < 0 &&
      (G = 360 + G);
    var N = 90 - (v = this.RadiansToTangle(v));
    N < 0 &&
      (N = 360 + N);
    var k = {
      x: o.x + o.width / 2,
      y: o.y + o.height / 2
    };
    Utils2.OffsetRect(k, - e.Frame.x, - e.Frame.y),
      m.explodeAmt > 0 &&
      (k.x += _.dx, k.y -= _.dy),
      C = E.RenderPieWedge(k, o.width / 2, N, G, g.Paint, y.Paint.Color, y.Thickness),
      a.AddElement(C),
      L[0] = Utils1.DeepCopy(f[0]),
      L[1] = Utils1.DeepCopy(f[1])
  }
  for (l = 0; l < r.gpoint.length; l++) r.gpoint[l].categoryid == r.pieChartCategory &&
    (
      r.gpoint[l].HyperlinkText &&
      r.gpoint[l].HyperlinkText.length >= 0 &&
      (
        P = this.GraphGetPointJumpRect(r, r.gpoint[l], 1),
        i.x = P.x,
        i.y = P.y,
        n.x = P.x + jumpRect.width,
        n.y = P.y + jumpRect.height,
        this.GraphIsPointHit(r, r.gpoint[l], i) &&
        this.GraphIsPointHit(r, r.gpoint[l], n) &&
        this.LM_AddSVGGraphHyperlinkIcon(e, t, a, r, P)
      ),
      r.gpoint[l].NoteID >= 0 &&
      (
        P = this.GraphGetPointJumpRect(r, r.gpoint[l], 0),
        this.LM_AddSVGGraphCommentIcon(e, t, a, r, P)
      ),
      this.GraphShouldShowValueLabel(r, r.gpoint[l]) &&
      this.LM_AddSVGGraphValueLabel(e, t, a, r, r.gpoint[l])
    )
}

ListManager.LM.prototypeGraphShouldShowValueLabel = function (e, t) {

  return !!(
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS
  )
}

ListManager.LM.prototypeGraphGetLabelLeaderLocation = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S,
    c = [],
    u = new Point,
    p = - 1,
    d = - 1,
    D = Utils1.DeepCopy(a);
  for (Utils2.InflateRect(D, 5, 5), l = 0; l < 4; l++) c.push(new Point(0, 0));
  for (
    c[0].x = D.x + Math.round(D.width / 2),
    c[0].y = D.y,
    c[1].x = D.x + D.width,
    c[1].y = D.y + Math.round(D.height / 2),
    c[2].x = D.x + Math.round(D.width / 2),
    c[2].y = D.y + D.height,
    c[3].x = D.x,
    c[3].y = D.y + Math.round(D.height / 2),
    t.label.tangle &&
    Utils3.RotatePointsAboutPoint(r, this.TangleToRadians(- t.label.tangle), c),
    l = 0;
    l < 4;
    l++
  ) S = this.LineLength(i, c[l]),
    (- 1 == p || S < p) &&
    (p = S, n = c[l]),
    s = this.GraphGetLineAngle(c[l], i),
    u.x = c[l].x + Math.round(10 * Math.cos(s)),
    u.y = c[l].y - Math.round(10 * Math.sin(s)),
    Utils3.RotatePointsAboutPoint(r, - this.TangleToRadians(t.label.tangle), [
      u
    ]),
    Utils2.pointInRect(D, u) ||
    (- 1 == d || S < d) &&
    (d = S, o = c[l]);
  return - 1 != d ? o : n
}

ListManager.LM.prototypeGraphGetExternalLeaderAttachPoint = function (e, t) {

  var a = new Point;
  if (
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) switch (e.quadrant) {
    case 0:
      a.x = t.frame.x + t.frame.width,
        a.y = t.frame.y + t.frame.height / 2;
      break;
    case 1:
      a.x = t.frame.x + t.frame.width / 2,
        a.y = t.frame.y;
      break;
    case 2:
      a.x = t.frame.x,
        a.y = t.frame.y + t.frame.height / 2;
      break;
    case 3:
      a.x = t.frame.x + t.frame.width / 2,
        a.y = t.frame.y + t.frame.height
  } else a = this.GraphGetPointApex(e, t);
  return a
}

ListManager.LM.prototypeLM_AddSVGGraphValueLabel = function (e, t, a, r, i, n, o) {

  var s,
    l = new Point,
    S = GlobalData.objectStore.GetObject(i.label.DataID),
    c = this.Graph_AddSVGTextObject(
      e,
      t,
      a,
      S.Data.runtimeText,
      i.label.DataID,
      i.label.frame,
      ConstantData.TextAlign.CENTER,
      'top'
    ),
    u = this.CalcDefaultInitialTextStyle(i.label.style.Text);
  if (
    c.SetFormat(u),
    0 !== i.label.tangle &&
    c.SetRotation(
      i.label.tangle,
      i.label.center.x - e.Frame.x,
      i.label.center.y - e.Frame.y
    ),
    r.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
    i.flags & ListManager.Graph.PointFlags.SDAX_POINT_FORCE_EXTERNALLEADER
  ) {
    var p = [];
    p.push(new Point(0, 0)),
      p.push(new Point(0, 0));
    var d = Utils1.DeepCopy(i.style.Line);
    d.Paint.Color = i.style.Text.Paint.Color,
      d.LinePattern = Resources.Windows_LinePatterns.SEP_Solid,
      d.Thickness = ListManager.Graph.Defines.SDAX_DefThick;
    var D = [];
    D.push(new Point(0, 0)),
      D.push(new Point(0, 0)),
      D[0] = this.GraphGetExternalLeaderAttachPoint(r, i);
    var g = new Rectangle;
    Utils2.CopyRect(g, i.label.frame);
    var h = Utils1.DeepCopy(i.label.center);
    if (
      r.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
    ) switch (r.quadrant) {
      case 0:
      case 2:
        D[1].y = D[0].y,
          D[0].x < i.label.frame.y ? D[1].x = D[0].x + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE : D[1].x = D[0].x - ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE;
        break;
      case 1:
      case 3:
        D[1].x = D[0].x,
          D[0].y > i.label.frame.y + i.label.frame.height / 2 ? D[1].y = D[0].y - ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE : D[1].y = D[0].y + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
    } else if (
      r.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE
    ) {
      var m = this.GraphGetPieCoreArea(r),
        C = this.GraphGetPieCenter(m),
        y = this.GraphGetLineAngle(C, D[0]),
        f = m.width / 2,
        L = Math.sin(y) * (
          f + i.explodeAmt + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
        ),
        I = Math.cos(y) * (
          f + i.explodeAmt + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
        );
      D[1].x = C.x + Math.round(I),
        D[1].y = C.y - Math.round(L)
    } else switch (r.quadrant) {
      case 0:
      case 2:
        D[1].x = D[0].x,
          0 == r.quadrant ? D[1].y = D[0].y - ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE : D[1].y = D[0].y + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
          (
            r.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR ||
            r.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR
          ) &&
          (D[0].x += 2, D[1].x += 2),
          l = Utils1.DeepCopy(D[1]),
          Utils3.RotatePointsAboutPoint(i.label.center, - this.TangleToRadians(i.label.tangle), [
            l
          ]),
          Utils2.pointInRect(i.label.frame, l) &&
          (D[1] = this.GraphGetLabelLeaderLocation(r, i, g, h, D[0]));
        break;
      case 1:
      case 3:
        D[1].y = D[0].y,
          1 == r.quadrant ? D[1].x = D[0].x + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE : D[1].x = D[0].x - ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
          (
            r.axes[ListManager.Graph.Defines.SDAX_VERT].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR ||
            r.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR
          ) &&
          (D[0].y += 1, D[1].y += 1)
    }
    for (
      p[0] = this.GraphGetLabelLeaderLocation(r, i, g, h, D[1]),
      p[1] = Utils1.DeepCopy(D[1]),
      s = 0;
      s < D.length;
      s++
    ) D[s].x -= e.Frame.x,
      D[s].y -= e.Frame.y;
    for (s = 0; s < p.length; s++) p[s].x -= e.Frame.x,
      p[s].y -= e.Frame.y;
    var T = [];
    T.push(D),
      T.push(p);
    var b = (new ListManager.Graph).RenderPolyLineList(T, d.Paint, d.Thickness);
    a.AddElement(b)
  }
}

ListManager.LM.prototypeLM_AddSVGFilledStyledPoint = function (e, t, a, r, i, n) {

  var o = new ListManager.Graph,
    s = Utils1.DeepCopy(n);
  Utils2.OffsetRect(s, - e.Frame.x, - e.Frame.y);
  var l = o.RenderRect(
    s,
    i.style.Fill.Paint,
    i.style.Line.Paint,
    i.style.Line.Thickness
  );
  l &&
    a.AddElement(l)
}

ListManager.LM.prototypeGraphGetPointLineArea = function (e, t) {

  var a,
    r,
    i = [],
    n = null,
    o = {},
    s = {},
    l = {},
    S = - 1;
  for (
    r = this.GraphGetAxesIndexes(e),
    S = - 1,
    a = 1;
    a < e.axes[r.category].labels.length &&
    - 1 == S;
    a++
  ) e.axes[r.category].labels[a].categoryid == t.categoryid &&
    (S = e.axes[r.category].labels[a - 1].categoryid);
  if (- 1 == S) return null;
  for (a = 0; a < e.gpoint.length && !n; a++) e.gpoint[a].seriesid === t.seriesid &&
    e.gpoint[a].categoryid === S &&
    (n = e.gpoint[a]);
  if (null == n) return null;
  switch (
  o = this.GraphGetPointApex(e, n),
  i.push(new Point(o.x, o.y)),
  o = this.GraphGetPointApex(e, t),
  i.push(new Point(o.x, o.y)),
  e.quadrant
  ) {
    case 0:
    case 1:
      s.x = t.frame.x,
        s.y = t.frame.y + t.frame.height,
        l.x = n.frame.x,
        l.y = n.frame.y + n.frame.height;
      break;
    case 2:
    case 3:
      s.x = t.frame.x + t.frame.width,
        s.y = t.frame.y,
        l.x = n.frame.x + n.frame.width,
        l.y = n.frame.y
  }
  return i.push(new Point(s.x, s.y)),
    i.push(new Point(l.x, l.y)),
    i
}

ListManager.LM.prototypeLM_AddSVGLineChartLine = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = [],
    g = [],
    h = new ListManager.Graph;
  if (
    S = r.gpoint[i],
    c = this.GraphGetPointApex(r, S),
    D.push(new Point(c.x, c.y)),
    - 1 != n
  ) {
    if (
      l = r.gpoint[n],
      !0,
      u = this.GraphGetPointApex(r, l),
      D.push(new Point(u.x, u.y)),
      r.pointflags & ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA &&
      (g = this.GraphGetPointLineArea(r, l))
    ) {
      switch (r.quadrant) {
        case 0:
          if (g[1].x >= r.area.x + r.area.width) break;
          g[1].x += 1,
            g[2].x += 1;
          break;
        case 2:
          if (g[1].x <= r.area.x) break;
          g[1].x -= 1,
            g[2].x -= 1;
          break;
        case 1:
        case 3:
          if (g[1].y <= r.area.y) break;
          g[1].y -= 1,
            g[2].y -= 1
      }
      for (p = 0; p < g.length; p++) g[p].x -= e.Frame.x,
        g[p].y -= e.Frame.y;
      s = l.style.Line,
        (o = l.style.Fill).Paint.FillType == ConstantData.FillTypes.SDFILL_TEXTURE &&
        (
          s.Thickness = 0,
          o.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
        ),
        d = h.RenderArea(g, o.Paint),
        a.AddElement(d)
    }
    for (p = 0; p < D.length; p++) D[p].x -= e.Frame.x,
      D[p].y -= e.Frame.y;
    d = h.RenderLine(D[0], D[1], l.style.Line.Paint, l.style.Line.Thickness),
      a.AddElement(d)
  }
}

ListManager.LM.prototypeLM_AddSVGLineChartLines = function (e, t, a, r) {

  new Point,
    new Point;
  var i,
    n,
    o,
    s,
    l,
    S,
    c = new Rectangle;
  for (
    i = this.GraphGetCategoryList(r),
    n = r.graphLegend.length - 1;
    n >= 0;
    n--
  ) for (o = 0; o < i.length; o++) {
    for (l = - 1, s = 0; s < r.gpoint.length && - 1 == l; s++) r.gpoint[s].categoryid == i[o].categoryid &&
      r.gpoint[s].seriesid == r.graphLegend[n].seriesid &&
      (l = s);
    if (- 1 == l) break;
    if (S = - 1, o + 1 < i.length) for (s = 0; s < r.gpoint.length && - 1 == S; s++) r.gpoint[s].categoryid == i[o + 1].categoryid &&
      r.gpoint[s].seriesid == r.graphLegend[n].seriesid &&
      (S = s);
    this.LM_AddSVGLineChartLine(e, t, a, r, l, S)
  }
  for (n = 0; n < r.gpoint.length; n++) this.GraphShouldShowValueLabel(r, r.gpoint[n]) &&
    this.LM_AddSVGGraphValueLabel(e, t, a, r, r.gpoint[n]),
    r.gpoint[n].HyperlinkText &&
    r.gpoint[n].HyperlinkText >= 0 &&
    (
      c = this.GraphGetPointJumpRect(r, r.gpoint[n], 1),
      this.LM_AddSVGGraphHyperlinkIcon(e, t, a, r, c)
    ),
    r.gpoint[n].NoteID >= 0 &&
    (
      c = this.GraphGetPointJumpRect(r, r.gpoint[n], 0),
      this.LM_AddSVGGraphCommentIcon(e, t, a, r, c)
    )
}

ListManager.LM.prototypeLM_AddSVGBarChartBars = function (e, t, a, r) {

  var i,
    n = new Rectangle,
    o = new Rectangle,
    s = new Rectangle;
  if (Utils2.CopyRect(n, r.area), !Utils2.IsRectEmpty(n)) {
    for (i = 0; i < r.gpoint.length; i++) r.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE &&
      r.gpoint[i].categoryid != r.pieChartCategory ||
      r.gpoint[i].style.Fill.Paint.FillType !== FileParser.SDRFillTypes.SDFILL_SOLID &&
      r.gpoint[i].style.Fill.Paint.FillType != FileParser.SDRFillTypes.SDFILL_GRADIENT ||
      this.LM_AddSVGFilledStyledPoint(e, t, a, r, r.gpoint[i], r.gpoint[i].frame);
    for (i = 0; i < r.gpoint.length; i++) r.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE &&
      r.gpoint[i].categoryid != r.pieChartCategory ||
      this.GraphShouldShowValueLabel(r, r.gpoint[i]) &&
      this.LM_AddSVGGraphValueLabel(e, t, a, r, r.gpoint[i]);
    for (i = 0; i < r.gpoint.length; i++) r.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE &&
      r.gpoint[i].categoryid != r.pieChartCategory ||
      (
        r.gpoint[i].HyperlinkText &&
        r.gpoint[i].HyperlinkText.length > 0 &&
        (
          o = this.GraphGetPointJumpRect(r, r.gpoint[i], 1),
          (s = Utils2.IntersectRect(r.gpoint[i].frame, o)) &&
          Utils2.EqualRect(s, o) &&
          this.LM_AddSVGGraphHyperlinkIcon(e, t, a, r, o)
        ),
        r.gpoint[i].NoteID >= 0 &&
        (
          o = this.GraphGetPointJumpRect(r, r.gpoint[i], 0),
          (s = Utils2.IntersectRect(r.gpoint[i].frame, o)) &&
          Utils2.EqualRect(s, o) &&
          this.LM_AddSVGGraphCommentIcon(e, t, a, r, o)
        )
      )
  }
}

ListManager.LM.prototypeLM_AddSVGLegendSwatch = function (e, t, a, r, i, n) {

  var o = Utils1.DeepCopy(n);
  Utils2.OffsetRect(o, - e.Frame.x, - e.Frame.y);
  var s = (new ListManager.Graph).RenderRect(o, r.graphLegend[i].style.Fill.Paint);
  a.AddElement(s)
}

ListManager.LM.prototypeLM_AddSVGLegend = function (e, t, a, r) {

  var i,
    n,
    o,
    s = {},
    l = {},
    S = {};
  if (
    r.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_NONE
  ) for (o = 0; o < r.graphLegend.length; o++) if (
    r.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_FULL &&
    r.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_SWATCHES ||
    (
      n = Utils2.IntersectRect(r.layoutFrame, r.graphLegend[o].swatchFrame)
    ) &&
    Utils2.EqualRect(n, r.graphLegend[o].swatchFrame) &&
    this.LM_AddSVGLegendSwatch(e, t, a, r, o, r.graphLegend[o].swatchFrame),
    (
      r.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_FULL ||
      r.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_NAMES
    ) &&
    (
      s.x = r.graphLegend[o].textFrame.x + r.graphLegend[o].textFrame.width / 2,
      s.y = r.graphLegend[o].textFrame.y + r.graphLegend[o].textFrame.height / 2,
      (
        n = Utils2.IntersectRect(r.layoutFrame, r.graphLegend[o].textFrame)
      ) &&
      Utils2.EqualRect(n, r.graphLegend[o].textFrame)
    )
  ) {
    l = GlobalData.objectStore.GetObject(r.graphLegend[o].DataID),
      S = this.Graph_AddSVGTextObject(
        e,
        t,
        a,
        l.Data.runtimeText,
        r.graphLegend[o].DataID,
        r.graphLegend[o].textFrame,
        ConstantData.TextAlign.RIGHT,
        'middle'
      );
    var c = this.CalcDefaultInitialTextStyle(r.graphLegend[o].style.Text);
    S.SetFormat(c)
  }
  if (
    (
      r.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ||
      r.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
    ) &&
    r.flags & ListManager.Graph.Flags.SDAX_SHOW_STACKED_SCALE &&
    r.imageValueRep == ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK
  ) {
    Utils2.CopyRect(i, r.graphlegendTitle.drawpt),
      i.width = SDAX_LEGEND_SWATCH_SIZE,
      this.LM_AddSVGLegendSwatch(e, t, a, r, 0, i),
      Utils2.CopyRect(i, r.graphlegendTitle.drawpt),
      i.x = i.x + SDAX_LEGEND_SWATCH_SIZE + SDAX_LEGEND_GAP_SIZE,
      s.x = i.x + i.width / 2,
      s.y = i.y + i.height / 2,
      l = GlobalData.objectStore.GetObject(r.theGraph.graphlegendTitle.DataID),
      S = this.Graph_AddSVGTextObject(
        e,
        t,
        a,
        l.Data.runtimeText,
        r.graphlegendTitle.DataID,
        i,
        ConstantData.TextAlign.RIGHT,
        'top'
      );
    c = this.CalcDefaultInitialTextStyle(r.theGraph.graphlegendTitle.style.Text);
    S.SetFormat(c)
  }
}

ListManager.LM.prototypeAddSVGAddLine = function (e, t, a, r, i, n, o) {

  var s,
    l = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH);
  a.AddElement(l);
  var S = l.PathCreator();
  for (
    l.SetID(ConstantData.SVGElementClass.GRAPHLINE),
    l.SetFillColor('none'),
    l.SetStrokeColor(i.Paint.Color),
    l.SetStrokeOpacity(1),
    l.SetStrokeWidth(i.Thickness),
    S.BeginPath(),
    S.MoveTo(o[0].x, o[0].y),
    s = 1;
    s < o.length;
    s++
  ) S.LineTo(o[s].x, o[s].y);
  S.Apply()
}

ListManager.LM.prototypeLM_AddSVGAxisTicksAndGrid = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = [],
    g = [],
    h = ListManager.Graph.Defines.SDAX_MINORTICKSIZE,
    m = ListManager.Graph.Defines.SDAX_MAJORTICKSIZE,
    C = 0,
    y = 0,
    f = 0,
    L = 0;
  if (!(r.axes[i].majorscale <= 0)) {
    switch (
    D.push(new Point(0, 0)),
    D.push(new Point(0, 0)),
    r.axes[i].orientation === ListManager.Graph.Defines.SDAX_HORIZ ? (
      c = r.axes[i].frame.width,
      s = r.axes[ListManager.Graph.Defines.SDAX_VERT].frame.height
    ) : (
      c = r.axes[i].frame.height,
      s = r.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.width
    ),
    r.axes[i].minor > 0 &&
    Math.round(r.axes[i].major / r.axes[i].minor),
    r.quadrant
    ) {
      case 0:
      case 1:
        n = r.axes[i].orientation === ListManager.Graph.Defines.SDAX_HORIZ ? r.axes[i].frame.y : r.axes[i].frame.x + r.axes[i].frame.width;
        break;
      case 2:
        n = r.axes[i].orientation === ListManager.Graph.Defines.SDAX_HORIZ ? r.axes[i].frame.y + r.axes[i].frame.height : r.axes[i].frame.x;
        break;
      case 3:
        n = r.axes[i].orientation === ListManager.Graph.Defines.SDAX_HORIZ ? r.axes[i].frame.y : r.axes[i].frame.x
    }
    switch (r.quadrant) {
      case 0:
      case 1:
        u = r.axes[i].orientation != ListManager.Graph.Defines.SDAX_HORIZ;
        break;
      case 2:
        u = r.axes[i].orientation == ListManager.Graph.Defines.SDAX_HORIZ;
        break;
      case 3:
        r.axes[i].orientation,
          ListManager.Graph.Defines.SDAX_HORIZ,
          u = !1
    }
    for (
      r.axes[i].tickstyles === ListManager.Graph.AxisTickStyles.SDAX_TICK_BELOW &&
      (u = - u),
      h = u ? - ListManager.Graph.Defines.SDAX_MINORTICKSIZE : ListManager.Graph.Defines.SDAX_MINORTICKSIZE,
      m = u ? - ListManager.Graph.Defines.SDAX_MAJORTICKSIZE : ListManager.Graph.Defines.SDAX_MAJORTICKSIZE,
      L = r.axes[i].start,
      f += this.GraphGetAxisMargin(r, r.axes[i]);
      Math.round(f) <= Math.round(c);
    ) {
      if (
        d = 0 != this.GraphGetAxisMargin(r, r.axes[i]) &&
        !(
          f > this.GraphGetAxisMargin(r, r.axes[i]) &&
          f + this.GraphGetAxisMargin(r, r.axes[i]) < c
        ),
        r.axes[i].orientation === ListManager.Graph.Defines.SDAX_HORIZ
      ) {
        if (
          o = 2 == r.quadrant ? n + Math.round(s) : n - Math.round(s),
          f > 0 &&
          r.axes[i].minor > 0
        ) for (
            l = 1,
            S = L - 1;
            S > r.axes[i].start &&
            Math.round(S) % Math.round(r.axes[i].major) != 0;
            S -= r.axes[i].minor
          ) D[0].x = r.axes[i].frame.x + Math.round(f) - l * Math.round(r.axes[i].minorscale),
            D[0].y = n,
            D[1] = D[0],
            r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR &&
            (D[1].y = o),
            r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS ||
            (D[0].y = n + h),
            D[0].y != D[1].y &&
            g.push([{
              x: D[0].x,
              y: D[0].y
            },
            {
              x: D[1].x,
              y: D[1].y
            }
            ]),
            l++;
        D[0].x = r.axes[i].frame.x + Math.round(f),
          D[0].y = n,
          D[1] = Utils1.DeepCopy(D[0]),
          p = r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          (f == c || 0 == f || d) &&
          (p = !1),
          p &&
          (D[0].y = o),
          r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS ||
          r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE ||
          d ||
          (D[1].y = n + m),
          D[0].y != D[1].y &&
          g.push([{
            x: D[0].x,
            y: D[0].y
          },
          {
            x: D[1].x,
            y: D[1].y
          }
          ])
      } else {
        if (
          o = 0 == r.quadrant ||
            1 == r.quadrant ? n + Math.round(s) : n - Math.round(s),
          f > 0 &&
          r.axes[i].minor > 0
        ) for (
            l = 1,
            S = L - r.axes[i].minor;
            S > r.axes[i].start &&
            S > L - r.axes[i].major;
            S -= r.axes[i].minor
          ) D[0].x = n,
            D[0].y = r.axes[i].frame.y + r.axes[i].frame.height - Math.round(f) + l * Math.round(r.axes[i].minorscale),
            D[1] = Utils1.DeepCopy(D[0]),
            r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR &&
            (D[1].x = o),
            r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS ||
            (D[0].x = n + h),
            D[0].x != D[1].x &&
            g.push([{
              x: D[0].x,
              y: D[0].y
            },
            {
              x: D[1].x,
              y: D[1].y
            }
            ]),
            l++;
        D[0].x = n,
          D[0].y = r.axes[i].frame.y + r.axes[i].frame.height - Math.round(f),
          D[1] = Utils1.DeepCopy(D[0]),
          p = r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          (f == c || 0 == f || d) &&
          (p = !1),
          p &&
          (D[1].x = o),
          r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS ||
          r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE ||
          d ||
          (D[0].x = n + m),
          D[0].x != D[1].x &&
          g.push([{
            x: D[0].x,
            y: D[0].y
          },
          {
            x: D[1].x,
            y: D[1].y
          }
          ])
      }
      if (r.axes[i].end > 0) {
        var I = {
          majorTick: L,
          labelOffset: f
        };
        this.GraphGetNextAxisMajorTick(
          r.axes[i].start,
          r.axes[i].end,
          r.axes[i].major,
          r.axes[i].majorscale,
          I
        ),
          L = I.majorTick,
          f = I.labelOffset
      } else f += r.axes[i].majorscale,
        L += r.axes[i].major
    }
    for (C = 0; C < g.length; C++) {
      var T = g[C];
      for (y = 0; y < T.length; y++) T[y].x -= e.Frame.x,
        T[y].y -= e.Frame.y
    }
    var b = (new ListManager.Graph).RenderPolyLineList(g, r.gridStyle.Line.Paint.Color, r.gridStyle.Line.Thickness);
    a.AddElement(b)
  }
}

ListManager.LM.prototypeLM_AddSVGAxisLabels = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S = {},
    c = {},
    u = {},
    p = {},
    d = 0;
  for (
    s = this.GraphGetAxesIndexes(r),
    n = 0;
    n < r.axes[i].labels.length;
    n++
  ) if (
      this.GraphIsAxisLabelShowing(r, r.axes[i], r.axes[i].labels[n])
    ) {
      if (d++ > 0 && i === s.magnitude && 0 === r.axes[i].labels[n].tangle) {
        for (l = !1, o = n + 1; o < r.axes[i].labels.length; o++) if (
          this.GraphIsAxisLabelShowing(r, r.axes[i], r.axes[i].labels[o]) &&
          Utils2.IntersectRect(r.axes[i].labels[n].frame, r.axes[i].labels[o].frame)
        ) {
          l = !0;
          break
        }
        if (l) continue
      }
      if (
        S.x = r.axes[i].labels[n].frame.x,
        S.y = r.axes[i].labels[n].frame.y,
        p = Utils2.SetRect(
          S.x,
          S.y,
          S.x + r.axes[i].labels[n].frame.width,
          S.y + r.axes[i].labels[n].frame.height
        ),
        !(c = GlobalData.objectStore.GetObject(r.axes[i].labels[n].DataID))
      );
      var D = null;
      switch (r.axes[i].labels[n].just) {
        case 'left':
          D = ConstantData.TextAlign.LEFT;
          break;
        case 'right':
          D = ConstantData.TextAlign.RIGHT;
          break;
        default:
          D = D = ConstantData.TextAlign.MIDDLE
      }
      u = this.Graph_AddSVGTextObject(
        e,
        t,
        a,
        c.Data.runtimeText,
        r.axes[i].labels[n].DataID,
        p,
        D,
        'top'
      );
      var g = this.CalcDefaultInitialTextStyle(r.axes[i].labels[n].style.Text);
      u.SetFormat(g),
        0 !== r.axes[i].labels[n].tangle &&
        u.SetRotation(
          r.axes[i].labels[n].tangle,
          r.axes[i].labels[n].center.x - e.Frame.x,
          r.axes[i].labels[n].center.y - e.Frame.y
        )
    }
}

ListManager.LM.prototypeLM_AddSVGBarOrLineAddAxis = function (e, t, a, r, i) {

  var n,
    o = {},
    s = {},
    l = {},
    S = (new Rectangle, []),
    c = GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH);
  if (
    0 != r.axes[i].title.DataID &&
    !(
      r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE
    ) &&
    r.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
    r.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) {
    o = GlobalData.objectStore.GetObject(r.axes[i].title.DataID);
    var u = {};
    this.GraphGetTextInfo(e, r, r.axes[i].title.DataID, r.axes[i].title.tangle, u, {
    }),
      l = new Rectangle(
        r.axes[i].title.drawpt.x,
        r.axes[i].title.drawpt.y,
        u.width,
        u.height
      ),
      s = this.Graph_AddSVGTextObject(
        e,
        t,
        a,
        o.Data.runtimeText,
        r.axes[i].title.DataID,
        l,
        r.axes[i].title.just,
        'top'
      );
    var p = this.CalcDefaultInitialTextStyle(r.axes[i].title.style.Text);
    s.SetFormat(p),
      0 !== r.axes[i].title.tangle &&
      s.SetRotation(
        r.axes[i].title.tangle,
        r.axes[i].title.drawpt.x - e.Frame.x,
        r.axes[i].title.drawpt.y - e.Frame.y
      )
  }
  if (
    this.LM_AddSVGAxisLabels(e, t, a, r, i),
    this.LM_AddSVGAxisTicksAndGrid(e, t, a, r, i),
    !(
      r.axes[i].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE
    )
  ) {
    a.AddElement(c);
    var d = c.PathCreator();
    for (
      c.SetID(ConstantData.SVGElementClass.GRAPHLINE),
      c.SetFillColor('none'),
      c.SetStrokeColor(r.axes[i].style.Line.Paint.Color),
      c.SetStrokeOpacity(1),
      c.SetStrokeWidth(r.axes[i].style.Line.Thickness),
      d.BeginPath(),
      S = this.GraphGetAxisLine(r, i),
      n = 0;
      n < S.length;
      n++
    ) S[n].x -= e.Frame.x,
      S[n].y -= e.Frame.y;
    for (d.MoveTo(S[0].x, S[0].y), n = 1; n < S.length; n++) d.LineTo(S[n].x, S[n].y);
    d.Apply()
  }
}

ListManager.LM.prototypeLM_AddSVGBarOrLineAddAxes = function (e, t, a, r) {

  var i;
  for (i = 0; i < r.axes.length; i++) this.LM_AddSVGBarOrLineAddAxis(e, t, a, r, i);
  if (this.GraphShouldFrameGraphingArea(r)) {
    var n,
      o = null,
      s = [],
      l = !1,
      S = new ListManager.Graph;
    for (
      s.push(new Point),
      s.push(new Point),
      i = 0;
      i < 4;
      i++
    ) {
      switch (l = !0, i) {
        case 0:
          s[0].x = r.area.x,
            s[0].y = r.area.y,
            s[1].x = r.area.x + r.area.width,
            s[1].y = r.area.y,
            2 !== r.quadrant ||
            r.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE ||
            (l = !1);
          break;
        case 1:
          s[0].x = r.area.x + r.area.width,
            s[0].y = r.area.y,
            s[1].x = r.area.x + r.area.width,
            s[1].y = r.area.y + r.area.height,
            3 !== r.quadrant &&
            4 !== r.quadrant ||
            r.axes[ListManager.Graph.Defines.SDAX_VERT].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE ||
            (l = !1);
          break;
        case 2:
          s[0].x = r.area.x,
            s[0].y = r.area.y + r.area.height,
            s[1].x = r.area.x + r.area.width,
            s[1].y = r.area.y + r.area.height,
            0 !== r.quadrant &&
            (1 !== r.quadrant || 4 !== r.quadrant) ||
            r.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE ||
            (l = !1);
          break;
        case 3:
          s[0].x = r.area.x,
            s[0].y = r.area.y,
            s[1].x = r.area.x,
            s[1].y = r.area.y + r.area.height,
            0 !== r.quadrant &&
            1 !== r.quadrant ||
            r.axes[ListManager.Graph.Defines.SDAX_VERT].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE ||
            (l = !1)
      }
      if (l) {
        for (n = 0; n < s.length; n++) s[n].x -= e.Frame.x,
          s[n].y -= e.Frame.y;
        o = S.RenderLine(s[0], s[1], r.gridStyle.Line.Paint, r.gridStyle.Line.Thickness),
          a.AddElement(o)
      }
    }
  }
}

ListManager.LM.prototypeGraphShouldFrameGraphingArea = function (e) {

  var t,
    a = !1;
  if (
    e.areaStyle.Fill.Paint.FillType != ConstantData.FillTypes.SDFILL_TRANSPARENT
  ) return !0;
  for (t = 0; t < e.axes.length; t++) (
    e.axes[t].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR ||
    e.axes[t].flags & ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR
  ) &&
    (a = !0);
  return a
}

ListManager.LM.prototypeGraphGetAxisLine = function (e, t) {

  var a = {},
    r = {};
  if (
    e.axes[t].orientation === ListManager.Graph.Defines.SDAX_HORIZ
  ) switch (e.quadrant) {
    case 0:
    case 1:
      a.x = e.axes[t].frame.x,
        a.y = e.axes[t].frame.y,
        r.x = e.axes[t].frame.x + e.axes[t].frame.width,
        r.y = e.axes[t].frame.y;
      break;
    case 2:
      a.x = e.axes[t].frame.x + e.axes[t].frame.width,
        a.y = e.axes[t].frame.y + e.axes[t].frame.height,
        r.x = e.axes[t].frame.x,
        r.y = e.axes[t].frame.y + e.axes[t].frame.height;
      break;
    case 3:
      a.x = e.axes[t].frame.x + e.axes[t].frame.width,
        a.y = e.axes[t].frame.y,
        r.x = e.axes[t].frame.x,
        r.y = e.axes[t].frame.y
  } else switch (e.quadrant) {
    case 0:
    case 1:
      a.x = e.axes[t].frame.x + e.axes[t].frame.width,
        a.y = e.axes[t].frame.y + e.axes[t].frame.height,
        r.x = e.axes[t].frame.x + e.axes[t].frame.width,
        r.y = e.axes[t].frame.y;
      break;
    case 2:
      a.x = e.axes[t].frame.x,
        a.y = e.axes[t].frame.y,
        r.x = e.axes[t].frame.x,
        r.y = e.axes[t].frame.y + e.axes[t].frame.height;
      break;
    case 3:
      a.x = e.axes[t].frame.x,
        a.y = e.axes[t].frame.y + e.axes[t].frame.height,
        r.x = e.axes[t].frame.x,
        r.y = e.axes[t].frame.y
  }
  return [{
    x: a.x,
    y: a.y
  },
  {
    x: r.x,
    y: r.y
  }
  ]
}

ListManager.LM.prototypeGraphFormat = function (e, t, a, r) {

  var i;
  if (e) {
    var n = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID);
    n &&
      GlobalData.optManager.svgObjectLayer.RemoveElement(n),
      (
        i = this.svgDoc.CreateShape(ConstantData.CreateShapeType.SHAPECONTAINER)
      ).SetID(e.BlockID),
      this.svgObjectLayer.AddElement(i, 0),
      GlobalData.optManager.AddToDirtyList(e.BlockID)
  }
  switch (
  t.layoutFrame = Utils1.DeepCopy(a),
  this.GraphShape(t),
  t.graphtype
  ) {
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE:
      this.GraphBarOrLineChartRecalcLayout(e, t, a, r);
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE:
      this.GraphPieChartRecalcLayout(e, t, a, r)
  }
  t.flags & ListManager.Graph.Flags.SDAX_SHOW_TABLE &&
    GlobalData.optManager.GetActiveTextEdit()
},






  ListManager.LM.prototype.ShapingDimensions = function (e, t, a) {

    var r = {},
      i = {},
      n = {
        HaxTitleHt: 0,
        HaxLabelHt: 0,
        HaxTickHt: 0,
        VaxTitleWd: 0,
        VaxLabelWd: 0,
        VaxTickWd: 0,
        GraphTitleHt: 0,
        GraphTitleVerticalSpacing: 0,
        LegendWd: 0,
        LegendHt: 0,
        LegendScaleHt: 0
      };
    return n.GraphTitleHt = this.GraphGetGraphTitleHeight(
      e,
      t,
      ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT
    ),
      n.GraphTitleVerticalSpacing = ListManager.Graph.Defines.SDAX_GRAPH_TITLE_VERTICAL_SPACING,
      n.HaxTitleHt = 0,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE ||
      (
        r = this.GraphGetFrameSize(
          e,
          t,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.DataID,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.tangle,
          n.HaxTitleHt,
          null
        )
      ) &&
      (
        n.HaxTitleHt = r.cy,
        n.HaxTitleHt += 2 * t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.margin,
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.lflags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.lflags,
          ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT,
          !0
        )
      ),
      n.HaxLabelHt = 0,
      n.HaxLabelHt = this.GraphGetMaxAxisLabelHeight(
        e,
        t,
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ],
        ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT
      ),
      n.HaxLabelHt > this.GraphGetMaxHorizontalAxisLabelHeight(a) &&
      (n.HaxLabelHt = this.GraphGetMaxHorizontalAxisLabelHeight(a)),
      n.HaxTickHt = 0,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS ? t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS ||
        (
          n.HaxTickHt = ListManager.Graph.Defines.SDAX_MINORTICKSIZE
        ) : n.HaxTickHt = ListManager.Graph.Defines.SDAX_MAJORTICKSIZE,
      n.VaxTitleWd = 0,
      t.axes[ListManager.Graph.Defines.SDAX_VERT].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE ||
      (
        r = this.GraphGetFrameSize(
          e,
          t,
          t.axes[ListManager.Graph.Defines.SDAX_VERT].title.DataID,
          t.axes[ListManager.Graph.Defines.SDAX_VERT].title.tangle
        )
      ) &&
      (
        n.VaxTitleWd = r.cx,
        n.VaxTitleWd += 2 * t.axes[ListManager.Graph.Defines.SDAX_VERT].title.margin,
        t.axes[ListManager.Graph.Defines.SDAX_VERT].title.lflags = Utils2.SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].title.lflags,
          ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_HORIZ,
          !0
        )
      ),
      n.VaxLabelWd = 0,
      n.VaxLabelWd = this.GraphGetMaxAxisLabelWidth(
        e,
        t,
        t.axes[ListManager.Graph.Defines.SDAX_VERT],
        ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_HORIZ
      ),
      n.VaxLabelWd > this.GraphGetMaxVerticalAxisLabelWidth(a) &&
      (n.VaxLabelWd = this.GraphGetMaxVerticalAxisLabelWidth(a)),
      n.VaxTickWd = 0,
      t.axes[ListManager.Graph.Defines.SDAX_VERT].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS ? t.axes[ListManager.Graph.Defines.SDAX_VERT].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS ||
        (
          n.VaxTickWd = ListManager.Graph.Defines.SDAX_MINORTICKSIZE
        ) : n.VaxTickWd = ListManager.Graph.Defines.SDAX_MAJORTICKSIZE,
      n.LegendHt = n.LegendWd = 0,
      t.graphlegendTitle.lflags & ListManager.Graph.LayoutFlags.SDAX_LAYOUT_ALTERNATE ? (
        n.LegendHt = this.GraphGetLegendHeight(e, t),
        n.LegendHt += ListManager.Graph.Defines.SDAX_LEGEND_BOTTOM_MARGIN
      ) : (
        n.LegendWd = this.GraphGetLegendWidth(e, t),
        n.LegendWd += ListManager.Graph.Defines.SDAX_LEGEND_RIGHT_MARGIN
      ),
      n.LegendScaleHt = 0,
      (
        t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ||
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
      ) &&
      t.flags & ListManager.Graph.Flags.SDAX_SHOW_STACKED_SCALE &&
      t.imageValueRep == ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK &&
      (i = this.GraphGetTextSize(e, t, t.graphlegendTitle.DataID)) &&
      (
        n.LegendScaleHt = Math.max(ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE, i.cy)
      ),
      n
  }

ListManager.LM.prototypeGraphBarOrLineChartRecalcLayout = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c = {
      cx: 0,
      cy: 0
    },
    u = {
      cx: 0,
      cy: 0
    },
    p = {
      cx: 0,
      cy: 0
    },
    d = {
      cx: 0,
      cy: 0
    },
    D = 0,
    g = 0;
  switch (
  this.SetMagnitudeAxisLabels(e, t),
  this.GraphProcessSummaryLabels(t, null),
  r &&
  (
    this.GraphTextGrow(e, t, - 1, null, e.Frame, !1, ConstantData.TextAlign.CENTER),
    r = !1
  ),
  n = (S = this.ShapingDimensions(e, t, a)).HaxTitleHt + S.HaxLabelHt + S.HaxTickHt,
  o = S.VaxTitleWd + S.VaxLabelWd + S.VaxTickWd,
  this.GraphIsAxisLabelsShowing(t.axes[ListManager.Graph.Defines.SDAX_HORIZ]) &&
  (
    c = this.GraphGetTextSize(
      e,
      t,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].labels[0].DataID
    )
  ) &&
  c.cx / 2 > o &&
  (o = c.cx / 2),
  this.GraphIsAxisLabelsShowing(t.axes[ListManager.Graph.Defines.SDAX_VERT]) &&
  (
    p = this.GraphGetTextSize(
      e,
      t,
      t.axes[ListManager.Graph.Defines.SDAX_VERT].labels[0].DataID
    )
  ) &&
  p.cy / 2 > n &&
  (n = p.cy / 2),
  this.GraphIsAxisLabelsShowing(t.axes[ListManager.Graph.Defines.SDAX_HORIZ]) &&
  (
    i = t.axes[ListManager.Graph.Defines.SDAX_HORIZ].labels[t.axes[ListManager.Graph.Defines.SDAX_HORIZ].labels.length - 1],
    this.GraphGetFrameSize(e, t, i.DataID, i.tangle, u),
    D = 0 == i.tangle ? u.cx / 2 : u.cx
  ),
  this.GraphIsAxisLabelsShowing(t.axes[ListManager.Graph.Defines.SDAX_VERT]) &&
  (
    i = t.axes[ListManager.Graph.Defines.SDAX_VERT].labels[t.axes[ListManager.Graph.Defines.SDAX_VERT].labels.length - 1],
    this.GraphGetFrameSize(e, t, i.DataID, i.tangle, d),
    g = 0 == i.tangle ? d.cy / 2 : d.cy
  ),
  t.quadrant
  ) {
    case 0:
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
        t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE &&
        (D = 0),
        s = Math.max(n, g),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(
          a.x + o,
          a.y + a.height - s - S.LegendScaleHt - S.LegendHt,
          a.x + a.width - t.axes[ListManager.Graph.Defines.SDAX_HORIZ].margin - S.LegendWd - D,
          a.y + a.height - S.LegendScaleHt - S.LegendHt
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(
          a.x,
          a.y + S.GraphTitleHt + S.GraphTitleVerticalSpacing + g,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.y
        );
      break;
    case 1:
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
        t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE &&
        (g = 0),
        l = Math.max(o, D),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(
          a.x + l,
          a.y + a.height - n - S.LegendScaleHt - S.LegendHt,
          a.x + a.width - t.axes[ListManager.Graph.Defines.SDAX_HORIZ].margin - S.LegendWd - D,
          a.y + a.height - S.LegendScaleHt - S.LegendHt
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(
          a.x,
          a.y + S.GraphTitleHt + S.GraphTitleVerticalSpacing + g,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.y
        );
      break;
    case 2:
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
        t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE &&
        (D = 0),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(
          a.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].margin + D,
          a.y + S.GraphTitleHt + S.GraphTitleVerticalSpacing,
          a.x + a.width - o - S.LegendWd,
          a.y + S.GraphTitleHt + n
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.width,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.y + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.height,
          a.x + a.width - S.LegendWd,
          a.y + a.height - t.axes[ListManager.Graph.Defines.SDAX_VERT].margin - g - S.LegendScaleHt - S.LegendHt
        );
      break;
    case 3:
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
        t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE &&
        (g = 0),
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(
          a.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].margin + D,
          a.y + a.height - n - S.LegendScaleHt - S.LegendHt,
          a.x + a.width - o - S.LegendWd,
          a.y + a.height - S.LegendScaleHt - S.LegendHt
        ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.width,
          a.y + S.GraphTitleHt + S.GraphTitleVerticalSpacing + g,
          a.x + a.width - S.LegendWd,
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.y
        )
  }
  switch (
  t.area = Utils2.SetRect(
    t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x,
    t.axes[ListManager.Graph.Defines.SDAX_VERT].frame.y,
    t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.width,
    t.axes[ListManager.Graph.Defines.SDAX_VERT].frame.y + t.axes[ListManager.Graph.Defines.SDAX_VERT].frame.height
  ),
  this.GraphTitleLayout(e, t, a, r),
  this.GraphLegendLayout(e, t, a, r, !1),
  this.GraphBarChartAxisTitleLayout(e, t, t.axes[ListManager.Graph.Defines.SDAX_HORIZ], r),
  this.GraphBarChartAxisTitleLayout(e, t, t.axes[ListManager.Graph.Defines.SDAX_VERT], r),
  t.quadrant
  ) {
    case 2:
    case 0:
      this.GraphMagnitudeAxisLayout(e, t, t.axes[ListManager.Graph.Defines.SDAX_VERT], r),
        this.GraphCategoryAxisLayout(e, t, t.axes[ListManager.Graph.Defines.SDAX_HORIZ], r);
      break;
    case 3:
    case 1:
      this.GraphMagnitudeAxisLayout(e, t, t.axes[ListManager.Graph.Defines.SDAX_HORIZ], r),
        this.GraphCategoryAxisLayout(e, t, t.axes[ListManager.Graph.Defines.SDAX_VERT], r)
  }(
    t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ||
    t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
  ) &&
    t.flags & ListManager.Graph.Flags.SDAX_SHOW_STACKED_SCALE &&
    t.imageValueRep == ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK &&
    this.GraphStackedScaleLayout(t)
}

ListManager.LM.prototypeGraphProcessSummaryLabels = function (e, t) {

  var a = t,
    r = {};
  if (!a) {
    var i = this.GraphGetAxesIndexes(e);
    a = e.axes[i.category]
  }
  a.flags & ListManager.Graph.AxisFlags.SDAX_SHOW_SUMMARY_LABELS &&
    this.GraphLabelsCanBeSummarized(e, a, r) ? r.byDate &&
      this.GraphIsSummarizingLabelsByDate(a) ? this.GraphProcessSummaryDateLabels(e, a) : r.byNumeric &&
  this.GraphProcessSummaryNumericLabels(e, a) : this.GraphHasSummaryLabels(e, a) &&
  this.GraphDeleteSummaryLabels(e, a)
}

ListManager.LM.prototypeGraphHasSummaryLabels = function (e, t) {

  var a,
    r,
    i = {};
  for (
    t ? r = t : (i = this.GraphGetAxesIndices(e), r = e.axes[i.category]),
    a = 0;
    a < r.labels.length;
    a++
  ) if (this.GraphIsSummaryLabel(r.labels[a])) return !0;
  return !1
}

ListManager.LM.prototypeGraphDeleteSummaryLabels = function (e, t) {

  var a;
  for (a = t.labels.length - 1; a > 0; a--) if (this.GraphIsSummaryLabel(t.labels[a])) {
    var r = GlobalData.objectStore.GetObject(t.labels[a].DataID);
    r &&
      r.Delete(),
      t.labels[a].DataID = - 1,
      t.labels.splice(a, 1)
  }
}

ListManager.LM.prototypeGraphIsCategoryLabel = function (e) {

  return - 1 != e.categoryid
}

ListManager.LM.prototypeGraphIsSummaryLabel = function (e) {

  return - 1 == e.categoryid
}

ListManager.LM.prototypeGraphLabelsCanBeSummarized = function (e, t, a) {

  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = !0,
    g = !0,
    h = !1,
    m = !1;
  for (
    d = 0;
    d < t.labels.length &&
    (
      !this.GraphIsCategoryLabel(t.labels[d]) ||
      !(r = this.GraphGetTextValue(t.labels[d].DataID)) ||
      (
        this.GraphIsValidNumericString(r) ? (u = this.GraphGetNumericValue(r), h && u <= p && (D = !1), p = u) : D = !1,
        this.GraphParseLabelDateTimeString(t, r, i, n, null, null) ? (
          c = this.GraphLabelToSystemTime(i, n),
          l = this.SDRmktime(c),
          h &&
          l <= S &&
          (g = !1),
          S = l
        ) : g = !1,
        g &&
        lpiGranularity &&
        (
          c = this.GraphLabelToSystemTime(i, n),
          h ? m ||
            (s = c, m = !0) : (o = c, h = !0)
        ),
        h = !0,
        D ||
        g
      )
    );
    d++
  );
  return g &&
    D &&
    t.summaryflags & AxisSummaryLabelFlags.SDAX_SUMMARIZE_BY_DATE_PREFERRED &&
    (D = !1),
    g &&
    (granularity = h && m ? this.GraphGetTimeGranularity(s, o) : 0),
    summaryInfo.byNumeric = D,
    summaryInfo.byDate = g,
    summaryInfo.granularity = granularity,
    D ||
    g
}

ListManager.LM.prototypeSetMagnitudeAxisLabels = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = !1;
  a = this.GraphGetAxesIndexes(t),
    o = (r = t.axes[a.magnitude]).major,
    s = r.minor;
  var p;
  if (
    p = this.GraphGetMagnitudeBoundsAndTicks(t, r),
    r.major = p.major,
    r.minor = p.minor,
    o != r.major ||
      s != r.minor ? u = !0 : r.labels.length ? (
        c = r.labels.length - 1,
        (l = this.GraphGetTextValue(r.labels[c].DataID)) &&
        (
          l != this.GraphFormatNumericValueLabel(t, p.upperBound) &&
          (u = !0),
          this.GraphIsTextStyleDifferent(r.labels[c].DataID, r.style.Text) &&
          (u = !0)
        ),
        0,
        (l = this.GraphGetTextValue(r.labels[0].DataID)) &&
        (
          l != this.GraphFormatNumericValueLabel(t, p.lowerBound) &&
          (u = !0),
          this.GraphIsTextStyleDifferent(r.labels[0].DataID, r.style.Text) &&
          (u = !0)
        )
      ) : u = !0,
    u
  ) {
    for (i = 0; i < r.labels.length; i++) {
      var d = GlobalData.objectStore.GetObject(r.labels[i].DataID);
      d &&
        d.Delete(),
        r.labels[i].DataID = - 1
    }
    if (r.labels = [], r.major) for (
      var D = {
        majorTick: p.lowerBound,
        labelOffset: 0
      };
      D.majorTick <= p.upperBound;
    ) {
      switch (
      S = this.GraphFormatNumericValueLabel(t, D.majorTick),
      t.quadrant
      ) {
        case 0:
          n = ConstantData.TextAlign.RIGHT;
          break;
        case 1:
        case 3:
          n = ConstantData.TextAlign.CENTER;
          break;
        case 2:
          n = ConstantData.TextAlign.LEFT
      }
      var g = new ListManager.Graph.Axis.Label;
      g.DataID = this.GraphCreateText(e, e.Frame, r.style, n, 'middle', S),
        g.just = n,
        r.labels.push(g),
        this.GraphGetNextAxisMajorTick(p.lowerBound, p.upperBound, r.major, 0, D)
    }
  }
}

ListManager.LM.prototypeGraphPieChartRecalcLayout = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = 0,
    d = 0,
    D = 0,
    g = 0,
    h = !1,
    m = {};
  switch (
  r &&
  this.GraphTextGrow(e, t, - 1, null, e.Frame, !1, ConstantData.TextAlign.CENTER),
  l = this.GraphGetGraphTitleHeight(
    e,
    t,
    ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT
  ),
  t.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_NONE &&
  (
    p = (m = this.GraphLegendLayout(e, t, a, r, !0)).cx + ListManager.Graph.Defines.SDAX_LEGEND_RIGHT_MARGIN,
    d = m.cy + ListManager.Graph.Defines.SDAX_LEGEND_BOTTOM_MARGIN,
    t.graphlegendTitle.lflags & ListManager.Graph.LayoutFlags.SDAX_LAYOUT_ALTERNATE ? p = 0 : d = 0
  ),
  t.area = Utils2.SetRect(
    a.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].margin,
    a.y + l,
    a.x + a.width - t.axes[ListManager.Graph.Defines.SDAX_HORIZ].margin - p,
    a.y + a.height - d
  ),
  t.quadrant
  ) {
    case 0:
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(
        t.area.x,
        t.area.y + t.area.height,
        t.area.x + t.area.width,
        t.area.y + t.area.height
      ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(t.area.x, t.area.y, t.area.x, t.area.y + t.area.height);
      break;
    case 1:
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(t.area.x, t.area.y, t.area.x + t.area.width, t.area.y),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(t.area.x, t.area.y, t.area.x, t.area.y + t.area.height);
      break;
    case 2:
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(t.area.x, t.area.y, t.area.x + t.area.width, t.area.y),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(
          t.area.x + t.area.width,
          t.area.y,
          t.area.x + t.area.width,
          t.area.y + t.area.height
        );
      break;
    case 3:
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame = Utils2.SetRect(
        t.area.x,
        t.area.y + t.area.height,
        t.area.x + t.area.width,
        t.area.y + t.area.height
      ),
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame = Utils2.SetRect(
          t.area.x + t.area.width,
          t.area.y,
          t.area.x + t.area.width,
          t.area.y + t.area.height
        )
  }
  if (
    t.axes[ListManager.Graph.Defines.SDAX_HORIZ].orientation = ListManager.Graph.Defines.SDAX_HORIZ,
    t.axes[ListManager.Graph.Defines.SDAX_VERT].orientation = ListManager.Graph.Defines.SDAX_VERT,
    m = this.GraphGetMaxValueLabelDimensions(e, t)
  ) {
    if (
      D = m.cx,
      g = m.cy,
      t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS
    ) {
      for (c = 0; c < t.gpoint.length; c++) if (
        t.gpoint[c].categoryid == t.pieChartCategory &&
        t.gpoint[c].flags & ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER
      ) {
        h = !0;
        break
      }
      if (
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
        h
      ) if (
          (
            t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
            h
          ) &&
          (
            D += 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
          ),
          t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
          (
            t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
            h
          ) &&
          (
            g += ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE / 2
          ),
          D < 0 &&
          (D = 0),
          g < 0 &&
          (g = 0),
          t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE
        ) u = this.GraphGetNumSeries(t) >= 8 ? 4 : 2,
          Utils2.InflateRect(t.area, - D, - u * g),
          this.MakeSquareRect(t.area);
        else switch (t.quadrant) {
          case 0:
            Utils2.InflateRect(t.area, - D / 2, 0),
              Utils2.OffsetRect(t.area, - D / 2, 0);
            break;
          case 1:
            Utils2.InflateRect(t.area, 0, - g),
              Utils2.OffsetRect(t.area, 0, g);
            break;
          case 2:
            Utils2.InflateRect(t.area, - D / 2, 0),
              Utils2.OffsetRect(t.area, D / 2, 0);
            break;
          case 3:
            Utils2.InflateRect(t.area, 0, - g),
              Utils2.OffsetRect(t.area, 0, - g)
        } else t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
          Utils2.InflateRect(t.area, 2 * - g, 2 * - g)
    } else t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
      Utils2.InflateRect(t.area, - g, - g);
    i = 0 == t.quadrant ||
      2 == t.quadrant ? t.axes[ListManager.Graph.Defines.SDAX_VERT] : t.axes[ListManager.Graph.Defines.SDAX_HORIZ],
      this.GraphMagnitudeAxisLayout(e, t, i, !1),
      this.GraphTitleLayout(e, t, a, r),
      this.GraphLegendLayout(e, t, a, r, !1),
      this.GraphPieLayout(e, t),
      n = this.GraphGetPieCoreArea(t),
      s = this.GraphGetPieCenter(n),
      S = this.GraphGetGraphTitleWidth(e, t, 0),
      t.graphtitle.frame.x = s.x - S / 2,
      this.GraphTextGrow(
        e,
        t,
        t.graphtitle.DataID,
        t.graphtitle.style,
        t.graphtitle.frame,
        !0,
        ConstantData.TextAlign.CENTER
      ),
      t.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
      e.GrowingGraph ||
      (
        n = this.GraphGetPieCoreArea(t),
        Utils2.IsRectEmpty(n) ||
        Math.abs(n.width - n.height) >= 5 &&
        (
          Utils2.CopyRect(o, a),
          n.width > n.height ? (
            o.width -= Math.round((n.width - n.height) / 2),
            o.height += Math.round((n.width - n.height) / 2)
          ) : (
            o.width += Math.round((n.height - n.width) / 2),
            o.height -= Math.round((n.height - n.width) / 2)
          ),
          e.GrowingGraph = !0,
          e.SetSize(o.width, o.height, 0)
        )
      ),
      e.GrowingGraph = !1
  }
}

ListManager.LM.prototypeGraphPieLayout = function (e, t) {

  var a,
    r,
    i,
    n,
    o = - 1,
    s = 0,
    l = 0,
    S = 1,
    c = 0;
  for (a = this.GraphGetCategoryList(t), i = 0; i < a.length && - 1 == o; i++) a[i].categoryid == t.pieChartCategory &&
    (o = i);
  for (
    - 1 === o &&
    (o = 0, t.pieChartCategory = a[o].categoryid),
    a[o].cSeries <= 1 &&
    (t.pieOriginTangle = 0);
    l++ < S;
  ) for (
      r = this.GraphGetPieCoreArea(t),
      c = 0,
      s = 0,
      i = 0;
      i < t.gpoint.length;
      i++
    ) if (t.gpoint[i].categoryid == a[o].categoryid) {
      if (
        n = a[o].cumValuePos + Math.abs(a[o].cumValueNeg),
        t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? (
          this.GraphPieWedgeLayout(e, t, r, t.gpoint[i], n, c),
          this.GraphPieWedgeValueLabelLayout(e, t, t.gpoint[i], n, c)
        ) : (
          this.GraphPieLinearLayout(e, t, i, a[o], c),
          this.GraphPieLinearValueLabelLayout(e, t, t.gpoint[i], n, c)
        ),
        c += Math.abs(t.gpoint[i].value),
        s++ >= a[o].cSeries
      ) break;
      0 != t.gpoint[i].explodeAmt &&
        (S = 2)
    }
  t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS &&
    this.GraphResolveOverlappedLabels(e, t)
}

ListManager.LM.prototypeGraphPieWedgeValueLabelLayout = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = {},
    y = {},
    f = !1;
  if (
    a.flags = Utils2.SetFlag(
      a.flags,
      ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
      !1
    ),
    h = this.GraphGetValueLabelString(t, a, !1),
    this.GraphConfirmAndSetTextValue(e, t, a.label.DataID, a.style, h),
    a.label.tangle = 0,
    d = (c = this.GraphGetFrameSize(e, t, a.label.DataID, a.label.tangle)).cy + 2 * ListManager.Graph.Defines.SDAX_VALUE_LABEL_MARGIN,
    D = c.cx + 2 * ListManager.Graph.Defines.SDAX_VALUE_LABEL_MARGIN,
    n = this.GraphGetPieCoreArea(t),
    C.x = n.x + n.width / 2,
    C.y = n.y + n.height / 2,
    o = Math.min(n.width, n.height) / 2,
    s = this.GraphGetWedgeBisector(t, a),
    !(
      m = t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
      t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS
    )
  ) {
    for (y = this.GraphGetWedgeTrisectors(t, a), u = 0; u < 3 && !f; u++) {
      switch (u) {
        case 0:
          S = s;
          break;
        case 1:
          S = y.trisector1;
          break;
        case 2:
          S = y.trisector2
      }
      for (p = 0; p < 3 && !f; p++) {
        switch (p) {
          case 0:
            l = 0.66;
            break;
          case 1:
            l = 0.5;
            break;
          case 2:
            l = 0.33
        }
        if (
          this.GraphPositionPieValueLabel(t, C, o, a, S, l, D, d),
          this.GraphIsValueLabelFitsInPoint(t, a)
        ) {
          f = !0;
          break
        }
      }
    }
    f ||
      (
        a.flags = Utils2.SetFlag(
          a.flags,
          ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
          !0
        ),
        m = !0
      )
  }
  if (m) switch (
    this.GraphPositionPieValueLabel(t, C, o, a, s, 1, D, d),
    a.flags,
    ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
    g = t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
      a.flags & ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER ? 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE : 0,
    this.GraphGetCircleQuadrantRadians(s)
  ) {
      case 1:
        Utils2.OffsetRect(a.label.frame, D / 2 + g, - d / 2);
        break;
      case 2:
        Utils2.OffsetRect(a.label.frame, - (D / 2 + g), - d / 2);
        break;
      case 3:
        Utils2.OffsetRect(a.label.frame, - (D / 2 + g), d / 2);
        break;
      case 4:
        Utils2.OffsetRect(a.label.frame, D / 2 + g, d / 2)
    }
  if (
    a.explodeAmt > 0 &&
    !(
      a.flags & ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER
    )
  ) {
    var L = this.GraphGetExplodeOffsets(t, this.GraphGetPointIndex(t, a));
    Utils2.OffsetRect(a.label.frame, Math.round(L.dx), - Math.round(L.dy))
  }
  a.label.center.x = a.label.frame.x + a.label.frame.width / 2,
    a.label.center.y = a.label.frame.y + a.label.frame.height / 2,
    m ? this.GraphEnsureTextContrast(e, t, a.label.DataID, t.areaStyle.Fill.Paint) : this.GraphEnsureTextContrast(e, t, a.label.DataID, a.style.Fill.Paint)
}

ListManager.LM.prototypeGraphPieLinearLayout = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S,
    c,
    u = 0,
    p = 0,
    d = 0,
    D = 0;
  for (
    n = t.gpoint[a],
    l = r.cumValuePos + Math.abs(r.cumValueNeg),
    c = this.GraphGetAxesIndexes(t),
    o = t.axes[c.magnitude].orientation === ListManager.Graph.Defines.SDAX_VERT ? t.axes[c.magnitude].frame.height : t.axes[c.magnitude].frame.width,
    S = 0;
    S < t.gpoint.length;
    S++
  ) t.gpoint[S].categoryid == t.pieChartCategory &&
    (D += t.gpoint[S].explodeAmt);
  for (
    o -= D,
    p = Math.round(Math.abs(n.value) / l * o),
    0 == l &&
    (p = Math.round(1 / this.GraphGetNumSeries(t) * o)),
    S = 0;
    S < t.gpoint.length &&
    S !== a;
    S++
  ) t.gpoint[S].categoryid == t.pieChartCategory &&
    (
      d++,
      u += t.gpoint[S].explodeAmt,
      u += 0 == l ? Math.round(1 / this.GraphGetNumSeries(t) * o) : Math.round(Math.abs(t.gpoint[S].value) / l * o)
    );
  switch (d > 0 && (u += n.explodeAmt), t.quadrant) {
    case 0:
      n.frame = Utils2.SetRect(
        t.area.x,
        t.area.y + t.area.height - u - p,
        t.area.x + t.area.width,
        t.area.y + t.area.height - u
      );
      break;
    case 1:
      n.frame = Utils2.SetRect(t.area.x + u, t.area.y, t.area.x + u + p, t.area.y + t.area.height);
      break;
    case 2:
      n.frame = Utils2.SetRect(t.area.x, t.area.y + u, t.area.x + t.area.width, t.area.y + p + u);
      break;
    case 3:
      n.frame = Utils2.SetRect(
        t.area.x + t.area.width - u - p,
        t.area.y,
        t.area.x + t.area.width - u,
        t.area.y + t.area.height
      )
  }
  t.imageValueRep != ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE &&
    (
      s = lpMagAxis.orientation == SDAX_VERT ? t.area.width : t.area.height,
      this.GraphImageValueRepLayout(t, n, s)
    )
}

ListManager.LM.prototypeGraphPieLinearValueLabelLayout = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l;
  if (
    a.flags = Utils2.SetFlag(
      a.flags,
      ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
      !1
    ),
    n = this.GraphGetValueLabelString(t, a, !1),
    this.GraphConfirmAndSetTextValue(e, t, a.label.DataID, a.style, n),
    a.label.tangle = 0,
    s = (l = this.GraphGetFrameSize(e, t, a.label.DataID, a.label.tangle)).cy + 2 * ListManager.Graph.Defines.SDAX_VALUE_LABEL_MARGIN,
    o = l.cx + 2 * ListManager.Graph.Defines.SDAX_VALUE_LABEL_MARGIN,
    a.label.frame = Utils2.SetRect(0, 0, o, s),
    t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
    t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS
  ) switch (t.quadrant) {
    case 0:
      Utils2.OffsetRect(
        a.label.frame,
        a.frame.x + a.frame.width,
        a.frame.y + a.frame.height / 2 - s
      ),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS &&
        Utils2.OffsetRect(
          a.label.frame,
          2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
          0
        );
      break;
    case 1:
      Utils2.OffsetRect(a.label.frame, a.frame.x + a.frame.width / 2, a.frame.y - s),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS &&
        Utils2.OffsetRect(
          a.label.frame,
          2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
          - ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
        ),
        a.label.frame.x + a.label.frame.width > t.area.x + t.area.width &&
        Utils2.OffsetRect(
          a.label.frame,
          - (a.label.frame.x + a.label.frame.width - (t.area.x + t.area.width)),
          0
        );
      break;
    case 2:
      Utils2.OffsetRect(a.label.frame, a.frame.x - o, a.frame.y + a.frame.height / 2),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS &&
        Utils2.OffsetRect(
          a.label.frame,
          2 * - ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
          0
        );
      break;
    case 3:
      Utils2.OffsetRect(
        a.label.frame,
        a.frame.x + a.frame.width / 2,
        a.frame.y + a.frame.height + s
      ),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS &&
        Utils2.OffsetRect(
          a.label.frame,
          2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
          ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE / 2
        ),
        a.label.frame.x + a.label.frame.width > t.area.x + t.area.width &&
        Utils2.OffsetRect(
          a.label.frame,
          - (a.label.frame.x + a.label.frame.width - (t.area.x + t.area.width)),
          0
        )
  } else Utils2.OffsetRect(
    a.label.frame,
    a.frame.x + a.frame.width / 2,
    a.frame.y + a.frame.height / 2
  ),
    Utils2.OffsetRect(a.label.frame, - Math.round(o / 2), - Math.round(s / 2)),
    a.label.frame.width > a.frame.width &&
    (a.label.tangle = 270);
  a.label.center.x = a.label.frame.x + Math.round(o / 2),
    a.label.center.y = a.label.frame.y + Math.round(s / 2),
    this.GraphEnsureValueLabelTextContrast(e, t, a)
}

ListManager.LM.prototypeGraphConfirmAndSetTextValue = function (e, t, a, r, i) {

  var n,
    o;
  if (
    i == (
      n = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID).GetElementByID(ConstantData.SVGElementClass.TEXT, a)
    ).GetText()
  ) return !1;
  if (n.SetText(i), r) {
    var s = this.CalcDefaultInitialTextStyle(r.Text);
    n.SetFormat(s)
  }
  return o = n.GetRuntimeText(),
    this.GetObjectPtr(a, !0).runtimeText = o,
    this.GraphTextGrowOne(e, t, null, !1, ConstantData.TextAlign.CENTER, r, a),
    !0
}

ListManager.LM.prototypeGraphPieWedgeLayout = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d;
  if (r.categoryid == t.pieChartCategory) {
    switch (
    S = n / i,
    (c = 2 * Math.PI * S) > 2 * Math.PI &&
    (c = 0),
    (c += this.TangleToRadians(t.pieOriginTangle)) >= 2 * Math.PI &&
    (c %= 2 * Math.PI),
    r.wedgeStartTangle = this.RadiansToTangle(c),
    s = (Math.abs(r.value) + n) / i,
    (l = 2 * Math.PI * s) >= 2 * Math.PI &&
    (l = 0),
    (l += this.TangleToRadians(t.pieOriginTangle)) >= 2 * Math.PI &&
    (l %= 2 * Math.PI),
    r.tangle = this.RadiansToTangle(l),
    u = Math.min(a.width, a.height) / 2,
    o = this.GraphGetPieCenter(a),
    p = u * Math.cos(l),
    d = u * Math.sin(l),
    this.GraphGetCircleQuadrant(r.tangle)
    ) {
      case 1:
        r.frame = Utils2.SetRect(o.x, o.y - d, o.x + p, o.y);
        break;
      case 2:
        r.frame = Utils2.SetRect(o.x + p, o.y - d, o.x, o.y);
        break;
      case 3:
        r.frame = Utils2.SetRect(o.x + p, o.y, o.x, o.y - d);
        break;
      case 4:
        r.frame = Utils2.SetRect(o.x, o.y, o.x + p, o.y - d)
    }
    t.imageValueRep != ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE &&
      this.GraphImageValueRepLayout(t, r, - 1)
  } else r.frame = Utils2.SetRect(0, 0, 0, 0)
}

ListManager.LM.prototypeGraphGetCircleQuadrant = function (e) {

  return e >= 0 &&
    e <= 90 ? 1 : e > 90 &&
      e <= 180 ? 2 : e > - 180 &&
        e <= - 90 ? 3 : 4
}

ListManager.LM.prototypeGraphGetMaxValueLabelDimensions = function (e, t) {

  var a,
    r,
    i = null,
    n = 0,
    o = 0;
  for (a = 0; a < t.gpoint.length; a++) (
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
    t.gpoint[a].categoryid == t.pieChartCategory
  ) &&
    (
      r = this.GraphGetValueLabelString(t, t.gpoint[a], !1),
      this.GraphConfirmAndSetTextValue(e, t, t.gpoint[a].label.DataID, t.gpoint[a].style, r),
      t.gpoint[a].label.tangle = 0,
      (
        i = this.GraphGetFrameSize(e, t, t.gpoint[a].label.DataID, t.gpoint[a].label.tangle)
      ) &&
      (i.cx > n && (n = i.cx), i.cy > o && (o = i.cy))
    );
  return {
    cx: n,
    cy: o
  }
}

ListManager.LM.prototypeGraphShape = function (e) {

  for (var t = 0; t < e.axes.length; t++) this.GraphAxisLabelsShape(e, e.axes[t])
}

ListManager.LM.prototypeGraphAxisLabelsShape = function (e, t) {

  for (var a = 0; a < t.labels.length; a++) this.GraphAxisLabelShape(e, t, t.labels[a])
}

ListManager.LM.prototypeGraphAxisLabelShape = function (e, t, a) {

  if (
    a.vjust = FileParser.TextJust.TA_TOP,
    t.flags & ListManager.Graph.AxisFlags.SDAX_LABELS_ANGLED
  ) a.tangle = 45,
    a.just = (0 == e.quadrant || e.quadrant, ConstantData.TextAlign.RIGHT);
  else {
    this.GraphGetAxesIndexes(e);
    if (this.GraphIsCategoryAxis(e, t)) switch (a.tangle = 0, e.quadrant) {
      case 0:
        a.just = ConstantData.TextAlign.CENTER;
        break;
      case 1:
        a.just = ConstantData.TextAlign.RIGHT;
        break;
      case 2:
        a.just = ConstantData.TextAlign.CENTER,
          a.vjust = FileParser.TextJust.TA_BOTTOM;
        break;
      case 3:
        a.just = ConstantData.TextAlign.LEFT
    } else a.tangle = 0,
      a.just = ConstantData.TextAlign.CENTER
  }
}

ListManager.LM.prototypeGraphGetAxesIndexes = function (e) {

  var t = - 1,
    a = - 1;
  switch (e.quadrant) {
    case 0:
    case 2:
      t = ListManager.Graph.Defines.SDAX_HORIZ,
        a = ListManager.Graph.Defines.SDAX_VERT;
      break;
    case 1:
    case 3:
      t = ListManager.Graph.Defines.SDAX_VERT,
        a = ListManager.Graph.Defines.SDAX_HORIZ
  }
  return {
    category: t,
    magnitude: a
  }
}

ListManager.LM.prototypeGraphGetGraphTitleHeight = function (e, t, a) {

  var r = {
    cx: 0,
    cy: 0
  };
  return (
    r = this.GraphGetFrameSize(e, t, t.graphtitle.DataID, t.graphtitle.tangle)
  ) ? (
    r.cy += 2 * t.graphtitle.margin,
    0 != a &&
    (t.graphtitle.lflags |= a),
    r.cy
  ) : 0
}

ListManager.LM.prototypeGraphGetGraphTitleWidth = function (e, t, a) {

  var r = {
    cx: 0,
    cy: 0
  };
  return (
    r = this.GraphGetFrameSize(e, t, t.graphtitle.DataID, t.graphtitle.tangle)
  ) ? (
    r.cy += 2 * t.graphtitle.margin,
    0 != a &&
    (t.graphtitle.lflags |= a),
    r.cx
  ) : 0
}

ListManager.LM.prototypeGraphGetFrameSize = function (e, t, a, r) {

  var i = {};
  return this.GraphGetTextInfo(e, t, a, r, null, i) ? i : null
}

ListManager.LM.prototypeGraphGetTextInfo = function (e, t, a, r, i, n) {

  var o,
    s = 0,
    l = {},
    S = {},
    c = {},
    u = GlobalData.objectStore.GetObject(a);
  if (!u) return !1;
  if (!(c = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID))) return !1;
  if (
    !(S = c.GetElementByID(ConstantData.SVGElementClass.TEXT, a))
  ) {
    var p = this.GraphTextHitInfo(t, a);
    if (!p) return !1;
    var d = new Rectangle(e.Frame.x, e.Frame.y, p.maxDim.cx, p.maxDim.cy);
    S = this.Graph_AddSVGTextObject(e, this.svgDoc, null, u.Data.runtimeText, a, d, p.align, p.valign);
    var D = this.CalcDefaultInitialTextStyle(p.style.Text);
    S.SetFormat(D)
  }
  if (
    o = S.GetTextMinDimensions(),
    i &&
    (i.cx = o.width, i.cy = o.height),
    n &&
    (n.cx = o.width, n.cy = o.height, n.cx += 2, n.cy += 2),
    n &&
    r
  ) {
    s = Math.max(n.cx, n.cy),
      (l = {
        x: 0,
        y: 0
      }).x = s + n.cx / 2,
      l.y = s + n.cy / 2;
    var g = [];
    g.push(new Point(s + 0, s + 0)),
      g.push(new Point(s + n.cx, s + 0)),
      g.push(new Point(s + n.cx, s + n.cy)),
      g.push(new Point(s + 0, s + n.cy));
    var h = - 2 * Math.PI * (r / 360);
    Utils3.RotatePointsAboutPoint(l, h, g);
    var m = new Rectangle;
    Utils2.GetPolyRect(m, g),
      n.cy = m.height,
      n.cx = m.width
  }
  return !0
}

ListManager.LM.prototypeGraphGetMaxAxisLabelHeight = function (e, t, a, r) {

  return this.GraphGetMaxAxisLabelSize(e, t, a, r).cy
}

ListManager.LM.prototypeGraphGetMaxAxisLabelWidth = function (e, t, a, r) {

  return this.GraphGetMaxAxisLabelSize(e, t, a, r).cx
}

ListManager.LM.prototypeGraphGetMaxAxisLabelSize = function (e, t, a, r) {

  var i,
    n,
    o = - 1,
    s = - 1,
    l = 0,
    S = 0;
  for (n = 0; n < a.labels.length; n++) this.GraphIsAxisLabelShowing(t, a, a.labels[n]) &&
    (
      i = this.GraphGetFrameSize(e, t, a.labels[n].DataID, a.labels[n].tangle)
    ) &&
    (
      0 != r &&
      (
        a.labels[n].lflags = Utils2.SetFlag(a.labels[n].lflags, r, !1)
      ),
      i.cy > l &&
      (l = i.cy, s = n),
      i.cx > S &&
      (S = i.cx, o = n)
    );
  return r === ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT &&
    a.orientation === ListManager.Graph.Defines.SDAX_HORIZ ? - 1 != s &&
  (
    a.labels[s].lflags = Utils2.SetFlag(
      a.labels[s].lflags,
      ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT,
      !0
    )
  ) : r === ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_HORIZ &&
  a.orientation === ListManager.Graph.Defines.SDAX_VERT &&
  - 1 != o &&
  (
    a.labels[o].lflags = Utils2.SetFlag(
      a.labels[o].lflags,
      ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_HORIZ,
      !0
    )
  ),
  {
    cx: S,
    cy: l
  }
}

ListManager.LM.prototypeGraphIsAxisLabelsShowing = function (e) {

  return 0 !== e.labels.length &&
    !(e.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS)
}

ListManager.LM.prototypeGraphIsAxisLabelShowing = function (e, t, a) {

  return this.GraphIsMagnitudeAxis(e, t) ||
    this.GraphIsCategoryLabel(a) ? !(t.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS) : !!this.GraphIsSummaryLabel(a) &&
  t.flags & ListManager.Graph.AxisFlags.SDAX_SHOW_SUMMARY_LABELS
}

ListManager.LM.prototypeGraphIsMagnitudeAxis = function (e, t) {

  var a = this.GraphGetAxesIndexes(e);
  return e.axes[a.magnitude].orientation === t.orientation
}

ListManager.LM.prototypeGraphIsCategoryAxis = function (e, t) {

  var a = this.GraphGetAxesIndexes(e);
  return e.axes[a.category].orientation === t.orientation
}

ListManager.LM.prototypeGraphGetMaxHorizontalAxisLabelHeight = function (e) {

  return Math.round(0.66 * e.height)
}

ListManager.LM.prototypeGraphGetMaxVerticalAxisLabelWidth = function (e) {

  return Math.round(0.66 * e.width)
}

ListManager.LM.prototypeGraphGetLegendWidth = function (e, t) {

  return this.GraphLegendLayout(e, t, e.Frame, !1, !0).cx
}

ListManager.LM.prototypeGraphGetLegendHeight = function (e, t) {

  return this.GraphLegendLayout(e, t, e.Frame, !1, !0).cy
}

ListManager.LM.prototypeGraphEnsureTextContrast = function (e, t, a, r) {

  var i = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID);
  if (!i) return null;
  var n = i.GetElementByID(ConstantData.SVGElementClass.TEXT, a),
    o = n.GetSelectedFormat();
  o.color == r.Color &&
    (o.color = this.GetContrastingColorName(o.Color), n.SetFormat(o))
}

ListManager.LM.prototypeGraphGetLegendEntrySize = function (e, t, a) {

  var r = {
    cx: 0,
    cy: 0
  },
    i = this.GraphGetTextSize(e, t, t.graphLegend[a].DataID);
  return t.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_FULL &&
    t.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_SWATCHES ||
    (
      r.cx = ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE,
      r.cy = ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE
    ),
    t.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_FULL &&
    t.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_NAMES ||
    (
      r.cy = Math.max(r.cy, i.cy),
      r.cx &&
      (r.cx += ListManager.Graph.Defines.SDAX_LEGEND_GAP_SIZE),
      r.cx += i.cx
    ),
    r
}

ListManager.LM.prototypeGraphLegendLayout = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = [],
    y = [],
    f = 0,
    L = 0,
    I = 0,
    T = 0,
    b = 0,
    M = {
      cx: 0,
      cy: 0
    };
  if (r) for (s = 0; s < t.graphLegend.length; s++) this.GraphTextGrow(
    e,
    t,
    t.graphLegend[s].DataID,
    t.graphLegend[s].style,
    e.Frame,
    !1,
    ConstantData.TextAlign.RIGHT
  );
  for (
    n = new Rectangle(0, 0, 0, 0),
    o = new Rectangle(0, 0, 0, 0),
    D = Math.round(0.8 * a.width),
    Math.round(0.8 * a.height),
    s = 0;
    s < t.graphLegend.length;
    s++
  ) b += (h = this.GraphGetLegendEntrySize(e, t, s)).cx,
    h.cx > I &&
    (I = h.cx),
    h.cy > T &&
    (T = h.cy);
  for (s = 0; s < t.graphLegend.length; s++) {
    if (
      l = t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR ||
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE ? t.graphLegend.length - 1 - s : s,
      i ||
      (
        t.graphLegend[l].lflags = Utils2.SetFlag(
          t.graphLegend[l].lflags,
          ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_HORIZ | ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT,
          !1
        )
      ),
      m = this.GraphGetLegendEntrySize(e, t, l),
      g = 0,
      t.graphlegendTitle.lflags & ListManager.Graph.LayoutFlags.SDAX_LAYOUT_ALTERNATE ? (
        f + (d = b <= D ? m.cx : I) > D &&
        (L += T + ListManager.Graph.Defines.SDAX_LEGEND_MARGIN, f = 0),
        n = Utils2.SetRect(o.x + f, o.y + L, o.x + f, o.y + L + m.cy),
        i ||
        (
          t.graphLegend[l].lflags = Utils2.SetFlag(
            t.graphLegend[l].lflags,
            ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_VERT,
            !0
          )
        )
      ) : (
        d = m.cx,
        n = Utils2.SetRect(
          o.x + ListManager.Graph.Defines.SDAX_LEGEND_MARGIN,
          o.y + f,
          o.x + ListManager.Graph.Defines.SDAX_LEGEND_MARGIN + ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE,
          o.y + f + ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE
        ),
        i ||
        m.cx === I &&
        (
          t.graphLegend[l].lflags = Utils2.SetFlag(
            t.graphLegend[l].lflags,
            ListManager.Graph.LayoutFlags.SDAX_LAYOUT_AFFECTING_HORIZ,
            !0
          )
        )
      ),
      t.graphLegendType == ListManager.Graph.LegendType.SDAX_LEGEND_FULL ||
      t.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_SWATCHES
    ) {
      var P = new Rectangle;
      P.x = n.x,
        P.y = n.y + n.height / 2 - ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE / 2,
        P.height = ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE,
        P.width = ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE,
        y.push(P),
        g += ListManager.Graph.Defines.SDAX_LEGEND_SWATCH_SIZE + ListManager.Graph.Defines.SDAX_LEGEND_GAP_SIZE,
        n.x += g,
        n.width = 0
    }
    t.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_FULL &&
      t.graphLegendType !== ListManager.Graph.LegendType.SDAX_LEGEND_NAMES ||
      (
        n.width = m.cx - g,
        C.push(new Rectangle(n.x, n.y, n.width, n.height)),
        g = n.width
      ),
      t.graphlegendTitle.lflags & ListManager.Graph.LayoutFlags.SDAX_LAYOUT_ALTERNATE ? f += d + ListManager.Graph.Defines.SDAX_LEGEND_MARGIN : f += m.cy + ListManager.Graph.Defines.SDAX_LEGEND_MARGIN,
      n.x + n.width > o.x + o.width &&
      (o.width = n.x - o.x + n.width),
      n.y + n.height > o.y + o.height &&
      (o.height = n.y - o.y + n.height)
  }
  if (S = o.height, c = o.width, M.cx = c, M.cy = S, !i) for (
    t.graphlegendTitle.lflags & ListManager.Graph.LayoutFlags.SDAX_LAYOUT_ALTERNATE ? (
      u = c <= t.area.width ? t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.width / 2 - c / 2 : a.x + a.width / 2 - c / 2,
      p = a.y + a.height - S - ListManager.Graph.Defines.SDAX_LEGEND_BOTTOM_MARGIN
    ) : (
      u = a.x + a.width - c - ListManager.Graph.Defines.SDAX_LEGEND_RIGHT_MARGIN,
      p = a.y + a.height / 2 - S / 2
    ),
    Utils2.CopyRect(t.graphlegendTitle.frame, o),
    Utils2.OffsetRect(t.graphlegendTitle.frame, u, p),
    s = 0;
    s < t.graphLegend.length;
    s++
  ) C.length > s &&
    (
      Utils2.CopyRect(t.graphLegend[s].textFrame, C[s]),
      Utils2.OffsetRect(t.graphLegend[s].textFrame, u, p)
    ),
    y.length > s &&
    (
      Utils2.CopyRect(t.graphLegend[s].swatchFrame, y[s]),
      Utils2.OffsetRect(t.graphLegend[s].swatchFrame, u, p)
    );
  if (
    !i &&
    (
      t.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_FULL ||
      t.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_NAMES
    )
  ) for (s = 0; s < t.graphLegend.length; s++) this.GraphEnsureTextContrast(e, t, t.graphLegend[s].DataID, t.style.Fill.Paint);
  return M
}

ListManager.LM.prototypeGraphTitleLayout = function (e, t, a, r) {

  new Rectangle;
  var i,
    n = {
      cx: 0,
      cy: 0
    };
  if (r) {
    i = this.GraphGetTextMaxDim(t, t.graphtitle.DataID);
    var o = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT),
      s = GlobalData.objectStore.GetObject(t.graphtitle.DataID);
    o.SetRuntimeText(s.Data.runtimeText);
    var l = o.CalcTextFit(i.width);
    n.cy = l.height,
      n.cx = l.width
  } else if (
    !this.GraphGetTextInfo(e, t, t.graphtitle.DataID, t.graphtitle.tangle, {
      cx: 0,
      cy: 0
    }, n)
  ) return;
  n.cx < 10 &&
    (n.cx = 10),
    n.cy < 5 &&
    (n.cy = 5),
    t.graphtitle.frame.x = a.x + a.width / 2 - n.cx / 2,
    t.graphtitle.frame.y = a.y,
    t.graphtitle.frame.width = n.cx,
    t.graphtitle.frame.height = n.cy,
    Utils2.OffsetRect(t.graphtitle.frame, 0, 2 * t.graphtitle.margin),
    this.GraphTextGrow(
      e,
      t,
      t.graphtitle.DataID,
      t.graphtitle.style,
      t.graphtitle.frame,
      !0,
      ConstantData.TextAlign.CENTER
    )
}

ListManager.LM.prototypeGraphGetNextPointAsLaidOut = function (e, t, a) {

  var r,
    i,
    n,
    o,
    s = null,
    l = null,
    S = - 1,
    c = - 1,
    u = - 1,
    p = - 1,
    d = - 1,
    D = !1;
  if (
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) {
    for (r = e.gpoint.length - 1; r >= 0; r--) e.gpoint[r].categoryid == e.pieChartCategory &&
      (- 1 == S && (S = r), r == t ? D = !0 : D ? D &&
        - 1 == p &&
        (p = r) : u = r, c = r);
    - 1 == (d = a ? - 1 != p ? p : S : - 1 != u ? u : c) &&
      (d = t)
  } else if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE
  ) {
    for (n = e.gpoint[t].seriesid, r = 0; r < e.gpoint.length; r++) e.gpoint[r].seriesid == n &&
      (- 1 == S && (S = r), r == t ? D = !0 : D ? D &&
        - 1 == p &&
        (p = r) : u = r, c = r);
    if (
      a &&
      - 1 != p &&
      (d = p),
      a ||
      - 1 == u ||
      (d = u),
      1 == e.gpoint.length &&
      (d = t),
      - 1 == d &&
      1 != e.graphLegend.length
    ) for (r = 0; r < e.graphLegend.length; r++) if (e.graphLegend[r].seriesid == n) {
      if (a) for (
        n = r == e.graphLegend.length - 1 ? e.graphLegend[0].seriesid : e.graphLegend[r + 1].seriesid,
        i = 0;
        i < e.gpoint.length &&
        - 1 == d;
        i++
      ) e.gpoint[i].seriesid == n &&
        (d = i);
      else n = 0 == r ? e.graphLegend[e.graphLegend.length - 1].seriesid : e.graphLegend[r - 1].seriesid;
      for (i = e.gpoint.length - 1; i >= 0 && - 1 == d; i--) e.gpoint[i].seriesid == n &&
        (d = i)
    }
  } else {
    for (r = 0; r < e.gpoint.length; r++) e.gpoint[r].categoryid == e.gpoint[t].categoryid &&
      (- 1 == S && (S = r), r == t ? D = !0 : D ? D &&
        - 1 == p &&
        (p = r) : u = r, c = r);
    if (1 == e.gpoint.length ? d = t : a ? - 1 != p &&
      (d = p) : - 1 != u && (d = u), - 1 == d) if (l = this.GraphGetAxesIndexes(e), s = e.axes[l.category], a) {
        for (r = 0; r < s.labels.length; r++) this.GraphIsCategoryLabel(s.labels[r]) &&
          s.labels[r].categoryid == e.gpoint[t].categoryid &&
          (
            o = 1 === s.labels.length ? e.gpoint[t].categoryid : r == s.labels.length - 1 ? s.labels[0].categoryid : s.labels[r + 1].categoryid
          );
        for (r = 0; r < e.gpoint.length && - 1 == d; r++) e.gpoint[r].categoryid == o &&
          (d = r)
      } else {
        for (r = 0; r < s.labels.length; r++) this.GraphIsCategoryLabel(s.labels[r]) &&
          s.labels[r].categoryid == e.gpoint[t].categoryid &&
          (
            o = 1 == s.labels.length ? e.gpoint[t].categoryid : 0 == r ? s.labels[s.labels.length - 1].categoryid : s.labels[r - 1].categoryid
          );
        for (r = e.gpoint.length - 1; r >= 0 && - 1 == d; r--) e.gpoint[r].categoryid == o &&
          (d = r)
      }
  }
  return - 1 == d ? - 1 : e.gpoint[d].label.DataID
}

ListManager.LM.prototypeGraphGetRotatedFootprint = function (e, t) {

  var a,
    r,
    i = new Point,
    n = {
      cx: 0,
      cy: 0
    };
  if (t) {
    a = new Rectangle(0, 0, e.cx, e.cy),
      r = Math.max(e.cx, e.cy),
      Utils2.OffsetRect(a, r, r),
      i.x = a.x,
      i.y = a.y;
    var o = [];
    o.splice(0, 0, new Point(a.x, a.y)),
      o.splice(1, 0, new Point(a.x + a.width, a.y + a.height));
    var s = - 2 * Math.PI * (t / 360);
    this.RotatePointsAboutPoint(i, s, o);
    var l = new Rectangle;
    Utils2.GetPolyRect(l, o),
      n.cx = l.width,
      n.cy = l.height
  } else n.cx = e.cx,
    n.cy = e.cy;
  return n
}

ListManager.LM.prototypeGraphGetTextMaxDim = function (e, t) {

  var a;
  return (a = this.GraphTextHitInfo(e, t)) ? Utils2.SetRect(0, 0, a.maxDim.cx, a.maxDim.cy) : null
}

ListManager.LM.prototypeGraphBarChartAxisTitleLayout = function (e, t, a, r) {

  var i,
    n = {},
    o = {};
  (i = a.title).just = i.tangle ? ConstantData.TextAlign.LEFT : ConstantData.TextAlign.CENTER,
    r &&
    this.GraphTextGrow(e, t, i.DataID, i.style, e.Frame, !1, i.just),
    this.GraphGetTextInfo(e, t, i.DataID, i.tangle, n, o) &&
    (
      a.orientation === ListManager.Graph.Defines.SDAX_HORIZ ? (
        o.cx < 100 &&
        (o.cx = 100),
        o.cy < 20 &&
        (o.cy = 20),
        i.frame.x = a.frame.x + a.frame.width / 2 - o.cx / 2,
        i.frame.width = o.cx,
        0 === t.quadrant ||
          3 === t.quadrant ||
          1 === t.quadrant ? (
          i.frame.y = a.frame.y + a.frame.height - o.cy,
          i.frame.height = o.cy,
          Utils2.OffsetRect(i.frame, 0, - i.margin)
        ) : (
          i.frame.y = a.frame.y,
          i.frame.height = o.cy,
          Utils2.OffsetRect(i.frame, 0, i.margin)
        )
      ) : (
        o.cy < 100 &&
        (o.cy = 100),
        o.cx < 20 &&
        (o.cx = 20),
        i.frame.y = a.frame.y + a.frame.height / 2 - o.cy / 2,
        i.frame.height = o.cy,
        0 === t.quadrant ||
          1 === t.quadrant ? (
          i.frame.x = a.frame.x,
          i.frame.width = o.cx,
          Utils2.OffsetRect(i.frame, i.margin, 0)
        ) : (
          i.frame.x = a.frame.x + a.frame.width - o.cx,
          i.frame.width = o.cx,
          Utils2.OffsetRect(i.frame, - i.margin, 0)
        )
      ),
      0 == i.tangle ? (
        Utils2.CopyRect(i.drawpt, i.frame),
        i.center.x = i.frame.x + i.frame.width / 2,
        i.center.y = i.frame.y + i.frame.height / 2
      ) : (
        i.tangle > 0 ? i.drawpt = Utils2.SetRect(
          i.frame.x,
          i.frame.y + i.frame.height,
          i.frame.x + n.cx,
          i.frame.y - i.frame.height + n.cy
        ) : i.drawpt = Utils2.SetRect(
          i.frame.x + i.cx,
          i.frame.y,
          i.frame.x + i.frame.width + n.cx,
          i.frame.y + n.cy
        ),
        i.center.x = i.frame.x,
        i.center.y = i.frame.y
      )
    )
}

ListManager.LM.prototypeGraphTextHitInfo = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s = {
      DataID: - 1,
      rect: new Rectangle(0, 0, 0, 0),
      tangle: 0,
      maxDim: {
        cx: 0,
        cy: 0
      },
      just: 0,
      vJust: 0,
      layoutFlags: 0,
      style: null,
      prevdataId: - 1,
      nextdataId: - 1,
      defaultStyle: null
    },
    l = new Rectangle(0, 0, 0, 0),
    S = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
  if (
    n = e.layoutFrame.width,
    o = e.layoutFrame.height,
    e.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_FULL ||
    e.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_NAMES ||
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_SERIES_NAME
  ) for (a = 0; a < e.graphLegend.length; a++) if (- 1 != t && t === e.graphLegend[a].DataID) return s.DataID = e.graphLegend[a].DataID,
    Utils2.CopyRect(s.rect, e.graphLegend[a].textFrame),
    s.tangle = 0,
    e.graphlegendTitle.lflags & SDAX_LAYOUT_ALTERNATE ? s.just = ConstantData.TextAlign.CENTER : s.just = ConstantData.TextAlign.RIGHT,
    s.vJust = FileParser.TextJust.TA_TOP,
    s.layoutFlags = e.graphLegend[a].lflags,
    s.maxDim.cx = n / 3,
    s.maxDim.cy = o / 6,
    s.style = e.graphLegend[a].style,
    s.defaultStyle = S.graphDef.legendStyle,
    s.prevdataId = a > 0 ? e.graphLegend[a - 1].DataID : e.graphLegend[e.graphLegend.length - 1].DataID,
    s.nextdataId = a < e.graphLegend.length - 1 ? e.graphLegend[a + 1].DataID : e.graphLegend[0].DataID,
    s;
  if (
    e.imageValueRep === ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK &&
    e.flags & ListManager.Graph.Flags.SDAX_SHOW_STACKED_SCALE &&
    e.graphlegendTitle.DataID === t
  ) return s.DataID = e.graphlegendTitle.DataID,
    Utils2.CopyRect(s.rect, e.graphlegendTitle.drawpt),
    s.tangle = e.graphlegendTitle.tangle,
    s.just = e.graphlegendTitle.just,
    s.vJust = FileParser.TextJust.TA_TOP,
    s.layoutFlags = e.graphlegendTitle.lflags,
    s.maxDim.cx = n / 3,
    s.maxDim.cy = o / 6,
    s.style = e.graphlegendTitle.style,
    s.defaultStyle = null,
    s.prevdataId = - 1,
    s.nextdataId = - 1,
    s;
  if (t === e.graphtitle.DataID) return s.DataID = e.graphtitle.DataID,
    Utils2.CopyRect(s.rect, e.graphtitle.frame),
    s.tangle = e.graphtitle.tangle,
    s.just = e.graphtitle.just,
    s.vJust = FileParser.TextJust.TA_TOP,
    s.layoutFlags = e.graphtitle.lflags,
    s.maxDim.cx = n,
    s.maxDim.cy = o / 4,
    s.style = e.graphtitle.style,
    s.defaultStyle = S.graphDef.titleStyle,
    s.prevdataId = a > 0 ? e.graphLegend[a - 1].DataID : e.graphLegend[e.graphLegend.length - 1].DataID,
    s.nextdataId = a < e.graphLegend.length - 1 ? e.graphLegend[a + 1].DataID : e.graphLegend[0].DataID,
    s.prevdataId = - 1,
    s.nextdataId = - 1,
    s;
  this.GraphGetAxesIndexes(e);
  for (a = 0; a < e.axes.length; a++) {
    if (
      !(
        e.axes[a].flags & ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE
      ) &&
      e.axes[a].title.DataID === t
    ) return s.DataID = e.axes[a].title.DataID,
      Utils2.CopyRect(s.rect, e.axes[a].title.frame),
      s.tangle = 0,
      s.just = e.axes[a].title.just,
      s.layoutFlags = e.axes[a].lflags,
      e.axes[a].orientation == ListManager.Graph.Defines.SDAX_HORIZ &&
        0 == e.quadrant ? s.vJust = FileParser.TextJust.TA_BOTTOM : s.vJust = FileParser.TextJust.TA_TOP,
      s.maxDim.cx = Math.round(0.8 * n),
      s.maxDim.cy = o / 4,
      s.maxDim = this.GraphGetRotatedFootprint(s.maxDim, - e.axes[a].title.tangle),
      s.style = e.axes[a].title.style,
      this.GraphIsCategoryAxis(e, e.axes[a]) ? s.defaultStyle = S.graphDef.catAxisTitleStyle : s.defaultStyle = S.graphDef.magAxisTitleStyle,
      e.axes[a].orientation == ListManager.Graph.Defines.SDAX_HORIZ ? (
        s.prevdataId = e.axes[ListManager.Graph.Defines.SDAX_VERT].title.DataID,
        s.nextdataId = e.axes[ListManager.Graph.Defines.SDAX_VERT].title.DataID
      ) : (
        s.prevdataId = e.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.DataID,
        s.nextdataId = e.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.DataID
      ),
      s;
    for (r = 0; r < e.axes[a].labels.length; r++) if (
      this.GraphIsAxisLabelShowing(e, e.axes[a], e.axes[a].labels[r]) &&
      (
        Utils2.CopyRect(l, e.axes[a].labels[r].frame),
        t === e.axes[a].labels[r].DataID
      )
    ) return s.DataID = e.axes[a].labels[r].DataID,
      Utils2.CopyRect(s.rect, e.axes[a].labels[r].frame),
      s.tangle = e.axes[a].labels[r].tangle,
      s.just = e.axes[a].labels[r].just,
      s.layoutFlags = e.axes[a].labels[r].lflags,
      s.vJust = e.axes[a].labels[r].vjust,
      i = this.GraphGetNumVisibleAxisLabels(e, e.axes[a]),
      e.axes[a].orientation === ListManager.Graph.Defines.SDAX_HORIZ ? e.axes[a].flags & ListManager.Graph.AxisFlags.SDAX_LABELS_ANGLED ? (s.maxDim.cx = o / 2, s.maxDim.cy = o / 6) : (
        s.maxDim.cx = Math.round(0.8 * n / i),
        s.maxDim.cx = Math.round(0.9 * s.maxDim.cx),
        s.maxDim.cy = o / 6
      ) : (
        s.maxDim.cx = n / 2,
        s.maxDim.cy = Math.round(0.8 * o / i),
        s.maxDim.cy = Math.round(0.9 * s.maxDim.cy)
      ),
      s.maxDim = this.GraphGetRotatedFootprint(s.maxDim, - e.axes[a].labels[r].tangle),
      s.style = e.axes[a].style,
      this.GraphIsCategoryAxis(e, e.axes[a]) ? s.defaultStyle = S.graphDef.catAxisTitleStyle : s.defaultStyle = S.graphDef.magAxisTitleStyle,
      s.prevdataId = r > 0 ? e.axes[a].labels[r - 1].DataID : e.axes[a].labels[e.axes[a].labels.length - 1].DataID,
      s.nextdataId = r < e.axes[a].labels.length - 1 ? e.axes[a].labels[r + 1].DataID : e.axes[a].labels[0].DataID,
      s
  }
  for (a = 0; a < e.gpoint.length; a++) if (
    Utils2.CopyRect(l, e.gpoint[a].label.frame),
    t === e.gpoint[a].label.DataID
  ) return s.DataID = e.gpoint[a].label.DataID,
    Utils2.CopyRect(s.rect, e.gpoint[a].label.frame),
    s.tangle = e.gpoint[a].label.tangle,
    s.just = 0,
    s.layoutFlags = 0,
    s.vJust = 0,
    s.maxDim.cx = n / 2,
    s.maxDim.cy = o / 6,
    s.maxDim = this.GraphGetRotatedFootprint(s.maxDim, - e.gpoint[a].label.tangle),
    s.style = e.gpoint[a].style,
    s.defaultStyle = S.graphDef.pointStyle,
    s.prevdataId = this.GraphGetNextPointAsLaidOut(e, a, !1),
    s.nextdataId = this.GraphGetNextPointAsLaidOut(e, a, !0),
    s;
  return null
}

ListManager.LM.prototypeEnsureMinimumRectSize = function (e, t) {

  e.width < t &&
    Utils2.InflateRect(e, t / 2, 0),
    e.height < t &&
    Utils2.InflateRect(e, 0, t / 2)
}

ListManager.LM.prototypeGraphTextGrowAll = function (e, t, a) {

  var r,
    i,
    n,
    o = new Rectangle(0, 0, 200, 50),
    s = new Rectangle(0, 0, 0, 0),
    l = {};
  if (
    Utils2.CopyRect(o, e.Frame),
    t.graphlegendTitle.DataID >= 0 &&
    0 != (
      r = this.GraphTextGrowOne(
        e,
        t,
        o,
        a,
        ConstantData.TextAlign.CENTER,
        t.graphlegendTitle.style,
        t.graphlegendTitle.DataID
      )
    )
  ) return r;
  if (
    t.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_FULL ||
    t.graphLegendType === ListManager.Graph.LegendType.SDAX_LEGEND_NAMES
  ) for (i = 0; i < t.graphLegend.length; i++) if (
    0 != (
      r = this.GraphTextGrowOne(
        e,
        t,
        o,
        a,
        ConstantData.TextAlign.LEFT,
        t.graphLegend[i].style,
        t.graphLegend[i].DataID
      )
    )
  ) return r;
  if (
    0 != (
      r = this.GraphTextGrowOne(
        e,
        t,
        o,
        a,
        ConstantData.TextAlign.CENTER,
        t.graphtitle.style,
        t.graphtitle.DataID
      )
    )
  ) return r;
  for (i = 0; i < t.axes.length; i++) {
    if (
      0 != (
        r = this.GraphTextGrowOne(
          e,
          t,
          o,
          a,
          t.axes[i].title.tangle ? ConstantData.TextAlign.CENTER : ConstantData.TextAlign.LEFT,
          t.axes[i].title.style,
          t.axes[i].title.DataID
        )
      )
    ) return r;
    for (n = 0; n < t.axes[i].labels.length; n++) if (
      r = this.GraphTextGrowOne(
        e,
        t,
        o,
        a,
        t.axes[i].labels[n].just,
        t.axes[i].labels[n].style,
        t.axes[i].labels[n].DataID
      ),
      l = this.GraphTextHitInfo(t, t.axes[i].labels[n].DataID),
      Utils2.CopyRect(s, l.rect),
      Utils2.InflateRect(s, (l.maxDim.cx - l.rect.width) / 2, 0),
      s.height = l.maxDim.cy,
      0 != (
        r = this.GraphTextGrowOne(
          e,
          t,
          s,
          !0,
          t.axes[i].labels[n].just,
          t.axes[i].labels[n].style,
          t.axes[i].labels[n].DataID
        )
      )
    ) return r
  }
  for (i = 0; i < t.gpoint.length; i++) if (
    0 != (
      r = this.GraphTextGrowOne(
        e,
        t,
        o,
        a,
        ConstantData.TextAlign.CENTER,
        t.gpoint[i].label.style,
        t.gpoint[i].label.DataID
      )
    )
  ) return r;
  return 0
}

ListManager.LM.prototypeSetTextPosition = function (e, t, a, r, i) {

  var n,
    o = {
      x: 0,
      y: 0
    };
  (
    n = this.svgObjectLayer.GetElementByID(e.BlockID).GetElementByID(ConstantData.SVGElementClass.TEXT, a)
  ) &&
    (
      o.x = r.x,
      o.y = r.y,
      i ||
      (o.x -= e.Frame.x, o.y -= e.Frame.y),
      n.SetPos(o.x, o.y)
    )
}

ListManager.LM.prototypeGraphTextGrowOne = function (e, t, a, r, i, n, o) {

  var s,
    l,
    S,
    c,
    u,
    p,
    d = {
      width: 0,
      hieght: 0
    },
    D = {},
    g = {},
    h = e.GetSVGFrame(e.Frame),
    m = {};
  if (!(u = GlobalData.objectStore.GetObject(o))) return - 1;
  if (
    c = (S = this.svgObjectLayer.GetElementByID(e.BlockID)).GetElementByID(ConstantData.SVGElementClass.TEXT, o),
    p = new Rectangle,
    r ? (
      p = Utils1.DeepCopy(a),
      c &&
      (m = c.CalcTextFit(a.width), p.height = m.height, p.width = m.width)
    ) : (p = this.GraphGetTextMaxDim(t, t.graphtitle.DataID)) ||
    (p = Utils1.DeepCopy(a)),
    c ? (
      s = e.trect.x - h.x,
      l = e.trect.y - h.y,
      d.width = p.width,
      d.height = p.height,
      D = c.GetPos(),
      g = new Rectangle(D.x + h.x + s, D.y + h.y + l, d.width, d.height),
      r &&
      a &&
      (g.x = a.x, g.y = a.y),
      Utils2.OffsetRect(g, - h.x, - h.y),
      c.SetPos(g.x + s, g.y + l),
      r ? c.SetSize(g.width, g.height) : c.SetSize(p.width, p.height)
    ) : (
      a ||
      (a = Utils1.DeepCopy(p)),
      g = Utils1.DeepCopy(a),
      r ||
      (g.width = p.width, g.height = p.height),
      Utils2.OffsetRect(g, - h.x, - h.y),
      c = this.Graph_AddSVGTextObject(e, this.svgDoc, S, u.Data.runtimeText, o, g, i, 'top')
    ),
    n
  ) {
    var C = this.CalcDefaultInitialTextStyle(n.Text);
    c.SetFormat(C)
  }
  return 0
}

ListManager.LM.prototypeGraphTextGrow = function (e, t, a, r, i, n, o) {

  return - 1 != a ? this.GraphTextGrowOne(e, t, i, n, o, r, a) : this.GraphTextGrowAll(e, t, n)
}

ListManager.LM.prototypeGraphGetNumVisibleAxisLabels = function (e, t) {

  var a,
    r = 0;
  for (a = 0; a < t.labels.length; a++) this.GraphIsAxisLabelShowing(e, t, t.labels[a]) &&
    r++;
  return r
}

ListManager.LM.prototypeGraphGetCategoryList = function (e) {

  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = [],
    c = this.GraphGetAxesIndexes(e);
  for (
    a = e.axes[c.category],
    r = e.axes[c.magnitude],
    n = 0;
    n < a.labels.length;
    n++
  ) this.GraphIsCategoryLabel(a.labels[n]) &&
    (
      (i = new ListManager.Graph.Category).categoryid = a.labels[n].categoryid,
      S.splice(S.length, 0, i)
    );
  for (n = 0; n < e.gpoint.length; n++) {
    for (t = e.gpoint[n], l = - 1, o = 0; o < S.length && - 1 == l; o++) t.categoryid == S[o].categoryid &&
      (l = o);
    - 1 == l &&
      (
        (i = new ListManager.Graph.Category).categoryid = t.categoryid,
        S.splice(S.length, 0, i),
        l = S.length - 1
      ),
      S[l].cSeries++,
      S[l].cumValue += t.value,
      t.value >= 0 ? S[l].cumValuePos += t.value : S[l].cumValueNeg += t.value,
      e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
        Utils2.IsRectEmpty(S[l].maxArea) ? Utils2.CopyRect(S[l].maxArea, t.frame) : Utils2.UnionRect(S[l].maxArea, t.frame, S[l].maxArea)
  }
  for (n = 0; n < S.length; n++) a.orientation == ListManager.Graph.Defines.SDAX_HORIZ ? (
    s = a.majorscale - S[n].maxArea.width,
    Utils2.InflateRect(S[n].maxArea, s / 2, 0)
  ) : (
    s = a.majorscale - S[n].maxArea.height,
    Utils2.InflateRect(S[n].maxArea, 0, s / 2)
  );
  for (n = 0; n < S.length; n++) {
    var u = S[n];
    switch (e.quadrant) {
      case 0:
        u.selectHotspot = Utils2.SetRect(
          u.maxArea.x,
          r.frame.y + r.frame.height,
          u.maxArea.x + u.maxArea.width,
          r.frame.y + r.height + ListManager.Graph.Defines.SDAX_MIN_HOTSPOT_SIZE
        );
        break;
      case 1:
        u.selectHotspot = Utils2.SetRect(
          r.frame.x - ListManager.Graph.Defines.SDAX_MIN_HOTSPOT_SIZE,
          u.maxArea.y,
          u.maxArea.x,
          r.frame.y + r.frame.height
        );
        break;
      case 2:
        u.selectHotspot = Utils2.SetRect(
          u.maxArea.x,
          r.frame.y - ListManager.Graph.Defines.SDAX_MIN_HOTSPOT_SIZE,
          u.maxArea.x + u.maxArea.width,
          r.frame.y
        );
        break;
      case 3:
        u.selectHotspot = Utils2.SetRect(
          r.frame.x + r.frame.width,
          u.maxArea.y,
          r.frame.x + r.frame.width + ListManager.Graph.Defines.SDAX_MIN_HOTSPOT_SIZE,
          u.maxArea.y + u.maxArea.height
        )
    }
    this.EnsureMinimumRectSize(
      u.selectHotspot,
      ListManager.Graph.Defines.SDAX_MIN_HOTSPOT_SIZE
    )
  }
  return S
}

ListManager.LM.prototypeOrderOfMagnitude = function (e) {

  var t,
    a = 0;
  if (t = e, e > 1) for (t = e; t > 1; t /= 10) a++;
  else {
    for (t = e; t < 1; t *= 10) a++;
    a = - a
  }
  return a
}

ListManager.LM.prototypePlacesToShift = function (e) {
  var t;
  return (t = this.OrderOfMagnitude(e)) > 0 ? t - 1 : t
}

ListManager.LM.prototypeGraphGetBoundsAndTicks = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l = !1,
    S = !1,
    c = {
      upperBound: 0,
      lowerBound: 0,
      major: 0,
      minor: 0
    };
  return c.upperBound = i,
    c.lowerBound = r,
    c.lowerBound > 0 &&
    (c.lowerBound = 0),
    0 === e.gpoint.length &&
    (c.upperBound = 1, c.lowerBound = 0),
    0 === i &&
      0 === r ? (c.upperBound = 1, c.lowerBound = 0, c.major = 1, c.minor = 0.5, c) : (
      e.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR &&
      e.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR &&
      e.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
      e.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE ||
      (
        0 != t.endpref &&
        (c.upperBound = lpAxis.endpref, l = !0),
        0 != t.startpref &&
        lpAxis.startpref < c.upperBound &&
        (c.lowerBound = t.startpref, S = !0)
      ),
      n = c.upperBound - c.lowerBound,
      a *= Math.pow(10, this.PlacesToShift(n)),
      l ||
      (c.upperBound += a),
      !S &&
      c.lowerBound < 0 &&
      (c.lowerBound -= a),
      n = c.upperBound - c.lowerBound,
      o = Math.pow(10, this.PlacesToShift(n)),
      l ||
      0 != (s = c.upperBound % o) &&
      (c.upperBound = c.upperBound - s + o),
      S ||
      0 != (s = c.lowerBound % o) &&
      (c.lowerBound = c.lowerBound - s - o),
      0 != t.majorpref ? c.major = t.majorpref : c.major = o,
      0 != t.minorpref ? c.minor = t.minorpref : c.minor = n / o > 5 ? o / 2 : o / 10,
      this.PlacesToShift(n) < 0 &&
      e.valuePrecision < Math.abs(this.PlacesToShift(n)) &&
      (
        e.valuePrecision = Math.round(Math.abs(this.PlacesToShift(n))) + 1
      ),
      c
    )
}

ListManager.LM.prototypeGraphGetMagnitudeBoundsAndTicks = function (e, t) {

  var a,
    r,
    i = [],
    n = 0,
    o = 0;
  if (
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR ||
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE ||
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) for (i = this.GraphGetCategoryList(e), r = 0; r < i.length; r++) i[r].cumValueNeg < o &&
    (o = i[r].cumValueNeg),
    i[r].cumValuePos > n &&
    (n = i[r].cumValuePos);
  else for (r = 0; r < e.gpoint.length; r++) e.gpoint[r].value < o &&
    (o = e.gpoint[r].value),
    e.gpoint[r].value > n &&
    (n = e.gpoint[r].value);
  return a = e.gpoint.length > 0 &&
    - 1 != e.gpoint[0].style.Fill.Paint.Texture &&
    e.imageValueRep != ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE &&
    (
      e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ||
      e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
    ) ? e.flags & ListManager.Graph.PointFlags.SDAX_VALUELABELS ||
      e.flags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_ANGLED ? 1 : 0 : e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ? 1 : e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS ||
        e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_ANGLED ||
        e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? 0.5 : 0,
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_ANGLED &&
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_SERIES_NAME &&
    (a += 1),
    this.GraphGetBoundsAndTicks(e, t, a, o, n)
}

ListManager.LM.prototypeGraphCategoryAxisLayout = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = {},
    p = 0,
    d = !1;
  for (
    i = this.GraphGetCategoryList(t),
    n = this.GraphGetAxesIndexes(t),
    c = a.orientation == ListManager.Graph.Defines.SDAX_HORIZ ? a.frame.width : a.frame.height,
    t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
      t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE ? (o = i.length, a.majorscale = o > 1 ? c / (o - 1) : c) : (
      0 == (o = i.length) &&
      (o = 1),
      a.majorscale = (c - 2 * ListManager.Graph.Defines.SDAX_CAT_AXIS_MARGIN) / o
    ),
    a.major = 2,
    a.minor = 1,
    a.minorscale = a.majorscale / (a.major / a.minor),
    l = this.GraphGetTickOffset(a),
    s = 0;
    s < o;
    s++,
    p++
  ) r &&
    this.GraphTextGrow(
      e,
      t,
      a.labels[s].DataID,
      a.labels[s].style,
      a.labels[s].frame,
      !0,
      a.labels[s].just
    ),
    S = this.GraphGetCategoryAxisOffsetByCategoryIndex(t, a, p),
    (u = this.GraphGetTextSize(e, t, a.labels[s].DataID)) &&
    this.AxisRectLayout(
      t,
      a,
      a.labels[s].frame,
      a.labels[s].center,
      a.labels[s].tangle,
      S,
      l,
      u.cy,
      u.cx
    ),
    this.GraphCategoryLayout(e, t, a, t.axes[n.magnitude], i, p, S, r);
  if (
    this.GraphProcessSummaryLabels(t, a),
    t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
    t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS
  ) d = !0;
  else if (
    t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS
  ) for (s = 0; s < t.gpoint.length && !d; s++) this.ContainsRect(t.gpoint[s].frame, t.gpoint[s].label.frame) ||
    (d = !0);
  if (d) for (
    this.GraphResolveOverlappedLabels(e, t),
    s = 0;
    s < t.gpoint.length;
    s++
  ) this.GraphEnsureValueLabelTextContrast(e, t, t.gpoint[s])
}

ListManager.LM.prototypeGraphCategoryLayout = function (e, t, a, r, i, n, o, s) {

  var l,
    S = 0,
    c = {
      iCategoryCumPos: 0,
      iCategoryCumNeg: 0
    };
  for (l = 0; l < t.gpoint.length; l++) if (t.gpoint[l].categoryid == i[n].categoryid) {
    switch (t.graphtype) {
      case ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR:
      case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE:
        this.GraphValueRectLayout(e, t, a, r, t.gpoint[l], o, i[n].cSeries, S, s);
        break;
      case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR:
      case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE:
        this.GraphStackedValueRectLayout(e, t, a, r, t.gpoint[l], o, i[n].cSeries, S, s, c)
    }
    if (S++ >= i[n].cSeries) break
  }
}

ListManager.LM.prototypeGraphStackedValueRectLayout = function (e, t, a, r, i, n, o, s, l, S) {

  var c,
    u,
    p,
    d,
    D;
  c = this.GraphGetBarWidth(t, a),
    p = n - Math.round(c / 2),
    u = this.GraphGetValueMagnitudeExtent(i.value, r),
    i.value >= 0 ? (d = S.iCategoryCumPos, S.iCategoryCumPos += Math.round(u)) : (d = S.iCategoryCumNeg, S.iCategoryCumNeg += Math.round(u)),
    D = this.GraphGetMagnitudeZeroOffset(t, r),
    this.GraphPointLayout(t, a, i, p, u, D + d, c),
    t.imageValueRep != ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE &&
    this.GraphImageValueRepLayout(t, i, c),
    this.GraphValueLabelLayout(e, t, i, l)
}

ListManager.LM.prototypeGraphValueRectLayout = function (e, t, a, r, i, n, o, s, l) {

  var S,
    c,
    u,
    p;
  S = this.GraphGetBarWidth(t, a),
    i.value,
    p = t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR &&
      1 === t.quadrant ? n + Math.round(o * S / 2) - Math.round(s * S) - Math.round(S) : n - Math.round(o * S / 2) + Math.round(s * S),
    c = this.GraphGetValueMagnitudeExtent(i.value, r),
    u = this.GraphGetMagnitudeZeroOffset(t, r),
    this.GraphPointLayout(t, a, i, p, c, u, S),
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR &&
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
    t.imageValueRep != ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE &&
    this.GraphImageValueRepLayout(t, i, S),
    this.GraphValueLabelLayout(e, t, i, l)
}

ListManager.LM.prototypeGraphResolveOverlappedLabels = function (e, t) {

  var a,
    r,
    i = null,
    n = 0;
  for (a = 0; a < t.gpoint.length; a++) if (
    (
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
      t.gpoint[a].categoryid == t.pieChartCategory
    ) &&
    !Utils2.IsRectEmpty(t.gpoint[a].label.frame)
  ) for (
      (i = this.GraphIsLabelCollisionWithGutter(e, t, a)) &&
      (n = this.GraphNudgeValueLabel(e, t, a, i, null, 0, n)),
      r = 0;
      r < t.gpoint.length;
      r++
    ) Utils2.IsRectEmpty(t.gpoint[r].label.frame) ||
      a != r &&
      (
        t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
        t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
        t.gpoint[r].categoryid == t.pieChartCategory
      ) &&
      (
        this.GraphIsLabelCollisionWithRect(
          t,
          t.gpoint[r],
          t.gpoint[a].label.frame,
          t.gpoint[a].label.center,
          t.gpoint[a].label.tangle
        ) &&
        (
          n = this.GraphNudgeValueLabel(
            e,
            t,
            r,
            t.gpoint[a].label.frame,
            t.gpoint[a].label.center,
            t.gpoint[a].label.tangle,
            n
          )
        ),
        this.GraphIsLabelCollisionWithPoint(t, t.gpoint[r], t.gpoint[a]) &&
        (
          n = this.GraphNudgeValueLabel(e, t, r, t.gpoint[a].frame, null, 0, n)
        )
      )
}

ListManager.LM.prototypeGraphNudgeValueLabel = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c = [],
    u = {},
    p = new Rectangle,
    d = !1;
  for (
    Utils2.CopyRect(p, t.gpoint[a].label.frame),
    s = Utils1.DeepCopy(t.gpoint[a].label.center),
    o = this.GraphGetNudgeOffsets(
      t,
      t.gpoint[a].label.frame,
      t.gpoint[a].label.center,
      t.gpoint[a].label.tangle,
      r,
      i,
      n
    ),
    l = 0;
    l < o.length;
    l++
  ) if (
      d = !1,
      Utils2.CopyRect(t.gpoint[a].label.frame, p),
      t.gpoint[a].label.center = Utils1.DeepCopy(s),
      Utils2.OffsetRect(t.gpoint[a].label.frame, o[l].x, o[l].y),
      t.gpoint[a].label.center = this.GraphMoveUpdateRectCenter(p, s, t.gpoint[a].label.frame),
      !(d = this.GraphIsLabelCollisionWithRect(t, t.gpoint[a], r, i, n))
    ) {
      if (
        c = Utils2.PolyFromRect(t.gpoint[a].label.frame),
        0 != t.gpoint[a].label.tangle &&
        (
          t.gpoint[a].label.tangle,
          Utils3.RotatePointsAboutPoint(
            t.gpoint[a].label.center,
            this.TangleToRadians(t.gpoint[a].label.tangle),
            c
          )
        ),
        t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE
      ) u = Utils2.SetRect(
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x,
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame.y,
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.x + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.width,
        t.axes[ListManager.Graph.Defines.SDAX_VERT].frame.y + t.axes[ListManager.Graph.Defines.SDAX_HORIZ].frame.height
      );
      else if (
        t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
      ) {
        Utils2.CopyRect(u, t.layoutFrame);
        var D = this.GraphGetGraphTitleHeight(e, t, 0);
        u.y += D,
          u.height -= D,
          t.graphlegendTitle.lflags & ListManager.Graph.LayoutFlags.SDAX_LAYOUT_ALTERNATE ? u.height -= t.graphlegendTitle.frame.height : u.width -= t.graphlegendTitle.frame.width
      } else Utils2.CopyRect(u, t.area);
      for (S = 0; S < c.length && !d; S++) d = !Utils2.pointInRect(u, c[S]);
      if (!d) {
        for (S = 0; S < t.gpoint.length; S++) (
          t.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
          t.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
          t.gpoint[S].categoryid == t.pieChartCategory
        ) &&
          (
            this.GraphIsLabelCollisionWithPoint(t, t.gpoint[a], t.gpoint[S]) &&
            (d = !0),
            S != a &&
            this.GraphIsLabelCollisionWithRect(
              t,
              t.gpoint[a],
              t.gpoint[S].label.frame,
              t.gpoint[S].label.center,
              t.gpoint[S].label.tangle
            ) &&
            (d = !0)
          );
        if (!d) break
      }
    }
  return d ? (
    Utils2.CopyRect(t.gpoint[a].label.frame, p),
    t.gpoint[a].label.center = Utils1.DeepCopy(s),
    0
  ) : (
    l >= o.length / 2 &&
    (
      t.gpoint[a].flags = Utils2.SetFlag(
        t.gpoint[a].flags,
        ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
        !0
      )
    ),
    0
  )
}

ListManager.LM.prototypeGraphMoveUpdateRectCenter = function (e, t, a) {

  var r,
    i,
    n = new Point;
  return r = t.x - e.x,
    i = t.y - e.y,
    n.x = a.x + r,
    n.y = a.y + i,
    n
}

ListManager.LM.prototypeGraphGetValueLabelRotatedCorners = function (e, t, a) {

  var r;
  if (r = Utils2.PolyFromRect(e), 0 != a) {
    var i = - 2 * Math.PI * (a / 360);
    Utils3.RotatePointsAboutPoint(t, i, r)
  }
  return r
}

ListManager.LM.prototypeGraphGetNudgeOffsets = function (e, t, a, r, i, n, o) {

  var s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L = [],
    I = {},
    T = {},
    b = {},
    M = {},
    P = {
      x: 0,
      y: 0
    },
    R = new Point,
    A = {},
    _ = {},
    E = 0,
    w = 0,
    F = 0,
    v = [],
    G = [];
  if (
    v = this.GraphGetValueLabelRotatedCorners(i, n, o),
    f = this.GraphGetValueLabelRotatedCorners(t, a, r),
    G = v.concat(f),
    Utils2.GetPolyRect(I, G),
    M.x = I.x + I.width / 2,
    M.y = I.y + I.height / 2,
    0 != o &&
    (
      u = - 2 * Math.PI * (o / 360),
      Utils3.RotatePointsAboutPoint(M, - u, G)
    ),
    s = Utils2.SetRect(G[0].x, G[0].y, G[2].x, G[2].y),
    Utils2.InflateRect(s, 5, 5),
    v = G.slice(5),
    Utils2.GetPolyRect(T, v),
    Utils2.InflateRect(T, 5, 5),
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ||
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE
  ) {
    switch (F = 20, e.quadrant) {
      case 0:
      case 2:
        w = Math.round((e.area.y - T.y) / F);
        break;
      case 1:
      case 3:
        E = Math.round((e.area.x + e.area.width - (T.x + T.width)) / F)
    }
    for (p = 0; p < F; p++) L.push(new Point(E * p, w * p))
  } else if (
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
    (
      b = this.GraphGetPieCoreArea(e),
      A = this.GraphGetPieCenter(b),
      _.x = T.x + T.width / 2,
      _.y = T.y + T.height / 2,
      c = this.GraphGetLineAngle(A, _),
      C = Math.round(0.75 * Math.abs((T.height - 10) / Math.sin(c))),
      c >= 0.25 * Math.PI &&
      c <= 0.75 * Math.PI ||
      c >= 1.25 * Math.PI &&
      c <= 1.75 * Math.PI
    )
  ) for (m = this.LineLength(A, _), F = 10, p = 0; p < F; p++) R.x = A.x + Math.round(Math.cos(c) * (m + p * C)),
    R.y = A.y - Math.round(Math.sin(c) * (m + p * C)),
    L.push(new Point(R.x - _.x, R.y - _.y));
  if (
    L.push(
      new Point(
        0,
        s.y - (T.t + T.height) - ListManager.Graph.Defines.SDAX_NUDGE_MARGIN
      )
    ),
    L.push(
      new Point(
        s.x - (T.x + T.width) - ListManager.Graph.Defines.SDAX_NUDGE_MARGIN,
        0
      )
    ),
    L.push(
      new Point(
        0,
        s.y + s.height - T.y + ListManager.Graph.Defines.SDAX_NUDGE_MARGIN
      )
    ),
    L.push(
      new Point(
        s.x + s.width - T.x + ListManager.Graph.Defines.SDAX_NUDGE_MARGIN,
        0
      )
    ),
    g = T.width,
    h = T.height,
    this.GraphAddRadialNudges(L, g / 2, h / 2),
    this.GraphAddRadialNudges(L, g, h),
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
  ) {
    var N = this.GraphGetAxesIndexes(e);
    y = Math.round(e.axes[N.category].majorscale * e.barAreaAmountStacked),
      this.GraphAddRadialNudges(
        L,
        Math.round(0.5 * y) + g / 2 + ListManager.Graph.Defines.ListManager.Graph.Defines.SDAX_NUDGE_MARGIN,
        h
      )
  }
  d = L.length;
  do {
    for (S = !1, d--, p = F; p < d; p++) D = this.LineLength(P, L[p]),
      this.LineLength(P, L[p + 1]) < D &&
      (l = L[p], L[p] = L[p + 1], L[p + 1] = l, S = !0)
  } while (S);
  return L
}

ListManager.LM.prototypeGraphAddRadialNudges = function (e, t, a) {

  var r,
    i = 0,
    n = 0,
    o = new Point;
  if (!(e.length >= ListManager.Graph.Defines.SDAX_MAX_NUDGES)) for (r = 0; r < 8; r++) {
    switch (r) {
      case 0:
      case 6:
      case 7:
        n -= a;
        break;
      case 1:
        i += t;
        break;
      case 2:
      case 3:
        n += a;
        break;
      case 4:
      case 5:
        i -= t
    }
    o.x = i,
      o.y = n,
      e.push(new Point(o.x, o.y))
  }
}

ListManager.LM.prototypeLineLength = function (e, t) {

  var a,
    r;
  return a = e.x > t.x ? e.x - t.x : t.x - e.x,
    r = e.y > t.y ? e.y - t.y : t.y - e.y,
    Math.round(Math.sqrt(Math.pow(a, 2) + Math.pow(r, 2)))
}

ListManager.LM.prototypeGraphIsPieWedgeHit = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = 0,
    g = !1;
  if (t.categoryid != e.pieChartCategory) return !1;
  if (
    i = this.GraphGetPieCoreArea(e),
    n.x = i.x + i.width / 2,
    n.y = i.y + i.height / 2,
    S = i.width / 2,
    S += t.explodeAmt,
    u = Math.abs(a.x - n.x),
    p = Math.abs(a.y - n.y),
    (c = Math.sqrt(Math.pow(u, 2) + Math.pow(p, 2))) > S
  ) return !1;
  switch (
  l = this.GraphGetLineAngle(n, lpLocal),
  l = this.GraphGetWedgeZeroBasedAngle(e, t, l),
  o = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.wedgeStartTangle)),
  s = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.tangle)),
  hitcode
  ) {
    case ListManager.Graph.HitCodes.SDG_POINT:
      if (!(g = l >= o && l <= s) && 0 == o && 0 == s) {
        for (d = 0; d < e.gpoint.length; d++) e.gpoint[d].categoryid == e.pieChartCategory &&
          D++;
        1 == D &&
          (g = !0)
      }
      break;
    case ListManager.Graph.HitCodes.SDG_EXPLODE:
      g = l >= o &&
        l <= s &&
        (c - t.explodeAmt) / (S - t.explodeAmt) >= 1 - SDAX_EXPLODE_HOTSPOT_PERCENT
  }
  return g
}

ListManager.LM.prototypeGraphIsPointHit = function (e, t, a) {

  var r,
    i;
  return e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? this.GraphIsPieWedgeHit(e, t, a, ListManager.Graph.HitCodes.SDG_POINT) : e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ? (
    r = this.GraphGetPointApex(e, t),
    i = Utils2.SetRect(
      r.x - ListManager.Graph.Defines.SDAX_SELECT_KNOBSIZE,
      r.y - ListManager.Graph.Defines.SDAX_SELECT_KNOBSIZE,
      r.x + ListManager.Graph.Defines.SDAX_SELECT_KNOBSIZE,
      r.y + ListManager.Graph.Defines.SDAX_SELECT_KNOBSIZE
    ),
    Utils2.pointInRect(i, a)
  ) : Utils2.pointInRect(t.frame, a)
}

ListManager.LM.prototypeGraphIsLabelCollisionWithPoint = function (e, t, a) {

  var r,
    i = !1,
    n = Utils2.PolyFromRect(t.label.frame);
  for (
    0 != t.label.tangle &&
    this.RotatePointsAboutPoint(t.label.center, this.TangleToRadians(t.label.tangle), n),
    r = 0;
    r < n.length;
    r++
  ) if (this.GraphIsPointHit(e, a, n[r])) {
    i = !0;
    break
  }
  return i
}

ListManager.LM.prototypeGraphIsLabelCollisionWithRect = function (e, t, a, r, i) {

  return this.GraphIsRectCollision(t.label.frame, t.label.center, t.label.tangle, a, r, i)
}

ListManager.LM.prototypeGraphIsLabelCollisionWithGutter = function (e, t, a, r) {

  var i,
    n = {},
    o = [],
    s = {};
  for (
    t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? (
      n = Utils2.SetRect(e.Frame.x, e.Frame.y - 10, e.Frame.x + e.Frame.width, e.Frame.y),
      o.push(new Rectangle(n.x, n.y, n.width, n.height)),
      n = Utils2.SetRect(
        e.Frame.x + e.Frame.width,
        e.Frame.y,
        e.Frame.x + e.Frame.width + 10,
        e.Frame.y + e.Frame.height
      ),
      o.push(new Rectangle(n.x, n.y, n.width, n.height)),
      n = Utils2.SetRect(
        e.Frame.x,
        e.Frame.y + e.Frame.height,
        e.Frame.x + e.Frame.width,
        e.Frame.y + e.Frame.height + 10
      ),
      o.push(new Rectangle(n.x, n.y, n.width, n.height)),
      n = Utils2.SetRect(
        e.Frame.x - 10,
        e.Frame.y + e.Frame.height,
        e.Frame.x,
        e.Frame.y + e.Frame.height
      ),
      o.push(new Rectangle(n.x, n.y, n.width, n.height))
    ) : (
      n = Utils2.SetRect(e.Frame.x, e.Frame.y, e.Frame.x + e.Frame.width, t.area.y),
      o.push(new Rectangle(n.x, n.y, n.width, n.height)),
      n = Utils2.SetRect(
        t.area.x + t.area.width,
        t.area.y,
        e.Frame.x + e.Frame.width,
        t.area.y + t.area.height
      ),
      o.push(new Rectangle(n.x, n.y, n.width, n.height)),
      n = Utils2.SetRect(
        e.Frame.x,
        t.area.y + t.area.height,
        e.Frame.x + e.Frame.width,
        e.Frame.y + e.Frame.height
      ),
      o.push(new Rectangle(n.x, n.y, n.width, n.height)),
      n = Utils2.SetRect(e.Frame.x, t.area.y, t.area.x, t.area.y + t.area.height),
      o.push(new Rectangle(n.x, n.y, n.width, n.height))
    ),
    i = 0;
    i < o.length;
    i++
  ) if (
      this.GraphIsRectCollision(
        t.gpoint[a].label.frame,
        t.gpoint[a].label.center,
        t.gpoint[a].label.tangle,
        o[i],
        null,
        0
      )
    ) return Utils2.CopyRect(s, o[i]),
      s;
  return null
}

ListManager.LM.prototypeGraphIsRectCollision = function (e, t, a, r, i, n) {

  return !!this.GraphIsRectOverlap(e, t, a, r, i, n) ||
    !!this.GraphIsRectOverlap(r, i, n, e, t, a)
}

ListManager.LM.prototypeGraphIsRectOverlap = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c,
    u,
    p = [],
    d = [],
    D = new Rectangle,
    g = {},
    h = {},
    m = !1;
  for (
    p = Utils2.PolyFromRect(e),
    0 != a &&
    (
      o = - 2 * Math.PI * (a / 360),
      Utils3.RotatePointsAboutPoint(t, o, p)
    ),
    s = Utils2.PolyFromRect(r),
    0 != n &&
    (
      o = - 2 * Math.PI * (n / 360),
      Utils3.RotatePointsAboutPoint(i, o, s)
    ),
    d = p.concat(s),
    Utils2.GetPolyRect(D, d),
    g.x = D.x + D.width / 2,
    g.y = D.y + D.height / 2,
    0 != n &&
    (
      o = - 2 * Math.PI * (n / 360),
      Utils3.RotatePointsAboutPoint(g, - o, d)
    ),
    l = d.splice(5),
    S = d,
    c = this.GraphGranulatePolygon(S, 40),
    Utils2.GetPolyRect(h, l),
    u = 0;
    u < c.length & !m;
    u++
  ) Utils2.pointInRect(h, c[u]) &&
    (m = !0);
  return m
}

ListManager.LM.prototypeGraphGranulatePolygon = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = [],
    p = new Point;
  for (c = t / e.length, o = 0; o < e.length; o++) for (
    l = o,
    S = o == e.length - 1 ? 0 : o + 1,
    a = this.LineLength(e[l], e[S]) / c,
    r = this.GraphGetLineAngle(e[l], e[S]),
    i = Math.cos(r),
    n = Math.sin(r),
    s = 0;
    s < c;
    s++
  ) p.x = e[l].x + Math.round(i * a * s),
    p.y = e[l].y - Math.round(n * a * s),
    u.push(new Point(p.x, p.y));
  return u
}

ListManager.LM.prototypeGraphIsPieChart = function (e) {

  return e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
}

ListManager.LM.prototypeGraphDiffFromRoundingPoint = function (e) {

  return e % 1 - 0.5
}

ListManager.LM.prototypeGraphCalculatePointPercentages = function (e) {

  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = [];
  for (r = 0; r < e.gpoint.length; r++) D.push(!1);
  for (
    t = this.GraphGetCategoryList(e),
    l = e.gpoint.length / t.length,
    r = 0;
    r < t.length;
    r++
  ) {
    for (s = 0, i = 0; i < e.gpoint.length; i++) e.gpoint[i].categoryid == t[r].categoryid &&
      (
        u = t[r].cumValuePos + - t[r].cumValueNeg,
        e.gpoint[i].percentOfCategory = 0 != u ? Math.abs(e.gpoint[i].value) / u * 100 : 0,
        s += Math.round(e.gpoint[i].percentOfCategory)
      );
    if (0 !== s) {
      if (100 != s) {
        for (i = 0; i < Math.abs(s - 100); i++) {
          for (S = - 1, n = 0; n < e.gpoint.length; n++) e.gpoint[n].categoryid == t[r].categoryid &&
            (
              D[n] ||
              s < 100 &&
              this.GraphDiffFromRoundingPoint(e.gpoint[n].percentOfCategory) > 0 ||
              (
                - 1 == S ||
                Math.abs(
                  this.GraphDiffFromRoundingPoint(e.gpoint[n].percentOfCategory)
                ) > Math.abs(
                  this.GraphDiffFromRoundingPoint(e.gpoint[S].percentOfCategory)
                )
              ) &&
              (S = n)
            );
          D[S] = !0,
            e.gpoint[S].percentOfCategory += s > 100 ? - 1 : 1
        }
        if (this.GraphIsPieChart(e) && t[r].categoryid == e.pieChartCategory) for (n = 0; n < e.gpoint.length; n++) if (e.gpoint[n].categoryid == e.pieChartCategory) for (o = 0; o < e.gpoint.length; o++) e.gpoint[o].categoryid == e.pieChartCategory &&
          o != n &&
          e.gpoint[n].value > e.gpoint[o].value &&
          e.gpoint[n].percentOfCategory < e.gpoint[o].percentOfCategory &&
          (
            e.gpoint[n].percentOfCategory += 1,
            e.gpoint[o].percentOfCategory -= 1
          )
      }
    } else for (i = 0; i < e.gpoint.length; i++) e.gpoint[i].categoryid == t[r].categoryid &&
      (e.gpoint[i].percentOfCategory = 1 / l * 100)
  }
  if (this.GraphIsPieChart(e)) for (r = 0; r < e.gpoint.length; r++) if (
    e.gpoint[r].categoryid == e.pieChartCategory &&
    0 == Math.round(e.gpoint[r].percentOfCategory) &&
    e.gpoint[r].value > 0
  ) for (e.gpoint[r].percentOfCategory = 1, i = 0; i < e.gpoint.length; i++) if (
    e.gpoint[i].categoryid == e.pieChartCategory &&
    i != r &&
    e.gpoint[i].percentOfCategory > 1
  ) {
    e.gpoint[i].percentOfCategory -= 1;
    break
  }
  if (this.GraphIsPieChart(e)) for (r = 0; r < e.gpoint.length; r++) if (e.gpoint[r].categoryid == e.pieChartCategory) for (i = 0; i < e.gpoint.length; i++) if (
    e.gpoint[i].categoryid == e.pieChartCategory &&
    i != r &&
    e.gpoint[r].value == e.gpoint[i].value &&
    e.gpoint[r].percentOfCategory != e.gpoint[i].percentOfCategory
  ) for (
      p = e.gpoint[r].percentOfCategory > e.gpoint[i].percentOfCategory ? e.gpoint[i].percentOfCategory : e.gpoint[r].percentOfCategory,
      d = e.gpoint[r].percentOfCategory > e.gpoint[i].percentOfCategory ? e.gpoint[r].percentOfCategory : e.gpoint[i].percentOfCategory,
      e.gpoint[r].percentOfCategory = e.gpoint[i].percentOfCategory = p,
      a = !1,
      c = 0;
      c < 2 &&
      !a;
      c++
    ) for (o = 0 == c ? r + 1 : 0; o < e.gpoint.length; o++) if (e.gpoint[i].categoryid == e.pieChartCategory && o != r && o != i) {
      e.gpoint[o].percentOfCategory += d - p,
        a = !0;
      break
    }
}

ListManager.LM.prototypeGraphValueAddPrefixAndSuffix = function (e, t) {

  if (0 != e.prefixChar && 40 != e.prefixChar && t.length < 255) {
    var a = t.split('');
    a.splice(0, 0, e.prefixChar),
      t = a.join('')
  }
  return 0 != e.suffixChar &&
    (t += e.suffixChar),
    t
}

ListManager.LM.prototypeGraphSetPrefixAndSuffixFromString = function (e, t) {

  var a,
    r;
  return a = e.prefixChar,
    r = e.suffixChar,
    isNaN(parseInt(t.substr(0, 1))) &&
      '-' !== t.charAt(0) ? e.prefixChar = t.charAt(0) : e.prefixChar = 0,
    isNaN(parseInt(t.substr(- 1))) ? e.suffixChar = t.charAt(t.length - 1) : e.suffixChar = 0,
    a !== e.prefixChar ||
    r !== e.suffixChar
}

ListManager.LM.prototypeGraphInsertCommaSeparatorsIntoNumber = function (e) {

  var t,
    a,
    r = e.split('');
  for (
    t = ((a = e.indexOf('.')) ? a - 1 : e.length - 1) - 3;
    t >= 0 &&
    (0 != t || '-' != e[t] && '+' != e[t]);
    t -= 3
  ) r = r.splice(t, 0, ',');
  for (t = 0; t < r.length; t++) r[t]
}

ListManager.LM.prototypeGraphFormatNumericValueLabel = function (e, t, a, r) {

  var i,
    n,
    o = [],
    s = !1,
    l = a ||
      e.valuePrecision,
    S = r ||
      !0;
  if ((n = t.toFixed(l)).indexOf('.') >= 0) {
    for (
      i = (o = n.split('')).length - 1;
      i >= 0 &&
      !(0 != e.valuePrecision && i >= 1 && '.' == o[i - 1]);
      i--
    ) {
      if ('.' == o[i]) {
        o[i] = '\x00';
        break
      }
      '0' == o[i] ? s ||
        (o[i] = '\x00') : s = !0
    }
    for (n = '', i = 0; i < o.length; i++) n += o[i]
  }
  return this.GraphInsertCommaSeparatorsIntoNumber(n),
    S &&
    this.GraphValueAddPrefixAndSuffix(e, n),
    n
}

ListManager.LM.prototypeGraphFormatNumericLabel = function (e, t) {

  return this.GraphFormatNumericLabel(e, t, e.valuePrecision, !0)
}

ListManager.LM.prototypeGraphGetCategoryName = function (e, t) {

  var a,
    r = null,
    i = this.GraphGetAxesIndexes(e);
  for (a = 0; a < e.axes[i.category].labels.length; a++) if (
    this.GraphIsCategoryLabel(e.axes[i.category].labels[a]) &&
    e.axes[i.category].labels[a].categoryid == t
  ) {
    r = this.GraphGetTextValue(e.axes[i.category].labels[a].DataID);
    break
  }
  return r
}

ListManager.LM.prototypeGraphGetSeriesName = function (e, t) {

  var a,
    r = null;
  for (a = 0; a < e.graphLegend.length; a++) if (e.graphLegend[a].seriesid == t) {
    r = GlobalData.objectStore.GetObject(e.graphLegend[a].DataID).Data.runtimeText.text;
    break
  }
  return r
}

ListManager.LM.prototypeGraphGetValueLabelString = function (e, t, a) {

  var r,
    i = '',
    n = '',
    o = !1,
    s = '';
  (
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_PERCENT &&
    this.GraphCalculatePointPercentages(e),
    r = this.GraphFormatNumericValueLabel(e, t.value),
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_SERIES_NAME &&
    (i = this.GraphGetSeriesName(e, t.seriesid)) &&
    (s = i),
    a &&
    (n = this.GraphGetCategoryName(e, t.categoryid, n)) &&
    (s.length > 0 && (s += ','), s += n),
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_NOVALUE ||
    (0 != s.length && (s += ': '), s += r),
    e.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_PERCENT
  ) &&
    (
      (o = s.length > 0) &&
      (s += ' ('),
      s += Math.round(t.percentOfCategory).toString() + '%',
      o &&
      (s += ')')
    );
  return s
}

ListManager.LM.prototypeGraphValueLabelLayout = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D = new Rectangle;
  if (
    a.flags = Utils2.SetFlag(
      a.flags,
      ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
      !1
    ),
    p = this.GraphGetValueLabelString(t, a, !1),
    d = this.GraphConfirmAndSetTextValue(e, t, a.label.DataID, a.label.style, p),
    r &&
    !d &&
    (
      i = this.GraphGetTextMaxDim(t, a.label.DataID),
      this.GraphTextGrow(
        e,
        t,
        a.label.DataID,
        a.label.style,
        i,
        !1,
        ConstantData.TextAlign.CENTER
      )
    ),
    t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_ANGLED
  ) switch (t.quadrant) {
    case 0:
    case 3:
      a.label.tangle = t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR ? - 90 : - 45;
      break;
    case 1:
      a.label.tangle = t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR ? 90 : - 45;
      break;
    case 2:
      a.label.tangle = t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR ? - 90 : 45
  } else a.label.tangle = 0;
  if (
    s = (n = this.GraphGetTextSize(e, t, a.label.DataID)).cx + 2 * ListManager.Graph.Defines.SDAX_VALUE_LABEL_MARGIN,
    l = n.cy + 2 * ListManager.Graph.Defines.SDAX_VALUE_LABEL_MARGIN,
    o = this.GraphGetPointApex(t, a),
    a.label.frame = Utils2.SetRect(o.x, o.y, o.x + s, o.y + l),
    t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
  ) switch (t.quadrant) {
    case 0:
      S = Math.round(a.frame.width / 2),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          0 == a.label.tangle ? Utils2.OffsetRect(a.label.frame, S, a.value >= 0 ? - l : 0) : Utils2.OffsetRect(a.label.frame, S, a.value >= 0 ? 0 : s),
          a.label.center.x = a.label.frame.x + a.label.frame + width / 2,
          a.label.center.y = a.label.frame.y,
          0 !== a.label.tangle &&
          (a.label.center.y += Math.abs(s - l))
        ) : t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ? (
          Utils2.OffsetRect(
            a.label.frame,
            S + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
            a.value >= 0 ? - (
              l + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            ) : l + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
          ),
          a.label.center.x = a.label.frame.x + a.label.frame.width / 2,
          a.label.center.y = a.label.frame.y
        ) : 0 == a.label.tangle ? (
          Utils2.OffsetRect(a.label.frame, - s / 2, a.value >= 0 ? 0 : - l),
          a.label.center.x = a.label.frame.x + s / 2,
          a.label.center.y = a.label.frame.y + l / 2
        ) : (
          Utils2.OffsetRect(a.label.frame, - (s + l / 2), a.value >= 0 ? 0 : - s),
          a.label.center.x = a.label.frame.x + a.label.frame.width,
          a.label.center.y = a.label.frame.y
        );
      break;
    case 1:
      S = Math.round(a.frame.height / 2),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          0 == a.label.tangle ? Utils2.OffsetRect(a.label.frame, a.value >= 0 ? - s : 0, - (l + S)) : Utils2.OffsetRect(a.label.frame, a.value >= 0 ? 0 : l, - (s + S)),
          a.label.center.x = a.label.frame.x,
          a.label.center.y = a.label.frame.y
        ) : t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ? (
          Utils2.OffsetRect(
            a.label.frame,
            a.value >= 0 ? 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE : - (
              s + 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            ),
            - (l + S)
          ),
          a.label.center.x = a.label.frame.x + a.label.frame.width / 2,
          a.label.center.y = a.label.frame.y + a.label.frame.height / 2
        ) : 0 === a.label.tangle ? (
          Utils2.OffsetRect(a.label.frame, a.value >= 0 ? - s : 0, - l / 2),
          a.label.center.x = a.label.frame.x + s / 2,
          a.label.center.y = a.label.frame.y + l / 2
        ) : (
          Utils2.OffsetRect(a.label.frame, a.value >= 0 ? - s / 2 : s / 2, 0),
          a.label.center.x = a.label.frame.x + a.label.frame.width / 2,
          a.label.center.y = a.label.frame.y
        );
      break;
    case 2:
      S = Math.round(a.frame.width / 2),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          0 == a.label.tangle ? Utils2.OffsetRect(a.label.frame, S, a.value >= 0 ? - l : 0) : Utils2.OffsetRect(a.label.frame, S, a.value >= 0 ? 0 : s),
          a.label.center.x = a.label.frame.x,
          a.label.center.y = a.label.frame.y
        ) : t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ? (
          Utils2.OffsetRect(
            a.label.frame,
            S + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
            a.value >= 0 ? s + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE : - (
              s + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            )
          ),
          a.label.center.x = a.label.frame.x + a.label.frame.width / 2,
          a.label.center.y = a.label.frame.y
        ) : 0 === a.label.tangle ? (
          Utils2.OffsetRect(a.label.frame, - s / 2, a.value >= 0 ? - l : 0),
          a.label.center.x = a.label.frame.x + s / 2,
          a.label.center.y = a.label.frame.y + l / 2
        ) : (
          Utils2.OffsetRect(a.label.frame, - l / 2, a.value >= 0 ? 0 : s),
          a.label.center.x = a.label.frame.x,
          a.label.center.y = a.label.frame.y
        );
      break;
    case 3:
      S = Math.round(a.frame.height / 2),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          0 == a.label.tangle ? Utils2.OffsetRect(a.label.frame, a.value > 0 ? - s : 0, - (l + S)) : Utils2.OffsetRect(a.label.frame, a.value > 0 ? 0 : - l, - S),
          a.label.center.x = a.label.frame.x,
          a.label.center.y = a.label.frame.y
        ) : t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ? (
          0 === a.label.tangle ? Utils2.OffsetRect(
            a.label.frame,
            a.value >= 0 ? - (
              s + 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            ) : s + 1 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
            - (
              l / 2 + S + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            )
          ) : Utils2.OffsetRect(
            a.label.frame,
            a.value >= 0 ? - (
              l + 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            ) : l + 1 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
            - (
              l / 2 + S + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            )
          ),
          a.label.center.x = a.label.frame.x,
          a.label.center.y = a.label.frame.y + a.label.frame.width / 2
        ) : 0 === a.label.tangle ? (
          Utils2.OffsetRect(a.label.frame, a.value >= 0 ? 0 : - s, - l / 2),
          a.label.center.x = a.label.frame.x + s / 2,
          a.label.center.y = a.label.frame.y + l / 2
        ) : (
          Utils2.OffsetRect(a.label.frame, a.value >= 0 ? - s / 2 : - (s / 2 + l), 0),
          a.label.center.x = a.label.frame.x + a.label.frame.width / 2,
          a.label.center.y = a.label.frame.y
        )
  } else switch (
  c = Math.abs(Math.sin(this.TangleToRadians(a.label.tangle))),
  u = Math.abs(Math.cos(this.TangleToRadians(a.label.tangle))),
  t.quadrant
  ) {
    case 0:
      t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
        (
          Utils2.CopyRect(D, a.label.frame),
          0 != a.label.tangle ? (
            a.value >= 0 ? Utils2.OffsetRect(a.label.frame, - Math.round(s / 2), Math.round(s / 2) * c) : Utils2.OffsetRect(a.label.frame, - Math.round(s / 2), - (l + Math.round(s / 2 * c))),
            a.label.center.x = a.label.frame.x + Math.round(s / 2),
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          ) : (
            Utils2.OffsetRect(a.label.frame, - s / 2, a.value >= 0 ? 0 : - l),
            a.label.center.x = a.label.frame.x + s / 2,
            a.label.center.y = a.label.frame.y + l / 2
          ),
          this.ContainsRect(a.frame, a.label.frame) ||
          (
            a.flags = Utils2.SetFlag(
              a.flags,
              ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
              !0
            ),
            Utils2.CopyRect(a.label.frame, D)
          )
        ),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          Utils2.OffsetRect(a.label.frame, - s / 2, a.value >= 0 ? - l : Math.round(c * s)),
          0 == a.label.tangle &&
          Utils2.OffsetRect(
            a.label.frame,
            0,
            - ListManager.Graph.Defines.SDAX_VALUE_LABEL_EXTERNAL_MARGIN
          ),
          a.label.center.x = a.label.frame.x + s / 2,
          a.label.center.y = a.label.frame.y + l / 2,
          0 !== a.label.tangle &&
          (a.label.center.y -= Math.abs(s - l))
        ) : (
          t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
          a.flags & ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER
        ) &&
        (
          a.value >= 0 ? (
            Utils2.OffsetRect(
              a.label.frame,
              ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
              - (
                l + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE + a.label.frame.height / 2
              )
            ),
            a.label.center.x = a.label.frame.x,
            a.label.center.y = a.label.frame.y + a.label.frame.height / 2
          ) : (
            Utils2.OffsetRect(
              a.label.frame,
              - (
                ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE + s
              ),
              ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            ),
            a.label.center.x = a.label.frame.x + a.label.frame.width,
            a.label.center.y = a.label.frame.y + a.label.frame.height / 2
          )
        );
      break;
    case 1:
      t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
        (
          Utils2.CopyRect(D, a.label.frame),
          0 != a.label.tangle ? (
            Utils2.OffsetRect(
              a.label.frame,
              a.value >= 0 ? - (s + Math.round(u * s / 2)) : Math.round(u * s / 2),
              - Math.round(l / 2)
            ),
            a.label.center.x = a.label.frame.x + Math.round(s / 2),
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          ) : (
            Utils2.OffsetRect(a.label.frame, a.value >= 0 ? - s : 0, - Math.round(l / 2)),
            a.label.center.x = a.label.frame.x + s / 2,
            a.label.center.y = a.label.frame.y + l / 2
          ),
          this.ContainsRect(a.frame, a.label.frame) ||
          (
            a.flags = Utils2.SetFlag(
              a.flags,
              ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
              !0
            ),
            Utils2.CopyRect(a.label.frame, D)
          )
        ),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          Utils2.OffsetRect(
            a.label.frame,
            a.value >= 0 ? ListManager.Graph.Defines.SDAX_VALUE_LABEL_EXTERNAL_MARGIN : - s,
            - Math.round(l / 2)
          ),
          a.label.center.x = a.label.frame.x + Math.round(s / 2),
          a.label.center.y = a.label.frame.y + Math.round(l / 2)
        ) : (
          t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
          a.flags & ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER
        ) &&
        (
          a.value >= 0 ? (
            Utils2.OffsetRect(
              a.label.frame,
              2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
              - (
                Math.round(l / 2) + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
              )
            ),
            a.label.center.x = a.label.frame.x,
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          ) : (
            Utils2.OffsetRect(
              a.label.frame,
              - (
                s + 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
              ),
              Math.round(ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE)
            ),
            a.label.center.x = a.label.frame.x + a.label.frame.width,
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          )
        );
      break;
    case 2:
      t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
        (
          Utils2.CopyRect(D, a.label.frame),
          0 != a.label.tangle ? (
            a.value >= 0 ? Utils2.OffsetRect(a.label.frame, - Math.round(s / 2), - (l + Math.round(s / 2 * c))) : Utils2.OffsetRect(a.label.frame, - Math.round(s / 2), Math.round(s / 2 * c)),
            a.label.center.x = a.label.frame.x + Math.round(s / 2),
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          ) : (
            Utils2.OffsetRect(a.label.frame, - Math.round(s / 2), a.value >= 0 ? - l : 0),
            a.label.center.x = a.label.frame.x + s / 2,
            a.label.center.y = a.label.frame.y + l / 2
          ),
          this.ContainsRect(a.frame, a.label.frame) ||
          (
            a.flags = Utils2.SetFlag(
              a.flags,
              ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
              !0
            ),
            Utils2.CopyRect(a.label.frame, D)
          )
        ),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          Utils2.OffsetRect(
            a.label.frame,
            - Math.round(u * s / 2),
            a.value >= 0 ? Math.round(c * s / 2) + ListManager.Graph.Defines.SDAX_VALUE_LABEL_EXTERNAL_MARGIN : - (l + Math.round(c * s / 2))
          ),
          a.label.center.x = a.label.frame.x + Math.round(s / 2),
          a.label.center.y = a.label.frame.y + Math.round(l / 2)
        ) : (
          t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
          a.flags & ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER
        ) &&
        (
          a.value >= 0 ? (
            Utils2.OffsetRect(
              a.label.frame,
              ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
              l / 2 + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            ),
            a.label.center.x = a.label.frame.x,
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          ) : (
            Utils2.OffsetRect(
              a.label.frame,
              - (
                Math.round(u * s) + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
              ),
              - (
                l + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
              )
            ),
            a.label.center.x = a.label.frame.x + a.label.frame.width,
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          )
        );
      break;
    case 3:
      t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
        (
          Utils2.CopyRect(D, a.label.frame),
          0 != a.label.tangle ? (
            Utils2.OffsetRect(
              a.label.frame,
              a.value >= 0 ? Math.round(u * s / 2) : - (s + Math.round(u * s / 2)),
              - Math.round(l / 2)
            ),
            a.label.center.x = a.label.frame.x + Math.round(s / 2),
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          ) : (
            Utils2.OffsetRect(a.label.frame, a.value >= 0 ? 0 : - s, - l / 2),
            a.label.center.x = a.label.frame.x + s / 2,
            a.label.center.y = a.label.frame.y + l / 2
          ),
          this.ContainsRect(a.frame, a.label.frame) ||
          (
            a.flags = Utils2.SetFlag(
              a.flags,
              ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER,
              !0
            ),
            Utils2.CopyRect(a.label.frame, D)
          )
        ),
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ? (
          Utils2.OffsetRect(
            a.label.frame,
            a.value >= 0 ? - (
              s + ListManager.Graph.Defines.SDAX_VALUE_LABEL_EXTERNAL_MARGIN
            ) : 0,
            - Math.round(l / 2)
          ),
          a.label.center.x = a.label.frame.x + Math.round(s / 2),
          a.label.center.y = a.label.frame.y + Math.round(l / 2)
        ) : (
          t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
          a.flags & ListManager.Graph.PointFlagOverrides.SDAX_POINT_FORCE_EXTERNALLEADER
        ) &&
        (
          a.value >= 0 ? (
            Utils2.OffsetRect(
              a.label.frame,
              - (
                s + 2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
              ),
              ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
            ),
            a.label.center.x = a.label.frame.x + a.label.frame.width,
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          ) : (
            Utils2.OffsetRect(
              a.label.frame,
              2 * ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE,
              - (
                Math.round(l / 2) + ListManager.Graph.Defines.SDAX_EXTERNAL_LEADER_STEMSIZE
              )
            ),
            a.label.center.x = a.label.frame.x,
            a.label.center.y = a.label.frame.y + Math.round(l / 2)
          )
        )
  }
  this.GraphEnsureValueLabelTextContrast(e, t, a)
}

ListManager.LM.prototypeGraphEnsureValueLabelTextContrast = function (e, t, a) {

  t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
    t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ||
    t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
    !this.ContainsRect(a.frame, a.label.frame) ? this.GraphEnsureTextContrast(e, t, a.label.DataID, t.areaStyle.Fill.Paint) : this.GraphEnsureTextContrast(e, t, a.label.DataID, a.style.Fill.Paint)
}

ListManager.LM.prototypeGraphImageValueRepLayout = function (e, t, a) {

  if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) switch (e.imageValueRep) {
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK:
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK_NOSCALE:
    case ListManager.Graph.ImageRepresentation.ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SIZE:
    case SDAX_IMAGEVALUEREP_STRETCH:
      this.GraphImageValueRepTileLayout(e, t);
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SPAN:
      this.GraphImageValueRepSpanLayout(e, t)
  } else if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
  ) switch (e.imageValueRep) {
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK:
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK_NOSCALE:
      this.GraphImageValueRepTileLayout(e, t);
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SIZE:
      this.GraphBarImageValueRepSizeLayout(e, t, a);
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STRETCH:
      this.GraphBarImageValueRepStretchLayout(e, t, a);
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SPAN:
      SDGraphImageValueRepSpanLayout(e, t)
  } else if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE
  ) this.GraphImageValueRepFixedLayout(e.point);
  else switch (e.imageValueRep) {
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK:
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK_NOSCALE:
      this.GraphBarImageValueRepStackLayout(e, t, a);
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SIZE:
      this.GraphBarImageValueRepSizeLayout(e, t, a);
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STRETCH:
      this.GraphBarImageValueRepStretchLayout(e, t, a);
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SPAN:
      this.GraphImageValueRepSpanLayout(e, t)
  }
}

ListManager.LM.prototypeGraphImageValueRepSpanLayout = function (e, t) {
}

ListManager.LM.prototypeGraphBarImageValueRepStretchLayout = function (e, t, a) {
}

ListManager.LM.prototypeGraphBarImageValueRepSizeLayout = function (e, t, a) {

  this.GraphGetAxesIndexes(e)
}

ListManager.LM.prototypeGraphImageValueRepSpanLayout = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = [],
    p = - 1,
    d = 0,
    D = 0,
    g = 0,
    h = 0,
    m = 0;
  if (
    a = this.GraphGetAxesIndexes(e),
    t.style.Fill.Paint.Filltype === ConstantData.FillTypes.SDFILL_TEXTURE ||
    t.style.Fill.Paint.Filltype === ConstantData.FillTypes.SDFILL_IMAGE
  ) {
    if (
      t.style.Fill.Paint.Filltype = ConstantData.FillTypes.SDFILL_TEXTURE,
      e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? t.imageFill.scaletype = ConstantData.ImageScales.SDIMAGE_CROP_TO_FIT : t.imageFill.scaletype = ConstantData.ImageScales.SDIMAGE_ALWAYS_FIT,
      Utils2.CopyRect(t.imagePaintBounds, e.area),
      t.imgFillSize = {
        cx: e.txList.tx[t.style.Fill.Paint.Texture].dim.x,
        cy: e.txList.tx[t.style.Fill.Paint.Texture].dim.y
      },
      e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ||
      e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
    ) {
      for (
        l = 1 - (
          S = e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ? e.barAreaAmount : e.barAreaAmountStacked
        ),
        h = Math.round(e.axes[a.category].majorscale * l),
        u = this.GraphGetCategoryList(e),
        Utils2.CopyRect(r, e.area),
        0 == e.quadrant ||
          2 == e.quadrant ? (
          r.x = e.area.x + Math.round(e.axes[a.category].majorscale / 2 + h / 2),
          r.width = u.length * Math.round(e.axes[a.category].majorscale * S)
        ) : (
          r.height = e.area.height - Math.round(e.axes[a.category].majorscale / 2),
          r.height -= Math.round(h / 2),
          r.height -= (u.length - 1) * h,
          r.y = r.y + r.height - u.length * Math.round(e.axes[a.category].majorscale * S)
        ),
        c = 0;
        c < u.length &&
        - 1 == p;
        c++
      ) u[c].categoryid === t.categoryid &&
        (p = c);
      2 !== e.quadrant &&
        3 !== e.quadrant ||
        (p = u.length - 1 - p),
        d = p * h,
        0 === e.quadrant ||
          2 === e.quadrant ? D = d : g = d
    } else if (
      e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
    ) {
      if (Utils2.CopyRect(r, e.area), 0 === e.quadrant || 3 === e.quadrant) for (c = e.gpoint.length - 1; c >= 0; c--) e.gpoint[c].categoryid === e.pieChartCategory &&
        (
          e.gpoint[c].seriesid === lpPoint.seriesid &&
          e.gpoint[c].categoryid === lpPoint.categoryid &&
          (d = m),
          m += e.gpoint[c].explodeAmt
        );
      else for (c = 0; c < e.gpoint.length; c++) e.gpoint[c].categoryid == e.pieChartCategory &&
        (
          m += e.gpoint[c].explodeAmt,
          e.gpoint[c].seriesid === lpPoint.seriesid &&
          e.gpoint[c].categoryid === lpPoint.categoryid &&
          (d = m)
        );
      0 === e.quadrant ||
        2 === e.quadrant ? (g = d, r.height -= m) : (D = d, r.width -= m)
    } else e.graphtype,
      ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE;
    i = t.frame.height / r.height,
      n = t.frame.width / r.width,
      s = (t.frame.y - g - r.y) / r.height,
      o = (t.frame.x - D - r.x) / r.width,
      t.imageFill.crop = Utils2.SetRect(
        Math.round(t.imgFillSize.cx * o),
        Math.round(t.imgFillSize.cy * s),
        Math.round(t.imgFillSize.cx * o + t.imgFillSize.cx * n),
        Math.round(t.imgFillSize.cy * s + t.imgFillSize.cy * i)
      )
  }
}

ListManager.LM.prototypeGraphImageValueRepTileLayout = function (e, t) {

  var a,
    r,
    i,
    n;
  t.style.Fill.Paint.Filltype !== ConstantData.FillTypes.SDFILL_TEXTURE &&
    t.style.Fill.Paint.Texture >= 0 &&
    t.style.Fill.Paint.Texture < e.txList.length ||
    (
      i = this.GraphGetAxesIndexes(e),
      n = this.GraphGetImageRepImageDimensions(e, t.style.fill),
      r = (
        e.axes[i.magnitude].orientation === ListManager.Graph.Defines.SDAX_VERT ? e.axes[i.magnitude].frame.height : e.axes[i.magnitude].width
      ) / 5,
      a = n.cy > n.cx ? r / n.cy : r / n.cx,
      t.style.Fill.Paint.Txscale.Scale = a,
      Utils2.CopyRect(t.imagerect, t.frame),
      Utils2.SetRectEmpty(t.imagerectBottom),
      Utils2.SetRectEmpty(t.imagerectMiddle),
      Utils2.SetRectEmpty(t.imagerectTop),
      Utils2.CopyRect(t.imagerectBottom, t.imagerect)
    )
}

ListManager.LM.prototypeGraphGetImageRepImageDimensions = function (e, t) {

  var a = {
    cx: 0,
    cy: 0
  };
  return - 1 == Fill.Paint.Texture ? null : t.texture > e.txListUncomp.n ? - 1 : (
    a.cy = txList.tx[Fill.Paint.Texture].dim.y,
    a.cx = txList.tx[Fill.Paint.Texture].dim.x,
    a
  )
}

ListManager.LM.prototypeGraphPointLayout = function (e, t, a, r, i, n, o) {

  if (t.orientation === ListManager.Graph.Defines.SDAX_HORIZ) switch (e.quadrant) {
    case 0:
      i >= 0 ? a.frame = Utils2.SetRect(
        t.frame.x + r,
        t.frame.y - Math.round(n + i),
        t.frame.x + r + Math.round(o),
        t.frame.y - Math.round(n)
      ) : (
        a.frame = Utils2.SetRect(
          t.frame.x + r,
          t.frame.y - Math.round(n),
          t.frame.x + r + Math.round(o),
          t.frame.y - Math.round(n + i)
        ),
        0 == i &&
        Utils2.OffsetRect(a.frame, 0, - t.style.line.thickness / 2)
      );
      break;
    case 2:
      a.frame = i >= 0 ? Utils2.SetRect(
        t.frame.x + t.frame.width - r - Math.round(o),
        t.frame.y + t.frame.height + Math.round(n),
        t.frame.x + t.frame.width - r,
        t.frame.y + t.frame.height + Math.round(n + i)
      ) : Utils2.SetRect(
        t.frame.x + t.frame.width - r - Math.round(o),
        t.frame.y + t.frame.height + Math.round(n + i),
        t.frame.x + t.frame.width - r,
        t.frame.y + t.frame.height + Math.round(n)
      ),
        0 == i &&
        Utils2.OffsetRect(a.frame, 0, t.style.line.thickness / 2)
  } else switch (e.quadrant) {
    case 1:
      a.frame = i >= 0 ? Utils2.SetRect(
        t.frame.x + t.frame.width + Math.round(n),
        t.frame.y + t.frame.height - r - Math.round(o),
        t.frame.x + t.frame.width + Math.round(n + i),
        t.frame.y + t.frame.height - r
      ) : Utils2.SetRect(
        t.frame.x + t.frame.width + Math.round(n + i),
        t.frame.y + t.frame.height - r - Math.round(o),
        t.frame.x + t.frame.width + Math.round(n),
        t.frame.y + t.frame.height - r
      ),
        0 == i &&
        Utils2.OffsetRect(a.frame, t.style.line.thickness / 2, 0);
      break;
    case 3:
      a.frame = i >= 0 ? Utils2.SetRect(
        t.frame.x - Math.round(n + i),
        t.frame.y + t.frame.height - r - Math.round(o),
        t.frame.x - Math.round(n),
        t.frame.y + t.frame.height - r
      ) : Utils2.SetRect(
        t.frame.x - Math.round(n),
        t.frame.y + t.frame.height - r - Math.round(o),
        t.frame.x - Math.round(n + i),
        t.frame.y + t.frame.height - r
      ),
        0 == i &&
        Utils2.OffsetRect(a.frame, - t.style.line.thickness / 2, 0)
  }
}

ListManager.LM.prototypeGraphGetMagnitudeZeroOffset = function (e, t) {

  var a,
    r,
    i,
    n;
  return a = t.orientation === ListManager.Graph.Defines.SDAX_HORIZ ? t.frame.width : t.frame.height,
    (n = (r = t.end - t.start) - t.end) < 0 ? 0 : (i = n / r, Math.round(i * a))
}

ListManager.LM.prototypeGraphGetValueMagnitudeExtent = function (e, t) {

  var a,
    r,
    i;
  return t.start > e ? 0 : (
    a = t.orientation === ListManager.Graph.Defines.SDAX_HORIZ ? t.frame.width : t.frame.height,
    i = t.end - t.start,
    e > 0 &&
    t.start > 0 &&
    (e -= t.start),
    r = e / i,
    Math.round(a * r)
  )
}

ListManager.LM.prototypeGraphGetBarWidth = function (e, t) {

  var a,
    r;
  if (
    e.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR
  ) 0 == e.barAreaAmountStacked &&
    (
      e.barAreaAmountStacked = ListManager.Graph.Defines.SDAX_BARSTACK_SPACING_PERCENT
    ),
    r = t.majorscale * e.barAreaAmountStacked;
  else switch (
  0 == e.barAreaAmount &&
  (
    e.barAreaAmount = ListManager.Graph.Defines.SDAX_BARCLUSTER_SPACING_PERCENT
  ),
  a = Math.round(t.majorscale * e.barAreaAmount),
  e.graphtype
  ) {
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR:
      r = a / e.graphLegend.length;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE:
    default:
      r = 0
  }
  return r
}

ListManager.LM.prototypeGraphGetCategoryAxisOffsetByCategoryIndex = function (e, t, a) {

  var r;
  return r = Math.round(a * t.majorscale),
    e.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
    e.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE &&
    (r += Math.round(t.minorscale)),
    r += this.GraphGetAxisMargin(e, t)
}

ListManager.LM.prototypeGraphGetTickOffset = function (e) {

  return e.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS ? e.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS ? 0 : ListManager.Graph.Defines.SDAX_MINORTICKSIZE : ListManager.Graph.Defines.SDAX_MAJORTICKSIZE
}

ListManager.LM.prototypeGraphGetAxisMargin = function (e, t) {

  return e.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR &&
    e.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR ? 0 : this.GraphIsCategoryAxis(e, t) ? ListManager.Graph.Defines.SDAX_CAT_AXIS_MARGIN : 0
}

ListManager.LM.prototypeGraphMagnitudeAxisLayout = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = 0,
    p = {
      majorTick: 0,
      labelOffset: 0
    };
  if (c = this.GraphGetMagnitudeBoundsAndTicks(t, a)) for (
    a.start = c.lowerBound,
    a.end = c.upperBound,
    a.major = c.major,
    a.minor = c.minor,
    l = a.orientation === ListManager.Graph.Defines.SDAX_HORIZ ? a.frame.width : a.frame.height,
    S = a.end - a.start,
    a.major &&
    (a.majorscale = l * (a.major / S)),
    a.minor &&
    (a.minorscale = l * (a.minor / S)),
    p.majorTick = a.start,
    p.labelOffset = 0,
    u = 0;
    u < a.labels.length;
    u++
  ) {
    switch (i = a.labels[u], t.quadrant) {
      case 0:
        i.just = ConstantData.TextAlign.RIGHT;
        break;
      case 2:
        i.just = ConstantData.TextAlign.LEFT;
        break;
      default:
        i.just = ConstantData.TextAlign.CENTER
    }
    if (
      r &&
      (
        a.orientation === ListManager.Graph.Defines.SDAX_HORIZ &&
        (
          i.vjust = 1 === t.quadrant ? FileParser.TextJust.TA_BOTTOM : FileParser.TextJust.TA_TOP
        ),
        n = this.GraphGetTextMaxDim(t, i.DataID),
        this.GraphTextGrow(e, t, i.DataID, i.style, n, !1, i.just)
      ),
      (o = this.GraphGetTextSize(e, t, i.DataID)) &&
      (
        s = a.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS ? a.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS ? 0 : ListManager.Graph.Defines.SDAX_MINORTICKSIZE : ListManager.Graph.Defines.SDAX_MAJORTICKSIZE,
        this.AxisRectLayout(t, a, i.frame, i.center, i.tangle, p.labelOffset, s, o.cy, o.cx),
        0 != this.GraphGetNextAxisMajorTick(a.start, a.end, a.major, a.majorscale, p)
      )
    ) break
  }
}

ListManager.LM.prototypeGraphGetNextAxisMajorTick = function (e, t, a, r, i) {

  var n = 0,
    o = i.majorTick;
  return a <= 0 ? - 1 : (
    i.majorTick === e &&
      0 !== e ? i.majorTick >= 0 ? (n = a >= 1 ? Math.round(e) % Math.round(a) : e % a, i.majorTick += a - n) : Math.abs(e) < a ? i.majorTick = 0 : i.majorTick += e % a == 0 ? a : Math.abs(e % a) : i.majorTick !== t &&
        i.majorTick + a > t ? i.majorTick = t : i.majorTick += a,
    i.labelOffset += (i.majorTick - o) / a * r,
    0
  )
}

ListManager.LM.prototypeAxisRectLayout = function (e, t, a, r, i, n, o, s, l) {

  var S,
    c = {};
  if (t.orientation === ListManager.Graph.Defines.SDAX_HORIZ) switch (
    S = 0 === e.quadrant ||
      1 === e.quadrant ? t.frame.x + n : t.frame.x + t.frame.width - n,
    e.quadrant
  ) {
      case 0:
      case 1:
      case 3:
        c = Utils2.SetRect(S - l / 2, t.frame.y + o, S + l / 2, t.frame.y + o + s),
          Utils2.CopyRect(a, c),
          i < 0 ? (Utils2.OffsetRect(a, - l / 2, 0), r.x = a.x + a.width, r.y = a.y) : i > 0 ? (Utils2.OffsetRect(a, l / 2, 0), r.x = a.x, r.y = a.y) : r.x = r.y = 0;
        break;
      case 2:
        c = Utils2.SetRect(
          S - l / 2,
          t.frame.y + t.frame.height - o - s,
          S + l / 2,
          t.frame.y + t.frame.height - o
        ),
          Utils2.CopyRect(a, c),
          i > 0 ? (Utils2.OffsetRect(a, l / 2, 0), r.x = a.x, r.y = a.y + a.height) : i < 0 ? (
            Utils2.OffsetRect(a, - l / 2, 0),
            r.x = a.x + a.width,
            r.y = a.y + a.height
          ) : r.x = r.y = 0
    } else switch (
  S = 0 === e.quadrant ||
    1 === e.quadrant ||
    3 === e.quadrant ? t.frame.y + t.frame.height - n : t.frame.y + n,
  e.quadrant
  ) {
    case 0:
    case 1:
      c = Utils2.SetRect(
        t.frame.x + t.frame.width - o - l,
        S - s / 2,
        t.frame.x + t.frame.width - o,
        S + s / 2
      ),
        Utils2.CopyRect(a, c),
        i > 0 ? (
          Utils2.OffsetRect(a, 0, - s / 2),
          r.x = a.x + a.width,
          r.y = a.y + a.height
        ) : i < 0 &&
        (Utils2.OffsetRect(a, 0, ht / 2), r.x = a.x + a.width, r.y = a.y);
      break;
    case 2:
    case 3:
      c = Utils2.SetRect(t.frame.x + o, S - s / 2, t.frame.x + o + l, S + s / 2),
        Utils2.CopyRect(a, c),
        r.x = a.x,
        r.y = a.y,
        i > 0 ? (Utils2.OffsetRect(a, 0, s / 2), r.x = a.x, r.y = a.y) : i < 0 &&
          (Utils2.OffsetRect(a, 0, - s / 2), r.x = a.x, r.y = a.y + a.height)
  }
}

ListManager.LM.prototypeContainsRect = function (e, t) {

  var a = new Rectangle;
  return Utils2.UnionRect(e, t, a),
    Utils2.EqualRect(a, e)
}

ListManager.LM.prototypeGraphGetTextSize = function (e, t, a) {

  var r = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID);
  if (!r) return null;
  var i = {
    cx: 0,
    cy: 0
  },
    n = r.GetElementByID(ConstantData.SVGElementClass.TEXT, a);
  if (!n) return null;
  var o = n.CalcTextFit();
  return o ||
    (o = n.GetTextMinDimensions()),
    i.cx = o.width,
    i.cy = o.height,
    i
}

ListManager.LM.prototypeGraphGetTextValue = function (e) {

  return GlobalData.objectStore.GetObject(e, !1).Data.runtimeText.text
}

ListManager.LM.prototypeGraphIsTextStyleDifferent = function (e, t) {

  var a = GlobalData.objectStore.GetObject(e).Data.runtimeText.styles[0];
  return a.font != t.FontName ||
    a.size != t.FontSize ||
    a.color != t.Paint.Color ||
    1 === t.Face &&
    'bold' != a.weight
};
var SDJS_LM_GraphTextTap = null,
  SDJS_LM_GraphTextTapFactory = function (e) {
    return function (t) {
      if (
        Utils2.StopPropagationAndDefaults(t),
        GlobalData.optManager.currentModalOperation === ListManager.ModalOperations.NONE
      ) {
        var a = e.BlockID,
          r = GlobalData.optManager.svgObjectLayer.FindElementByDOMElement(t.currentTarget).GetUserData();
        return GlobalData.optManager.Graph_SetupAction(t, a, ConstantData.Defines.GraphTextHit, r),
          !1
      }
      return !1
    }
  };
ListManager.LM.prototype.Graph_OpenEdit = function (e, t, a, r) {
  t.selectedText = a;
  var i = GlobalData.optManager.svgObjectLayer.GetElementByID(e);
  GlobalData.optManager.ActivateTextEdit(i.svgObj.SDGObj, r, !1);
  var n = GlobalData.optManager.svgDoc.GetActiveEdit();
  n.editor &&
    (n.editor.lastClickTime = 0, n.editor.HandleMouseDown(r))
}

ListManager.LM.prototypeGraphGetValueWithPrecision = function (e, t) {

  var a = Math.pow(10, e.valuePrecision);
  0 === e.valuePrecision &&
    (a = 1);
  var r = parseFloat(Math.round(t * a) / a).toFixed(e.valuePrecision);
  if (0 === e.valuePrecision) {
    var i = r.indexOf('.');
    i >= 0 &&
      (r = r.substring(0, i - 1))
  }
  return r
}

ListManager.LM.prototypeGraph_CloseEdit = function (e, t) {

  GlobalData.optManager.bInNoteEdit &&
    GlobalData.optManager.ToggleNote(GlobalData.optManager.curNoteShape, GlobalData.optManager.curNoteGraphPoint),
    this.DeactivateAllTextEdit(!1),
    e.DataID = - 1,
    t.selectedText = - 1
}

ListManager.LM.prototypeGraph_DeActivateText = function (e, t) {

  !t ||
    t.selectedText < 0 ||
    this.GraphFormat(e, t, e.Frame, !0)
}

ListManager.LM.prototypeGraphGetPointIndexForTextId = function (e, t) {

  var a;
  for (a = 0; a < e.gpoint.length; a++) if (e.gpoint[a].label.DataID === t) return a;
  return - 1
}

ListManager.LM.prototypeGraphGetPointIndex = function (e, t) {

  var a;
  for (a = 0; a < e.gpoint.length; a++) if (
    e.gpoint[a].seriesid === t.seriesid &&
    e.gpoint[a].categoryid === t.categoryid
  ) return a;
  return - 1
}

ListManager.LM.prototypeGraphGetStyleForTextId = function (e, t) {

  var a,
    r;
  if (e.graphtitle.DataID === t) return e.graphtitle.style;
  if (e.graphlegendTitle.DataID === t) return e.graphlegendTitle.style;
  for (a = 0; a < e.graphLegend.length; a++) if (e.graphLegend[a].DataID === t) return e.graphLegend[a].style;
  for (a = 0; a < e.axes.length; a++) {
    if (e.axes[a].title.DataID === t) return e.axes[a].title.style;
    for (r = 0; r < e.axes[a].labels.length; r++) if (e.axes[a].labels[r].DataID === t) return e.axes[a].labels[r].style
  }
  for (a = 0; a < e.gpoint.length; a++) if (e.gpoint[a].label.DataID === t) return e.gpoint[a].label.style;
  return null
}

ListManager.LM.prototypeGraph_SaveTextStyle = function (e, t, a) {

  var r = null;
  if (e && e.selectedText >= 0) {
    var i = this.GraphGetStyleForTextId(e, t);
    this.TextStyleToSDText(i.Text, a),
      (r = this.GraphTextHitInfo(e, t)) &&
      r.defaultStyle &&
      this.TextStyleToSDText(r.defaultStyle.Text, a)
  }
}

ListManager.LM.prototypeGraph_GetTRect = function (e, t, a) {

  var r = t.selectedText;
  if (r < 0) return null;
  var i = this.GraphTextHitInfo(t, r),
    n = Utils1.DeepCopy(i.rect),
    o = {};
  return o.trect = n,
    o.sizedim = {},
    o.sizedim.width = n.width,
    o.sizedim.height = n.height,
    a &&
    (
      o.tsizedim = {},
      o.tsizedim.height = n.height,
      o.tsizedim.width = n.width
    ),
    o
}

ListManager.LM.prototypeGraph_SetupAction = function (e, t, a, r) {

  var i = this.GetObjectPtr(t, !1);
  if (null != i) {
    var n = i.GetGraph(!1);
    if (null != n) {
      var o = this.svgDoc.ConvertWindowToDocCoords(e.gesture.center.clientX, e.gesture.center.clientY);
      o.x -= i.trect.x,
        o.y -= i.trect.y;
      e.gesture.srcEvent.ctrlKey;
      if (a === ConstantData.Defines.GraphTextHit) this.Graph_CloseEdit(i, n),
        this.Graph_OpenEdit(t, n, r, e)
    }
  }
}

ListManager.LM.prototypeGraph_AddSVGTextObject = function (e, t, a, r, i, n, o, s) {

  var l,
    S,
    c,
    u,
    p = e.GetSVGFrame(e.Frame);
  if (
    S = e.trect.x - p.x,
    c = e.trect.y - p.y,
    u = Utils1.DeepCopy(n),
    Utils2.OffsetRect(u, - p.x, - p.y),
    (l = t.CreateShape(ConstantData.CreateShapeType.TEXT)).SetID(ConstantData.SVGElementClass.TEXT),
    null != i &&
    l.SetUserData(i),
    l.SetPos(u.x + S, u.y + c),
    l.SetSize(u.width, u.height),
    a &&
    (a.AddElement(l), a.isText = !0, a.textElem = l),
    l.SetParagraphAlignment(o),
    l.SetVerticalAlignment(s),
    l.SetSpellCheck(e.AllowSpell()),
    r &&
    ('object' == typeof r ? l.SetRuntimeText(r) : l.SetText(r)),
    e.TextGrow === ConstantData.TextGrowBehavior.HORIZONTAL ? l.SetConstraints(
      GlobalData.optManager.theContentHeader.MaxWorkDim.x - p.width + u.width,
      u.width,
      u.height
    ) : l.SetConstraints(u.width, u.width, u.height),
    a &&
    (
      l.SetRenderingEnabled(!0),
      l.SetEditCallback(GlobalData.optManager.TextCallback, a),
      !GlobalData.docHandler.IsReadOnly() ||
      GlobalData.optManager.GetActiveLayerIndex() !== GlobalData.optManager.FindLayerForShapeID(e.BlockID)
    )
  ) {
    l.SetEventBehavior(ConstantData.EventBehavior.NORMAL);
    var d = l.DOMElement(),
      D = Hammer(d);
    SDJS_LM_GraphTextTap = SDJS_LM_GraphTextTapFactory(e),
      D.on('tap', SDJS_LM_GraphTextTap),
      l.SetCursor(ConstantData.CursorType.TEXT)
  }
  return l
}

ListManager.LM.prototypeGraphCreateText = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c = {};
  c = this.Graph_AddSVGTextObject(e, this.svgDoc, null, n, null, t, r, i);
  var u = this.CalcDefaultInitialTextStyle(a.Text);
  return c.SetFormat(u),
    o = c.GetRuntimeText(),
    c = null,
    s = {
      runtimeText: o
    },
    l = new ListManager.TextObject(s),
    (
      S = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, l)
    ) ? S.ID : null
}

ListManager.LM.prototypeMakeSquareRect = function (e) {

  var t = 0,
    a = 0;
  return e.height > e.width ? a = e.height - e.width : e.height < e.width &&
    (t = e.width - e.height),
    Utils2.InflateRect(e, - Math.round(t / 2), - Math.round(a / 2)),
    e
}

ListManager.LM.prototypeGraphGetExplodeOffsets = function (e, t) {

  var a,
    r = {
      dx: 0,
      dy: 0
    };
  return t < 0 ||
    t >= e.gpoint.length ||
    (
      a = this.GraphGetWedgeBisector(e, e.gpoint[t]),
      r.dx = Math.cos(a) * e.gpoint[t].explodeAmt,
      r.dy = Math.sin(a) * e.gpoint[t].explodeAmt
    ),
    r
}

ListManager.LM.prototypeGraphGetPieCoreArea = function (e) {

  var t,
    a,
    r = {},
    i = 0,
    n = 0,
    o = 0,
    s = 0,
    l = {
      dx: 0,
      dy: 0
    };
  for (a = 0; a < e.gpoint.length; a++) 0 != e.gpoint[a].explodeAmt &&
    e.gpoint[a].categoryid == e.pieChartCategory &&
    (
      (l = this.GraphGetExplodeOffsets(e, a)).dx > 0 ? t > o &&
        (o = t) : l.dx < i &&
      (i = l.dx),
      l.dy > 0 ? l.dy > n &&
        (n = l.dy) : l.dy < s &&
      (s = l.dy)
    );
  return (
    r = Utils2.SetRect(
      e.area.x - Math.round(i),
      e.area.y + Math.round(n),
      e.area.x + e.area.width - Math.round(o),
      e.area.y + e.area.height + Math.round(s)
    )
  ).x < e.area.x &&
    Utils2.OffsetRect(r, e.area.x - r.x, 0),
    r.y < e.area.y &&
    OffsetRect(r, 0, e.area.y - r.y),
    r = this.MakeSquareRect(r)
}

ListManager.LM.prototypeGraphGetPieCenter = function (e) {

  var t = {
    x: 0,
    y: 0
  };
  return t.x = e.x + Math.round(e.width / 2),
    t.y = e.y + Math.round(e.height / 2),
    t
}

ListManager.LM.prototypeGraphGetWedgeZeroBasedShiftFactor = function (e, t) {

  var a;
  return (a = this.TangleToRadians(t.wedgeStartTangle)) <= Math.PI ? - a : 2 * Math.PI - a
}

ListManager.LM.prototypeGraphGetWedgeZeroBasedAngle = function (e, t, a) {

  var r;
  return r = a,
    (r += this.GraphGetWedgeZeroBasedShiftFactor(e, t)) < 0 &&
    (r += 2 * Math.PI),
    r >= 2 * Math.PI &&
    (r = r % 2 * Math.PI),
    r
}

ListManager.LM.prototypeGraphWedgeUndoZeroBased = function (e, t, a) {

  var r;
  return r = a,
    (r -= this.GraphGetWedgeZeroBasedShiftFactor(e, t)) < 0 &&
    (r = 2 * Math.PI + r),
    r >= 2 * Math.PI &&
    (r %= 2 * PI),
    r
}

ListManager.LM.prototypeGraphGetWedgeBisector = function (e, t) {

  var a,
    r;
  return r = (
    a = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.wedgeStartTangle))
  ) + (
    this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.tangle)) - a
  ) / 2,
    this.GraphWedgeUndoZeroBased(e, t, r)
}

ListManager.LM.prototypeGraphGetPointApex = function (e, t) {

  var a,
    r,
    i,
    n,
    o = {
      x: 0,
      y: 0
    };
  if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE
  ) a = this.GraphGetPieCoreArea(e),
    r = this.GraphGetPieCenter(a),
    i = Math.min(a.width, a.height) / 2,
    i += t.explodeAmt,
    n = this.GraphGetWedgeBisector(e, t),
    o.x = r.x + Math.round(i * Math.cos(n)),
    o.y = r.y - Math.round(i * Math.sin(n));
  else if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) switch (e.quadrant) {
    case 0:
      o.x = t.frame.x + t.frame.width / 2,
        o.y = t.frame.y;
      break;
    case 1:
      o.x = t.frame.x + t.wdith,
        o.y = t.frame.y + t.height / 2;
      break;
    case 2:
      o.x = t.frame.x + t.frame.width / 2,
        o.y = t.frame.y + t.frame.height;
      break;
    case 3:
      o.x = t.frame.x,
        o.y = t.frame.y + t.frame.height / 2
  } else switch (e.quadrant) {
    case 0:
      o.x = t.frame.x + t.frame.width / 2,
        o.y = t.value >= 0 ? t.frame.y : t.frame.y + t.frame.height;
      break;
    case 1:
      o.x = t.value >= 0 ? t.frame.x + t.frame.width : t.frame.x,
        o.y = t.frame.y + t.frame.height / 2;
      break;
    case 2:
      o.x = t.frame.x + t.frame.width / 2,
        o.y = t.value >= 0 ? t.frame.y + t.frame.height : t.frame.y;
      break;
    case 3:
      o.x = t.value >= 0 ? t.frame.x : t.frame.x + t.frame.width,
        o.y = t.frame.y + t.frame.height / 2
  }
  return o
}

ListManager.LM.prototypeGraphGetNumSeries = function (e) {
  return e.flags & SDAX_FLIP_ROW_COL_ORIENTATION ? ListManager.SDData.GraphGetNumCols(tableId) : ListManager.SDData.GraphGetNumRows(tableId)
}

ListManager.LM.prototypeGraphGetNumCats = function (e) {
  return this.GraphGetAxesIndexes(e),
    e.flags & SDAX_FLIP_ROW_COL_ORIENTATION ? ListManager.SDData.GraphGetNumRows(tableId) : ListManager.SDData.GraphGetNumCols(tableId)
}

ListManager.LM.prototypeGraphGetWedgeTrisectors = function (e, t) {

  var a,
    r;
  return {
    trisector1: (
      a = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.wedgeStartTangle))
    ) + (
      (
        r = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.tangle))
      ) - a
    ) / 3,
    trisector2: a + (r - a) / 3 * 2
  }
}

ListManager.LM.prototypeGraphGetCircleQuadrantRadians = function (e) {

  var t = 180 * e / Math.PI;
  return t < 1800 ? this.GraphGetCircleQuadrant(Math.round(t)) : this.GraphGetCircleQuadrant(Math.round(t - 3600))
}

ListManager.LM.prototypeGraphPositionPieValueLabel = function (e, t, a, r, i, n, o, s) {

  var l,
    S;
  switch (
  l = Math.round(a * n * Math.cos(i)),
  S = Math.round(a * n * Math.sin(i)),
  this.GraphGetCircleQuadrantRadians(i)
  ) {
    case 1:
    case 2:
    case 3:
    case 4:
      r.label.frame = Utils2.SetRect(t.x + l - o / 2, t.y - S - s / 2, t.x + l + o / 2, t.y - S + s / 2)
  }
}

ListManager.LM.prototypeGraphIsValueLabelFitsInPoint = function (e, t) {

  var a,
    r,
    i = !0;
  for (
    a = Utils2.PolyFromRect(t.label.frame),
    r = 0;
    r < a.length &&
    i;
    r++
  ) e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? this.GraphIsPiePointHit(e, t, a[r]) ||
    (i = !1) : Utils2.pointInRect(t.frame, a[r]) ||
  (i = !1);
  return i
}

ListManager.LM.prototypeGraphGetPointJumpRect = function (e, t, a) {

  var r,
    i,
    n,
    o = 0,
    s = 0,
    l = new Rectangle(0, 0, 0, 0);
  if (
    t.jumpid >= 0 &&
    (s = 2 * ConstantData.Defines.SED_JumpSymDim),
    t.commentid >= 0 &&
    (
      s > 0 &&
      (s += ConstantData.Defines.SED_KnobSize / 2),
      s += ConstantData.Defines.SED_JumpSymDim
    ),
    i = Utils2.SetRect(0, 0, s, ConstantData.Defines.SED_JumpSymDim),
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR ||
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR ||
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
  ) switch (
    Utils2.CopyRect(n, t.frame),
    Utils2.InflateRect(n, - SED_Knob, - SED_Knob),
    Utils2.OffsetRect(
      i,
      n.x + n.width / 2 - (i.x + i.width - i.x) / 2,
      n.y + n.height / 2 - (i.y + i.height - i.y) / 2
    ),
    o = e.quadrant,
    t.value < 0 &&
    (o = Math.abs(o - 2)),
    o
    ) {
      case 0:
        OffsetRect(i, 0, n.height / 2 - i.height / 2);
        break;
      case 1:
        OffsetRect(i, - n.width / 2 + i.width / 2, 0);
        break;
      case 2:
        OffsetRect(i, 0, - n.height / 2 + i.height / 2);
        break;
      case 3:
        OffsetRect(i, n.width / 2 - i.width / 2, 0)
    } else if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE
  ) {
    switch (
    r = this.GraphGetPointApex(e, t),
    Utils2.OffsetRect(i, r.x - i.width / 2, r.y - i.height / 2),
    o = e.quadrant,
    t.value < 0 &&
    (o = Math.abs(o - 2)),
    o
    ) {
      case 0:
        Utils2.OffsetRect(i, 0, i.height / 2 + ConstantData.Defines.SED_JumpSymDim / 2);
        break;
      case 1:
        Utils2.OffsetRect(i, - (i.width / 2 + ConstantData.Defines.SED_JumpSymDim / 2), 0);
        break;
      case 2:
        Utils2.OffsetRect(i, 0, - i.height / 2 + ConstantData.Defines.SED_JumpSymDim / 2);
        break;
      case 3:
        Utils2.OffsetRect(i, i.width / 2 + ConstantData.Defines.SED_JumpSymDim / 2, 0)
    }
    i.x < e.area.x &&
      Utils2.OffsetRect(i, e.area.x - i.x, 0),
      i.x + i.width > e.area.x + e.area.width &&
      Utils2.OffsetRect(i, - (i.x + i.width - (e.area.x + e.area.width)), 0),
      i.y < e.area.y &&
      Utils2.OffsetRect(i, e.area.y - i.y, 0),
      i.x + i.height > e.area.x + e.area.height &&
      Utils2.OffsetRect(i, - (i.x + i.height - (e.area.x + e.area.height)), 0)
  } else if (
    e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE
  ) {
    var S,
      c,
      u,
      p,
      d,
      D,
      g,
      h;
    switch (
    g = i.width,
    h = i.height,
    S = this.GraphGetPieCoreArea(e),
    c.x = S.x + S.width / 2,
    c.y = S.y + S.height / 2,
    p = Math.min(S.width, S.height) / 2,
    this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.wedgeStartTangle)),
    u = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.tangle)) - Math.PI / 180 * 10,
    u += this.TangleToRadians(t.wedgeStartTangle),
    d = Math.round(0.75 * p * Math.cos(u)),
    D = Math.round(0.75 * p * Math.sin(u)),
    this.GraphGetCircleQuadrantRadians(u)
    ) {
      case 1:
      case 2:
      case 3:
      case 4:
        i = Utils2.SetRect(c.x + d - g / 2, c.y - D - h / 2, c.x + d + g / 2, c.y - D + h / 2)
    }
  }
  return Utils2.CopyRect(l, i),
    0 == a ? l.width = ConstantData.Defines.SED_JumpSymDim : l.x = l.x + l.width - 2 * ConstantData.Defines.SED_JumpSymDim,
    l
}

ListManager.LM.prototypeGraphIsPiePointHit = function (e, t, a) {

  return e.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? this.GraphIsPieWedgeHit(e, t, a, ListManager.Graph.HitCodes.SDG_POINT) : this.GraphIsLinearPieSectionHit(e, t, a)
}

ListManager.LM.prototypeGraphGetPointHotspots = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = - 1,
    c = {};
  for (
    this.GraphGetAxesIndexes(e),
    l = this.GraphGetCategoryList(e),
    i = 0;
    i < l.length &&
    - 1 === S;
    i++
  ) l[i].categoryid === t.categoryid &&
    (S = i);
  if (
    r.cx = t.frame.width,
    r.cy = t.frame.height,
    0 == e.quadrant ||
    2 == e.quadrant
  ) {
    if (
      o = t.value >= 0 ? 0 == e.quadrant ? 0 : 2 : 0 == e.quadrant ? 2 : 0,
      c.valueHotspot = this.GraphGetPointEdgeHotspot(e, t, ListManager.Graph.Defines.SDAX_MIN_HOTSPOT_SIZE, o),
      !c.valueHotspot
    ) return null;
    if (
      n = Math.round(
        r.cx * ListManager.Graph.Defines.SDAX_WIDEN_HOTSPOT_PERCENT
      ),
      c.widenHotspot1 = this.GraphGetPointEdgeHotspot(e, t, n, 1),
      !c.widenHotspot1
    ) return null;
    if (
      c.widenHotspot2 = this.GraphGetPointEdgeHotspot(e, t, n, 3),
      !c.widenHotspot2
    ) return null
  } else {
    if (
      o = t.value >= 0 ? 1 == e.quadrant ? 1 : 3 : 1 == e.quadrant ? 3 : 1,
      c.valueHotspot = this.GraphGetPointEdgeHotspot(e, t, ListManager.Graph.Defines.SDAX_MIN_HOTSPOT_SIZE, o),
      !c.valueHotspot
    ) return null;
    if (
      n = Math.round(
        r.cy * ListManager.Graph.Defines.SDAX_WIDEN_HOTSPOT_PERCENT
      ),
      c.widenHotspot1 = this.GraphGetPointEdgeHotspot(obj, e, t, n, 0),
      !c.widenHotspot1
    ) return null;
    if (
      c.widenHotspot2 = this.GraphGetPointEdgeHotspot(obj, e, t, n, 2),
      !c.widenHotspot2
    ) return null
  }
  if (t.jumpid >= 0) {
    if (!(a = this.GraphGetPointJumpRect(e, t, 1))) return null;
    if (
      c.hyperlinkHotspot = Utils2.PolyFromRect(a),
      !c.hyperlinkHotspot
    ) return null
  }
  if (t.commentid >= 0) {
    if (!(a = this.GraphGetPointJumpRect(e, t, 0))) return null;
    if (
      c.commentHotspot = Utils2.PolyFromRect(a),
      !c.commentHotspot
    ) return null
  }
  switch (
  s = ListManager.Graph.Defines.SDAX_SELECT_KNOBSIZE + 5,
  e.quadrant
  ) {
    case 0:
      a = Utils2.SetRect(
        l[S].maxArea.x - HALFINT(s),
        e.area.y + e.area.height - s,
        l[S].maxArea.x + HALFINT(s),
        e.area.y + e.area.height
      ),
        c.explodeHotspot1 = Utils2.PolyFromRect(a),
        a = Utils2.SetRect(
          l[S].maxArea.x + l[S].maxArea.width - s / 2,
          e.area.y + e.area.height - s,
          l[S].maxArea.x + l[S].maxArea.width + s / 2,
          e.area.y + e.area.height
        ),
        c.explodeHotspot2 = Utils2.PolyFromRect(a);
      break;
    case 1:
      a = Utils2.SetRect(
        e.area.x,
        l[S].maxArea.y - HALFINT(s),
        e.area.x + s,
        l[S].maxArea.y + HALFINT(s)
      ),
        c.explodeHotspot1 = Utils2.PolyFromRect(a),
        a = Utils2.SetRect(
          e.area.x,
          l[S].maxArea.y + l[S].maxArea.height - s / 2,
          e.area.x + s,
          l[S].maxArea.y + l[S].maxArea.height + s / 2
        ),
        c.explodeHotspot2 = Utils2.PolyFromRect(a);
      break;
    case 2:
      a = Utils2.SetRect(l[S].maxArea.x - s / 2, e.area.y, l[S].maxArea.x + s / 2, e.area.y + s),
        c.explodeHotspot1 = Utils2.PolyFromRect(a),
        a = Utils2.SetRect(
          l[S].maxArea.x + l[S].maxArea.width - s / 2,
          e.area.y,
          l[S].maxArea.x + l[S].maxArea.width + s / 2,
          e.area.y + s
        ),
        c.explodeHotspot2 = Utils2.PolyFromRect(a);
      break;
    case 3:
      a = Utils2.SetRect(
        e.area.x + e.area.width - s,
        l[S].maxArea.y - s / 2,
        e.area.x + e.width,
        l[S].maxArea.y + s / 2
      ),
        c.explodeHotspot1 = Utils2.PolyFromRect(a),
        a = Utils2.SetRect(
          e.area.x + e.area.width - s,
          l[S].maxArea.y + l[S].maxArea.height - s / 2,
          e.area.x + e.area.width,
          l[S].maxArea.y + l[S].maxArea.height + s / 2
        ),
        c.explodeHotspot2 = Utils2.PolyFromRect(a)
  }
  return c
}

ListManager.LM.prototypeGraphGetPointHitRgns = function (e, t) {

  var a = {};
  return (a = this.GraphGetPointHotspots(e, t)).pointFrame = Utils2.PolyFromRect(t.frame),
    a
}

ListManager.LM.prototypeGraphIsLinearPieSectionHit = function (e, t, a) {

  var r;
  return !(!(r = this.GraphGetPointHitRgns(e, t)) || !r.pointFrame) &&
    Utils2.PolyPtInPolygon(r.pointFrame, a)
}

ListManager.LM.prototypeGraphIsPieWedgeHit = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c = new Rectangle,
    u = {},
    p = 0,
    d = 0,
    D = 0,
    g = !1;
  if (t.categoryid != e.pieChartCategory) return !1;
  if (
    c = this.GraphGetPieCoreArea(e),
    u.x = c.x + c.width / 2,
    u.y = c.y + c.height / 2,
    d = c.width / 2,
    d += t.explodeAmt,
    s = Math.abs(a.x - u.x),
    l = Math.abs(a.y - u.y),
    (o = Math.sqrt(Math.pow(s, 2) + Math.pow(l, 2))) > d
  ) return !1;
  switch (
  p = this.GraphGetLineAngle(u, a),
  p = this.GraphGetWedgeZeroBasedAngle(e, t, p),
  i = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.wedgeStartTangle)),
  n = this.GraphGetWedgeZeroBasedAngle(e, t, this.TangleToRadians(t.tangle)),
  r
  ) {
    case ListManager.Graph.HitCodes.SDG_POINT:
      if (!(g = p >= i && p <= n) && 0 == i && 0 == n) {
        for (S = 0; S < e.gpoint.length; S++) e.gpoint[S].categoryid == e.pieChartCategory &&
          D++;
        1 == D &&
          (g = !0)
      }
      break;
    case ListManager.Graph.HitCodes.SDG_EXPLODE:
      g = p >= i &&
        p <= n &&
        (o - t.explodeAmt) / (d - t.explodeAmt) >= 1 - ListManager.Graph.Defines.SDAX_EXPLODE_HOTSPOT_PERCENT
  }
  return g
}

ListManager.LM.prototypesetCharAt = function (e, t, a) {

  return t > e.length - 1 ? e : e.substr(0, t) + a + e.substr(t + 1)
}

ListManager.LM.prototypeGraphFormatValueForEdit = function (e, t, a) {

  var r,
    i = this.GraphGetValueWithPrecision(t, a.value);
  if (0 != t.valuePrecision) for (
    r = i.length - 1;
    r &&
    !(r >= 1 && '.' == i.charAt(r - 1)) &&
    !(i.charAt(r) >= '1' && i.charAt(r) <= '9');
    r--
  ) if ('0' == i.charAt(r)) i = i.substr(0, r);
    else if ('.' == i[r]) {
      i = i.substr(0, r);
      break
    }
  return this.GraphValueAddPrefixAndSuffix(t, i)
}

ListManager.LM.prototypeRoundToPrecision = function (e, t) {

  return e.toFixed(t)
}

ListManager.LM.prototypeGraphUpdatePointValue = function (e, t, a, r, i) {

  a.value = parseFloat(r),
    t.flags = Utils2.SetFlag(
      t.flags,
      ListManager.Graph.Flags.SDAX_FLAG_DATA_MODIFIED,
      !0
    ),
    i &&
    e.datasetTableID >= 0 &&
    ListManager.SDData.GraphUpdateValue(
      e.datasetTableID,
      a.seriesid,
      a.categoryid,
      this.RoundToPrecision(a.value, t.valuePrecision)
    )
}

ListManager.LM.prototypeGraphGetLineAngle = function (e, t) {

  var a,
    r,
    i;
  return a = t.x - e.x,
    r = e.y - t.y,
    (
      i = 0 == a ? r >= 0 ? Math.PI / 2 : - Math.PI / 2 : 0 == r ? a >= 0 ? 0 : Math.PI : Math.atan2(r, a)
    ) < 0 &&
    (i += 2 * Math.PI),
    i
}

ListManager.LM.prototypeGraphGetNumericStringPrecision = function (e) {

  var t,
    a = 0;
  for (t = e.length - 1; t > 0; t--) if ('.' === e.charAt(t)) {
    a = e.length - t - 1;
    break
  }
  return a
}

ListManager.LM.prototypeGraphExtractValueDecorations = function (e, t, a) {

  var r,
    i,
    n = !1;
  (r = this.GraphGetNumericStringPrecision(a)) != t.valuePrecision &&
    (t.valuePrecision = r, n = !0),
    i = this.GraphSetPrefixAndSuffixFromString(t, a),
    (n || i) &&
    this.GraphDataUpdateTableValues(t, e.datasetTableID)
}

ListManager.LM.prototypeGraphParseValueLabel = function (e) {

  var t,
    a = {
      seriesName: null,
      value: null,
      percent: null
    },
    r = Utils1.DeepCopy(e);
  if (
    theGraph.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_PERCENT
  ) {
    var i = r.lastIndexOf('(');
    if (i >= 0) {
      for (a.percent = '', t = i + 1; t < r.length && ')' !== r.charAt(t); t++) a.percent += r.charAt(t);
      r = r.substr(0, i)
    }
  }
  if (
    theGraph.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_SERIES_NAME
  ) {
    var n = r.indexOf(':');
    if (n < 0) for (n = 0, t = r.length - 1; t >= 0; t--) {
      var o = !1;
      switch (r.charAt(t)) {
        case ' ':
        case ',':
        case theGraph.suffixChar:
          o = !0;
          break;
        default:
          isNaN(parseInt(r.charAt(t))) ||
            (o = !0)
      }
      if (!o) {
        n = t;
        break
      }
    }
    a.seriesName = r.substr(0, n),
      a.value = r.substr(n + 1)
  } else a.value = r;
  return a.percent &&
    (a.percent = a.percent.trim()),
    a.seriesName &&
    (a.seriesName = a.seriesName.trim()),
    a.value &&
    (a.value = a.value.trim()),
    a
}

ListManager.LM.prototypeGraphUpdateValueFromText = function (e, t, a) {

  var r = this.GraphGetPointIndexForTextId(t, t.selectedText);
  if (r >= 0) {
    var i = GlobalData.optManager.svgObjectLayer.GetElementByID(e.BlockID).GetElementByID(ConstantData.SVGElementClass.TEXT, a).GetText(),
      n = this.GraphParseValueLabel(i),
      o = this.GraphGetValueLabelString(t, t.gpoint[r], !1),
      s = this.GraphParseValueLabel(o);
    if (n.seriesName != s.seriesName) {
      var l = this.GraphLegend(t, t.gpoint[r]).DataID;
      this.GraphConfirmAndSetTextValue(e, t, l, t.gpoint[r].style, n.seriesName)
    }
    n.value != s.value &&
      (
        this.GraphExtractValueDecorations(e, t, n.value),
        n.value = this.GraphGetValueWithPrecision(t, n.value),
        0 !== s.value.lastIndexOf(n.value, 0) &&
        this.GraphUpdatePointValue(e, t, t.gpoint[r], this.GraphGetNumericValue(n.value), !0)
      )
  }
}

ListManager.LM.prototypeGraphGetNumericValue = function (e) {

  var t;
  return 0 == (t = Utils1.DeepCopy(e)).length ? 0 : (
    isNaN(t.substr(0, 1)) &&
    '-' != t.charAt(0) &&
    (t = t.substr(1)),
    t.indexOf(',') >= 0 &&
    (t = t.replace(',', '')),
    parseFloat(t)
  )
}

ListManager.LM.prototypeSetToDefaultBarChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !1
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultStackedBarChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !1
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultPieChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !1
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultLineChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !1
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultStackedLineChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !1
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultRelativeValueChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !1
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultAreaChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !0
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultLayeredAreaChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE,
    t.pointflags = Utils2.SetFlag(
      t.pointflags,
      ListManager.Graph.PointFlags.SDAX_FILL_LINE_AREA,
      !0
    ),
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeSetToDefaultBarChart = function (e, t) {

  t.graphtype = ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR,
    this.GraphSetGalleryOptions(e, t, 1)
}

ListManager.LM.prototypeBuildGraphStyle = function (e, t, a, r, i) {

  var n = {},
    o = null;
  switch (
  n = Utils1.DeepCopy(ListManager.Graph.GraphStyles.Default),
  a
  ) {
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR:
      o = ListManager.Graph.GraphStyles.Bar;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE:
      o = ListManager.Graph.GraphStyles.Pie;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE:
      o = r === ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_AREA ? ListManager.Graph.GraphStyles.LayeredArea : ListManager.Graph.GraphStyles.Line;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR:
      o = ListManager.Graph.GraphStyles.StackedBar;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE:
      o = r === ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_AREA ? ListManager.Graph.GraphStyles.Area : ListManager.Graph.GraphStyles.StackedLine;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE:
      o = ListManager.Graph.GraphStyles.LinearPie
  }
  for (var s in o.Default) o.Default.hasOwnProperty(s) &&
    (n[s] = o.Default[s]);
  var l = o[i];
  for (var s in l) l.hasOwnProperty(s) &&
    (n[s] = l[s]);
  return n
}

ListManager.LM.prototypeGraphSetGalleryOptions = function (e, t, a) {

  var r = this.BuildGraphStyle(e, t, t.graphtype, this.GraphGetGraphSubtype(t), a);
  this.GraphApplyGraphStyle(e, t, r)
}

ListManager.LM.prototypeGraphApplyGraphStyle = function (e, t, a) {

  var r,
    i,
    n = new Rectangle,
    o = !1,
    s = {};
  if (
    t.flags & ListManager.Graph.Flags.SDAX_FLAG_DATA_MODIFIED ||
    !a.simplifySample ||
    (
      t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ? this.GraphReduceSampleData(e, t, 3, 2) : this.GraphReduceSampleData(e, t, 2, 2)
    ),
    t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags = a.horizAxisFlags,
    t.axes[ListManager.Graph.Defines.SDAX_VERT].flags = a.vertAxisFlags,
    t.pointflags = a.pointFlags,
    a.valueLabelStyleName.length > 0
  ) {
    var l = null;
    for (r = 0; r < Resources.CurrentTheme.Styles.length; r++) if (
      Resources.CurrentTheme.Styles[r].Name === a.valueLabelStyleName
    ) {
      l = {},
        l = Utils1.DeepCopy(Resources.CurrentTheme.Styles[r]);
      break
    }
    l &&
      this.GraphSetGalleryValueLabelStyle(e, t, l)
  }
  for (r = 0; r < t.gpoint.length; r++) t.gpoint[r].explodeAmt = 0;
  if (
    a.explode &&
    !o &&
    (
      t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ? - 1 != (s = this.GraphGetAdjacentPointInfo(t, 0)).intAfterIndx &&
        (
          t.gpoint[s.intAfterIndx].explodeAmt = ListManager.Graph.Defines.SDAX_GALLERY_DEFAULT_EXPLODE_AMT,
          o = !0
        ) : t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
      (
        t.gpoint[0].explodeAmt = ListManager.Graph.Defines.SDAX_GALLERY_DEFAULT_EXPLODE_AMT,
        o = !0
      )
    ),
    o &&
    (
      Utils2.CopyRect(n, e.Frame),
      t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ? Utils2.InflateRect(
        n,
        ListManager.Graph.Defines.SDAX_GALLERY_DEFAULT_EXPLODE_AMT / 2,
        ListManager.Graph.Defines.SDAX_GALLERY_DEFAULT_EXPLODE_AMT / 2
      ) : 0 === t.quadrant ||
        2 === t.quadrant ? Utils2.InflateRect(
          n,
          0,
          ListManager.Graph.Defines.SDAX_GALLERY_DEFAULT_EXPLODE_AMT / 2
        ) : Utils2.InflateRect(
          n,
          ListManager.Graph.Defines.SDAX_GALLERY_DEFAULT_EXPLODE_AMT / 2,
          0
        ),
      e.SetSize(n.width, n.height)
    ),
    t.quadrant != a.quadrant &&
    this.GraphSetQuadrant(e, t, a.quadrant),
    t.imageValueRep != a.imageValueRep
  ) {
    if (
      a.imageValueRep !== ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE
    ) {
      for (
        i = this.GraphGetSelectedPointIndex(t),
        r = 0;
        r < t.gpoint.length;
        r++
      ) t.gpoint[r].selected = !1;
      for (
        this.GraphSetDefaultImageValueRepresenationImage(e, t, a.imageValueRep),
        r = 0;
        r < t.gpoint.length;
        r++
      ) t.gpoint[r].selected = r === i
    }
    this.GraphSetImageValueRepresentation(e, t, a.imageValueRep, - 1)
  }
  if (
    t.graphLegendType = a.legend,
    t.graphlegendTitle.lflags = Utils2.SetFlag(
      t.graphlegendTitle.lflags,
      ListManager.Graph.LayoutFlags.SDAX_LAYOUT_ALTERNATE,
      a.legendAtBottom
    ),
    a.shadow ? (
      t.areaStyle.OutsideEffect = {},
      t.areaStyle.OutsideEffect.OutsideType = FileParser.OutEffect.SDOUT_EFFECT_DROP,
      t.areaStyle.OutsideEffect.OutsideExtent_Right = 0.2,
      t.areaStyle.OutsideEffect.OutsideExtent_Top = 0.2
    ) : t.areaStyle.OutsideEffect.OutsideType = FileParser.OutEffect.SDOUT_EFFECT_NONE,
    a.gradient
  ) {
    for (r = 0; r < t.goint.length; r++) this.GraphSetDefaultGraphStyleGradient(t.gpoint[r].style.fill);
    for (r = 0; r < t.graphLegend.length; r++) this.GraphSetDefaultGraphStyleGradient(t.graphLegend[r].style.fill)
  }
}

ListManager.LM.prototypeGraphSetDefaultGraphStyleGradient = function (e) {

  e.Paint.FillType = ConstantData.FillTypes.SDFILL_GRADIENT,
    e.Paint.EndColor = ConstantData.Colors.Color_White,
    e.EffectColor = ConstantData.Colors.Color_White,
    e.Paint.GradientFlags = Utils2.SetFlag(
      e.paint.gradientflags,
      ListManager.GradientStyle.GRAD_TLBR | ListManager.GradientStyle.GRAD_REV,
      !0
    )
}

ListManager.LM.prototypeGraphSetImageValueRepresentation = function (e, t, a) {

  var r,
    i = !0,
    n = !1,
    o = this.GraphGetAxesIndexes(t),
    s = t.axes[o.category],
    l = t.axes[o.magnitude];
  switch (a) {
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE:
      this.GraphIsPieChart(t) ||
        l.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE &&
        (
          s.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE ? this.GraphSetAxes(
            e,
            t,
            l.orientation == ListManager.Graph.Defines.SDAX_HORIZ ? ListManager.Graph.AxesStyles.SDGRAPH_AXES_HORIZ_ONLY : ListManager.Graph.AxesStyles.SDGRAPH_AXES_VERT_ONLY
          ) : this.GraphSetAxes(e, t, ListManager.Graph.AxesStyles.SDGRAPH_AXES_BOTH)
        ),
        n = !1,
        i = !0;
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK:
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STACK_NOSCALE:
      t.pointflags = Utils2.SetFlag(
        t.pointflags,
        ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL,
        t.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE
      ),
        i = t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE ||
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE ||
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE,
        n = TRUE;
      break;
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SIZE:
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_SPAN:
    case ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_STRETCH:
      t.pointflags = Utils2.SetFlag(
        t.pointflags,
        ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL,
        t.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
        t.graphtype == ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE
      ),
        n = !0,
        i = t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
        t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE
  }
  for (t.imageValueRep = a, r = 0; r < t.nGraphLegend; r++) - 1 != iSeriesId &&
    t.graphLegend[r].seriesid != iSeriesId ||
    (
      n ? t.graphLegend[r].style.Fill.Paint.filltype = ConstantData.FillTypes.SDFILL_TEXTURE : t.graphLegend[r].style.Fill.Paint.filltype == ConstantData.FillTypes.SDFILL_TEXTURE &&
        (
          t.graphLegend[r].style.Fill.Paint.filltype = ConstantData.FillTypes.SDFILL_SOLID
        ),
      t.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
      t.graphtype != ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE &&
      (
        t.graphLegend[r].style.line.thickness = i ? ListManager.Graph.Defines.SDAX_DefThick : 0
      ),
      - 1 != t.graphLegend[r].imgIndx &&
      (
        t.txList.n > t.graphLegend[r].imgIndx &&
          t.txList.tx[t.graphLegend[r].imgIndx].h != NULL ? t.graphLegend[r].style.Fill.Paint.texture = t.graphLegend[r].imgIndx : t.graphLegend[r].style.Fill.Paint.texture = 0,
        t.graphLegend[r].imgIndx = - 1
      )
    );
  for (r = 0; r < t.gpoint.length; r++) - 1 != iSeriesId &&
    t.gpoint[r].seriesid != iSeriesId ||
    (
      t.gpoint[r].style.Fill.Paint.filltype = this.GraphLegend(t, t.gpoint[r]).style.Fill.Paint.filltype,
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
      t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE &&
      (
        i &&
          t.graphtype === ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ? t.gpoint[r].style.line.thickness = 2 * ListManager.Graph.Defines.SDAX_DefThick : t.gpoint[r].style.line.thickness = i ? ListManager.Graph.Defines.SDAX_DefThick : 0
      ),
      t.gpoint[r].style.Fill.Paint.texture = SDGraphLegend(t, t.gpoint[r]).style.Fill.Paint.texture
    );
  t.imageValueRep,
    ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE
}

ListManager.LM.prototypeGraphLegend = function (e, t, a) {

  var r;
  for (r = 0; r < t.graphLegend.length; r++) if (t.graphLegend[r].seriesid === a.seriesid) return t.graphLegend[r];
  return null
}

ListManager.LM.prototypeGraphSetAxes = function (e, t, a) {

  switch (a) {
    case ListManager.Graph.AxesStyles.SDGRAPH_AXES_BOTH:
      SetFlag(
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
        ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
        !1
      ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !1
        );
      break;
    case ListManager.Graph.AxesStyles.SDGRAPH_AXES_HORIZ_ONLY:
      SetFlag(
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
        ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
        !1
      ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        );
      break;
    case ListManager.Graph.AxesStyles.SDGRAPH_AXES_VERT_ONLY:
      SetFlag(
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
        ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
        !0
      ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !1
        );
      break;
    case ListManager.Graph.AxesStyles.SDGRAPH_AXES_NONE:
      SetFlag(
        t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
        ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
        !0
      ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_HORIZ].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_AXIS_LINE,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MAJOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_HIDE_TITLE,
          !0
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MAJOR,
          !1
        ),
        SetFlag(
          t.axes[ListManager.Graph.Defines.SDAX_VERT].flags,
          ListManager.Graph.AxisFlags.SDAX_SHOW_GRID_LINE_MINOR,
          !1
        )
  }
  var r = this.GraphGetAxesIndexes(t);
  t.axes[r].flags = Utils2.SetFlag(
    t.axes[r].flags,
    ListManager.Graph.AxisFlags.SDAX_HIDE_MINOR_TICKS,
    !0
  )
}

ListManager.LM.prototypeGraphSetGalleryValueLabelStyle = function (e, t, a) {

  var r;
  for (r = 0; r < t.gpoint.length; r++) t.gpoint[r].label.style = Utils1.DeepCopy(a);
  for (r = 0; r < t.graphLegend.length; r++) t.graphLegend[r].labelStyle = Utils1.DeepCopy(a)
}

ListManager.LM.prototypeGraphReduceSampleData = function (e, t, a, r) {

  var i;
  for (i = t.graphLegend.length; i > a; i--) this.GraphDelSeries(e, t, t.graphLegend[t.graphLegend - 1].seriesid, !0);
  for (; t.gpoint.length / t.graphLegend.length > r;) this.GraphDelCategory(e, t, t.gpoint[t.gpoint.length - 1].categoryid, !0)
}

ListManager.LM.prototypeGraphDelCategory = function (e, t, a, r) {

  var i,
    n = 0,
    o = - 1,
    s = this.GraphGetAxesIndexes(t);
  for (i = t.gpoint.length - 1; i >= 0; i--) if (
    t.gpoint[i].categoryid === a &&
    0 != (n = this.GraphDeletePointAtIndex(e, t, i))
  ) return;
  for (i = 0; i < t.axes[s.category].labels.length && - 1 == o; i++) t.axes[s.category].labels[i].categoryid == a &&
    (o = i);
  return - 1 != o &&
    (
      this.GraphDeleteDataBlock(t.axes[s.category].labels[o].DataID),
      t.axes[s.category].labels.splice(o, 1)
    ),
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE &&
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE ||
    t.pieChartCategory === a &&
    t.gpoint.length > 0 &&
    (t.pieChartCategory = t.gpoint[0].categoryid),
    n
}

ListManager.LM.prototypeGraphDelSeries = function (e, t, a, r) {

  var i,
    n = 0;
  for (i = t.gpoint.length - 1; i >= 0; i--) if (
    t.gpoint[i].seriesid == a &&
    0 != (n = this.GraphDeletePointAtIndex(e, t, i))
  ) return - 1;
  for (i = 0; i < t.graphLegend.length; i++) if (
    t.graphLegend[i].seriesid == a &&
    0 != (n = this.GraphDeleteLegendAtIndex(e, t, i))
  ) return - 1;
  return n
}

ListManager.LM.prototypeGraphDeleteDataBlock = function (e) {

  var t = GlobalData.objectStore.GetObject(e);
  t &&
    t.Delete()
}

ListManager.LM.prototypeGraphDeletePointAtIndex = function (e, t, a) {

  t.gpoint[a].label.DataID >= 0 &&
    this.GraphDeleteDataBlock(t.gpoint[a].label.DataID),
    t.gpoint[a].commentid >= 0 &&
    this.GraphDeleteDataBlock(t.gpoint[a].label.commentid),
    t.gpoint[a].commentid >= 0 &&
    this.GraphDeleteDataBlock(t.gpoint[a].label.commentid),
    t.gpoint.splice(a, 1)
}

ListManager.LM.prototypeGraphDeleteLegendAtIndex = function (e, t, a) {

  t.graphLegend[a].DataID >= 0 &&
    this.GraphDeleteDataBlock(t.graphLegend[a].DataID),
    t.graphLegend.splice(targetLegenedIndex, 1)
}

ListManager.LM.prototypeGraphSetPieTarget = function (e, t, a) {

  var r = this.GraphGetCategoryList(t);
  a < r.length &&
    (t.pieChartCategory = r[a].categoryid)
}

ListManager.LM.prototypeGraphSwapSeriesAndCategories = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l = {
      id: - 1,
      textid: - 1,
      style: {
      }
    },
    S = [],
    c = function (e, t, a) {
      this.id = e,
        this.textid = t,
        this.style = Utils1.DeepCopy(a)
    };
  if (
    (i = this.GraphGetCategoryList(t)).length > ListManager.Graph.Defines.SDAX_MAX_SERIES
  ) return - 1;
  for (s = 0; s < t.graphLegend.length; s++) l = new c(
    t.graphLegend[s].seriesid,
    t.graphLegend[s].DataID,
    t.graphLegend[s].style
  ),
    S.push(l);
  var u = this.GraphGetAxesIndexes(t),
    p = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  if (
    a = t.axes[u.category],
    this.GraphDeleteSummaryLabels(t, a),
    a.labels.length > 0
  ) {
    for (t.graphLegend = [], s = 0; s < a.labels.length; s++) t.graphLegend.push(new ListManager.Graph.LegendEntry),
      t.graphLegend[t.graphLegend.length - 1].DataID = a.labels[s].DataID,
      this.GraphFormatLegendEntry(
        e,
        t,
        t.graphLegend.length - 1,
        p.graphDef.pointStyle,
        a.labels[s].style,
        a.labels[s].categoryid
      );
    for (a.labels = [], s = 0; s < S.length; s++) a.labels.push(new ListManager.Graph.Axis.Label),
      a.labels[a.labels.length - 1].categoryid = S[s].id,
      a.labels[a.labels.length - 1].DataID = S[s].textid,
      this.GraphEnsureTextContrast(
        e,
        t,
        a.labels[a.labels.length - 1].DataID,
        t.areaStyle.Fill.Paint
      )
  } else for (t.graphLegend = [], s = 0; s < i.length; s++) t.graphLegend.push(new ListManager.Graph.LegendEntry),
    this.GraphFormatLegendEntry(
      e,
      t,
      t.graphLegend.length - 1,
      p.graphDef.pointStyle,
      p.graphDef.pointLabelStyle,
      i[s].categoryid
    ),
    n = ListManager.Graph.Defines.SDAX_DEFAULT_SERIES_NAME + ' ' + s + 1,
    t.graphLegend[t.graphLegend.length - 1].DataID = this.GraphCreateText(
      e,
      t.graphLegend[s].textFrame,
      t.graphLegend[s].style,
      ConstantData.TextAlign.LEFT,
      'middle',
      n
    );
  for (s = 0; s < t.gpoint.length; s++) o = (r = t.gpoint[s]).categoryid,
    r.categoryid = r.seriesid,
    r.seriesid = o,
    r.style = Utils1.DeepCopy(this.GraphLegend(e, t, r).style),
    this.GraphShouldShowValueLabel(t, r) &&
    (
      t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL ||
        t.pointflags & ListManager.Graph.PointFlags.SDAX_VALUELABELS_EXTERNAL_LEADERS ? this.GraphEnsureTextContrast(
          e,
          t,
          r.label.DataID,
          r.label.frame,
          r.style,
          t.areaStyle.Fill.Paint
        ) : this.GraphEnsureTextContrast(e, t, r.label.DataID, r.label.frame, r.style, r.style.Fill.Paint)
    );
  return this.GraphIsPieChart(t) &&
    a.labels.length > 0 &&
    (t.pieChartCategory = a.labels[0].categoryid),
    t.flags = Utils2.SetFlag(
      t.flags,
      ListManager.Graph.Flags.SDAX_FLIP_ROW_COL_ORIENTATION,
      !(
        0 != (
          t.flags & ListManager.Graph.Flags.SDAX_FLIP_ROW_COL_ORIENTATION
        )
      )
    ),
    0
}

ListManager.LM.prototypeGraphFormatLegendEntry = function (e, t, a, r, i, n) {

  var o,
    s,
    l = t.graphLegend[a];
  l.seriesid = n,
    o = Utils1.DeepCopy(r),
    l.labelStyle = Utils1.DeepCopy(i),
    s = Utils1.DeepCopy(r.Line);
  var S = {
    styleIndx: - 1,
    lighten: !1,
    darken: !1
  };
  (S = this.GraphGetSeriesStyleInfoByChartType(t, a)) ||
    (S = this.GraphGetSeriesStyleInfo(t, a)),
    S ||
    (S = {
      styleIndx: 6,
      bLighten: !1,
      bDarken: !1
    }),
    this.GraphIsUnchangedStyle(Resources.FindStyle(r.name), r) ||
      '' == r.name ? o = Resources.CurrentTheme.Styles[S.styleIndx] : (
      o.Name = Resources.CurrentTheme.Styles[S.styleIndx].Name,
      o.Fill.Paint.Color = Resources.CurrentTheme.Styles[S.styleIndx].Fill.Paint.Color,
      o.Fill.Paint.EndColor = Resources.CurrentTheme.Styles[S.styleIndx].Fill.Paint.EndColor
    ),
    this.GraphSetPointStyle(
      e,
      t,
      o,
      s,
      S.lighten,
      S.darken,
      l.style,
      l.labelStyle,
      - 1,
      !1,
      l.textFrame
    ),
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE &&
    t.graphtype !== ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE ||
    (
      l.style.Line.Paint.Color = l.style.Fill.Paint.Color,
      0 === l.style.Line.Thickness &&
      (l.style.Line.Thickness = 3)
    )
}

ListManager.LM.prototypeGraphSetPointStyle = function (e, t, a, r, i, n, o, s, l, S, c) {

  var u,
    p,
    d,
    D,
    g;
  return p = o.Fill.Paint.FillType,
    u = o.Fill.Paint.Texture,
    this.GraphSetStyle(e, t, o, t.areaStyle.outside, l, c, S, a, r),
    i &&
    (
      o.Fill.Paint.Color = this.GraphLighterColor(o.Fill.Paint.Color)
    ),
    n &&
    (o.Fill.Paint.Color = this.GraphDarkerColor(o.Fill.Paint.Color)),
    d = s.Text.Paint.Color,
    D = s.Fill.Paint.FillType,
    g = s.Line.LinePattern,
    this.GraphSetStyle(e, t, s, t.areaStyle.outside, l, c, !0, a, r),
    D === ConstantData.FillTypes.SDFILL_TRANSPARENT &&
    (
      s.Fill.Paint.FillType = D,
      s.Text.Paint.Color = d,
      s.Line.LinePattern = g
    ),
    t.imageValueRep != ListManager.Graph.ImageRepresentation.SDAX_IMAGEVALUEREP_NONE &&
    p === ConstantData.FillTypes.SDFILL_TEXTURE &&
    (o.Fill.Paint.FillType = p, o.Fill.Paint.Texture = u),
    0
}

ListManager.LM.prototypeConstrainIntValue = function (e, t, a) {

  return e < t &&
    (e = t),
    e > a &&
    (e = a),
    e
}

ListManager.LM.prototypeGraphAdjustColor = function (e, t) {

  var a = !1;
  '#' === e.substr(0, 1) &&
    (e = e.substr(1), a = !0);
  var r = parseInt(e, 16),
    i = (r >> 16) + t;
  i = this.ConstrainIntValue(i, 0, 255);
  var n = (r >> 8 & 255) + t;
  n = this.ConstrainIntValue(n, 0, 255);
  var o = (255 & r) + t,
    s = '';
  return a &&
    (s = '#'),
    s += ((o = this.ConstrainIntValue(o, 0, 255)) | n << 8 | i << 16).toString(16)
}

ListManager.LM.prototypeGraphLighterColor = function (e) {

  return this.GraphAdjustColor(e, 20)
}

ListManager.LM.prototypeGraphDarkerColor = function (e) {

  return this.GraphAdjustColor(e, - 20)
}

ListManager.LM.prototypeGraphGetSeriesStyleInfo = function (e, t) {

  for (var a = - 1, r = !1, i = !1; - 1 == a && t >= 0;) switch (t) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      a = 12 + t;
      break;
    default:
      t -= 6,
        r ? i ? r = i = !1 : i = !0 : r = !0
  }
  return {
    styleIndx: a,
    lighten: r,
    darken: i
  }
}

ListManager.LM.prototypeGraphGetSeriesStyleInfoByChartType = function (e, t) {

  var a,
    r,
    i,
    n,
    o = - 1,
    s = !1,
    l = !1;
  for (
    a = this.GraphGetStylePrefix(e.graphtype, this.GraphGetGraphSubtype(e)),
    (i = t % 6) + 1,
    r = 0;
    r < Resources.CurrentTheme.Styles.length;
    r++
  ) if (
      0 === Resources.CurrentTheme.Styles[r].Name.toUpperCase().indexOf(a.toUpperCase())
    ) {
      o = i + r < Resources.CurrentTheme.Styles.length ? i + r : r;
      break
    }
  return o < 0 ? null : (
    (n = t / 6) > 0 &&
    (n % 2 == 0 ? s = !0 : l = !0),
    {
      styleIndx: o,
      lighten: s,
      darken: l
    }
  )
}

ListManager.LM.prototypeGraphGetStylePrefix = function (e, t) {

  var a = null;
  switch (e) {
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_BAR:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDBAR:
      a = ListManager.Graph.StylePrefix.SDGRAPH_STYLE_PREFIX_BAR;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINEARPIE:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_PIE:
      a = ListManager.Graph.StylePrefix.SDGRAPH_STYLE_PREFIX_PIEWEDGE;
      break;
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_LINE:
    case ListManager.Graph.GraphType.SDGRAPH_TYPE_STACKEDLINE:
      a = t === ListManager.Graph.GraphSubType.SDGRAPH_SUBTYPE_AREA ? ListManager.Graph.StylePrefix.SDGRAPH_STYLE_PREFIX_AREA : ListManager.Graph.StylePrefix.SDGRAPH_STYLE_PREFIX_LINE;
      break;
    default:
      return null
  }
  return a
}

ListManager.LM.prototypeGraphSetStyle = function (e, t, a, r, i, n, o, s, l) {

  var S = a.Fill.Paint.Opacity,
    c = a.Fill.Paint.EndOpacity,
    u = a.Line.Paint.Opacity,
    p = a.Line.Paint.EndOpacity;
  a.Text.Paint.Opacity,
    a.Text.Paint.EndOpacity;
  return a.Name = s.Name,
    a.Fill = Utils1.DeepCopy(s.Fill),
    a.Line = Utils1.DeepCopy(l),
    o &&
    (
      a.Line.Paint.Opacity = u,
      a.Line.Paint.EndOpacity = p,
      a.Fill.Paint.Opacity = S,
      a.Fill.Paint.EndOpacity = c
    ),
    a.Text = Utils1.DeepCopy(s.Text),
    a.Text.Paint.Opacity = S,
    a.Text.Paint.EndOpacity = c,
    Utils1.DeepCopy(s.Outside),
    0
}

ListManager.LM.prototypeGraphIsUnchangedStyle = function (e, t) {

  return !!e &&
    (
      e.Fill.paint.FillType == t.Fill.Paint.FillType &&
      (
        e.Fill.Paint.GradientFlags == t.Fill.Paint.GradientFlags &&
        (
          e.Fill.Paint.FillType == t.Fill.Paint.FillType &&
          (
            e.Fill.Paint.Texture == t.Fill.Paint.Texture &&
            (
              e.Fill.Effect == t.Fill.Effect &&
              (e.Fill.Wparam == t.Fill.Wparam && e.Fill.Hatch == t.Fill.Hatch)
            )
          )
        )
      )
    )
}

ListManager.LM.prototypeGraphSetQuadrant = function (e, t, a) {

  var r,
    i,
    n,
    o = new Point,
    s = !1,
    l = this.GraphGetAxesIndexes(t);
  switch (t.quadrant) {
    case 0:
    case 2:
      s = 1 == a ||
        3 == a;
      break;
    case 1:
    case 3:
      s = 0 == a ||
        2 == a
  }
  if (s) {
    for (i = 0; i < t.axes[l.magnitude].labels.length; i++) this.GraphDeleteDataBlock(t.axes[l.magnitude].labels[i].DataID),
      t.axes[l.magnitude].labels[i].DataID = - 1;
    t.axes[l.magnitude].labels = [],
      this.GraphDeleteSummaryLabels(t, t.axes[l.category]),
      r = t.axes[ListManager.Graph.Defines.SDAX_HORIZ],
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ] = t.axes[ListManager.Graph.Defines.SDAX_VERT],
      t.axes[ListManager.Graph.Defines.SDAX_VERT] = Utils1.DeepCopy(r),
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].orientation = ListManager.Graph.Defines.SDAX_HORIZ,
      t.axes[ListManager.Graph.Defines.SDAX_VERT].orientation = ListManager.Graph.Defines.SDAX_VERT,
      n = t.axes[ListManager.Graph.Defines.SDAX_VERT].title.tangle,
      t.axes[ListManager.Graph.Defines.SDAX_VERT].title.tangle = t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.tangle,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.tangle = n,
      o = t.axes[ListManager.Graph.Defines.SDAX_VERT].title.center,
      t.axes[ListManager.Graph.Defines.SDAX_VERT].title.center = t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.center,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.center = o
  }
  if (
    t.areaStyle.OutsideEffect.OutsideType != FileParser.OutEffect.SDOUT_EFFECT_NONE
  ) {
    var S = [];
    S.push(
      new Point(
        t.areaStyle.OutsideEffect.OutsideExtent_Left,
        t.areaStyle.OutsideEffect.OutsideExtent_Top
      )
    ),
      S.push(
        new Point(
          t.areaStyle.OutsideEffect.OutsideExtent_Right,
          t.areaStyle.OutsideEffect.OutsideExtent_Top
        )
      ),
      S.push(
        new Point(
          t.areaStyle.OutsideEffect.OutsideExtent_Right,
          t.areaStyle.OutsideEffect.OutsideExtent_Bottom
        )
      ),
      S.push(
        new Point(
          t.areaStyle.OutsideEffect.OutsideExtent_Left,
          t.areaStyle.OutsideEffect.OutsideExtent_Bottom
        )
      );
    var c = (t.quadrant - a) * (Math.PI / 2),
      u = new Point(S[0].x + (S[1].x - S[0].x) / 2, S[0].y + (S[2].y - S[0].x) / 2);
    Utils3.RotatePointsAboutPoint(u, c, S);
    var p = {};
    Utils2.GetPolyRect(p, S),
      t.areaStyle.OutsideEffect.OutsideExtent_Left = p.x,
      t.areaStyle.OutsideEffect.OutsideExtent_Top = p.y,
      t.areaStyle.OutsideEffect.OutsideExtent_Right = p.x + p.width,
      t.areaStyle.OutsideEffect.OutsideExtent_Bottom = recty + p.height
  }
  t.quadrant = a;
  var d = this.GraphGetTextMaxDim(
    t,
    t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.DataID
  );
  return d &&
    this.GraphTextGrow(
      e,
      t,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.DataID,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.style,
      d,
      !0,
      ConstantData.TextAlign.CENTER
    ),
    (
      d = this.GraphGetTextMaxDim(
        t,
        t.axes[ListManager.Graph.Defines.SDAX_VERT].title.DataID
      )
    ) &&
    this.GraphTextGrow(
      e,
      t,
      t.axes[ListManager.Graph.Defines.SDAX_VERT].title.DataID,
      t.axes[ListManager.Graph.Defines.SDAX_HORIZ].title.style,
      d,
      !0,
      ConstantData.TextAlign.CENTER
    ),
    0
}

ListManager.LM.prototypeGraphGenerateUniqueCategoryName = function (e, t, a) {

  var r,
    i,
    n,
    o,
    s = 0;
  s = a.labels.length;
  do {
    for (
      o = !0,
      i = ListManager.Graph.Defines.SDAX_DEFAULT_CATEGORY_LABEL + ' ' + (++s).toString(),
      n = 0;
      n < a.labels.length &&
      o;
      n++
    ) if (this.GraphIsCategoryLabel(a.labels[n])) {
      if (!(r = this.GraphGetTextValue(a.labels[n].DataID))) break;
      r.toUpperCase() == i.toUpperCase() &&
        (o = !1)
    }
  } while (!o);
  return o ? i : null
}

ListManager.LM.prototypeGraphAddCategoryLabel = function (e, t, a, r, i) {

  var n,
    o = new ListManager.Graph.Axis.Label;
  switch (o.categoryid = i, t.quadrant) {
    case 0:
    case 2:
      n = ConstantData.TextAlign.CENTER;
      break;
    case 1:
      n = ConstantData.TextAlign.RIGHT;
      break;
    case 3:
      n = ConstantData.TextAlign.LEFT
  }
  o.DataID = this.GraphCreateText(e, e.Frame, a.style, n, 'middle', r),
    a.labels.push(o)
}

ListManager.LM.prototypeGraphAddCategory = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l;
  if (
    (i = this.GraphGetCategoryList(t)).length >= ListManager.Graph.Defines.SDAX_MAX_CATEGORIES
  ) return - 1;
  if (!(l = this.GraphGenerateUniqueCategoryName(e, t, a, l))) return - 1;
  for (o = 0; o < ListManager.Graph.Defines.SDAX_MAX_CATEGORIES; o++) {
    for (s = !0, n = 0; n < i.length; n++) i[n].categoryid === o &&
      (s = !1);
    if (s) break
  }
  return s ? (
    a.flags & ListManager.Graph.AxisFlags.SDAX_HIDE_LABELS ||
    this.GraphAddCategoryLabel(e, t, a, l, o),
    o
  ) : - 1
}

ListManager.LM.prototypeGraphAddCategoryCmd = function (e, t, a) {

  var r,
    i,
    n,
    o,
    s = 0,
    l = '';
  if (
    o = this.GraphGetAxesIndexes(t),
    (i = this.GraphAddCategory(e, t, t.axes[o.category], !0)) < 0
  ) return - 1;
  if (
    0 === t.graphLegend.length &&
    (
      l = ListManager.Graph.Defines.SDAX_DEFAULT_SERIES_NAME + '1',
      n = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
      this.GraphAddLegendEntry(
        e,
        t,
        l,
        n.graphDef.legendStyle,
        n.graphDef.pointLabelStyle,
        null,
        !0
      ) < 0
    )
  ) return - 1;
  for (r = 0; r < t.graphLegend.length; r++) if (
    0 != (
      s = this.GraphAddPoint(
        e,
        t,
        t.graphLegend[r].style,
        t.graphLegend[r].labelStyle,
        t.graphLegend[r].seriesid,
        i,
        t.axes[o.magnitude].major,
        !0
      )
    )
  ) return s;
  return t.flags = Utils2.SetFlag(
    t.flags,
    ListManager.Graph.Flags.SDAX_FLAG_DATA_MODIFIED,
    !0
  ),
    0
}

ListManager.LM.prototypeGraphAddSeriesCmd = function (e, t, a) {

  return this.GraphAddSeries(e, t, a) < 0 ? - 1 : (
    t.flags = Utils2.SetFlag(
      t.flags,
      ListManager.Graph.Flags.SDAX_FLAG_DATA_MODIFIED,
      !0
    ),
    0
  )
}

ListManager.LM.prototypeGraphAddSeries = function (e, t, a) {

  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = [],
    p = - 1;
  if (
    t.graphLegend.length >= ListManager.Graph.Defines.SDAX_MAX_SERIES
  ) return - 1;
  for (
    c = this.GraphGetAxesIndexes(t),
    r = t.axes[c.category],
    i = t.axes[c.magnitude],
    S = this.GraphGenerateUniqueSeriesName(e, t),
    n = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    l = this.GraphAddLegendEntry(
      e,
      t,
      S,
      n.graphDef.legendStyle,
      n.graphDef.pointLabelStyle,
      null,
      !0
    ),
    0 === (u = this.GraphGetCategoryList(t)).length &&
    (
      s = this.GraphAddCategory(e, t, r, !0),
      cat = new ListManager.Graph.Category,
      cat.cSeries = 0,
      cat.categoryid = s,
      cat.cumValue = 0,
      u.push(cat)
    ),
    o = 0;
    o < t.graphLegend.length &&
    - 1 == p;
    o++
  ) t.graphLegend[o].seriesid === l &&
    (p = o);
  for (o = 0; o < u.length; o++) this.GraphAddPoint(
    e,
    t,
    t.graphLegend[p].style,
    t.graphLegend[p].labelStyle,
    l,
    u[o].categoryid,
    i.major,
    !0
  );
  return l
}

ListManager.LM.prototypeGraphGenerateUniqueSeriesName = function (e, t) {

  var a,
    r,
    i,
    n = '',
    o = !0;
  i = t.graphLegend.length + 1;
  do {
    for (
      o = !0,
      n = ListManager.Graph.Defines.SDAX_DEFAULT_SERIES_NAME + ' ' + i++,
      r = 0;
      r < t.graphLegend.length &&
      o;
      r++
    ) (a = this.GraphGetTextValue(t.graphLegend[r].DataID)) &&
      a.toUpperCase() === n.toUpperCase() &&
      (o = !1)
  } while (!o);
  return o ? n : null
}

ListManager.LM.prototypeGraphAddLegendEntry = function (e, t, a, r, i, n, o) {

  var s,
    l,
    S,
    c = - 1;
  if (
    s = new ListManager.Graph.LegendEntry,
    t.graphLegend.push(s),
    S = t.graphLegend.length - 1,
    o
  ) {
    for (l = 0; l < t.graphLegend.length; l++) t.graphLegend[l].seriesid > c &&
      (c = t.graphLegend[l].seriesid);
    t.graphLegend[S].seriesid = c + 1
  }
  return n ? (
    t.graphLegend[S] = Utils1.DeepCopy(n),
    t.graphLegend[S].seriesid = c + 1
  ) : this.GraphFormatLegendEntry(e, t, S, r, i, s.seriesid),
    t.graphLegend[S].DataID = this.GraphCreateText(
      e,
      e.Frame,
      t.graphLegend[S].style,
      ConstantData.TextAlign.LEFT,
      'middle',
      a
    ),
    t.graphLegend[S].seriesid
}

ListManager.LM.prototypeGraphAddPoint = function (e, t, a, r, i, n, o, s) {

  var l,
    S,
    c,
    u,
    p,
    d,
    D = !1;
  l = new ListManager.Graph.Point;
  var g = this.GraphGetAxesIndexes(t);
  for (S = t.axes[g.category], c = 0; c < t.gpoint.length; c++) if (t.gpoint[c].seriesid === i) {
    for (p = 0, d = 0, u = 0; u < S.labels.length; u++) if (this.GraphIsCategoryLabel(S.labels[u])) {
      if (S.labels[u].categoryid === n) {
        p = d;
        break
      }
      d++
    }
    t.gpoint.splice(c + p, 0, l),
      D = !0;
    break
  }
  if (
    D ||
    t.gpoint.push(l),
    l.categoryid = n,
    l.seriesid = i,
    l.value = o,
    l.style = Utils1.DeepCopy(a),
    l.label.style = Utils1.DeepCopy(r),
    l.imageFill.imageid = - 1,
    0 === t.graphLegend.length
  ) l.style.Line.Paint.Color = ConstantData.Colors.Color_Black,
    l.style.Line.Thickness = 1,
    l.style.Fill.Paint.Color = ListManager.Graph.GraphDefaultColors.GraphDefaultColors[i % ListManager.Graph.GraphDefaultColors.length],
    l.style.Line.Paint.Color = ListManager.Graph.GraphDefaultColors.GraphDefaultColors[i % ListManager.Graph.GraphDefaultColors.length],
    l.label.style.Line.LinePattern = Resources.Windows_LinePatterns.SEP_None,
    l.label.style.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT;
  else for (c = 0; c < t.graphLegend.length; c++) if (t.graphLegend[c].seriesid == i) {
    l.style = Utils1.DeepCopy(t.graphLegend[c].style),
      l.label.style = Utils1.DeepCopy(t.graphLegend[c].labelStyle);
    break
  }
  return l.label.DataID = this.GraphCreateText(
    e,
    e.Frame,
    l.label.style,
    ConstantData.TextAlign.LEFT,
    'middle',
    ''
  ),
    0
}

ListManager.LM.prototypeGraphAddTable = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o = new ListManager.Rect;
  a = this.GetObjectPtr(e, !0),
    o = Utils2.CopyRect(a.frame),
    Utils2.OffsetRect(o, 0, o.height + 5);
  var s = {
    Frame: o,
    TextGrow: ConstantData.TextGrowBehavior.HORIZONTAL,
    TextFlags: ConstantData.TextFlags.SED_TF_OneClick
  };
  for (
    t = new ListManager.Rect(s),
    GlobalData.optManager.AddNewObject(t, !0, !0),
    tableShape.InsertNewTable(
      ListManager.SDData.GraphGetNumRows(graph.datasetTableID),
      ListManager.SDData.GraphGetNumCols(graph.datasetTableID),
      !0
    ),
    GlobalData.optManager.GetTable(t),
    r = GlobalData.optManager.GetGraph(a),
    i = this.GraphGetCategoryList(r),
    GlobalData.optManager.Table_InsertRows(!1, tableShape.BlockID, !1),
    n = 0;
    n < ListManager.SDData.GraphGetNumRows(graph.datasetTableID);
    n++
  ) GlobalData.optManager.Table_InsertRows(!1, tableShape.BlockID, !1);
  for (
    GlobalData.optManager.Table_InsertColumns(!1, tableShape.BlockID, !1),
    n = 0;
    n < ListManager.SDData.GraphGetNumCols(graph.datasetTableID);
    n++
  ) GlobalData.optManager.Table_InsertColumns(!1, tableShape.BlockID, !1);
  for (n = 1; n < table.cols.length; n++) GlobalData.optManager.Table_SetCell(0, n, i[n - 1].name);
  for (
    n = 0;
    n < ListManager.SDData.GraphGetNumRows(graph.datasetTableID);
    n++
  ) for (
      n = 0;
      n < ListManager.SDData.GraphGetNumCols(graph.datasetTableID);
      n++
    ) GlobalData.optManager.Table_InsertColumns(!1, tableShape.BlockID, !1)
},
  ListManager.Graph.prototype.RenderRect = function (e, t, a, r, i) {

    var n = i ||
      GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.RECT);
    return n.SetSize(e.width, e.height),
      n.SetPos(e.x, e.y),
      this.SetElementStyle(n, t, a, r),
      n
  },
  ListManager.Graph.prototype.RenderLine = function (e, t, a, r, i) {

    var n = i ||
      GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.LINE);
    return n.SetPoints(e.x, e.y, t.x, t.y),
      this.SetElementStyle(n, null, a, r),
      n
  },
  ListManager.Graph.prototype.RenderPolyLine = function (e, t, a, r) {

    var i = r ||
      GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.POLYLINE);
    return i.SetPoints(e),
      this.SetElementStyle(i, null, t, a),
      i
  },
  ListManager.Graph.prototype.RenderArea = function (e, t, a, r, i) {

    var n = i ||
      GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.POLYGON);
    return n.SetPoints(e),
      this.SetElementStyle(n, t, a, r),
      n
  },
  ListManager.Graph.prototype.RenderPolyLineList = function (e, t, a, r) {

    var i,
      n,
      o,
      s = r ||
        GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.POLYPOLYLINE);
    for (o = e.length, s.Clear(), i = 0; i < o; i++) n = e[i],
      s.AddPolyLine(n, !1, !1);
    return s.BuildPath(),
      this.SetElementStyle(s, null, t, a),
      s
  },
  ListManager.Graph.prototype.RenderPieWedge = function (e, t, a, r, i, n, o, s) {

    var l,
      S,
      c,
      u,
      p,
      d = {},
      D = {},
      g = {},
      h = {};
    return S = (
      l = s ||
      GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH)
    ).PathCreator(),
      d.x = e.x,
      d.y = e.y - t,
      d = RotatePoint(e, d, a),
      D.x = e.x,
      D.y = e.y - t,
      D = RotatePoint(e, D, r),
      (u = r - a) < 0 &&
      (u += 360),
      p = u > 180,
      h.x = a < 270 &&
        a + u > 270 ||
        a > 270 &&
        r > 270 &&
        r < a ? e.x - t : Math.min(e.x, d.x, D.x),
      h.y = a < r ? e.y - t : Math.min(e.y, d.y, D.y),
      g.x = a < 90 &&
        a + u > 90 ||
        a > 90 &&
        r > 90 &&
        r < a ? e.x + t : Math.max(e.x, d.x, D.x),
      g.y = a < 180 &&
        a + u > 180 ||
        a > 180 &&
        r > 180 &&
        r < a ? e.y + t : Math.max(e.y, d.y, D.y),
      h.width = g.x - h.x,
      h.height = g.y - h.y,
      S.BeginPath(),
      S.MoveTo(e.x, e.y),
      S.LineTo(d.x, d.y),
      S.ArcTo(D.x, D.y, t, t, 0, !0, p, !1),
      S.ClosePath(),
      c = S.ToString(),
      l.SetPath(c, h),
      this.SetElementStyle(l, i, n, o),
      l
  },
  ListManager.Graph.prototype.SetElementStyle = function (e, t, a, r) {

    var i,
      n,
      o;
    t ? 'object' == typeof t &&
      void 0 !== t.FillType ? t.FillType == ConstantData.FillTypes.SDFILL_GRADIENT ? (
        o = new ListManager.BaseDrawingObject,
        e.SetGradientFill(
          o.CreateGradientRecord(t.GradientFlags, t.Color, t.Opacity, t.EndColor, t.EndOpacity)
        )
      ) : t.FillType == ConstantData.FillTypes.SDFILL_RICHGRADIENT ? (
        o = new ListManager.BaseDrawingObject,
        e.SetGradientFill(o.CreateRichGradientRecord(t.GradientFlags))
      ) : t.FillType == ConstantData.FillTypes.SDFILL_TEXTURE ? (
        i = {
          url: '',
          scale: 1,
          alignment: t.TextureScale.AlignmentScalar
        },
        n = t.Texture,
        GlobalData.optManager.TextureList.Textures[n] &&
        (
          i.dim = GlobalData.optManager.TextureList.Textures[n].dim,
          i.url = GlobalData.optManager.TextureList.Textures[n].ImageURL,
          i.scale = GlobalData.optManager.CalcTextureScale(t.TextureScale, i.dim.x),
          t.TextureScale.Scale = i.scale,
          i.url ||
          (
            i.url = Constants.URL_Textures + GlobalData.optManager.TextureList.Textures[n].filename
          ),
          e.SetTextureFill(i),
          e.SetFillOpacity(t.Opacity)
        )
      ) : t.FillType == ConstantData.FillTypes.SDFILL_TRANSPARENT ? e.SetFillColor('none') : (e.SetFillColor(t.Color), e.SetFillOpacity(t.Opacity)) : 'string' == typeof t &&
        '#' === t[0] ? (e.SetFillColor(t), e.SetFillOpacity(1)) : e.SetFillColor('none') : e.SetFillColor('none'),
      a &&
        r ? 'object' == typeof a &&
          void 0 !== a.FillType ? (
        a.FillType == ConstantData.FillTypes.SDFILL_GRADIENT ? (
          o = new ListManager.BaseDrawingObject,
          e.SetGradientStroke(
            o.CreateGradientRecord(a.GradientFlags, a.Color, a.Opacity, a.EndColor, a.EndOpacity)
          )
        ) : a.FillType == ConstantData.FillTypes.SDFILL_RICHGRADIENT ? (
          o = new ListManager.BaseDrawingObject,
          e.SetGradientStroke(o.CreateRichGradientRecord(a.GradientFlags))
        ) : a.FillType == ConstantData.FillTypes.SDFILL_TEXTURE ? (
          i = {
            url: '',
            scale: a.TextureScale.Scale,
            alignment: a.TextureScale.AlignmentScalar
          },
          n = a.Texture,
          i.dim = GlobalData.optManager.TextureList.Textures[n].dim,
          i.url = GlobalData.optManager.TextureList.Textures[n].ImageURL,
          i.url ||
          (
            i.url = Constants.URL_Textures + GlobalData.optManager.TextureList.Textures[n].filename
          ),
          e.SetTextureStroke(i),
          e.SetStrokeOpacity(a.Opacity)
        ) : (e.SetStrokeColor(a.Color), e.SetStrokeOpacity(a.Opacity)),
        e.SetStrokeWidth(r)
      ) : 'string' == typeof a &&
        '#' === a[0] ? (
        e.SetStrokeColor(a),
        e.SetStrokeOpacity(1),
        e.SetStrokeWidth(r)
      ) : (e.SetStrokeColor('none'), e.SetStrokeWidth(0)) : (e.SetStrokeColor('none'), e.SetStrokeWidth(0))
  },
  ListManager.Graph.prototype.SetElementEffects = function (e, t, a, r) {

    var i,
      n = [];
    (
      i = (new ListManager.BaseDrawingObject).CalcEffectSettings(t, a, !1)
    ).outside.type &&
      (
        r &&
        i.outside.type.id == SDGraphics.ListManager.EffectType.GLOW.id ||
        n.push({
          type: i.outside.type,
          params: i.outside.settings
        })
      ),
      r &&
      n.push({
        type: SDGraphics.ListManager.EffectType.GLOW,
        params: {
          color: '#FFD64A',
          size: 4
        }
      }),
      i.inside.type &&
      n.push({
        type: i.inside.type,
        params: i.inside.settings
      }),
      e.Effects().SetEffects(n, t)
  },
  ListManager.Graph.prototype.Calc3DBarMetrics = function (e, t) {

    var a = {
      renderBounds: {
        x: t.x,
        y: t.y,
        width: t.width,
        height: t.height
      },
      originalBounds: {
        x: t.x,
        y: t.y,
        width: t.width,
        height: t.height
      },
      barOffset: {
        xOff: 0,
        yOff: 0
      }
    };
    switch (e) {
      case ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CYLINDER:
        a.renderBounds.height += 0.25 * t.width,
          a.renderBounds.y -= 0.25 * t.width;
        break;
      case ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CONE:
        break;
      default:
        a.renderBounds.width += 0.25 * t.width,
          a.renderBounds.height += 0.25 * t.width,
          a.renderBounds.y -= 0.25 * t.width
    }
    return a.barOffset.xOff = a.renderBounds.x - t.x,
      a.barOffset.yOff = a.renderBounds.y - t.y,
      a
  },
  ListManager.Graph.prototype.Render3DBar = function (e, t, a, r, i) {

    var n = i ||
      GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.GROUP);
    switch (e) {
      case ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CYLINDER:
        this._Render3DCylinder(t, a, r, n);
        break;
      case ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CONE:
        this._Render3DCone(t, a, n);
        break;
      default:
        this._Render3DRect(t, a, r, n)
    }
    return n
  },
  ListManager.Graph.prototype.GetMainBarElement = function (e) {

    var t = null;
    return e.GetElementByID &&
      (
        t = e.GetElementByID(ListManager.Graph.Point._3DComponents.MAIN)
      ),
      t ||
      (t = e),
      t
  },
  ListManager.Graph.prototype.Calc3DAxisMetrics = function (e, t, a) {

    var r = e.x == t.x,
      i = {
        renderBounds: {
          x: e.x,
          y: e.y,
          width: 0,
          height: 0
        },
        origStart: {
          x: e.x,
          y: e.y
        },
        origEnd: {
          x: t.x,
          y: t.y
        },
        ticStartOffset: {
          xOff: 0,
          yOff: 0
        },
        ticEndOffset: {
          xOff: 0,
          yOff: 0
        }
      };
    return r ? (
      i.renderBounds.x -= 0.25 * a,
      i.renderBounds.y -= 0.375 * a,
      i.renderBounds.width = 0.5 * a,
      i.renderBounds.height = t.y - e.y + 0.5 * a,
      i.ticStartOffset.xOff = - 0.25 * a,
      i.ticStartOffset.yOff = 0.125 * a,
      i.ticEndOffset.xOff = 0.25 * a,
      i.ticEndOffset.yOff = - 0.375 * a
    ) : (
      i.renderBounds.x -= 0.25 * a,
      i.renderBounds.y -= 0.375 * a,
      i.renderBounds.width = t.x - e.x + 0.5 * a,
      i.renderBounds.height = 0.5 * a,
      i.ticStartOffset.xOff = - 0.25 * a,
      i.ticStartOffset.yOff = 0.125 * a,
      i.ticEndOffset.xOff = 0.25 * a,
      i.ticEndOffset.yOff = - 0.375 * a
    ),
      i
  },
  ListManager.Graph.prototype.Render3DAxis = function (e, t, a, r, i, n) {

    var o = e.x == t.x,
      s = {},
      l = {},
      S = {},
      c = {},
      u = {},
      p = [],
      d = null;
    return isNaN(e.x) ||
      isNaN(e.y) ||
      isNaN(t.x) ||
      isNaN(t.y) ||
      isNaN(a) ? null : (
      o ? (
        s.x = e.x - 0.25 * a,
        s.y = e.y + 0.125 * a,
        S.x = s.x,
        S.y = t.y + 0.125 * a,
        l.x = e.x + 0.25 * a,
        l.y = s.y - 0.5 * a,
        c.x = l.x,
        c.y = S.y - 0.5 * a
      ) : (
        s.x = e.x + 0.25 * a,
        s.y = e.y - 0.375 * a,
        l.x = t.x + 0.25 * a,
        l.y = s.y,
        S.x = e.x - 0.25 * a,
        S.y = e.y + 0.125 * a,
        c.x = t.x - 0.25 * a,
        c.y = S.y
      ),
      u.x = S.x,
      u.y = l.y,
      i = i ||
      0.5,
      (
        d = n ||
        GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.POLYGON)
      ) &&
      (
        p[0] = {
          x: s.x - u.x,
          y: s.y - u.y
        },
        p[1] = {
          x: l.x - u.x,
          y: l.y - u.y
        },
        p[2] = {
          x: c.x - u.x,
          y: c.y - u.y
        },
        p[3] = {
          x: S.x - u.x,
          y: S.y - u.y
        },
        d.SetPoints(p),
        d.SetPos(u.x, u.y),
        d.SetFillColor(r),
        d.SetStrokeWidth(0),
        d.SetFillOpacity(i)
      ),
      d
    )
  },
  ListManager.Graph.prototype._Render3DRect = function (e, t, a, r) {

    var i,
      n,
      o,
      s = {},
      l = [],
      S = {};
    if (isNaN(e.x) || isNaN(e.y) || isNaN(e.width) || isNaN(e.height)) return r;
    o = this._Calc3DColors(t),
      s.x = e.x,
      s.y = e.y - 0.25 * e.width,
      l[0] = {
        x: 0,
        y: 0.25 * e.width
      },
      l[1] = {
        x: 0.25 * e.width,
        y: 0
      },
      l[2] = {
        x: 0.25 * e.width,
        y: e.height
      },
      l[3] = {
        x: 0,
        y: e.height + 0.25 * e.width
      },
      (
        i = (
          n = r.GetElementByID(ListManager.Graph.Point._3DComponents.SIDE)
        ) ||
        GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.POLYGON)
      ) &&
      (
        i.SetPoints(l),
        i.SetPos(e.width, 0),
        i.SetStrokeWidth(0),
        i.SetFillOpacity(1),
        i.SetFillColor(o.darkColor),
        i.SetID(ListManager.Graph.Point._3DComponents.SIDE),
        n ||
        r.AddElement(i)
      ),
      a ? (
        l[0] = {
          x: 0.25 * e.width,
          y: 0
        },
        l[1] = {
          x: 1.25 * e.width,
          y: 0
        },
        l[2] = {
          x: e.width,
          y: 0.25 * e.width
        },
        l[3] = {
          x: 0,
          y: 0.25 * e.width
        },
        (
          i = (
            n = r.GetElementByID(ListManager.Graph.Point._3DComponents.TOP)
          ) ||
          GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.POLYGON)
        ) &&
        (
          i.SetPoints(l),
          i.SetPos(0, 0),
          i.SetStrokeWidth(0),
          i.SetFillOpacity(1),
          i.SetFillColor(o.midColor),
          i.SetID(ListManager.Graph.Point._3DComponents.TOP),
          n ||
          r.AddElement(i)
        )
      ) : n &&
      r.RemoveElement(n),
      l[0] = {
        x: 0,
        y: 0
      },
      l[1] = {
        x: e.width + 0.5,
        y: 0
      },
      l[2] = {
        x: e.width + 0.5,
        y: e.height
      },
      l[3] = {
        x: 0,
        y: e.height
      },
      (
        i = (
          n = r.GetElementByID(ListManager.Graph.Point._3DComponents.MAIN)
        ) ||
        GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.POLYGON)
      ) &&
      (
        i.SetPoints(l),
        i.SetPos(0, 0.25 * e.width),
        i.SetStrokeWidth(0),
        i.SetFillOpacity(1),
        i.SetID(ListManager.Graph.Point._3DComponents.MAIN),
        S.type = SDGraphics.Element.Style.GradientStyle.LINEAR,
        S.startPos = SDGraphics.Element.Style.GradientPos.TOP,
        S.stops = [],
        S.stops[0] = {
          offset: 0,
          color: o.lightColor,
          opacity: 1
        },
        S.stops[1] = {
          offset: 100,
          color: o.midColor,
          opacity: 1
        },
        i.SetGradientFill(S),
        n ||
        r.AddElement(i)
      ),
      r.SetPos(s.x, s.y)
  },
  ListManager.Graph.prototype._Render3DCylinder = function (e, t, a, r) {

    var i,
      n,
      o,
      s,
      l,
      S = {},
      c = {};
    if (isNaN(e.x) || isNaN(e.y) || isNaN(e.width) || isNaN(e.height)) return r;
    l = this._Calc3DColors(t),
      S.x = e.x,
      S.y = e.y - 0.25 * e.width,
      a ? (
        i = (
          s = r.GetElementByID(ListManager.Graph.Point._3DComponents.TOP)
        ) ||
        GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH)
      ) &&
        (
          (n = i.PathCreator()).BeginPath(),
          n.MoveTo(0, 0.125 * e.width),
          n.ArcTo(e.width, 0.125 * e.width, 0.5 * e.width, 0.125 * e.width, 0, !0, !0, !1),
          n.ArcTo(0, 0.125 * e.width, 0.5 * e.width, 0.125 * e.width, 0, !0, !0, !1),
          n.ClosePath(),
          o = n.ToString(),
          i.SetPath(o, {
            x: 0,
            y: 0,
            width: e.width,
            height: 0.25 * e.width
          }),
          i.SetPos(0, 0),
          i.SetStrokeWidth(0),
          i.SetFillOpacity(1),
          i.SetFillColor(l.midColor),
          i.SetID(ListManager.Graph.Point._3DComponents.TOP),
          s ||
          r.AddElement(i)
        ) : s &&
      r.RemoveElement(s),
      (
        i = (
          s = r.GetElementByID(ListManager.Graph.Point._3DComponents.MAIN)
        ) ||
        GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH)
      ) &&
      (
        (n = i.PathCreator()).BeginPath(),
        n.MoveTo(0, 0),
        n.LineTo(0, e.height),
        n.ArcTo(e.width, e.height, 0.5 * e.width, 0.125 * e.width, 0, !1, !0, !1),
        n.LineTo(e.width, 0),
        n.ArcTo(0, 0, 0.5 * e.width, 0.125 * e.width, 0, !0, !0, !1),
        n.ClosePath(),
        o = n.ToString(),
        i.SetPath(o, {
          x: 0,
          y: 0,
          width: e.width,
          height: e.height + 0.125 * e.width
        }),
        i.SetPos(0, 0.125 * e.width),
        i.SetStrokeWidth(0),
        i.SetFillOpacity(1),
        i.SetID(ListManager.Graph.Point._3DComponents.MAIN),
        c.type = SDGraphics.Element.Style.GradientStyle.LINEAR,
        c.startPos = SDGraphics.Element.Style.GradientPos.LEFT,
        c.stops = [],
        c.stops[0] = {
          offset: 0,
          color: l.midColor,
          opacity: 1
        },
        c.stops[1] = {
          offset: 25,
          color: l.lightColor,
          opacity: 1
        },
        c.stops[2] = {
          offset: 50,
          color: l.midColor,
          opacity: 1
        },
        c.stops[3] = {
          offset: 100,
          color: l.darkColor,
          opacity: 1
        },
        i.SetGradientFill(c),
        s ||
        r.AddElement(i)
      ),
      r.SetPos(S.x, S.y)
  },
  ListManager.Graph.prototype._Render3DCone = function (e, t, a) {

    var r,
      i,
      n,
      o,
      s,
      l = {},
      S = {};
    if (isNaN(e.x) || isNaN(e.y) || isNaN(e.width) || isNaN(e.height)) return a;
    s = this._Calc3DColors(t),
      l.x = e.x,
      l.y = e.y,
      (
        r = (
          o = a.GetElementByID(ListManager.Graph.Point._3DComponents.MAIN)
        ) ||
        GlobalData.optManager.svgDoc.CreateShape(ConstantData.CreateShapeType.PATH)
      ) &&
      (
        (i = r.PathCreator()).BeginPath(),
        i.MoveTo(0.5 * e.width, 0),
        i.LineTo(0, e.height - 0.125 * e.width),
        i.ArcTo(
          e.width,
          e.height - 0.125 * e.width,
          0.5 * e.width,
          0.125 * e.width,
          0,
          !1,
          !0,
          !1
        ),
        i.LineTo(0.5 * e.width, 0),
        i.ClosePath(),
        n = i.ToString(),
        r.SetPath(n, {
          x: 0,
          y: 0,
          width: e.width,
          height: e.height
        }),
        r.SetPos(0, 0),
        r.SetStrokeWidth(0),
        r.SetFillOpacity(1),
        r.SetID(ListManager.Graph.Point._3DComponents.MAIN),
        S.type = SDGraphics.Element.Style.GradientStyle.LINEAR,
        S.startPos = SDGraphics.Element.Style.GradientPos.LEFT,
        S.stops = [],
        S.stops[0] = {
          offset: 0,
          color: s.midColor,
          opacity: 1
        },
        S.stops[1] = {
          offset: 25,
          color: s.lightColor,
          opacity: 1
        },
        S.stops[2] = {
          offset: 50,
          color: s.midColor,
          opacity: 1
        },
        S.stops[3] = {
          offset: 100,
          color: s.darkColor,
          opacity: 1
        },
        r.SetGradientFill(S),
        o ||
        a.AddElement(r)
      ),
      a.SetPos(l.x, l.y)
  },
  ListManager.Graph.prototype._SplitColor = function (e) {

    for (var t = e.replace('#', ''), a = {}; t.length < 6;) t += t[0];
    return a.r = parseInt(t.slice(0, 2), 16),
      a.g = parseInt(t.slice(2, 4), 16),
      a.b = parseInt(t.slice(4, 6), 16),
      a
  },
  ListManager.Graph.prototype._Calc3DColors = function (e) {

    var t = {},
      a = this._SplitColor(e),
      r = {},
      i = {},
      n = {};
    return r.r = Math.max(a.r - 64, 0),
      r.g = Math.max(a.g - 64, 0),
      r.b = Math.max(a.b - 64, 0),
      i.r = Math.min(r.r + 128, 255),
      i.g = Math.min(r.g + 128, 255),
      i.b = Math.min(r.b + 128, 255),
      n.r = Math.round((r.r + i.r) / 2),
      n.g = Math.round((r.g + i.g) / 2),
      n.b = Math.round((r.b + i.b) / 2),
      t.origColor = e,
      t.darkColor = '#' + FileParser.decimalToHex(r.r, 2, !0) + FileParser.decimalToHex(r.g, 2, !0) + FileParser.decimalToHex(r.b, 2, !0),
      t.midColor = '#' + FileParser.decimalToHex(n.r, 2, !0) + FileParser.decimalToHex(n.g, 2, !0) + FileParser.decimalToHex(n.b, 2, !0),
      t.lightColor = '#' + FileParser.decimalToHex(i.r, 2, !0) + FileParser.decimalToHex(i.g, 2, !0) + FileParser.decimalToHex(i.b, 2, !0),
      t
  }

ListManager.LM.prototypeTest3DGraph = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = new ListManager.Graph,
    h = Math.max(t, a) / 12,
    m = h,
    C = t - h,
    y = a - m,
    f = {},
    L = [],
    I = [],
    T = [],
    b = {},
    M = new Resources.QuickStyle;
  if (
    t = C - h,
    a = y - m,
    i = Math.round(t / 8),
    n = Math.round(h),
    o = Math.round(m + a),
    l = Math.round(1.75 * i),
    s = Math.round(n + 0.75 * i),
    L[0] = Math.round(a),
    L[1] = Math.round(0.5 * a),
    L[2] = Math.round(0.75 * a),
    L[3] = Math.round(0.4 * a),
    I[0] = '#00FF00',
    I[1] = '#FFFF00',
    I[2] = '#FF0000',
    I[3] = '#0000FF',
    T[0] = '#FFF',
    T[1] = '#FFFF00',
    T[2] = '#000',
    T[3] = '#0000FF',
    (u = r.slice(- 2)) >= '10'
  ) switch (d = 'flat' + u, b.x = (h + C) / 2, b.y = (m + y) / 2, p = Math.min(C - h, y - m) / 2, u) {
    case '10':
      S = e.GetElementByID(d),
        c = g.RenderPieWedge(b, p, 20, 70, '#FF0000', '#000', 1, S),
        S ||
        (c.SetID(d), e.AddElement(c));
      break;
    case '11':
      S = e.GetElementByID(d),
        c = g.RenderPieWedge(b, p, 20, 220, '#FF0000', '#000', 1, S),
        S ||
        (c.SetID(d), e.AddElement(c));
      break;
    case '12':
      S = e.GetElementByID(d),
        c = g.RenderPieWedge(b, p, 260, 290, '#FF0000', '#000', 1, S),
        S ||
        (c.SetID(d), e.AddElement(c));
      break;
    case '13':
      S = e.GetElementByID(d),
        c = g.RenderPieWedge(b, p, 260, 20, '#FF0000', '#000', 1, S),
        S ||
        (c.SetID(d), e.AddElement(c));
      break;
    case '14':
      S = e.GetElementByID(d),
        c = g.RenderPieWedge(b, p, 20, 320, '#FF0000', '#000', 1, S),
        S ||
        (c.SetID(d), e.AddElement(c));
      break;
    case '15':
      M.OutsideEffect.OutsideType = FileParser.OutEffect.SDOUT_EFFECT_GLOW,
        M.OutsideEffect.OutsideExtent_Left = 0.1,
        M.OutsideEffect.OutsideExtent_Top = 0.1,
        M.OutsideEffect.OutsideExtent_Right = 0.1,
        M.OutsideEffect.OutsideExtent_Bottom = 0.1,
        M.OutsideEffect.Color = '#00FF00',
        M.Fill.FillEffect = FileParser.FillEffect.SDFILL_EFFECT_BEVEL,
        M.Fill.WParam = 1,
        M.Fill.LParam = 1,
        S = e.GetElementByID(d),
        c = g.RenderPieWedge(b, p, 280, 240, '#FF0000', '#000', 1, S),
        g.SetElementEffects(c, {
          x: 0,
          y: 0,
          width: t,
          height: a
        }, M, !1),
        S ||
        (c.SetID(d), e.AddElement(c))
  } else for (
    S = e.GetElementByID('YAXIS'),
    c = g.Render3DAxis({
      x: n,
      y: m
    }, {
      x: n,
      y: o
    }, i, '#555', 0, S),
    S ||
    (c.SetID('YAXIS'), e.AddElement(c)),
    S = e.GetElementByID('XAXIS'),
    c = g.Render3DAxis({
      x: n,
      y: o
    }, {
      x: n + t,
      y: o
    }, i, '#999', 0, S),
    S ||
    (c.SetID('XAXIS'), e.AddElement(c)),
    f.x = s,
    f.width = i,
    D = 0;
    D < 4;
    D++
  ) {
    switch (f.height = L[D], f.y = o - f.height, d = 'BAR' + D, r) {
      case '#010200':
        S = e.GetElementByID(d),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_RECT,
            f,
            I[D],
            !0,
            S
          ),
          S ||
          (c.SetID(d), e.AddElement(c));
        break;
      case '#010201':
        S = e.GetElementByID(d),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CYLINDER,
            f,
            I[D],
            !0,
            S
          ),
          S ||
          (c.SetID(d), e.AddElement(c));
        break;
      case '#010202':
        S = e.GetElementByID(d),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CONE,
            f,
            I[D],
            !0,
            S
          ),
          S ||
          (c.SetID(d), e.AddElement(c));
        break;
      case '#010203':
        f.height = Math.round(f.height / 3),
          f.y = o - f.height,
          S = e.GetElementByID(d + '.1'),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_RECT,
            f,
            I[0],
            !1,
            S
          ),
          S ||
          (c.SetID(d + '.1'), e.AddElement(c)),
          S = e.GetElementByID(d + '.2'),
          f.y -= f.height,
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_RECT,
            f,
            I[1],
            !1,
            S
          ),
          S ||
          (c.SetID(d + '.2'), e.AddElement(c)),
          S = e.GetElementByID(d + '.3'),
          f.y -= f.height,
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_RECT,
            f,
            I[2],
            !0,
            S
          ),
          S ||
          (c.SetID(d + '.3'), e.AddElement(c));
        break;
      case '#010204':
        f.height = Math.round(f.height / 3),
          f.y = o - f.height,
          S = e.GetElementByID(d + '.1'),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CYLINDER,
            f,
            I[0],
            !1,
            S
          ),
          S ||
          (c.SetID(d + '.1'), e.AddElement(c)),
          S = e.GetElementByID(d + '.2'),
          f.y -= f.height,
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CYLINDER,
            f,
            I[1],
            !1,
            S
          ),
          S ||
          (c.SetID(d + '.2'), e.AddElement(c)),
          S = e.GetElementByID(d + '.3'),
          f.y -= f.height,
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CYLINDER,
            f,
            I[2],
            !0,
            S
          ),
          S ||
          (c.SetID(d + '.3'), e.AddElement(c));
        break;
      case '#010205':
        S = e.GetElementByID(d),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_RECT,
            f,
            T[D],
            !0,
            S
          ),
          S ||
          (c.SetID(d), e.AddElement(c));
        break;
      case '#010206':
        S = e.GetElementByID(d),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CYLINDER,
            f,
            T[D],
            !0,
            S
          ),
          S ||
          (c.SetID(d), e.AddElement(c));
        break;
      case '#010207':
        S = e.GetElementByID(d),
          c = g.Render3DBar(
            ListManager.Graph.BarStyleVariations3d.SDGRAPH_3D_SHAPE_TYPE_CONE,
            f,
            T[D],
            !0,
            S
          ),
          S ||
          (c.SetID(d), e.AddElement(c))
    }
    f.x += l
  }
},
  ListManager.Graph.Point._3DComponents = {
    MAIN: 'main',
    SIDE: 'side',
    TOP: 'top',
    HILITE: 'hilite'
  },
  Object.freeze(ListManager.Graph.Point._3DComponents),
  ListManager.LM.prototype.GanttGetMode = function (e) {
    var t = ListManager.GanttTaskModes.TASK_MODE_START;
    return e.flags & ListManager.Table.TableFlags.SDT_TF_FIX_BOTH ? t = ListManager.GanttTaskModes.TASK_MODE_BOTH : e.flags & ListManager.Table.TableFlags.SDT_TF_FIX_END &&
      (t = ListManager.GanttTaskModes.TASK_MODE_END),
      t
  }

ListManager.LM.prototypeGanttGetGanttObject = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1),
    s = - 1,
    l = - 1;
  for (t = o.layers.length, e = 0; e < t; e++) if (
    o.layers[e].layertype === ConstantData.LayerTypes.SD_LAYERT_GANTT
  ) {
    s = e,
      a = o.layers[s].zList;
    break
  }
  if (s >= 0) {
    if (
      (n = this.GetTargetSelect()) >= 0 &&
      (r = this.GetObjectPtr(n, !1)) &&
      r.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
    ) return n;
    for (t = a.length, e = 0; e < t; e++) if (
      i = a[e],
      (r = this.GetObjectPtr(i, !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
    ) {
      l = i;
      break
    }
  }
  return l
}

ListManager.LM.prototypeGanttUpdateTaskNumbers = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = - 2,
    D = ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER,
    g = this.GanttGetParentID(r);
  for (n = t.rows.length, o = a + 1; o < n; o++) if (
    l = t.rows[o],
    s = t.cells[l.start],
    (S = this.GanttGetParentID(s.datarecordID)) === g
  ) s.celltype === D &&
    this.GanttSetCellValue(e, t, l.start, i),
    d = s.datarecordID;
  else {
    if (S !== d) break;
    u = ListManager.SDData.GetValue(
      d,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
    ),
      p = parseInt(u),
      c = i + (u = (++p).toString()) + '.',
      o = this.GanttUpdateTaskNumbers(e, t, o - 1, s.datarecordID, c)
  }
  return o - 1
}

ListManager.LM.prototypeGanttCreateNewTask = function (e, t, a, r) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = e.GetGanttInfo(!1),
    D = Resources.FindStyle(ListManager.GanttDefines.GANTT_WORKING_STYLE);
  if (!(p = this.GanttGetParentTask(e, t))) return - 1;
  o = this.GanttInsertTaskRecord(d, a, r, p.parentId, p.index);
  if ('string' == typeof o && (o = parseInt(o)), o >= 0 && p.row >= 0) {
    for (n = p.row, c = t.rows[n], i = 0; i < c.ncells; i++) if (
      (u = t.cells[c.start + i]).datarecordID = o,
      u.flags = 0,
      u.fill = Utils1.DeepCopy(D.Fill),
      u.txf = Utils1.DeepCopy(D.Text),
      u.stylename = ListManager.GanttDefines.GANTT_WORKING_STYLE,
      u.celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER
    ) u.flags = ListManager.Table.CellFlags.SDT_F_NoText
  } else {
    for (
      s = p.rowafter,
      GlobalData.optManager.Table_AddRows(e, t, s, s, !1, !1, !1),
      c = t.rows[s + 1],
      i = 0;
      i < c.ncells;
      i++
    ) if (
        (u = t.cells[c.start + i]).datarecordID = o,
        u.flags = 0,
        u.fill = Utils1.DeepCopy(D.Fill),
        u.txf = Utils1.DeepCopy(D.Text),
        u.stylename = ListManager.GanttDefines.GANTT_WORKING_STYLE,
        u.celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER
      ) u.flags = ListManager.Table.CellFlags.SDT_F_NoText;
    n = s + 1
  }
  var g = this.GanttGetTaskNumber(o, [], 0);
  l = g.indent;
  var h = (S = g.taskNumber).lastIndexOf('.');
  S = h > 0 ? S.slice(0, h + 1) : '',
    this.GanttRowDataToRowValues(e, t, S, l, n, e.datasetTableID, o, !1, !1),
    this.GanttUpdateTaskNumbers(e, t, n, o, S),
    this.GanttAddGanttBar(e.BlockID, t, n);
  var m = this.GanttRowToBar(o);
  return m &&
    this.GanttLinkBarToRow(e.BlockID, m.BlockID, t, n),
    this.GanttDoRowShading(e.BlockID, !0),
    o
}

ListManager.LM.prototypeGanttInsertTaskRecord = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = - 1,
    L = !1,
    I = - 1,
    T = 5,
    b = null;
  if (
    (
      I = r < 0 ? ListManager.SDData.AddRow(a) : ListManager.SDData.AddChildRow(r, ListManager.DataRelationships.PARENT_RELATIONSHIP)
    ) < 0
  ) return I;
  for (
    m = (y = this.GanttGetNonWorkingDays()).nonWorkingDays,
    (C = y.holidayMask) &&
    (b = this.LoadHolidays(!1), d = this.CountryNameFromHolidayMask(C)),
    D = r.toString(),
    s = ListManager.SDData.GetNumRows(
      a,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      D
    ),
    r >= 0 &&
    (
      T = (
        p = this.GanttGetDataValue(r, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH)
      ) &&
        p.length ? parseInt(p) : 0,
      (
        c = ListManager.SDData.GetNumChildren(r, ListManager.DataRelationships.PARENT_RELATIONSHIP)
      ) < 1 &&
      (c = 1),
      T /= c
    ),
    e.timeScale != ListManager.TimeScale.SDG_DAY_WITH_HOURS ? ((u = Math.round(T)) < 1 && (u = 1), T = u) : 5 == T ? T = 1 / 24 : (
      T = (
        u = (
          T * ListManager.TimeAmounts.OneDayNS + ListManager.TimeAmounts.OneHourNS / 2
        ) / ListManager.TimeAmounts.OneHourNS
      ) < 1 ? 1 : u,
      T *= ListManager.TimeAmounts.OneHourNS,
      T /= ListManager.TimeAmounts.OneDayNS
    ),
    s &&
    r >= 0 &&
    (
      f = ListManager.SDData.GetRow(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        D,
        i
      )
    ) == I &&
    (f = - 1),
    o = 0;
    o < s;
    o++
  ) if (
      l = ListManager.SDData.GetRow(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        D,
        o
      ),
      p = ListManager.SDData.GetValue(
        l,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
      ),
      !((S = parseInt(p)) <= i) &&
      (
        p = Number(S + 1).toString(),
        n = ListManager.SDData.UpdateValue(
          l,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
          p
        )
      )
    ) return - 1;
  if (
    f >= 0 &&
    i++,
    0 == (n = this.SetRowHierarchy(I, i, r)) &&
    (
      n = ListManager.SDData.SetIndexColumn(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
        ListManager.SDData.Defines.SDDATA_INDEX_ASC
      )
    ),
    0 == n
  ) {
    if (
      p = r < 0 ? Resources.Strings.MyProject : t ? Resources.Strings.Milestone : Resources.Strings.Task,
      n = ListManager.SDData.UpdateValue(
        I,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_FIELD],
        p
      )
    ) return - 1;
    if (
      f >= 0 &&
      (
        p = ListManager.SDData.GetValue(
          f,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
        )
      ) &&
      p.length > 0 &&
      (
        g = parseInt(p),
        (
          p = ListManager.SDData.GetValue(
            f,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH]
          )
        ) &&
        0 == (p && p.length ? parseInt(p) : 0) &&
        (
          g += e.timeScale == ListManager.TimeScale.SDG_DAY_WITH_HOURS ? ListManager.TimeAmounts.OneHourNS : ListManager.TimeAmounts.OneDayNS
        ),
        e.timeScale != ListManager.TimeScale.SDG_DAY_WITH_HOURS ? (h = g, h = this.GanttAddDuration(h, T, m, b, d)) : (
          h = g + T * ListManager.TimeAmounts.OneDayNS,
          T = this.GanttGetDuration(g, h, m, b, d)
        ),
        L = !0
      ),
      L ||
      (
        g = e.scrollStart,
        e.scrollEnd - e.scrollStart,
        r >= 0 &&
        (
          (
            p = ListManager.SDData.GetValue(
              r,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
            )
          ) &&
          p.length > 0 &&
          (g = parseInt(p)),
          (
            p = ListManager.SDData.GetValue(
              r,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
            )
          ) &&
          p.length > 0 &&
          (h = parseInt(p)) - g
        ),
        e.timeScale != ListManager.TimeScale.SDG_DAY_WITH_HOURS ? (h = g = this.TrimHours(g), h = this.GanttAddDuration(h, T, m, b, d)) : (this.TrimSecs(g), h = g + T * ListManager.TimeAmounts.OneDayNS),
        e.timeScale != ListManager.TimeScale.SDG_DAY_WITH_HOURS ? g == (h = this.TrimHours(h)) &&
          (h += ListManager.TimeAmounts.OneDayNS) : g == (h = this.TrimSecs(h)) &&
        (h += ListManager.TimeAmounts.OneHourNS)
      ),
      t &&
      (T = 0, h = g),
      p = g.toString(),
      n = ListManager.SDData.UpdateValue(
        I,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START],
        p
      )
    ) return - 1;
    if (
      p = h.toString(),
      n = ListManager.SDData.UpdateValue(
        I,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
        p
      )
    ) return - 1;
    if (
      p = this.GanttDurationToString(T),
      n = ListManager.SDData.UpdateValue(
        I,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH],
        p
      )
    ) return - 1;
    if (
      n = ListManager.SDData.UpdateValue(
        I,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
        '-1'
      )
    ) return - 1;
    if (
      p = SDUI.Utils.MakeGuid(),
      n = ListManager.SDData.UpdateValue(
        I,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_GUID],
        p
      )
    ) return - 1
  }
  return I
}

ListManager.LM.prototypeGanttUpdateDateField = function (e, t, a, r, i, n, o, s, l) {
  var S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y = !1,
    f = null,
    L = {},
    I = null;
  if (
    l ||
    (
      I = ListManager.SDData.GetValue(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
      )
    ),
    D = this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
    c = parseInt(D),
    (
      n === ListManager.Table.CellTypes.SDT_CT_GANTT_START ||
      n === ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME
    ) &&
    r === c
  ) return - 1;
  if (
    D = this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
    u = parseInt(D),
    (
      n === ListManager.Table.CellTypes.SDT_CT_GANTT_END ||
      n === ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME
    ) &&
    r === u
  ) return - 1;
  if (
    m = (
      D = this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH)
    ) &&
      D.length ? parseFloat(D) : 0,
    n === ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH &&
    m === i
  ) return - 1;
  switch (
  S = (C = this.GanttGetNonWorkingDays()).nonWorkingDays,
  (h = C.holidayMask) &&
  (f = this.LoadHolidays(!1), g = this.CountryNameFromHolidayMask(h)),
  o
  ) {
    case ListManager.GanttTaskModes.TASK_MODE_START:
      if (
        n == ListManager.Table.CellTypes.SDT_CT_GANTT_START ||
          n === ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME ? (this.GanttShiftStart(a, c, r, S, f, g), p = c, d = r, y = !0) : n === ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH &&
        (r = c, r = this.GanttAddDuration(r, i, S, f, g)),
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_END ||
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME ||
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH
      ) {
        if (
          p = u,
          d = r,
          n !== ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH &&
          (i = this.GanttGetDuration(c, r, S, f, g)),
          D = r.toString(),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
            D
          )
        ) return - 1;
        if (
          I &&
          I.length &&
          ListManager.Trello.TrelloUpdateCardData(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
            D
          ),
          D = this.GanttDurationToString(i),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH],
            D
          )
        ) return - 1;
        0 === i &&
          (
            D = ListManager.SDData.GetValue(
              a,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PC]
            )
          ) &&
          D.length &&
          '100' != D &&
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PC],
            ''
          )
      }
      break;
    case ListManager.GanttTaskModes.TASK_MODE_END:
      if (
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_END ||
          n === ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME ? (this.GanttShiftEnd(a, u, r, S, f, g), p = u, d = r, y = !0) : n === ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH &&
        (r = u, r = this.GanttRemoveDuration(r, i, S, f, g)),
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_START ||
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME ||
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH
      ) {
        if (
          p = c,
          d = r,
          n !== ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH &&
          (i = this.GanttGetDuration(r, u, S, f, g)),
          D = r.toString(),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START],
            D
          )
        ) return - 1;
        if (
          D = this.GanttDurationToString(i),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH],
            D
          )
        ) return - 1
      }
      break;
    case ListManager.GanttTaskModes.TASK_MODE_BOTH:
      if (
        y = !1,
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_START ||
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME
      ) {
        if (
          i = this.GanttGetDuration(r, u, S, f, g),
          D = r.toString(),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START],
            D
          )
        ) return - 1;
        if (
          D = this.GanttDurationToString(i),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH],
            D
          )
        ) return - 1;
        p = c,
          d = r,
          o = ListManager.GanttTaskModes.TASK_MODE_END
      } else n === ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH &&
        (r = c, r = this.GanttAddDuration(r, i, S, f, g));
      if (
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_END ||
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME ||
        n === ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH
      ) {
        if (
          p = u,
          d = r,
          n !== ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH &&
          (i = this.GanttGetDuration(c, r, S, f, g)),
          D = r.toString(),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
            D
          )
        ) return - 1;
        if (
          D = this.GanttDurationToString(i),
          ListManager.SDData.UpdateValue(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH],
            D
          )
        ) return - 1;
        I &&
          I.length &&
          ListManager.Trello.TrelloUpdateCardData(
            a,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
            r.toString()
          ),
          o = ListManager.GanttTaskModes.TASK_MODE_START
      }
  }
  return L.firstsecs = 0,
    L.lastsecs = 0,
    L.firstend = 0,
    this.GanttUpdateTaskData(e, t, a, !1, L, 0, - 2, p, d, y, o, S, f, g, null, s, l),
    0
}

ListManager.LM.prototypeGanttShiftStart = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c;
  l = a - t,
    c = this.GanttGetDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
    o = parseInt(c),
    o += l,
    S = (
      c = this.GanttGetDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH)
    ) &&
      c.length > 0 ? parseFloat(c) : 0,
    s = o,
    s = this.GanttAddDuration(s, S, r, i, n),
    c = o.toString(),
    this.GanttUpdateDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_START, c),
    c = s.toString(),
    this.GanttUpdateDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_END, c);
  var u = ListManager.SDData.GetValue(
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
  );
  u &&
    u.length &&
    ListManager.Trello.TrelloUpdateCardData(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
      c
    )
}

ListManager.LM.prototypeGanttShiftEnd = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c;
  l = a - t,
    c = this.GanttGetDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
    s = parseInt(c),
    s += l,
    c = this.GanttGetDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH),
    S = parseFloat(c),
    o = s,
    c = (o = this.GanttRemoveDuration(o, S, r, i, n)).toString(),
    this.GanttUpdateDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_START, c),
    c = s.toString(),
    this.GanttUpdateDataValue(e, ListManager.Table.CellTypes.SDT_CT_GANTT_END, c);
  var u = ListManager.SDData.GetValue(
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
  );
  u &&
    u.length &&
    ListManager.Trello.TrelloUpdateCardData(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
      c
    )
}

ListManager.LM.prototypeGanttGetParentTask = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    S,
    c,
    u,
    p,
    d = - 1,
    D = - 1,
    g = - 1,
    h = - 1,
    m = - 1,
    C = - 1,
    y = [],
    f = null;
  for (D = (u = t.rows.length) - 1, n = 0; n < u; n++) for (i = t.rows[n], s = 0; s < i.ncells; s++) (a = t.cells[i.start + s]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
    (
      g < 0 &&
      (g = n, i.start + s, h = a.datarecordID),
      a.datarecordID >= 0 &&
      (m = a.datarecordID)
    );
  if (g >= 0) {
    if (t.select >= 0) d = t.select,
      this.Table_GetRow(t, d) < g &&
      (d = - 1);
    else {
      if (this.Table_GetSelectArea(t, null, null, y), y.length > 0) for (C = - 1, p = t.cells.length, S = 0; S < p; S++) for (l = 0; l = y.length; l++) Utils2.EqualRect(t.cells[S].frame, y[l]) &&
        (S < C || - 1 == C) &&
        (C = S);
      if (
        C > - 1 &&
        (
          bottomMostSelectedRowIndex = this.Table_GetRow(t, C),
          bottomMostSelectedRowIndex >= g
        )
      ) for (i = t.rows[C], s = 0; s < i.ncells; s++) if (
        (a = t.cells[i.start + s]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
      ) {
        d = i.start + s;
        break
      }
    }
    if (d >= 0) if ((o = (a = t.cells[d]).datarecordID) >= 0) if (o === h) D = m >= 0 &&
      m != h ? g + 1 : g;
    else for (
      n = (D = this.Table_GetRow(t, d)) + 1;
      n < u &&
      (
        i = t.rows[n],
        r = t.cells[i.start],
        (c = this.GanttGetParentID(r.datarecordID)) === o
      );
      n++
    ) D++;
    else for (
      f ||
      (f = {}),
      f.row = this.Table_GetRow(t, d),
      n = this.Table_GetRow(t, d);
      n >= g;
      n--
    ) {
      for (i = t.rows[n], s = 0; s < i.ncells; s++) if (
        (a = t.cells[i.start + s]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
        a.datarecordID >= 0
      ) {
        o = a.datarecordID;
        break
      }
      if (o >= 0) break
    } else o = m;
    o >= 0 &&
      (
        f ||
        (f = {}),
        - 1 === (c = this.GanttGetParentID(o)) ? (f.parentId = o, f.index = 0) : (f.parentId = c, f.index = this.GanttTaskIndex(o)),
        f.rowafter = D
      )
  } else f = null;
  return f
}

ListManager.LM.prototypeGetExpandIcon = function (e) {
  var t = !1;
  if (
    ListManager.SDData.GetNumChildren(e, ListManager.DataRelationships.PARENT_RELATIONSHIP)
  ) {
    var a = ListManager.SDData.GetValue(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE]
    );
    return a &&
      (t = 0 != parseInt(a)),
      t ? - 1 : 1
  }
  return 0
}

ListManager.LM.prototypeGanttUpdateTaskData = function (e, t, a, r, i, n, o, s, l, S, c, u, p, d, D, g, h) {

  var m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _,
    E,
    w,
    F,
    v,
    G = {},
    N = 0,
    k = 0,
    U = null,
    J = {
      nDataRows: 0,
      count: 0,
      percentComplete: 0
    };
  for (
    v = e >= 0 ? GlobalData.optManager.GetObjectPtr(e, !0) : this.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !0, t),
    F = this.PlanningTableIsShowingGranularity(v, - 1, ListManager.TimeAmounts.OneHourNS),
    T = a.toString(),
    A = ListManager.SDData.GetNumRows(
      t,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      T
    ),
    w = !1,
    r ? w = !0 : a >= 0 &&
      (
        I = ListManager.SDData.GetValue(
          a,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE]
        )
      ) &&
      (w = 0 != parseInt(I)),
    w ||
    (n += A),
    _ = 0;
    _ < A;
    _++
  ) if (
      L = !1,
      E = ListManager.SDData.GetRow(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        T,
        _
      ),
      h ||
      (
        U = ListManager.SDData.GetValue(
          E,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
        )
      ),
      E >= 0 &&
      E == o ||
      - 2 === o
    ) {
      switch (c) {
        case ListManager.GanttTaskModes.TASK_MODE_START:
          S ? (
            this.GanttShiftStart(E, s, l, u, p, d),
            s !== l &&
            g &&
            g.indexOf(E) < 0 &&
            g.push(E)
          ) : (
            I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_START, I),
            m = parseInt(I),
            I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_END, I),
            y = C = parseInt(I),
            I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH, I),
            M = parseInt(I),
            s == C &&
            (C = l),
            C > l &&
            (C = l),
            C <= m &&
            (
              C = 0 == M ? m : m + ListManager.TimeAmounts.OneDayNS,
              L = !0,
              g &&
              g.push(- 1)
            ),
            b = this.GanttGetDuration(m, C, u, p, d),
            I = C.toString(),
            this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_END, I),
            U &&
            U.length &&
            ListManager.Trello.TrelloUpdateCardData(
              E,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
              I
            ),
            y !== C &&
            g &&
            g.indexOf(E) < 0 &&
            (L ? g.push(- 1) : g.push(E)),
            I = this.GanttDurationToString(b),
            this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH, I)
          );
          break;
        case ListManager.GanttTaskModes.TASK_MODE_END:
          S ? (
            this.GanttShiftEnd(E, s, l, u, p, d),
            s !== l &&
            g &&
            g.indexOf(E) < 0 &&
            g.push(E)
          ) : (
            I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
            f = m = parseInt(I),
            I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
            C = parseInt(I),
            I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH),
            M = parseInt(I),
            s === m &&
            (m = l),
            m < l &&
            (m = l),
            C <= m &&
            (0 == M ? C = m : m = C - ListManager.TimeAmounts.OneDayNS),
            b = this.GanttGetDuration(m, C, u, p, d),
            I = m.toString(),
            this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_START, I),
            f !== m &&
            g &&
            g.indexOf(E) < 0 &&
            g.push(E),
            I = this.GanttDurationToString(b),
            this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH, I)
          )
      }
      if (0 == M) {
        var x = F ? ListManager.TimeScale.SDG_DAY_WITH_HOURS : ListManager.TimeScale.SDG_MONTH_WITH_DAYS;
        C = this.GanttBumpSDRDateInGrid(x, !0, C)
      } (0 == i.firstsecs || i.firstsecs > m) &&
        (i.firstsecs = m),
        (0 == i.lastsecs || i.lastsecs < C) &&
        (i.lastsecs = C),
        (0 == i.firstend || i.firstend > C) &&
        (i.firstend = C),
        D = (
          J = this.GanttUpdateTaskData(e, t, E, w, G, n, - 2, s, l, S, c, u, p, d, D, g, h)
        ).percentComplete,
        n = J.count
    } else if (
      G.firstsecs = 0,
      G.lastsecs = 0,
      G.firstend = 0,
      D = (
        J = this.GanttUpdateTaskData(e, t, E, w, G, n, o, s, l, S, c, u, p, d, D, g, h)
      ).percentComplete,
      n = J.count,
      J.nDataRows > 0
    ) {
      if (
        I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
        m = parseInt(I),
        I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
        C = parseInt(I),
        G.firstsecs - m != G.lastsecs - C &&
        (
          b = this.GanttGetDuration(G.firstsecs, G.lastsecs, u, p, d),
          I = this.GanttDurationToString(b),
          this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH, I)
        ),
        m != G.firstsecs &&
        (
          I = G.firstsecs.toString(),
          this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_START, I)
        ),
        C != G.lastsecs &&
        (
          I = G.lastsecs.toString(),
          this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_END, I),
          U &&
          U.length &&
          setTimeout(
            (
              function () {
                var e = GlobalData.optManager.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_END);
                ListManager.Trello.TrelloUpdateCardData(
                  E,
                  ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
                  e
                )
              }
            ),
            1000
          )
        ),
        m == C
      ) {
        x = F ? ListManager.TimeScale.SDG_DAY_WITH_HOURS : ListManager.TimeScale.SDG_MONTH_WITH_DAYS;
        C = this.GanttBumpSDRDateInGrid(x, !0, C)
      } (0 == i.firstsecs || i.firstsecs > G.firstsecs) &&
        (i.firstsecs = G.firstsecs),
        (0 == i.lastsecs || i.lastsecs < G.lastsecs) &&
        (i.lastsecs = G.lastsecs),
        (0 == i.firstend || i.firstend > G.firstend) &&
        (i.firstend = G.firstend),
        I = D ? this.GanttPCToString(D) : '',
        R = D ||
        0,
        this.GanttUpdateDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_PC, I),
        U &&
        U.length &&
        ListManager.Trello.TrelloUpdateCardData(
          E,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PC],
          I
        ),
        I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH),
        0 === (P = parseInt(I)) &&
        (P = 1e-12),
        k += P,
        N += R *= P
    } else {
      if (
        I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
        m = parseInt(I),
        I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
        m == (C = parseInt(I))
      ) {
        x = F ? ListManager.TimeScale.SDG_DAY_WITH_HOURS : ListManager.TimeScale.SDG_MONTH_WITH_DAYS;
        C = this.GanttBumpSDRDateInGrid(x, !0, C)
      } (0 == i.firstsecs || i.firstsecs > m) &&
        (i.firstsecs = m),
        (0 == i.lastsecs || i.lastsecs < C) &&
        (i.lastsecs = C),
        (0 == i.firstend || i.firstend > C) &&
        (i.firstend = C),
        null != D &&
        (
          I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH),
          k += P = parseFloat(I),
          R = (
            I = this.GanttGetDataValue(E, ListManager.Table.CellTypes.SDT_CT_GANTT_PC)
          ) &&
            I.length > 0 ? parseInt(I) : 0,
          N += R *= P
        )
    }
  return k > 0 &&
    (D = N / k),
  {
    nDataRows: A,
    count: n,
    percentComplete: D
  }
}

ListManager.LM.prototypeGanttDuplicateTable = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c = null,
    u = null;
  if (c = null, s = e.GetTable(!0)) {
    if (
      s.rows.length,
      n = (u = this.GanttGetFirstDataRow(s)) ? u.row : s.rows.length,
      (r = s.rows.length - n) != t &&
      (a = !0),
      !a
    ) return null;
    for (c = Utils1.DeepCopy(s), i = n; i < s.rows.length; i++) for (l = s.rows[i], o = 0; o < l.ncells; o++) (S = s.cells[l.start + o]).datarecordID = - 1,
      S.DataID = - 1;
    if (t > r) {
      var p = s.rows.length;
      GlobalData.optManager.Table_AddRows(e, s, s.rows.length - 1, n + t - 1 - 1, !1, !0, !1);
      var d = GlobalData.optManager.Table_GetActiveID(),
        D = this.GetObjectPtr(this.theTEDSessionBlockID, !0);
      D.theActiveTableObjectID = e.BlockID;
      var g = {
        StyleRecord: {
          Fill: {
            Paint: {
              Color: ConstantData.Colors.Color_White
            }
          }
        }
      };
      for (i = s.rows.length - 1; i >= p; i--) {
        for (o = 0; o < s.rows[i].ncells; o++) (S = s.cells[s.rows[i].start + o]).flags = Utils2.SetFlag(S.flags, ListManager.Table.CellFlags.SDT_F_Select, !0);
        for (e.SetObjectStyle(g), o = 0; o < s.rows[i].ncells; o++) (S = s.cells[s.rows[i].start + o]).flags = Utils2.SetFlag(S.flags, ListManager.Table.CellFlags.SDT_F_Select, !1);
        switch (S.celltype) {
          case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
          case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
          case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
            S.flags = Utils2.SetFlag(S.flags, ListManager.Table.CellFlags.SDT_F_NoText, !1)
        }
      }
      D.theActiveTableObjectID = d
    } else t + 0 < r &&
      GlobalData.optManager.Table_RemoveRows(e, s, n + t, s.rows.length - 1)
  }
  return c
}

ListManager.LM.prototypePlanningTableIsShowingGranularity = function (e, t, a) {

  var r,
    i,
    n = !1;
  if (!(r = e || this.GetCurrentPlanningTable(t, !1))) return !1;
  if (
    i = r.GetGanttInfo(!1),
    a === ListManager.TimeAmounts.OneHourNS
  ) n = i.timeScale == ListManager.TimeScale.SDG_DAY_WITH_HOURS;
  else if (a === ListManager.TimeAmounts.OneDayNS) switch (i.timeScale) {
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
      n = !1
  }
  return n
}

ListManager.LM.prototypeGetCurrentPlanningTable = function (e, t, a, r) {

  var i,
    n,
    o,
    s = null,
    l = GlobalData.objectStore.GetObject(GlobalData.optManager.theSelectedListBlockID).Data,
    S = GlobalData.optManager.ActiveVisibleZList(),
    c = 0,
    u = GlobalData.optManager.Table_GetActiveID();
  if (u >= 0 && (s = this.GetObjectPtr(u, t)) && - 1 !== e && e === s.objecttype) return s;
  if (
    n = this.GetObjectPtr(this.theSEDSessionBlockID, t),
    l.length >= 0 &&
    n.tselect >= 0 &&
    (s = this.GetObjectPtr(n.tselect)) &&
    s instanceof ListManager.BaseDrawingObject
  ) {
    if (
      - 1 !== e &&
      s.objecttype === e ||
      s.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
    ) return this.GetObjectPtr(n.tselect, t),
      s;
    if (
      s.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
      s.hooks.length &&
      (i = this.GetObjectPtr(s.hooks[0].objid, !1)) &&
      i.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
    ) return i = this.GetObjectPtr(s.hooks[0].objid, t)
  }
  if (a) for (c = S.length, o = 0; o < c; o++) if (
    (s = GlobalData.optManager.GetObjectPtr(S[o])) &&
    - 1 !== e &&
    s.objecttype === e &&
    s.datasetTableID === a
  ) return s;
  c = S.length;
  var p = null,
    d = 0;
  for (o = 0; o < c; o++) if (
    (s = GlobalData.optManager.GetObjectPtr(S[o])) &&
    s.objecttype === e &&
    (p = s, d++, r)
  ) return s;
  return 1 === d ? p : null
}

ListManager.LM.prototypeGanttLoadLayer = function () {
  var e,
    t,
    a,
    r = - 1,
    i = GlobalData.optManager.ActiveVisibleZList(),
    n = ListManager.SessionFlags,
    o = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
  for (
    e = i.length,
    o.flags = Utils2.SetFlag(o.flags, n.SEDS_LLink, !1),
    t = 0;
    t < e;
    t++
  ) (a = GlobalData.optManager.GetObjectPtr(i[t], !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
    (r = i[t]);
  r >= 0 &&
    (
      a = GlobalData.optManager.GetObjectPtr(r, !1),
      GlobalData.optManager.TrimPersonTable(a.datasetID, a.datasetTableID),
      GlobalData.optManager.AddToDirtyList(r),
      GlobalData.optManager.RenderDirtySVGObjects(),
      GlobalData.optManager.GanttFormat(r, !0, !0, !0, null)
    )
}

ListManager.LM.prototypeGanttUnhideAllRows = function (e) {
  for (
    var t = 0,
    a = GlobalData.optManager.GetObjectPtr(e, !1),
    r = ListManager.SDData.GetNumRows(a.datasetTableID, '', ''),
    i = 0;
    i < r;
    i++
  ) {
    var n = ListManager.SDData.GetRow(a.datasetTableID, '', '', i),
      o = ListManager.SDData.GetValue(
        n,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE]
      );
    o &&
      !isNaN(o) &&
      1 == parseInt(o) &&
      (
        ListManager.SDData.UpdateValue(
          n,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE],
          '0'
        ),
        t++
      )
  }
  return t
}

ListManager.LM.prototypeGanttFormat = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = 0,
    L = - 1,
    I = !1,
    T = !1,
    b = null,
    M = {},
    P = null,
    R = 0,
    A = - 1;
  GlobalData.optManager.ActiveVisibleZList();
  if (
    D = Resources.FindStyle(ListManager.GanttDefines.GANTT_WORKING_STYLE),
    g = Resources.FindStyle(ListManager.GanttDefines.GANTT_NONWORKING_STYLE),
    nonworkdaysResult = this.GanttGetNonWorkingDays(),
    o = nonworkdaysResult.nonWorkingDays,
    (s = nonworkdaysResult.holidayMask) &&
    (P = this.LoadHolidays(!1), S = this.CountryNameFromHolidayMask(s)),
    e < 0
  ) return 1;
  d = (c = this.GetObjectPtr(e, !0)).BlockID;
  var _ = c.GetGanttInfo(!0);
  if (!_) return 1;
  if (
    M.firstsecs = 0,
    M.lastsecs = 0,
    M.firstend = 0,
    i &&
      i.length ? (
      C = - 1,
      (
        m = ListManager.SDData.GetValue(
          i[0],
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
        )
      ) &&
      m.length > 0 &&
      (y = parseInt(m)) >= 0 &&
      (C = y),
      ganttUpdateTaskDataResult = this.GanttUpdateTaskData(e, c.datasetTableID, C, !1, M, R, - 1, 0, 0, 0, - 1, o, P, S, 0, i),
      R = ListManager.SDData.GetNumRows(c.datasetTableID, '', '')
    ) : (
      ganttUpdateTaskDataResult = this.GanttUpdateTaskData(e, c.datasetTableID, - 1, !1, M, R, - 1, 0, 0, 0, - 1, o, P, S, 0, i),
      ganttUpdateTaskDataResult &&
      (R = ganttUpdateTaskDataResult.count)
    ),
    !(b = c.GetTable(!0))
  ) return 1;
  u = this.GanttDuplicateTable(c, R, t),
    GlobalData.optManager.Table_GetActiveID() === b.BlockID &&
    (A = b.BlockID),
    a &&
    this.GanttValidateDependencies(u || b, c.datasetTableID, - 1),
    (
      I = this.GanttUpdateDependencies(c, c.datasetTableID, - 1, o, P, S, I, null)
    ) &&
    (
      M.firstsecs = 0,
      M.lastsecs = 0,
      M.firstend = 0,
      this.GanttUpdateTaskData(e, c.datasetTableID, - 1, !1, M, R, - 10, 0, 0, 0, - 1, o, P, S, 0, i)
    ),
    _.cachedRange &&
    _.cachedRange.firstsecs == M.firstsecs &&
    _.cachedRange.lastsecs == M.lastsecs &&
    _.cachedRange.firstend == M.firstend ||
    (
      _.cachedRange = {},
      _.cachedRange = Utils1.DeepCopy(M),
      this.GanttUpdateRange(c, M, !1)
    );
  var E = this.GanttGetFirstDataRow(b);
  if (!E) return 1;
  if (
    L = E.row,
    L--,
    f = (
      h = this.GanttMapDataToTable(e, b, u, c.datasetTableID, - 1, D, g, 0, '', L, !1, i)
    ).result,
    L = h.row,
    h.reformat,
    u &&
    this.GanttCleanBarsAndTable(u),
    this.PlanningTableUpdateGeometry(c, !0),
    0 == f &&
    (f = this.GanttUpdateDependencyLines(d), r || this.UpdateLinks()),
    0 == f
  ) {
    var w = b.cells;
    i &&
      (w = i),
      l = w.length;
    var F = [];
    for (n = 0; n < l; n++) w[n].celltype !== ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
      w[n].celltype !== ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER &&
      w[n].celltype !== ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE ||
      F.push(n);
    GlobalData.optManager.Table_ReformatText(c, b, 1, b.rows.length - 1, F)
  }
  if (A === b.BlockID && GlobalData.optManager.Table_GetActiveID() < 0 && u) for (
    p = b.cells.length < u.cells.length ? b.cells.length : u.cells.length,
    b.select = u.select,
    n = 0;
    n < p;
    n++
  ) b.cells[n].flags = Utils2.SetFlag(
    b.cells[n].flags,
    ListManager.CellFlags.SDT_F_Select,
    u.cells[n].flags & ListManager.CellFlags.SDT_F_Select
  );
  return null == i &&
    (T = this.GanttDoRowShading(e)),
    T ||
    GlobalData.optManager.Table_BuildFills(c, b, c.StyleRecord.Fill),
    f ||
    r ||
    this.UpdateLinks(),
    null == i &&
    GlobalData.optManager.AddToDirtyList(e),
    f
}

ListManager.LM.prototypeSDGantt_UpdateParents = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = {},
    C = !1,
    y = t.toString();
  o = ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD];
  var f,
    L = ListManager.SDData.GetNumRows(e, o, y),
    I = null,
    T = null;
  m.firstsecs = 0,
    m.lastsecs = 0,
    m.firstend = 0,
    d = 0,
    g = 0;
  var b = ListManager.SDData.GetValue(
    t,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
  );
  for (i = 0; i < L; i++) n = ListManager.SDData.GetRow(e, o, y, i),
    s = this.GanttGetDataValue(n, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
    l = parseInt(s),
    s = this.GanttGetDataValue(n, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
    l == (S = parseInt(s)) &&
    (
      c = a ? ListManager.TimeScale.SDG_DAY_WITH_HOURS : ListManager.TimeScale.SDG_MONTH_WITH_DAYS,
      S = this.GanttBumpSDRDateInGrid(c, !0, S)
    ),
    (0 === m.firstsecs || m.firstsecs > l) &&
    (m.firstsecs = l),
    (0 === m.lastsecs || m.lastsecs < S) &&
    (m.lastsecs = S),
    (0 === m.firstend || m.firstend > S) &&
    (m.firstend = S),
    s = this.GanttGetDataValue(n, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH),
    0 === (p = parseFloat(s)) &&
    (p = 1e-12),
    d += p,
    g += D = p * (
      D = (
        s = this.GanttGetDataValue(n, ListManager.Table.CellTypes.SDT_CT_GANTT_PC)
      ) &&
        s.length > 0 ? parseInt(s) : 0
    ) / 100;
  if (
    s = this.GanttGetDataValue(t, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
    l = parseInt(s),
    s = this.GanttGetDataValue(t, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
    S = parseInt(s),
    D = (
      s = this.GanttGetDataValue(t, ListManager.Table.CellTypes.SDT_CT_GANTT_PC)
    ) &&
      s.length > 0 ? parseInt(s) : 0,
    d ? (h = g / d, h *= 100) : h = 0,
    Utils2.IsEqual(h, D) ||
    (
      '0' == (s = this.GanttPCToString(h)) &&
      (s = ''),
      this.GanttUpdateDataValue(t, ListManager.Table.CellTypes.SDT_CT_GANTT_PC, s),
      b &&
      b.length &&
      ListManager.Trello.TrelloUpdateCardData(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PC],
        s
      ),
      C = !0
    ),
    m.firstsecs - l != m.lastsecs - S
  ) {
    var M = (f = this.GanttGetNonWorkingDays()).nonWorkingDays,
      P = f.holidayMask;
    P &&
      (I = this.LoadHolidays(!1), T = this.CountryNameFromHolidayMask(P)),
      ndays = this.GanttGetDuration(m.firstsecs, m.lastsecs, M, I, T),
      s = this.GanttDurationToString(ndays),
      this.GanttUpdateDataValue(t, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH, s),
      C = !0
  }
  if (
    l != m.firstsecs &&
    (
      s = m.firstsecs.toString(),
      this.GanttUpdateDataValue(t, ListManager.Table.CellTypes.SDT_CT_GANTT_START, s),
      C = !0
    ),
    S != m.lastsecs &&
    (
      s = m.lastsecs.toString(),
      this.GanttUpdateDataValue(t, ListManager.Table.CellTypes.SDT_CT_GANTT_END, s),
      C = !0,
      b &&
      b.length &&
      ListManager.Trello.TrelloUpdateCardData(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
        s
      )
    ),
    '-1' == ListManager.SDData.GetValue(
      t,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
    ) &&
    1 === L &&
    (C = !0),
    l == S &&
    (
      c = a ? ListManager.TimeScale.SDG_DAY_WITH_HOURS : ListManager.TimeScale.SDG_MONTH_WITH_DAYS,
      S = this.GanttBumpSDRDateInGrid(c, !0, S)
    ),
    C
  ) {
    r &&
      r.indexOf(t) < 0 &&
      r.push(t);
    var R = ListManager.SDData.GetValue(t, o);
    R &&
      R.length > 0 &&
      (u = parseInt(R)) >= 0 &&
      (parentid = u, this.SDGantt_UpdateParents(e, parentid, a, r))
  }
}

ListManager.LM.prototypeGanttFastFormat = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = {},
    L = ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
    I = null,
    T = null,
    b = !1,
    M = [];
  if (t && t.indexOf && t.indexOf(- 1) >= 0) this.GanttFormat(e.BlockID, !1, !1, !0, null);
  else if (null != (o = e.GetTable(!0)) && null != (h = e.GetGanttInfo(!0))) {
    var P = (m = this.GanttGetNonWorkingDays()).nonWorkingDays,
      R = m.holidayMask;
    for (
      R &&
      (I = this.LoadHolidays(!1), T = this.CountryNameFromHolidayMask(R)),
      y = this.PlanningTableIsShowingGranularity(e, - 1, ListManager.TimeAmounts.OneHourNS),
      r = t.length,
      a = 0;
      a < r;
      a++
    ) (i = ListManager.SDData.GetValue(t[a], L)) &&
      i.length > 0 &&
      (n = parseInt(i)) >= 0 &&
      (
        parentid = n,
        t.indexOf(n) < 0 &&
        this.SDGantt_UpdateParents(e.datasetTableID, parentid, y, t)
      );
    for (r = t.length, C = !1, a = 0; a < r; a++) l = t[a],
      (
        C = this.GanttUpdateDependencies(e, e.datasetTableID, l, P, I, T, C, M)
      ) &&
      (b = !0),
      (
        i = ListManager.SDData.GetValue(
          t[a],
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
        )
      ) &&
      i.length > 0 &&
      (n = parseInt(i)) >= 0 &&
      (
        C = this.GanttUpdateDependencies(e, e.datasetTableID, n, P, I, T, C, M)
      ) &&
      (b = !0);
    if (b) {
      for (r = M.length, a = 0; a < r; a++) (i = ListManager.SDData.GetValue(M[a], L)) &&
        i.length > 0 &&
        (n = parseInt(i)) >= 0 &&
        (
          parentid = n,
          this.SDGantt_UpdateParents(e.datasetTableID, parentid, y, M)
        );
      for (r = M.length, a = 0; a < r; a++) l = M[a],
        t.indexOf(l) < 0 &&
        t.push(l)
    }
    if (
      p = ListManager.SDData.GetRow(e.datasetTableID, L, '-1', 0),
      d = this.GanttGetDataValue(p, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
      D = parseInt(d),
      d = this.GanttGetDataValue(p, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
      D == (g = parseInt(d))
    ) {
      var A = y ? ListManager.TimeScale.SDG_DAY_WITH_HOURS : ListManager.TimeScale.SDG_MONTH_WITH_DAYS;
      g = this.GanttBumpSDRDateInGrid(A, !0, g)
    }
    for (
      f.firstsecs = D,
      f.lastsecs = g,
      f.firstend = g,
      h.cachedRange &&
      h.cachedRange.firstsecs == f.firstsecs &&
      h.cachedRange.lastsecs == f.lastsecs &&
      h.cachedRange.firstend == f.firstend ||
      (
        h.cachedRange = {},
        h.cachedRange = Utils1.DeepCopy(f),
        this.GanttUpdateRange(e, f, !0)
      ),
      r = t.length,
      a = 0;
      a < r;
      a++
    ) if (l = t[a], !((s = GlobalData.optManager.GanttRecordToRow(o, l)).rowIndex < 0)) {
      for (S = o.rows[s.rowIndex], c = 0; c < S.ncells; c++) switch (o.cells[S.start + c].celltype) {
        case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
          this.GanttSetCellValue(e, o, c + S.start, '')
      }
      u = this.GanttRowToBar(l),
        (u = GlobalData.optManager.GetObjectPtr(u.BlockID, !0)).flags = Utils2.SetFlag(u.flags, ConstantData.ObjFlags.SEDO_NotVisible, !1),
        GlobalData.optManager.DirtyListReOrder = !0,
        this.GanttKillLinks(u.BlockID, - 2, - 1, !0),
        this.GanttLinkBarToRow(e.BlockID, u.BlockID, o, s.rowIndex)
    }
  }
}

ListManager.LM.prototypePlanningTableUpdateGeometry = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = null,
    S = !1,
    c = 0,
    u = - 1,
    p = !0;
  if (r = e.GetTable(!1), !(l = e.GetGanttInfo(!0))) return - 1;
  if (
    p = !0,
    s = this.GanttGetDateblockWidth(
      e,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
    ),
    l.dateBlockWidth === s &&
    l.cachedTimeScale === l.timeScale &&
    l.cachedConfiguredStart === l.configuredStart &&
    l.cachedConfiguredEnd === l.configuredEnd &&
    (p = !1),
    p
  ) {
    if (
      l.dateBlockWidth = s,
      l.cachedConfiguredStart = l.configuredStart,
      l.cachedConfiguredEnd = l.configuredEnd,
      this.GanttIsTimeScaleAutoFit(e) &&
      !a &&
      null == (u = this.GanttFindMostGranularFit(e))
    ) return - 1;
    if (
      u >= 0 &&
      (
        n = l.timeScale,
        l.timeScale = u,
        l.cachedTimeScale = l.timeScale,
        l.timeScale != n &&
        (S = !0, l.scrollOffset = 0)
      ),
      l.start = this.GanttGetPrevAlignmentSDRDateInGrid(l, l.configuredStart),
      l.end = this.GanttGetEndOfTimeScale(l, l.configuredEnd),
      (i = this.GanttGetGridCount(l, l.timeScale)) < 0
    ) return - 1;
    if (
      this.GanttBuildGridList(l, i),
      l.nTitle1 = this.GanttGettTitleCount(l),
      l.nTitle1 < 0
    ) return - 1;
    if (
      l.gridWd = this.GanttGetLabelColumnWidth(l, r, ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS),
      l.gridWd * l.gridTimes.length < s &&
      (l.gridWd = s / i),
      l.gridWd < 0
    ) return - 1;
    l.scrollStart = this.GanttGetTimeFromOffset(l, l.scrollOffset, !0),
      l.scrollEnd = this.GanttGetTimeFromOffset(l, l.scrollOffset + s, !0)
  }
  return t &&
    (c = this.GanttRelinkAllBars(e, a)),
    l.scrollOffset > 0 &&
    l.scrollOffset + s > l.gridWd * l.gridTimes.length &&
    (
      (o = l.gridWd * l.gridTimes.length - s) < 0 &&
      (o = 0),
      this.GanttScrollDateblock(e, - 1, o)
    ),
    0 === c &&
    S &&
    this.GanttAdjustTableForTimeScale(e, l, n),
    GlobalData.optManager.AddToDirtyList(e.BlockID),
    c
}

ListManager.LM.prototypeGanttAdjustTableForTimeScale = function (e, t, a) {

  var r,
    i,
    n,
    o,
    s,
    l = !1;
  return n = (s = this.Table_GetColumnMask(e.BlockID, 0)).columnMask,
    s.startDay,
    o = n,
    n = Utils2.SetFlag(
      n,
      ListManager.Table.ColumnMasks.SDT_CM_START_TIME,
      t.timeScale === ListManager.TimeScale.SDG_DAY_WITH_HOURS
    ),
    (
      n = Utils2.SetFlag(
        n,
        ListManager.Table.ColumnMasks.SDT_CM_END_TIME,
        t.timeScale === ListManager.TimeScale.SDG_DAY_WITH_HOURS
      )
    ) != o &&
    0 == (i = this.Gantt_HideandShowColumns(e.BlockID, n)) &&
    (l = !0),
    e.objecttype == ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
    (
      a == ListManager.TimeScale.SDG_DAY_WITH_HOURS,
      t.timeScale == ListManager.TimeScale.SDG_DAY_WITH_HOURS
    ),
    l &&
    (r = e.GetTable(!0)) &&
    null == this.Table_TextGrow(e, r, - 1, !1, null, !1, null) &&
    (i = this.Table_Format(e, r, e.TextGrow, !1)),
    i
}

ListManager.LM.prototypeTable_GetColumnMask = function (e, t) {
  var a,
    r,
    i,
    n,
    o = !1,
    s = {
      columnMask: 0,
      startDay: - 1
    };
  if (
    Collab.IsProcessingMessage() ||
    this.DeactivateAllTextEdit(!1),
    e < 0
  ) return null;
  if (!(a = GlobalData.optManager.GetObjectPtr(e))) return null;
  if (!(n = a.GetGanttInfo(!1))) return null;
  if (
    s.startDay = n.startDay,
    theTable = a.GetTable(),
    theTable &&
    a.objecttype == ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
  ) for (r = 0; r < theTable.rows.length; r++) {
    for (i = 0; i < theTable.rows[r].ncells; i++) switch (theTable.cells[theTable.rows[r].start + i].celltype) {
      case ListManager.Table.CellTypes.SDT_CT_GANTTTASK:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_TASK,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_TASKNUMBER,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_START,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_START_TIME,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_RESOURCES,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_DEPT:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_DEPT,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_COST:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_COST,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_CUST:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_CUST,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_END,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_END_TIME,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
        o = !0,
          s.columnMask = Utils2.SetFlag(
            s.columnMask,
            ListManager.Table.ColumnMasks.SDT_CM_LENGTH,
            !0
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
        o = !0,
          s.columnMask = Utils2.SetFlag(s.columnMask, ListManager.Table.ColumnMasks.SDT_CM_PC, !0)
    }
    if (o) break
  }
  return s
}

ListManager.LM.prototypeGantt_HideandShowColumns = function (e, t, a) {
  this.GetObjectPtr(this.theTEDSessionBlockID, !0);
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = 0,
    L = - 1,
    I = !1,
    T = 0,
    b = this.svgObjectLayer.GetElementByID(e),
    M = [
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER,
        width: 70,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTTTASK,
        width: 300,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE,
        width: 200,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_DEPT,
        width: 200,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_COST,
        width: 70,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_CUST,
        width: 200,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_START,
        width: 87,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME,
        width: 87,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_END,
        width: 87,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME,
        width: 87,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH,
        width: 70,
        colIndex: - 1
      },
      {
        cellType: ListManager.Table.CellTypes.SDT_CT_GANTT_PC,
        width: 70,
        colIndex: - 1
      }
    ],
    P = new ListManager.Table.GanttColumnHeaders;
  if (null != b) {
    if (void 0 !== a) for (d = a.length, D = M.length, i = 0; i < d; i++) for (n = 0; n < D; n++) a[i].Settings.celltype === M[n].cellType &&
      (
        void 0 !== a[i].Settings.Width &&
        (
          g = parseInt(a[i].Settings.Width),
          isNaN(g) ||
          (g < 50 && (g = 50), g > 400 && (g = 400), M[n].width = g, M[n].changewidth = !0)
        ),
        void 0 !== a[i].Settings.Title &&
        (M[n].Title = a[i].Settings.Title)
      );
    if (
      r = GlobalData.optManager.GetObjectPtr(e, !0),
      GlobalData.optManager.ConfirmPlanningFields(r.datasetTableID),
      (y = r.GetGanttInfo(!0)) ? y.timeScale == ListManager.TimeScale.SDG_DAY_WITH_HOURS &&
        (
          t = Utils2.SetFlag(
            t,
            ListManager.Table.ColumnMasks.SDT_CM_START_TIME,
            (t & ListManager.Table.ColumnMasks.SDT_CM_START) > 0
          ),
          t = Utils2.SetFlag(
            t,
            ListManager.Table.ColumnMasks.SDT_CM_END_TIME,
            (t & ListManager.Table.ColumnMasks.SDT_CM_END) > 0
          )
        ) : (
        t = Utils2.SetFlag(t, ListManager.Table.ColumnMasks.SDT_CM_START_TIME, !1),
        t = Utils2.SetFlag(t, ListManager.Table.ColumnMasks.SDT_CM_END_TIME, !1)
      ),
      !(C = r.GetTable(!0))
    ) return - 1;
    for (i = 0; i < C.rows.length; i++) {
      for (lpr = C.rows[i], n = 0; n < lpr.ncells; n++) if (
        lpc = C.cells[lpr.start + n],
        lpc.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
      ) {
        L = i;
        break
      }
      if (L >= 0) break
    }
    if (L >= 0) {
      for (lpr = C.rows[L], i = 0; i < M.length; i++) for (c = M.length, lpr.ncells < c && (c = lpr.ncells), n = 0; n < c; n++) lpc = C.cells[lpr.start + n],
        lpc.celltype === M[i].cellType &&
        (M[i].colIndex = n);
      for (n = M.length - 1; n >= 0; n--) {
        for (
          o = - 1,
          M[n].cellType,
          ListManager.Table.CellTypes.SDT_CT_GANTTTASK,
          i = 0;
          i < M.length &&
          !(i >= lpr.ncells);
          i++
        ) if (lpc = C.cells[lpr.start + i], lpc.celltype === M[n].cellType) {
          o = i;
          break
        }
        if (
          lastlpr = C.rows[C.rows.length - 1],
          lastlpc = C.cells[lastlpr.start],
          o >= 0 &&
          0 == (t & 1 << n) &&
          M[n].cellType !== ListManager.Table.CellTypes.SDT_CT_GANTTTASK
        ) f = this.Table_RemoveCols(r, C, lpc.colindex - 1, lpc.colindex),
          M[n].colIndex = - 1,
          I = !0,
          lpr = C.rows[L];
        else if (
          o < 0 &&
          t & 1 << n &&
          M[n].cellType !== ListManager.Table.CellTypes.SDT_CT_GANTTTASK
        ) {
          if (
            M[n].cellType === ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER
          ) s = 0,
            h = 0,
            T = 1;
          else for (h = 1, s = - 1, l = n - 1; l >= 0; l--) if (M[l].colIndex >= 0) {
            s = M[l].colIndex;
            break
          }
          if (s < 0) continue;
          if (
            lpc = C.cells[lpr.start + s],
            this.Table_AddCols(r, C, lpc.colindex - 1, lpc.colindex, !1, !0),
            u = s + h,
            lpc = C.cells[s + h],
            lpc.frame.width !== M[n].width
          ) p = M[n].width - lpc.frame.width,
            GlobalData.optManager.theActionTable = C,
            dim = GlobalData.optManager.Table_GrowColumn(r, C, u, p, r.TextGrow, !0, !1, !0),
            GlobalData.optManager.theActionTable = null,
            (E = Utils1.DeepCopy(r)).trect.width = dim.x,
            E.trect.height = dim.y,
            E.TRectToFrame(E.trect, !0),
            GlobalData.optManager.svgObjectLayer.RemoveElement(b),
            r.SetSize(E.Frame.width, null, - 1);
          if (
            I = !0,
            lpr = C.rows[L],
            m = P.lookup[M[n].cellType],
            M[n].Title &&
            (m = M[n].Title),
            lpc = C.cells[s + h],
            this.SetColumnHeader(b, r, lpc, m, s + h),
            0 === s &&
            0 === h
          ) {
            var R = - 1;
            for (l = n + 1; l < M.length; l++) if (M[l].colIndex >= 0) {
              R = l;
              break
            }
            if (R >= 0) {
              m = P.lookup[M[R].cellType],
                lpc = C.cells[s + h + 1],
                this.SetColumnHeader(b, r, lpc, m, s + h + 1);
              var A = C.rows.length;
              for (S = 0; S < A; S++) C.cells[C.rows[S].start].datarecordID >= 0 &&
                (
                  C.cells[C.rows[S].start + 1].datarecordID = C.cells[C.rows[S].start].datarecordID
                )
            }
          }
          for (
            I = !0,
            lpc.flags = Utils2.SetFlag(lpc.flags, ListManager.Table.CellFlags.SDT_F_NoText, !1),
            i = 0;
            i < C.rows.length;
            i++
          ) if (lpr = C.rows[i], lpc = C.cells[lpr.start + s + h], lpc.celltype) {
            switch (
            lpc.celltype = M[n].cellType,
            lpc.datarecordID = C.cells[lpr.start + T].datarecordID,
            lpc.just = ConstantData.TextAlign.CENTER,
            M[n]
            ) {
              case ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER:
                lpc.flags = Utils2.SetFlag(lpc.flags, ListManager.Table.CellFlags.SDT_F_NoText, !0);
                break;
              case ListManager.Table.CellTypes.SDT_CT_GANTT_DEPT:
              case ListManager.Table.CellTypes.SDT_CT_GANTT_CUST:
              case ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE:
                lpc.just = ConstantData.TextAlign.LEFT;
                break;
              case ListManager.Table.CellTypes.SDT_CT_GANTT_COST:
                lpc.just = ConstantData.TextAlign.RIGHT
            }
            var _ = this.GanttCellDataToValue(r, C, r.datasetTableID, lpr.start + s + h, null);
            if (null == I) return - 1;
            _ &&
              (I = !0)
          }
        } else if (o >= 0 && (M[n].changewidth || M[n].Title)) {
          for (lpr = C.rows[L], s = - 1, l = 0; l < lpr.ncells; l++) if (lpc = C.cells[lpr.start + l], lpc.celltype === M[n].cellType) {
            s = l;
            break
          }
          if (s < 0) continue;
          var E;
          if (
            lpc = C.cells[lpr.start + s],
            M[n].changewidth &&
            lpc.frame.width !== M[n].width
          ) p = M[n].width - lpc.frame.width,
            GlobalData.optManager.theActionTable = C,
            dim = GlobalData.optManager.Table_GrowColumn(r, C, lpc.colindex, p, r.TextGrow, !0, !1, !0),
            GlobalData.optManager.theActionTable = null,
            (E = Utils1.DeepCopy(r)).trect.width = dim.x,
            E.trect.height = dim.y,
            E.TRectToFrame(E.trect, !0),
            GlobalData.optManager.svgObjectLayer.RemoveElement(b),
            r.SetSize(E.Frame.width, null, - 1);
          M[n].Title &&
            (lpc = C.cells[s], this.SetColumnHeader(b, r, lpc, M[n].Title, s))
        }
      }
    }
    if (I) {
      if (
        GlobalData.optManager.AddToDirtyList(r.BlockID),
        GlobalData.optManager.RenderDirtySVGObjects(),
        newDim = this.Table_TextGrow(r, C, - 1, !1, null, !1, null),
        newDim &&
        (f = this.Table_Format(r, C, - 1, !1, !1))
      ) return - 1;
      this.PlanningTableUpdateGeometry(r, !0),
        this.RenderDirtySVGObjects(),
        this.GanttFormat(r.BlockID, !1, !1, !1, null)
    }
    return this.Gantt_UpdateStartProperties(C),
      f
  }
}

ListManager.LM.prototypeSetColumnHeader = function (e, t, a, r, i) {
  var n,
    o,
    s = {},
    l = e.GetElementByID(ConstantData.SVGElementClass.TEXT, a.DataID);
  if (l) e.RemoveElement(l),
    l.SetText(r);
  else {
    var S = this.CalcDefaultInitialTextStyle(a.Text);
    (
      l = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT)
    ).SetParagraphAlignment(a.just),
      l.SetVerticalAlignment(a.vjust),
      l.SetText(r),
      l.SetFormat(S),
      l.SetParagraphStyle(S)
  }
  if (
    s.runtimeText = l.GetRuntimeText(),
    n = new ListManager.TextObject(s),
    o = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, n)
  ) {
    if (a.DataID >= 0) {
      var c = GlobalData.objectStore.GetObject(a.DataID);
      c &&
        c.Delete()
    }
    a.DataID = o.ID
  }
  this.Table_AddSVGTextObject(t, this.svgDoc, e, a, i)
}

ListManager.LM.prototypeGanttCellDataToValue = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = 0,
    h = '',
    m = {},
    C = !1,
    y = {},
    f = this.svgObjectLayer.GetElementByID(e.BlockID);
  if (null != f) {
    switch ((s = t.cells[r]).celltype) {
      case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
        i = ListManager.Table.CellTypes.SDT_CT_GANTT_START;
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
        i = ListManager.Table.CellTypes.SDT_CT_GANTT_END;
        break;
      default:
        i = s.celltype
    }
    if (
      s.celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER
    ) h = (m = this.GanttGetTaskNumber(s.datarecordID, h, g)).taskNumber,
      g = m.indent,
      C = (I = this.GanttSetTaskIndent(e, t, r, g)).reformat;
    else null != (n = this.GanttGetFieldName(i)) &&
      (
        s.datarecordID < 0 ? h = '' : null != (h = ListManager.SDData.GetValue(s.datarecordID, n)) ? 0 : - 1
      );
    if (h) {
      switch (s.celltype) {
        case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
          0 == parseFloat(h) &&
            (h = '');
          break;
        case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
          h.length &&
            (
              l = parseInt(h),
              u = Utils2.SDRLocalTime(l),
              h = Utils2.SDRTimeToString(
                u,
                Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat)
              )
            );
          break;
        case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
          h.length &&
            (
              l = parseInt(h),
              u = Utils2.SDRLocalTime(l),
              o = this.GanttGetDataValue(
                s.datarecordID,
                ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH
              ),
              p = parseFloat(o),
              o = this.GanttGetDataValue(
                s.datarecordID,
                ListManager.Table.CellTypes.SDT_CT_GANTT_START
              ),
              c = parseInt(o),
              p > 0 &&
              l > c + 60 &&
              0 === u.wHour &&
              0 === u.wMinute &&
              0 === u.wSecond &&
              (l -= 60, u = Utils2.SDRLocalTime(l)),
              h = Utils2.SDRTimeToString(
                u,
                Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat)
              )
            );
          break;
        case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
          h.length &&
            (
              l = parseInt(h),
              u = Utils2.SDRLocalTime(l),
              S = l,
              h = (l -= S = this.TrimHours(S)) < 0 ? '' : this.GanttTimeToString(l)
            )
      }
      if (s.DataID < 0) {
        if (
          D = f.GetElementByID(ConstantData.SVGElementClass.TEXT, s.DataID)
        ) f.RemoveElement(D),
          D.SetText(h);
        else {
          var L = {
            size: SDF.PointSizeToFontSize(s.Text.FontSize),
            font: s.Text.FontName,
            style: s.Text.Face,
            color: s.Text.Paint.Color
          };
          (
            D = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT)
          ).SetParagraphAlignment(s.just),
            D.SetVerticalAlignment(s.vjust),
            D.SetText(h, L)
        }
        y.runtimeText = D.GetRuntimeText(),
          theTextObject = new ListManager.TextObject(y),
          (
            d = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, theTextObject)
          ) &&
          (s.DataID = d.ID),
          this.Table_AddSVGTextObject(e, this.svgDoc, f, s, r),
          C = !0
      }
      var I;
      (
        D = f.GetElementByID(ConstantData.SVGElementClass.TEXT, s.DataID)
      ).SetText(h),
        theTextBlock = this.GetObjectPtr(s.DataID, !0),
        theTextBlock &&
        (theTextBlock.runtimeText = D.GetRuntimeText()),
        (I = this.GanttSetTaskIndent(e, t, r, g)).reformat &&
        (C = I.reformat)
    }
    return C
  }
}

ListManager.LM.prototypeGanttGetTaskNumber = function (e, t, a) {
  var r,
    i,
    n,
    o = - 1,
    s = {};
  return t[0] = 0,
    0 == e ? null : (
      r = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
      )
    ) ? (
      n = parseInt(r),
      r = (++n).toString(),
      (
        i = ListManager.SDData.GetValue(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
        )
      ) &&
      i.length > 0 &&
      (n = parseInt(i)) >= 0 &&
      (o = n),
      o >= 0 ? (
        a++,
        i = (s = this.GanttGetTaskNumber(o, i, a)).taskNumber,
        a = s.indent,
        i.length &&
        (i += '.', r = i += r)
      ) : r = '',
      {
        taskNumber: r,
        indent: a
      }
    ) : null
}

ListManager.LM.prototypeGanttFindMostGranularFit = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
    C = - 1,
    y = e.GetGanttInfo(!1);
  for (
    t = Utils1.DeepCopy(y),
    a = e.GetTable(!1),
    c = this.GanttGetDateblockWidth(
      e,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
    ),
    (
      n = this.GanttGetDateblockFrame(
        e,
        ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_TITLE
      )
    ) ||
    (n = new Rectangle(0, 0, 0, 0)),
    lpTry = '2.3.11.5.1.17',
    lpTryList = lpTry.split('.'),
    r = t.start,
    o = 0;
    o < lpTryList.length;
    o++
  ) {
    if (
      (p = ListManager.SDData.GetRow(e.datasetTableID, m, '-1', 0)) ? (
        g = this.GanttGetDataValue(p, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
        d = parseInt(g),
        g = this.GanttGetDataValue(p, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
        D = parseInt(g)
      ) : d = r,
      S = parseInt(lpTryList[o]),
      t.timeScale = S,
      t.start = this.GanttGetPrevAlignmentSDRDateInGrid(t, d),
      t.scrollStart = t.start,
      t.end = this.GanttGetEndOfTimeScale(t, D),
      t.scrollEnd = t.end,
      (l = this.GanttGetGridCount(t, t.timeScale)) < 0
    ) return - 1;
    if (
      this.GanttBuildGridList(t, l),
      t.nTitle1 = this.GanttGettTitleCount(t),
      t.nTitle1 < 0
    ) return - 1;
    if (
      t.gridWd = this.GanttGetLabelColumnWidth(t, a, ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS),
      t.gridWd * t.gridTimes.length > c
    ) break;
    if (
      t.gridWd = c / t.gridTimes.length,
      !Utils2.IsRectEmpty(n) &&
      t.nTitle1 > 0
    ) {
      for (
        u = this.GanttGetLabelColumnWidth(
          t,
          a,
          ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS
        ),
        h = !0,
        s = 0;
        s < t.nTitle1;
        s++
      ) if (u > (i = this.GanttGetTitle1FrameByIndex(t, n, s)).right - i.left) {
        h = !1;
        break
      }
      if (!h) break
    }
    C = S
  }
  return C
}

ListManager.LM.prototypePlanningTableSetFlag = function (e, t, a, r) {
  var i,
    n;
  return !!(i = null != e ? e : this.GetCurrentPlanningTable(t)) &&
    (
      !!(n = i.GetGanttInfo()) &&
      void (n.flags = Utils2.SetFlag(n.flags, a, r))
    )
}

ListManager.LM.prototypePlanningTableTestFlag = function (e, t, a) {
  var r,
    i;
  return !!(r = null != e ? e : this.GetCurrentPlanningTable(t)) &&
    (!!(i = r.GetGanttInfo()) && 0 != (i.flags & a))
}

ListManager.LM.prototypeGanttIsTimeScaleAutoFit = function (e) {
  return this.PlanningTableTestFlag(
    e,
    ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART,
    ListManager.Table.GanttGridFlags.SDGF_FIT_TO_WINDOW
  )
}

ListManager.LM.prototypeGanttSetTimeScaleAutoFit = function (e, t) {
  this.PlanningTableSetFlag(
    e,
    ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART,
    ListManager.Table.GanttGridFlags.SDGF_FIT_TO_WINDOW,
    t
  )
}

ListManager.LM.prototypePlanningTableIsTimeScaleAutoFit = function (e, t) {
  return this.PlanningTableTestFlag(e, t, ListManager.Table.GanttGridFlags.SDGF_FIT_TO_WINDOW)
}

ListManager.LM.prototypePlanningTableIsShowingGranularity = function (e, t, a) {
  var r,
    i,
    n = !1;
  if (!(r = e || this.GetCurrentPlanningTable(t, !1))) return !1;
  if (null == (i = r.GetGanttInfo())) return !1;
  if (a === ListManager.TimeAmounts.OneHourNS) n = i.timeScale === ListManager.TimeScale.SDG_DAY_WITH_HOURS;
  else if (a == ListManager.TimeAmounts.OneDayNS) switch (i.timeScale) {
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
      n = !0
  }
  return n
}

ListManager.LM.prototypeGanttIsShowingHours = function (e) {
  return this.PlanningTableIsShowingGranularity(
    e,
    ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART,
    ListManager.TimeAmounts.OneHourNS
  )
}

ListManager.LM.prototypeGanttIsShowingDays = function (e) {
  return this.PlanningTableIsShowingGranularity(
    e,
    ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART,
    ListManager.TimeAmounts.OneDayNS
  )
}

ListManager.LM.prototypeGanttGetDateblockCell = function (e, t) {
  var a,
    r;
  for (a = e.GetTable(), r = 0; r < a.cells.length; r++) if (a.cells[r].celltype === t) return r;
  return - 1
}

ListManager.LM.prototypeGanttGetDateblockFrame = function (e, t) {
  var a,
    r,
    i = new Rectangle;
  return (r = this.GanttGetDateblockCell(e, t)) < 0 ? null : (a = e.GetTable()) ? (Utils2.CopyRect(i, a.cells[r].frame), i) : null
}

ListManager.LM.prototypeGanttGetDateblockWidth = function (e, t) {
  var a;
  return (a = this.GanttGetDateblockFrame(e, t)) ? a.width : - 1
}

ListManager.LM.prototypePlanningTableGetTimeInfo = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c = 0,
    u = 0;
  if (!(r = e || this.GetCurrentPlanningTable(t))) return - 1;
  if (!(i = r.GetGanttInfo())) return - 1;
  if (
    n = i.timeScale,
    o = i.configuredStart,
    s = i.configuredEnd,
    l = i.start,
    S = i.end,
    a
  ) {
    var p = ListManager.SDData.GetRow(
      e.datasetTableID,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      '-1',
      0
    );
    if (null != p) {
      var d = ListManager.SDData.GetValue(
        p,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
      );
      c = parseInt(d);
      var D = ListManager.SDData.GetValue(
        p,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
      );
      u = parseInt(D)
    }
  }
  return {
    timeScale: n,
    dtConfigStart: o,
    dtConfigEnd: s,
    dtStart: l,
    dtEnd: S,
    dtTasksStart: c,
    dtTasksEnd: u
  }
}

ListManager.LM.prototypeUpdateStartDateForHiddenGanttLayer = function (e) {
  var t,
    a,
    r,
    i,
    n = 0,
    o = - 1,
    s = '',
    l = - 1,
    S = '',
    c = [];
  for (
    a = GlobalData.optManager.GetObjectPtr(e, !1),
    r = ListManager.SDData.GetNumRows(a.datasetTableID, '', ''),
    n = 0;
    n < r;
    n++
  ) o = ListManager.SDData.GetRow(a.datasetTableID, '', '', n),
    (
      s = ListManager.SDData.GetValue(
        o,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
      )
    ) &&
    0 !== s.length &&
    (
      S = ListManager.SDData.GetValue(
        o,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
      ),
      ((S = parseInt(S)) < l || l < 0) &&
      (l = S),
      c.push({
        sddataID: o,
        end: S
      })
    );
  for (
    i = l > 0 ? l - 7 * ListManager.TimeAmounts.OneDayNS : Utils2.SDRtime(),
    this.PlanningTableUpdateStartDate(i),
    t = c.length,
    n = 0;
    n < t;
    n++
  ) GlobalData.optManager.SetGanttEndDate(e, c[n].sddataID, c[n].end, !0)
}

ListManager.LM.prototypePlanningTableUpdateStartDate = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = {},
    h = null;
  if (
    datasetId = ListManager.SDData.GetDataSetIdByName(
      ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_PLANNING]
    ),
    !(
      datasetId < 0 ||
      (
        d = parseInt(datasetId),
        (
          l = ListManager.SDData.GetTableID(d, ListManager.DataTableNames.PLANNING_TASKS)
        ) < 0 ||
        (
          D = parseInt(l),
          a = e ||
          Utils2.SDRtime(null),
          (
            p = ListManager.SDData.GetRow(
              D,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
              '-1',
              0
            )
          ) < 0
        )
      )
    )
  ) {
    o = ListManager.SDData.GetValue(
      p,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
    ),
      r = parseInt(o),
      i = Utils2.SDRLocalTime(r),
      (n = Utils2.SDRLocalTime(a)).wHour = i.wHour,
      n.wMinute = i.wMinute,
      n.wSecond = n.wMilliseconds = 0,
      a = Utils2.SDRmktime(n),
      nwdResults = this.GanttGetNonWorkingDays(),
      c = nwdResults.nonWorkingDays,
      (u = nwdResults.holidayMask) &&
      (h = this.LoadHolidays(!1), s = this.CountryNameFromHolidayMask(u)),
      this.GanttShiftStart(p, r, a, c, h, s),
      g.firstsecs = 0,
      g.lastsecs = 0,
      g.firstend = 0,
      this.GanttUpdateTaskData(
        - 1,
        D,
        p,
        !1,
        g,
        0,
        - 2,
        r,
        a,
        !0,
        ListManager.GanttTaskModes.TASK_MODE_START,
        c,
        h,
        s,
        null,
        null
      );
    var m = GlobalData.optManager.ActiveVisibleZList();
    for (S = 0; S < m.length; S++) if (
      (t = GlobalData.optManager.GetObjectPtr(m[S])) &&
      t.GetGanttInfo() &&
      t.datasetID === d &&
      t.datasetTableID === D &&
      t.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
    ) {
      this.GanttFormat(t.BlockID, !1, !1, !1, null),
        GlobalData.optManager.AddToDirtyList(t.BlockID),
        GlobalData.optManager.RenderDirtySVGObjects();
      break
    }
  }
}

ListManager.LM.prototypeGanttBumpSDRDateInGrid = function (e, t, a) {
  var r,
    i;
  switch (i = a, r = Utils2.SDRLocalTime(i), e) {
    case ListManager.TimeScale.SDG_YR:
      t ? r.wYear++ : r.wYear--;
      break;
    case ListManager.TimeScale.SDG_YR_WITH_QTR:
      t ? (r.wMonth += 3, r.wMonth > 12 && (r.wMonth = 1, r.wYear++)) : (r.wMonth -= 3, r.wMonth <= 0 && (r.wMonth = 9, r.wYear--));
      break;
    case ListManager.TimeScale.SDG_YR_WITH_MONTHS:
    case ListManager.TimeScale.SDG_QTR_WITH_MONTHS:
      t ? (r.wMonth++, r.wMonth > 12 && (r.wMonth = 1, r.wYear++)) : (r.wMonth--, r.wMonth <= 0 && (r.wMonth = 12, r.wYear--));
      break;
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
      t ? i += ListManager.TimeAmounts.OneDayNS : i -= ListManager.TimeAmounts.OneDayNS,
        r = Utils2.SDRLocalTime(i);
      break;
    case ListManager.TimeScale.SDG_WEEK_DAY_DATE:
      t ? i += 7 * ListManager.TimeAmounts.OneDayNS : i -= 7 * ListManager.TimeAmounts.OneDayNS,
        r = Utils2.SDRLocalTime(i);
      break;
    case ListManager.TimeScale.SDG_DAY_WITH_HOURS:
      t ? i += ListManager.TimeAmounts.OneHourNS : i -= ListManager.TimeAmounts.OneHourNS,
        r = Utils2.SDRLocalTime(i)
  }
  switch (e) {
    case ListManager.TimeScale.SDG_YR:
      r.wMonth = 1;
    case ListManager.TimeScale.SDG_YR_WITH_QTR:
    case ListManager.TimeScale.SDG_YR_WITH_MONTHS:
    case ListManager.TimeScale.SDG_QTR_WITH_MONTHS:
      r.wDay = 1;
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
    case ListManager.TimeScale.SDG_WEEK_DAY_DATE:
      r.wHour = 0;
    case ListManager.TimeScale.SDG_DAY_WITH_HOURS:
      r.wMinute = 0,
        r.wSecond = 0,
        r.wMilliseconds = 0
  }
  return i = Utils2.SDRmktime(r)
}

ListManager.LM.prototypeGanttGetNextSDRDateInGrid = function (e, t) {
  return this.GanttBumpSDRDateInGrid(e, !0, t)
}

ListManager.LM.prototypeGanttGetPrevSDRDateInGrid = function (e, t) {
  return this.GanttBumpSDRDateInGrid(e, !1, t)
}

ListManager.LM.prototypeGanttGetPrevAlignmentSDRDateInGrid = function (e, t) {
  var a,
    r;
  switch (a = Utils2.SDRLocalTime(t), e.timeScale) {
    case ListManager.TimeScale.SDG_YR:
    case ListManager.TimeScale.SDG_YR_WITH_QTR:
      if (e.timeScale == ListManager.TimeScale.SDG_YR_WITH_QTR) for (; (a.wMonth - 1) % 3 != 0;) a.wMonth--;
      else a.wMonth = 1;
      a.wDay = 1,
        a.wHour = 0;
      break;
    case ListManager.TimeScale.SDG_WEEK_DAY_DATE:
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
      r = t - (a.wDayOfWeek - e.startDay) * ListManager.TimeAmounts.OneDayNS,
        (a = Utils2.SDRLocalTime(r)).wHour = 0;
      break;
    case ListManager.TimeScale.SDG_QTR_WITH_MONTHS:
    case ListManager.TimeScale.SDG_YR_WITH_MONTHS:
      a.wDay = 1,
        a.wHour = 0;
      break;
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
      a.wHour = 0;
      break;
    case ListManager.TimeScale.SDG_DAY_WITH_HOURS:
      a.wMinute = 0
  }
  return a.wMinute = a.wSecond = a.wMilliseconds = 0,
    r = Utils2.SDRmktime(a)
}

ListManager.LM.prototypeGanttGetMonthLabelName = function (e, t) {
  var a = Utils2.GetMonthName(t);
  return e.flags & ListManager.Table.GanttGridFlags.SDGF_3_LETTER_ABBREV_NAMES &&
    (a = a.substr(0, 3)),
    e.flags & ListManager.Table.GanttGridFlags.SDGF_1_LETTER_ABBREV_NAMES &&
    (a = a.substr(0, 1)),
    a
}

ListManager.LM.prototypeGanttGetMonthDayStr = function (e) {
  return Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat) === ListManager.DateCodes.SDEURODATE ? e.wDay.toString() + '/' + e.wMonth.toString() : e.wMonth.toString() + '/' + e.wDay.toString()
}

ListManager.LM.prototypeGetDateLabel = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S = '';
  switch (i = Utils2.SDRLocalTime(t), a) {
    case ListManager.TimeScale.SDG_YR:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          S = i.wYear.toString();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS:
          S = ''
      }
      break;
    case ListManager.TimeScale.SDG_YR_WITH_QTR:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          l = Math.floor((i.wMonth - 1) / 3),
            S = 'Q' + (l += 1).toString();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
          S = i.wYear.toString();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS:
          S = ''
      }
      break;
    case ListManager.TimeScale.SDG_YR_WITH_MONTHS:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          S = this.GanttGetMonthLabelName(e, i.wMonth);
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
          S = i.wYear.toString();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS:
          S = ''
      }
      break;
    case ListManager.TimeScale.SDG_QTR_WITH_MONTHS:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          S = this.GanttGetMonthLabelName(e, i.wMonth);
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
          l = Math.floor((i.wMonth - 1) / 3),
            S = 'Q' + (l += 1).tostring();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS:
          S = i.wYear.toString()
      }
      break;
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          S = i.wDay.toString();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
          S = (o = this.GanttGetMonthLabelName(e, i.wMonth)) + ' ' + i.wYear.toString();
          break;
        case GANTT_TITLE2_LABELS:
          S = ''
      }
      break;
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          S = Utils2.GetWeekdayName(i.wDayOfWeek),
            e.flags & ListManager.Table.GanttGridFlags.SDGF_3_LETTER_ABBREV_NAMES &&
            (S = S.substr(0, 3)),
            e.flags & ListManager.Table.GanttGridFlags.SDGF_1_LETTER_ABBREV_NAMES &&
            (S = S.substr(0, 1));
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS:
          s = this.GanttGetMonthDayStr(i),
            S = Resources.Strings.WeekOf + ' ' + s + ' ' + i.wYear.toString()
      }
      break;
    case ListManager.TimeScale.SDG_WEEK_DAY_DATE:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          S = this.GanttGetMonthDayStr(i);
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
          S = i.wYear.toString();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS:
          S = ''
      }
      break;
    case ListManager.TimeScale.SDG_DAY_WITH_HOURS:
      switch (r) {
        case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
          i.wHour,
            S = this.GanttTimeToString(t);
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
          o = this.GanttGetMonthLabelName(e, i.wMonth),
            n = Utils2.GetLongWeekdayName(i.wDayOfWeek),
            S = Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat) === ListManager.DateCodes.SDEURODATE ? n + ' ' + i.wDay.toString() + ' ' + o + ' ' + i.wYear.toString() : n + ' ' + o + ' ' + i.wDay.toString() + ' ' + i.wYear.toString();
          break;
        case ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS:
          S = ''
      }
  }
  return S
}

ListManager.LM.prototypeGanttGetTitleMonitorValue = function (e, t, a) {
  var r;
  switch (r = Utils2.SDRLocalTime(t), e.timeScale) {
    case ListManager.TimeScale.SDG_YR_WITH_MONTHS:
    case ListManager.TimeScale.SDG_YR_WITH_QTR:
      a = r.wYear;
      break;
    case ListManager.TimeScale.SDG_QTR_WITH_MONTHS:
      quarter = Math.floor((r.wMonth - 1) / 3),
        quarter += 1,
        a = 4 * r.wYear + quarter;
      break;
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
      a = 12 * r.wYear + r.wMonth;
      break;
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
      - 1 == a ? a = 0 : e.startDay == r.wDayOfWeek &&
        a++;
      break;
    case ListManager.TimeScale.SDG_WEEK_DAY_DATE:
      a = r.wYear;
      break;
    case ListManager.TimeScale.SDG_DAY_WITH_HOURS:
      a = 365 * r.wYear + 30 * r.wMonth + r.wDay;
      break;
    default:
      return null
  }
  return a
}

ListManager.LM.prototypeGetTitleDateRange = function (e, t, a) {
  var r,
    i,
    n = [],
    o = - 1,
    s = - 1,
    l = 0,
    S = - 1,
    c = - 1;
  for (n.push(e.start), i = 0; i < e.gridTimes.length; i++) n.push(e.gridTimes[i]);
  for (n.push(e.end), i = 0; i < n.length; i++) {
    if (r = n[i], null === (s = this.GanttGetTitleMonitorValue(e, r, s))) return null;
    if (o >= 0 && s > o && l++, - 1 == S && l == a && (S = i), l > a) {
      c = i;
      break
    }
    o = s
  }
  return - 1 == S ? null : {
    dtStart: n[S],
    dtEnd: c >= 0 ? n[c] : e.end
  }
}

ListManager.LM.prototypeGetGanttLabelByIndex = function (e, t, a) {
  var r;
  return t == ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS ? this.GetDateLabel(e, e.gridTimes[a], e.timeScale, t) : (r = this.GetTitleDateRange(e, t, a)) ? this.GetDateLabel(e, r.dtStart, e.timeScale, t) : ''
}

ListManager.LM.prototypeGanttGetGridLabelByIndex = function (e, t) {
  return this.GetGanttLabelByIndex(e, ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS, t)
}

ListManager.LM.prototypeGanttGetTitle1LabelByIndex = function (e, t) {
  return this.GetGanttLabelByIndex(
    e,
    ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS,
    t
  )
}

ListManager.LM.prototypeGanttGetVirtualOffset = function (e, t) {
  var a,
    r,
    i,
    n,
    o = 0,
    s = 0,
    l = - 1,
    S = 0;
  for (n = e.gridTimes.length - 1; n >= 0; n--) if (t >= e.gridTimes[n]) {
    l = n;
    break
  }
  return Utils2.SDRLocalTime(t),
    - 1 == l ? t <= e.start ? 0 : e.gridWd * e.gridTimes.length : (
      S = e.gridWd * l,
      a = e.gridTimes[l],
      e.gridTimes.length >= 2 ? (
        o = e.gridTimes[l],
        s = l + 1 <= e.gridTimes.length - 1 ? e.gridTimes[l + 1] : e.end
      ) : (
        o = this.GanttGetPrevAlignmentSDRDateInGrid(e, e.start),
        s = this.GanttGetNextSDRDateInGrid(e.timeScale, o)
      ),
      i = (s - o) / ListManager.TimeAmounts.OneSecondNS,
      r = e.gridWd / i,
      S += (t - a) / ListManager.TimeAmounts.OneSecondNS * r
    )
}

ListManager.LM.prototypeGanttGetTimeFromOffset = function (e, t, a) {
  var r,
    i,
    n;
  return i = 0,
    a ||
    (t += e.scrollOffset),
    t > e.gridWd * e.gridTimes.length ? i = e.scrollEnd : t < 0 ? i = e.scrollStart : (n = Math.floor(t / e.gridWd)) === e.gridTimes.length ? (
      (
        i = e.gridTimes[e.gridTimes.length - 1] + (e.gridTimes[1] - e.gridTimes[0])
      ) > e.end &&
      (i = e.end),
      i
    ) : (
      i = e.gridTimes[n],
      r = (
        this.GanttBumpSDRDateInGrid(e.timeScale, !0, e.gridTimes[n]) - e.gridTimes[n]
      ) / e.gridWd,
      i += (t - n * e.gridWd) * r
    )
}

ListManager.LM.prototypeGanttGetOffset = function (e, t) {
  var a,
    r = {
      offset: 0,
      earlier: !1,
      later: !1
    };
  return a = e.GetGanttInfo(),
    r.offset = this.GanttGetVirtualOffset(a, t),
    null === r.offset ? null : (
      r.offset -= a.scrollOffset,
      r.earlier = r.offset < 0,
      r.later = r.offset > this.GanttGetDateblockWidth(
        e,
        ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
      ),
      r
    )
}

ListManager.LM.prototypeGanttGetTitleFrameByIndex = function (e, t, a, r) {
  var i,
    n,
    o,
    s = new Rectangle;
  return s.y = t.y,
    s.height = t.height,
    (i = this.GetTitleDateRange(e, a, r)) ? null === (n = this.GanttGetVirtualOffset(e, i.dtStart)) ||
      null === (o = this.GanttGetVirtualOffset(e, i.dtEnd)) ? null : (s.x = t.x + n, s.width = o - n, s) : null
}

ListManager.LM.prototypeGanttGetTitle1FrameByIndex = function (e, t, a) {
  return this.GanttGetTitleFrameByIndex(
    e,
    t,
    ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS,
    a
  )
}

ListManager.LM.prototypeGanttGetTitle2FrameByIndex = function (e, t, a) {
  return this.GanttGetTitleFrameByIndex(
    e,
    t,
    ListManager.Table.GanttLabelTypes.GANTT_TITLE2_LABELS,
    a
  )
}

ListManager.LM.prototypeGanttGetFirstCellWithText = function (e) {
  var t;
  for (t = 0; t < e.cells.length; t++) if (e.cells[t].DataID >= 0) return t;
  return - 1
}

ListManager.LM.prototypeGanttGetGanttDateblockTextColor = function (e) {
  var t,
    a;
  return t = '#000000',
    (a = this.GanttGetFirstCellWithText(e)) < 0 ? t : t = e.cells[a].txf.paint.color
}

ListManager.LM.prototypeGanttGetWidestLabelWidth = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l = {},
    S = (ConstantData.TextFace, 0),
    c = 0,
    u = null,
    p = - 1;
  switch (a) {
    case ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS:
      s = ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER;
      break;
    case ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS:
      s = ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_TITLE
  }
  if (a === ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS) {
    switch (t.timeScale) {
      case ListManager.TimeScale.SDG_DAY_WITH_HOURS:
        c = 24;
        break;
      case ListManager.TimeScale.SDG_WEEK_DAY_DATE:
        c = 52;
        break;
      case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
        c = 7;
        break;
      case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
        c = 31;
        break;
      case ListManager.TimeScale.SDG_QTR_WITH_MONTHS:
      case ListManager.TimeScale.SDG_YR_WITH_MONTHS:
        c = 12;
        break;
      case ListManager.TimeScale.SDG_YR_WITH_QTR:
        c = 4;
        break;
      case ListManager.TimeScale.SDG_YR:
        c = 10
    }
    c > t.gridTimes.length &&
      (c = t.gridTimes.length)
  } else a === ListManager.Table.GanttLabelTypes.GANTT_TITLE1_LABELS &&
    (c = t.nTitle1);
  for (i = e.cells.length, o = 0; o < i; o++) if (e.cells[o].celltype === s) {
    p = o;
    break
  }
  if (!(p < 0)) {
    for (o = 0; o < c; o++) n = this.GetGanttLabelByIndex(t, a, o),
      text = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT),
      text.SetParagraphAlignment(e.cells[p].just),
      text.SetVerticalAlignment(e.cells[p].just),
      u = {
        size: SDF.PointSizeToFontSize(e.cells[p].Text.FontSize),
        font: e.cells[p].Text.FontName,
        style: e.cells[p].Text.Face,
        color: e.cells[p].Text.Paint.Color
      },
      text.SetText(n, u),
      (l = text.GetTextMinDimensions()).width > S &&
      (S = l.width),
      text = null;
    return S
  }
}

ListManager.LM.prototypeGanttGetLabelColumnWidth = function (e, t, a) {
  var r = 0;
  return r = this.GanttGetWidestLabelWidth(t, e, a, !1),
    (r += t.tmargin.left / 4 + t.tmargin.right / 4) + 2
}

ListManager.LM.prototypeGanttsGetEndpointVisibility = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o = {
      leftVisible: !1,
      rightVisible: !1
    };
  if (e) t = e;
  else if (
    !(
      t = this.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART)
    )
  ) return null;
  return t.datasetTableID != e.datasetTableID ? null : (
    (a = t.GetGanttInfo()).gridWd * a.gridTimes.length <= this.GanttGetDateblockWidth(
      t,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
    ) ? o.leftVisible = o.rightVisible = !0 : (
      (
        n = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
        )
      ) &&
      (r = parseInt(n), o.leftVisible = r >= a.scrollStart),
      (
        n = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
        )
      ) &&
      (i = parseInt(n), o.rightVisible = i <= a.scrollEnd)
    ),
    o
  )
}

ListManager.LM.prototypeGanttGetDateblockAreaForBar = function (e) {
  var t,
    a;
  if (e.hooks.length > 0) for (a = 0; a < e.hooks.length; a++) if (
    (t = this.GetObjectPtr(e.hooks[a].objid, !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
  ) {
    if (
      lprDateBlock = this.GanttGetDateblockFrame(
        t,
        ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID
      ),
      !lprDateBlock
    ) return null;
    Utils2.OffsetRect(lprDateBlock, t.frame.x, t.frame.y),
      lprDateBlock.height = t.frame.height - (lprDateBlock.y - t.frame.y)
  }
  return lprDateBlock
}

ListManager.LM.prototypeGanttGetEndOfTimeScale = function (e, t) {
  var a;
  return a = this.GanttGetNextSDRDateInGrid(e.timeScale, t),
    a -= 30 * ListManager.TimeAmounts.OneMinNS
}

ListManager.LM.prototypeGanttBuildGridList = function (e, t) {
  var a,
    r;
  for (
    e.gridTimes = [],
    a = this.GanttGetPrevAlignmentSDRDateInGrid(e, e.start),
    r = 0;
    r < t;
    r++
  ) e.gridTimes.push(a),
    a = this.GanttGetNextSDRDateInGrid(e.timeScale, a)
}

ListManager.LM.prototypeGanttGettTitleCount = function (e) {
  var t,
    a,
    r = - 1,
    i = 1;
  if (null === (r = this.GanttGetTitleMonitorValue(e, e.start, r))) return 0;
  for (t = 0; t < e.gridTimes.length; t++) {
    if (
      a = r,
      null === (r = this.GanttGetTitleMonitorValue(e, e.gridTimes[t], r))
    ) return null;
    r != a &&
      i++
  }
  return i
}

ListManager.LM.prototypeGanttGetGridCount = function (e, t) {
  var a,
    r = - 1;
  switch (a = e.end - e.start, t) {
    case ListManager.TimeScale.SDG_YR:
      r = Utils2.GetNumberOfYears(e.start, e.end) + 1;
      break;
    case ListManager.TimeScale.SDG_YR_WITH_QTR:
      r = Utils2.GetNumberOfMonths(e.start, e.end) / 3;
      break;
    case ListManager.TimeScale.SDG_YR_WITH_MONTHS:
    case ListManager.TimeScale.SDG_QTR_WITH_MONTHS:
      r = Utils2.GetNumberOfMonths(e.start, e.end) + 1;
      break;
    case ListManager.TimeScale.SDG_MONTH_WITH_DAYS:
      r = a / ListManager.TimeAmounts.OneDayNS + 1;
      break;
    case ListManager.TimeScale.SDG_WEEK_WITH_DAYS:
      r = Utils2.GetNumberOfDays(e.start, e.end) + 1;
      break;
    case ListManager.TimeScale.SDG_WEEK_DAY_DATE:
      r = Utils2.GetNumberOfWeeks(e.start, e.end, e.startDay) + 1;
      break;
    case ListManager.TimeScale.SDG_DAY_WITH_HOURS:
      r = a / ListManager.TimeAmounts.OneHourNS + 1;
      break;
    default:
      return - 1
  }
  return r <= 0 &&
    (r = 1),
    Math.ceil(r)
}

ListManager.LM.prototypeGanttUpdateDependencies = function (e, t, a, r, i, n, o, s) {
  var l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = ListManager.GanttTaskModes.TASK_MODE_START,
    y = {},
    f = ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD];
  for (
    m = this.PlanningTableIsShowingGranularity(e, - 1, ListManager.TimeAmounts.OneHourNS),
    u = a >= 0 ? a.toString() : '-1',
    l = ListManager.SDData.GetNumRows(
      t,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
      u
    ),
    S = 0;
    S < l;
    S++
  ) (
    c = ListManager.SDData.GetRow(
      t,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
      u,
      S
    )
  ) >= 0 &&
    (
      a >= 0 &&
      (
        p = this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
        d = parseInt(p),
        p = this.GanttGetDataValue(c, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
        D = parseInt(p),
        p = this.GanttGetDataValue(c, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH),
        parseInt(p),
        d != D &&
        (
          s &&
          s.indexOf(c) < 0 &&
          s.push(c),
          o = !0,
          this.GanttShiftStart(c, D, d, r, i, n),
          y.firstsecs = 0,
          y.lastsecs = 0,
          (g = ListManager.SDData.GetValue(c, f)) &&
          g.length > 0 &&
          (h = parseInt(g)) >= 0 &&
          this.SDGantt_UpdateParents(t, h, m, s),
          this.GanttUpdateTaskData(- 1, t, c, !1, y, 0, - 2, D, d, !0, C, r, i, n, !1, s)
        )
      ),
      o = this.GanttUpdateDependencies(e, t, c, r, i, n, o, s)
    );
  return o
}

ListManager.LM.prototypeGanttValidateDependencies = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = 0;
  for (
    n = a >= 0 ? a.toString() : '-1',
    r = ListManager.SDData.GetNumRows(
      t,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
      n
    ) - 1;
    r >= 0;
    r--
  ) if (
      (
        i = ListManager.SDData.GetRow(
          t,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
          n,
          r
        )
      ) >= 0
    ) {
      if (a >= 0 && this.GanttIsDependencyCircular(a, i)) {
        if (
          l = ListManager.SDData.UpdateValue(
            i,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
            '-1'
          )
        ) return l;
        o = this.GanttRowToBar(a),
          (s = this.GanttRowToBar(i)) &&
          this.GanttKillLinks(s.BlockID, o.BlockID, !1)
      }
      this.GanttValidateDependencies(e, t, i)
    }
  return l
}

ListManager.LM.prototypeGantt_IsChild = function (e, t) {
  var a,
    r,
    i = - 1,
    n = null;
  for (
    a = ListManager.SDData.GetNumChildren(t, ListManager.DataRelationships.PARENT_RELATIONSHIP),
    r = 0;
    r < a;
    r++
  ) {
    if (
      (
        n = ListManager.SDData.GetChildRow(t, ListManager.DataRelationships.PARENT_RELATIONSHIP, r)
      ) &&
      (i = n.ID),
      i == e
    ) return !0;
    if (i < 0) return !1;
    if (this.Gantt_IsChild(e, i)) return !0
  }
  return !1
}

ListManager.LM.prototypeGantt_GetFamilyMaster = function (e) {
  var t,
    a;
  if (
    (
      a = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
      )
    ) &&
    a.length > 0
  ) {
    if ((t = parseInt(a)) >= 0) return e;
    if (
      (
        a = ListManager.SDData.GetValue(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
        )
      ) &&
      a.length > 0
    ) return t = parseInt(a),
      this.Gantt_GetFamilyMaster(t)
  }
  return - 1
}

ListManager.LM.prototypeGantt_ChildIsSlave = function (e, t) {
  var a,
    r,
    i,
    n,
    o;
  for (
    r = ListManager.SDData.GetNumChildren(t, ListManager.DataRelationships.PARENT_RELATIONSHIP),
    i = 0;
    i < r;
    i++
  ) if (
      a = ListManager.SDData.GetChildRow(t, ListManager.DataRelationships.PARENT_RELATIONSHIP, i),
      (
        o = ListManager.SDData.GetValue(
          a.ID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
        )
      ) &&
      o.length > 0
    ) return (n = parseInt(o)) >= 0 &&
      !this.Gantt_IsChild(n, e) ||
      this.Gantt_ChildIsSlave(e, a.ID);
  return !1
}

ListManager.LM.prototypeGanttIsDependencyCircular = function (e, t) {
  var a,
    r = !1,
    i = - 1,
    n = - 1;
  return this.Gantt_IsDependent(e, t) ||
    this.Gantt_IsParent(e, t) ||
    this.Gantt_IsChild(e, t) ? r = !0 : (
    (
      a = ListManager.SDData.GetValue(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
      )
    ) &&
    a.length > 0 &&
    (i = parseInt(a)),
    i >= 0 &&
    (n = this.Gantt_GetFamilyMaster(i)) >= 0 &&
    (this.Gantt_IsChild(e, n) || (r = !0))
  ),
    !r &&
    this.Gantt_ChildIsSlave(t, t) &&
    (r = !0),
    r
}

ListManager.LM.prototypeGanttAddDependency = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = GlobalData.optManager.ActiveVisibleZList(),
    y = !1,
    f = !1,
    L = - 1,
    I = 0,
    T = !1;
  if (
    null != (
      e = GlobalData.optManager.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1, null)
    )
  ) {
    if (l = e.BlockID, (c = this.GanttGetBar(l, - 1, !0)) >= 0) {
      for (
        L = (e = GlobalData.optManager.GetObjectPtr(c, !1)).datasetElemID,
        n = e.datasetTableID,
        c,
        u = e.BlockID,
        S = c;
        (S = this.GanttGetBar(l, S, !0)) >= 0 &&
        (
          I++,
          e = GlobalData.optManager.GetObjectPtr(S, !1),
          !(f = this.GanttIsDependencyCircular(L, e.datasetElemID))
        );
      ) if (
          (
            o = ListManager.SDData.GetValue(
              e.datasetElemID,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
            )
          ) &&
          o.length > 0 &&
          parseInt(o) >= 0
        ) {
          T = !0;
          break
        }
    } else y = !0;
    if (y || 0 == I || T || f) y ||
      0 == I ? Utils2.Alert(Resources.Strings.GanttDependency, null) : T ? Utils2.Alert(Resources.Strings.GanttOnlyOneMaster, null) : f &&
        Utils2.Alert(Resources.Strings.GanttDependencyCircular, null);
    else {
      var b = Resources.FindStyle(ListManager.GanttDefines.GANTT_NONWORKING_STYLE);
      if (L.toString(), Collab.AllowMessage()) {
        Collab.BeginSecondaryEdit();
        var M = {},
          P = (C = GlobalData.optManager.ActiveLayerZList()).length,
          R = Collab.BuildMessage(ConstantData.CollabMessages.GanttAddDependency, M, !0, !0)
      }
      if (
        p = (t = GlobalData.optManager.GetObjectPtr(l, !0)).BlockID,
        D = t.GetTable(!0),
        o = L.toString(),
        [].push(L),
        (S = this.GanttGetBar(l, c, !0)) >= 0
      ) if (
          (e = GlobalData.optManager.GetObjectPtr(S)).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
          e.datasetTableID === n &&
          (
            d = e.BlockID,
            ListManager.SDData.UpdateValue(
              e.datasetElemID,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
              o
            )
          ),
          (g = GlobalData.optManager.GanttRecordToRow(D, e.datasetElemID).rowIndex) >= 0
        ) for (h = D.rows[g], i = 0; i < h.ncells; i++) if (
          (m = D.cells[h.start + i]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_START
        ) {
          m.flags = Utils2.SetFlag(m.flags, ListManager.Table.CellFlags.SDT_F_NoText, !0),
            m.fill.Paint.Color = b.Fill.Paint.Color,
            GlobalData.optManager.Table_BuildFills(t, D, t.StyleRecord.Fill),
            GlobalData.optManager.AddToDirtyList(t.BlockID);
          break
        }
      this.GanttFormat(t.BlockID, !1, !0, !0, null),
        GlobalData.optManager.HasValidDependencyLine(u, S) ||
        GlobalData.optManager.AddDependencyLine(p, u, S),
        a = GlobalData.optManager.GetObjectPtr(d, !1),
        t = GlobalData.optManager.GetObjectPtr(p, !1),
        (
          s = ListManager.SDData.GetValue(
            a.datasetElemID,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
          )
        ) &&
        (r = parseInt(s), this.GanttScrollIntoView(t, r)),
        Collab.AllowMessage() &&
        (
          Collab.IsSecondary() &&
          (
            C = GlobalData.optManager.ActiveLayerZList(),
            newlen = C.length,
            newlen > P &&
            (M.CreateList = [], M.CreateList.push(C[P]))
          ),
          Collab.SendMessage(R)
        ),
        GlobalData.optManager.CompleteOperation()
    }
  } else Utils2.Alert(Resources.Strings.NoCellsSelected)
}

ListManager.LM.prototypeGanttRemoveDependency = function () {

  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = 0,
    L = - 1,
    I = - 1,
    T = GlobalData.optManager.ActiveVisibleZList(),
    b = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data,
    M = {};
  if (
    null != (
      e = GlobalData.optManager.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1, null)
    )
  ) {
    if (s = e.BlockID, a = e, (u = GlobalData.optManager.Table_GetActiveID()) == s) e = GlobalData.optManager.GetObjectPtr(u, !0),
      S = this.GanttGetBar(e.BlockID, - 1, !0),
      - 1 != this.GanttGetBar(e.BlockID, S, !0) &&
      f++,
      0 === f &&
      (
        d = (M = this.GetTableMasterAndSlaveSelection(e)).master,
        (D = M.slave) >= 0 &&
        f++
      );
    else for (r = 0; r < T.length; r++) (t = GlobalData.optManager.GetObjectPtr(T[r], !0)).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
      $.inArray(t.BlockID, b) >= 0 &&
      f++;
    if (0 != f) {
      if (Collab.AllowMessage()) {
        Collab.BeginSecondaryEdit();
        var P = Collab.BuildMessage(
          ConstantData.CollabMessages.GanttRemoveDependency,
          {
          },
          !0,
          !0
        )
      }
      if (
        C = Resources.FindStyle(ListManager.GanttDefines.GANTT_WORKING_STYLE),
        u >= 0
      ) {
        if (S = this.GanttGetBar(s, - 1, !0), (I = this.GanttGetBar(s, S, !0)) < 0) {
          if (
            d = (M = this.GetTableMasterAndSlaveSelection(e)).master,
            !((D = M.slave) >= 0)
          ) return;
          S = d,
            I = D
        }
        if (
          e = GlobalData.optManager.GetObjectPtr(I, !0),
          (
            y = ListManager.SDData.GetValue(
              e.datasetElemID,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
            )
          ) &&
          (p = parseInt(y)) >= 0 &&
          (L = this.GanttRowToBar(p), this.GanttKillLinks(I, L.BlockID, !1)),
          ListManager.SDData.UpdateValue(
            e.datasetElemID,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
            '-1'
          )
        ) return;
        if ((c = this.GanttBarToRow(s, I).rowIndex) >= 0) {
          for (
            g = (e = GlobalData.optManager.GetObjectPtr(s, !0)).GetTable(!0),
            r = 0;
            r < g.rows[c].ncells;
            r++
          ) if (
              g.cells[g.rows[c].start + r].celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_START
            ) {
              o = g.rows[c].start + r;
              break
            }
          o >= 0 &&
            (
              h = g.cells[o],
              m = g.cells[o + 1],
              h.flags = Utils2.SetFlag(h.flags, ListManager.Table.CellFlags.SDT_F_NoText, !1),
              C &&
              (h.fill.Paint.Color = m.fill.Paint.Color),
              h.stylename = ListManager.GanttDefines.GANTT_WORKING_STYLE
            )
        }
      } else for (r = 0; r < b.length; r++) if (
        (e = GlobalData.optManager.GetObjectPtr(b[r])) &&
        e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR
      ) {
        if (
          (
            y = ListManager.SDData.GetValue(
              e.datasetElemID,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
            )
          ) &&
          (p = parseInt(y)) >= 0 &&
          (
            L = this.GanttRowToBar(p),
            this.GanttKillLinks(e.BlockID, L.BlockID, !1)
          ),
          ListManager.SDData.UpdateValue(
            e.datasetElemID,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
            '-1'
          )
        ) break;
        if ((l = this.GanttBarToRow(s, e.BlockID).rowIndex) >= 0) {
          for (
            (g = GlobalData.optManager.GetObjectPtr(s, !0).GetTable(!0)).rows[l].ncells,
            i = 0,
            n = g.rows[l].ncells;
            i < n;
            i++
          ) if (
              g.cells[g.rows[l].start + i].celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_START
            ) {
              o = g.rows[l].start + i;
              break
            }
          o >= 0 &&
            (
              h = g.cells[o],
              m = g.cells[o + 1],
              h.flags = Utils2.SetFlag(h.flags, ListManager.Table.CellFlags.SDT_F_NoText, !1),
              C &&
              (h.fill.Paint.Color = m.fill.Paint.Color),
              h.stylename = ListManager.GanttDefines.GANTT_WORKING_STYLE
            )
        }
      }
      GlobalData.optManager.Table_BuildFills(a, g, a.StyleRecord.Fill),
        GlobalData.optManager.AddToDirtyList(a.BlockID),
        Collab.AllowMessage() &&
        Collab.SendMessage(P),
        GlobalData.optManager.CompleteOperation()
    } else Utils2.Alert(Resources.Strings.GanttRemoveDependency, null)
  } else Utils2.Alert(Resources.Strings.NoCellsSelected)
}

ListManager.LM.prototypeGetTableMasterAndSlaveSelection = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o = - 1,
    s = - 1,
    l = - 1,
    S = - 1,
    c = - 1,
    u = {
      master: - 1,
      slave: - 1
    };
  if (!(t = e.GetTable(!1))) return u;
  for (n = 0; n < t.cells.length; n++) if (
    t.cells[n].flags & ListManager.Table.CellFlags.SDT_F_Select
  ) {
    l = n;
    break
  }
  if (l < 0) return u;
  if (
    a = t.cells[l],
    !(
      i = ListManager.SDData.GetValue(
        a.datarecordID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
      )
    ) ||
    parseInt(i) < 0
  ) return u;
  if (
    (S = parseInt(i)) >= 0 ? c = a.datarecordID : (
      i = (S = a.datarecordID).toString(),
      c = ListManager.SDData.GetRow(
        e.datatableID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
        i,
        0
      )
    ),
    !(S >= 0 && c >= 0)
  ) return u;
  for (n = 0; n < t.rows.length; n++) r = t.rows[n],
    (a = t.cells[r.start]).datarecordID === S ? o = (e = this.GanttRowToBar(a.datarecordID)).BlockID : a.datarecordID == c &&
      (s = (e = this.GanttRowToBar(a.datarecordID)).BlockID);
  return {
    master: o,
    slave: s
  }
}

ListManager.LM.prototypeGanttGetBar = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c = - 1;
  if (!(o = GlobalData.optManager.GetObjectPtr(e, !1).GetTable())) return - 1;
  if (t < 0) l = 0;
  else {
    if ((S = this.GanttBarToRow(e, t).rowIndex) < 0) return - 1;
    l = S + 1
  }
  for (s = l; s < o.rows.length; s++) if (
    r = o.rows[s],
    i = o.cells[r.start],
    n = this.GanttRowToBar(i.datarecordID)
  ) {
    var u = GlobalData.objectStore.GetObject(this.theSelectedListBlockID).Data;
    if (
      $.inArray(n.BlockID, u) >= 0 ||
      i.flags & ListManager.Table.CellFlags.SDT_F_Select
    ) {
      c = n.BlockID;
      break
    }
  }
  return c
}

ListManager.LM.prototypeGanttGetNextBar = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = - 1;
  for (n = t; n < e.rows.length; n++) for (s = !1, r = e.rows[n], o = 0; o < r.ncells; o++) if (
    (i = e.cells[r.start + o]).flags & ListManager.Table.CellFlags.SDT_F_Select &&
    (s = !0),
    i.celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
  ) {
    if (a && !s) continue;
    return l = n
  }
  return l
}

ListManager.LM.prototypePlanningTableUpdateRange = function (e, t, a, r) {

  var i,
    n = null;
  return (n = (i = e || this.GetCurrentPlanningTable(t)).GetGanttInfo()) ? (
    a.firstsecs &&
    a.lastsecs &&
    a.lastsecs >= a.firstsecs &&
    (
      a.firstsecs = this.GanttGetPrevAlignmentSDRDateInGrid(n, a.firstsecs),
      a.lastsecs = this.GanttGetEndOfTimeScale(n, a.lastsecs),
      n.configuredStart = a.firstsecs,
      n.configuredEnd = a.lastsecs
    ),
    this.PlanningTableUpdateGeometry(i, r),
    0
  ) : - 1
}

ListManager.LM.prototypeGanttUpdateRange = function (e, t, a) {
  return this.PlanningTableUpdateRange(e, ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, t, a)
}

ListManager.LM.prototypeGanttDoRowShading = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = ConstantData.Colors.Color_White,
    d = null,
    D = !1,
    g = !1,
    h = !1;
  if (!(a = (i = this.GetObjectPtr(e, !0)).GetTable(!0))) return - 1;
  if (!(r = i.GetGanttInfo())) return - 1;
  for (
    u = ListManager.SDData.GetRow(
      i.datasetTableID,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      '-1',
      0
    ),
    S = 0;
    S < a.rows.length;
    S++
  ) if (o = a.rows[S], !((n = a.cells[o.start]).datarecordID < 0)) {
    if (
      r.flags & ListManager.Table.GanttGridFlags.SDGF_ROW_SHADING_ALTERNATE_EACH
    ) D = !0;
    else {
      if (
        !(
          s = ListManager.SDData.GetValue(
            n.datarecordID,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
          )
        )
      ) return - 1;
      D = parseInt(s) === u
    }
    for (
      D &&
      (
        p = p === ConstantData.Colors.Color_White ? ConstantData.Colors.Color_Row_Shade : ConstantData.Colors.Color_White
      ),
      g = !1,
      o.selected = !1,
      c = 0;
      c < o.ncells;
      c++
    ) {
      if (
        d = null,
        (n = a.cells[o.start + c]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_START
      ) {
        if (
          (
            l = ListManager.SDData.GetValue(
              n.datarecordID,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
              l
            )
          ) &&
          l.length > 0 &&
          parseInt(l) >= 0
        ) continue
      } else if (n.celltype == ListManager.Table.CellTypes.SDT_CT_GANTT_PC) {
        if (
          ListManager.SDData.GetNumChildren(
            n.datarecordID,
            ListManager.DataRelationships.PARENT_RELATIONSHIP
          )
        ) continue;
        g ||
          (d = p)
      }
      n.fill.Paint.Color &&
        n.fill.Paint.Color.toUpperCase() !== ConstantData.Colors.Color_Row_Shade.toUpperCase() &&
        n.fill.Paint.Color.toUpperCase() !== ConstantData.Colors.Color_White.toUpperCase() ? g = !0 : d = p,
        !d ||
        n.fill.Paint.Color &&
        n.fill.Paint.Color.toUpperCase() == d.toUpperCase() &&
        !t ||
        (n.fill.Paint.Color = d, h = !0)
    }
  }
  return h &&
    this.Table_BuildFills(i, a, null),
    h
}

ListManager.LM.prototypeGanttGetFirstDataRow = function (e) {
  var t,
    a,
    r,
    i = - 1,
    n = - 1,
    o = {
      row: - 1,
      cell: - 1
    };
  for (a = 0; a < e.rows.length; a++) {
    for (t = e.rows[a], r = 0; r < t.ncells; r++) if (
      e.cells[t.start + r].celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
      i < 0
    ) {
      i = a,
        n = t.start + r;
      break
    }
    if (i >= 0) break
  }
  return i < 0 ? null : (o.row = i, o.cell = n, o)
}

ListManager.LM.prototypeGanttMapDataToTable = function (e, t, a, r, i, n, o, s, l, S, c, u) {

  var p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _,
    E,
    w,
    F,
    v,
    G,
    N = 0,
    k = null;
  if (I = (w = GlobalData.optManager.GetObjectPtr(e, !0)).datasetTableID, null == u) k = this.GanttGetSortlist(I, i);
  else for (k = [], L = u.length, D = 0; D < L; D++) k.push({
    rowid: u[D]
  });
  for (
    T = t.rows,
    R = t.cells,
    a &&
    (M = a.rows, _ = a.cells),
    D = 0;
    D < k.length;
    D++
  ) if ((h = k[D].rowid) >= 0) {
    if (
      u ? g = GlobalData.optManager.GanttRecordToRow(t, h).rowIndex : (g = S, S = ++g),
      C = - 1,
      a &&
      (C = this.GanttRecordToRow(a, h).rowIndex) >= 0
    ) for (P = M[C], m = 0; m < P.ncells; m++) (A = _[P.start + m]).datarecordID = - 2;
    for (
      b = T[g],
      n &&
      (
        v = Utils1.DeepCopy(n.Fill),
        G = n.Text,
        this.GanttStyleDataToStyle(h, v, G)
      ),
      m = 0;
      m < b.ncells;
      m++
    ) (A = R[b.start + m]).datarecordID = h,
      a &&
      (
        A.DataID = - 1,
        A.hyperlink = null,
        A.embedid = - 1,
        A.NoteID = - 1,
        n &&
        (A.fill.Paint.Color = v.Paint.Color),
        A.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
      ),
      A.celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_START ? this.Gantt_IsSlave(h) ? (
        A.flags = Utils2.SetFlag(A.flags, ListManager.Table.CellFlags.SDT_F_NoText, !0),
        o &&
        (A.fill = Utils1.DeepCopy(o.Fill)),
        A.stylename = ListManager.GanttDefines.GANTT_NONEDIT_STYLE,
        A.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
      ) : (
        A.flags = Utils2.SetFlag(A.flags, ListManager.Table.CellFlags.SDT_F_NoText, !1),
        (
          A.stylename.toUpperCase() === ListManager.GanttDefines.GANTT_NONEDIT_STYLE.toUpperCase() ||
          o &&
          o.Fill &&
          o.Fill.Paint &&
          A.fill.Paint.Color == o.Fill.Paint.Color
        ) &&
        (
          n &&
          (
            A.fill = Utils1.DeepCopy(n.Fill),
            A.fill.Paint.Color = ConstantData.Colors.Color_White
          ),
          A.stylename = ListManager.GanttDefines.GANTT_WORKING_STYLE,
          A.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
        )
      ) : A.celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_PC &&
      (
        ListManager.SDData.GetNumChildren(h, ListManager.DataRelationships.PARENT_RELATIONSHIP) > 0 ? (
          A.flags = Utils2.SetFlag(A.flags, ListManager.Table.CellFlags.SDT_F_NoText, !0),
          o &&
          (A.fill = Utils1.DeepCopy(o.Fill)),
          A.stylename = ListManager.GanttDefines.GANTT_NONEDIT_STYLE,
          A.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
        ) : (
          A.flags = Utils2.SetFlag(A.flags, ListManager.Table.CellFlags.SDT_F_NoText, !1),
          A.stylename.toUpperCase() === ListManager.GanttDefines.GANTT_NONEDIT_STYLE.toUpperCase() &&
          (
            n &&
            (A.fill = Utils1.DeepCopy(n.Fill)),
            A.stylename = ListManager.GanttDefines.GANTT_WORKING_STYLE,
            A.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
          )
        )
      ),
      C >= 0 &&
      (E = _[(P = M[C]).start + m]).celltype == A.celltype &&
      (
        A.DataID = E.DataID,
        A.hyperlink = E.hyperlink,
        A.NoteID = E.NoteID,
        E.DataID = - 1,
        E.hyperlink = null,
        E.NoteID = - 1
      );
    if (F = this.GanttRowToBar(h)) (F = GlobalData.optManager.GetObjectPtr(F.BlockID, !0)).flags = Utils2.SetFlag(F.flags, ConstantData.ObjFlags.SEDO_NotVisible, !1),
      GlobalData.optManager.DirtyListReOrder = !0,
      this.GanttKillLinks(F.BlockID, - 2, - 1, !0);
    else {
      if (N = this.GanttAddGanttBar(e, t, g), F = this.GanttRowToBar(h), N) break;
      GlobalData.optManager.AddToDirtyList(F.BlockID)
    }
    if (
      null == (N = this.GanttRowDataToRowValues(w, t, l, s, g, r, h, !1, null != u)) ||
      0 != N.result
    ) break;
    if (
      N.reformat &&
      (c = !0),
      N = this.GanttLinkBarToRow(w.BlockID, F.BlockID, t, g)
    ) break;
    if (
      y = !1,
      (
        p = ListManager.SDData.GetValue(
          h,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE]
        )
      ) &&
      p.length > 0 &&
      (y = parseInt(p)),
      !y &&
      null == u
    ) {
      f = s + 1,
        - 1 === i ? d = l : (f = s + 1, d = l, d += Number(D + 1).toString() + '.'),
        w.BlockID;
      var U = this.GanttMapDataToTable(e, t, a, r, h, n, o, f, d, S, c, u);
      if (0 != U.result) break;
      S = U.row,
        d = U.format,
        c = U.reformat
    }
  }
  return {
    result: N,
    row: S,
    format: d,
    reformat: c
  }
}

ListManager.LM.prototypeGanttRowDataToRowValues = function (e, t, a, r, i, n, o, s, l) {
  var S,
    c,
    u,
    p = 0,
    d = new ListManager.BaseShape,
    D = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  d.StyleRecord = $.extend(!0, {
  }, D.def.style);
  var g = d.GetTextDefault({
  });
  this.CalcDefaultInitialTextStyle(g);
  for (S = t.rows[i], u = 0; u < S.ncells; u++) if (c = t.cells[S.start + u], l) switch (c.celltype) {
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
      if (
        o >= 0 &&
        (c.datarecordID = o),
        p = (h = this.GanttSetCellValue(e, t, u + S.start, a)).result
      ) break;
      s = h.reformat
  } else switch (c.celltype) {
    case ListManager.Table.CellTypes.SDT_CT_GANTTTASK:
      s = this.GanttSetTaskIndent(e, t, S.start + u, r).reformat,
        o >= 0 &&
        (
          GlobalData.optManager.GanttUpdateNotes(c, c.datarecordID),
          GlobalData.optManager.GanttUpdateHyperlink(c, c.datarecordID)
        ),
        p = 0;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_DEPT:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_COST:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_CUST:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER:
      var h;
      if (
        o >= 0 &&
        (c.datarecordID = o),
        p = (h = this.GanttSetCellValue(e, t, u + S.start, a)).result
      ) break;
      s = h.reformat
  }
  return {
    result: p,
    reformat: s
  }
}

ListManager.LM.prototypeSD_GanttExpandContract = function (e, t, a, r) {
  var i,
    n = !1,
    o = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  if (t && t.datarecordID >= 0) {
    if (
      - 1 != o.theActiveTextEditObjectID &&
      this.CloseEdit(!0, !1),
      (
        i = ListManager.SDData.GetValue(
          t.datarecordID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE]
        )
      ) &&
      (n = parseInt(i)),
      a == !n
    ) return;
    if (
      i = a ? '0' : '1',
      Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit(),
      ListManager.SDData.UpdateValue(
        t.datarecordID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE],
        i
      ),
      this.GanttFormat(e, !0, !1, !0, null),
      Collab.AllowMessage()
    ) {
      var s = {
        ganttID: e,
        expand: a,
        userData: r
      };
      Collab.BuildMessage(ConstantData.CollabMessages.SD_GanttExpandContract, s, !1)
    }
    this.CompleteOperation()
  }
}

ListManager.LM.prototypeGanttSetTaskIndent = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S = null,
    c = null,
    u = {},
    p = GlobalData.docHandler.svgDoc.docInfo.docDpi / SDF.DRAWRES;
  if (
    i = GlobalData.optManager.Table_GetRow(t, a),
    s = t.rows[i],
    r = SDF.ToSDJSCoords(100 * r, p),
    !(D = this.svgObjectLayer.GetElementByID(e.BlockID))
  ) return {
    result: 0,
    reformat: !1
  };
  for (n = 0; n < s.ncells; n++) if (
    (o = t.cells[s.start + n]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
  ) {
    u = {
      size: SDF.PointSizeToFontSize(o.Text.FontSize),
      font: o.Text.FontName,
      style: o.Text.Face,
      color: o.Text.Paint.Color,
      lindent: r,
      pindent: r
    };
    var d = GlobalData.optManager.GetObjectPtr(o.DataID);
    if (d || (o.DataID = - 1), o.DataID >= 0) (l = d.runtimeText.paraInfo[0].pStyle).lindent !== r &&
      (
        d = GlobalData.optManager.GetObjectPtr(o.DataID, !0),
        l.lindent = r,
        l.pindent = r
      );
    else {
      c = new ListManager.TextObject,
        (
          S = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, c)
        ) &&
        (o.DataID = S.ID);
      var D = this.svgObjectLayer.GetElementByID(e.BlockID);
      this.Table_AddSVGTextObject(e, this.svgDoc, D, o, a).SetParagraphStyle(u)
    }
  }
  return {
    result: 0,
    reformat: !1
  }
}

ListManager.LM.prototypeGanttSetCellValue = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h = null,
    m = !1;
  switch ((c = t.cells[a]).celltype) {
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
      n = ListManager.Table.CellTypes.SDT_CT_GANTT_START;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
      n = ListManager.Table.CellTypes.SDT_CT_GANTT_END;
      break;
    default:
      n = c.celltype
  }
  if (
    c.celltype == ListManager.Table.CellTypes.SDT_CT_GANTT_TASKNUMBER
  ) {
    if (
      0,
      !(
        l = ListManager.SDData.GetValue(
          c.datarecordID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
        )
      )
    ) return 1;
    o = parseInt(l),
      h = r + (++o).toString(),
      - 1 == this.GanttGetParentID(c.datarecordID) &&
      (h = ''),
      i = h.length
  } else null != (s = this.GanttGetFieldName(n)) &&
    (
      c.datarecordID < 0 ? (h = '', i = 0) : i = (h = ListManager.SDData.GetValue(c.datarecordID, s)).length
    );
  if (null != h) {
    switch (c.celltype) {
      case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
        Utils2.IsEqual(parseFloat(h), 0, 0.00001) &&
          (h = '');
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
        i &&
          (
            u = parseInt(h),
            D = Utils2.SDRLocalTime(u),
            h = Utils2.SDRTimeToStringYY(
              D,
              Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat)
            )
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
        i &&
          (
            u = parseInt(h),
            D = Utils2.SDRLocalTime(u),
            l = this.GanttGetDataValue(
              c.datarecordID,
              ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH
            ),
            g = parseInt(l),
            l = this.GanttGetDataValue(
              c.datarecordID,
              ListManager.Table.CellTypes.SDT_CT_GANTT_START
            ),
            p = parseInt(l),
            g > 0 &&
            u > p + 60 &&
            0 == D.wHour &&
            0 == D.wMinute &&
            0 == D.wSecond &&
            (u -= 60, D = Utils2.SDRLocalTime(u)),
            h = Utils2.SDRTimeToStringYY(
              D,
              Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat)
            )
          );
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
      case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
        i &&
          (
            u = parseInt(h),
            D = Utils2.SDRLocalTime(u),
            d = u,
            h = (u -= d = this.TrimHours(d)) < 0 ? '' : this.GanttTimeToString(u)
          )
    }
    var C = this.svgObjectLayer.GetElementByID(e.BlockID);
    if (c.DataID >= 0) {
      if (textBlock = GlobalData.optManager.GetObjectPtr(c.DataID), C) var y = C.GetElementByID(ConstantData.SVGElementClass.TEXT, c.DataID);
      textBlock &&
        (y || null == C) ? S = textBlock.runtimeText.text : (
        textBlock &&
        (
          textBlockToDelete = GlobalData.objectStore.GetObject(c.DataID),
          textBlockToDelete &&
          textBlockToDelete.Delete()
        ),
        y &&
        C.RemoveElement(y),
        c.DataID = - 1
      )
    }
    if (c.DataID >= 0 && textBlock) {
      if (S != h || null != h && null != h && 0 === h.length) {
        m = !0;
        var f = !1;
        if (
          0 === h.length &&
          (h = ' ', f = !0),
          null != GlobalData.optManager.GetActiveTextEdit()
        ) {
          var L = this.svgDoc.GetActiveEdit();
          L &&
            L.SetText(h)
        }
        var I = C.GetElementByID(ConstantData.SVGElementClass.TEXT, c.DataID),
          T = {
            size: SDF.PointSizeToFontSize(c.Text.FontSize),
            font: c.Text.FontName,
            style: c.Text.Face,
            color: c.Text.Paint.Color
          };
        I.SetParagraphAlignment(c.just),
          I.SetVerticalAlignment(c.vjust),
          I.SetText(h, T),
          f &&
          I.SetText(''),
          textBlock = GlobalData.optManager.GetObjectPtr(c.DataID, !0),
          textBlock.runtimeText = I.GetRuntimeText(),
          C.RemoveElement(I),
          this.Table_AddSVGTextObject(e, this.svgDoc, C, c, a),
          m = !0
      }
    } else if (h.length > 0) {
      C = this.svgObjectLayer.GetElementByID(e.BlockID),
        I = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT),
        T = {
          size: SDF.PointSizeToFontSize(c.Text.FontSize),
          font: c.Text.FontName,
          style: c.Text.Face,
          color: c.Text.Paint.Color
        };
      I.SetParagraphAlignment(c.just),
        I.SetVerticalAlignment(c.vjust),
        I.SetText(h, T);
      var b = I.GetRuntimeText();
      I = null;
      var M = {
        runtimeText: b
      },
        P = new ListManager.TextObject(M);
      textBlock = GlobalData.objectStore.CreateBlock(Globals.StoredObjectType.LM_TEXT_OBJECT, P),
        c.DataID = textBlock.ID,
        this.Table_AddSVGTextObject(e, this.svgDoc, C, c, a),
        m = !0
    }
  }
  return {
    result: 0,
    reformat: m
  }
}

ListManager.LM.prototypeGanttGetParentID = function (e) {
  var t,
    a = - 1;
  return e >= 0 &&
    (
      t = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
      )
    ) &&
    t.length > 0 &&
    (a = parseInt(t)),
    a
}

ListManager.LM.prototypeGanttGetSortlist = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s = [];
  if (
    a = t.toString(),
    o = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      a
    )
  ) {
    for (i = 0; i < o; i++) n = ListManager.SDData.GetRow(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      a,
      i
    ),
      s.push({
        rowid: n,
        index: o
      });
    for (i = 0; i < o; i++) (
      a = ListManager.SDData.GetValue(
        s[i].rowid,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
      )
    ) &&
      (r = parseInt(a), isNaN(r) || (s[i].index = r));
    s.sort(
      (function (e, t) {
        return e.index > t.index ? 1 : e.index < t.index ? - 1 : 0
      })
    )
  }
  return s
}

ListManager.LM.prototypeGanttParseStyleCodes = function (e, t) {

  var a,
    r = e.split(',');
  return t.offset >= r.length ? (t.result = 0, t) : (a = r[t.offset].split(':')) &&
    0 != a.length ? (t.scode = a[0], t.value = a[1], t.result = 1, t.offset++, t) : (t.result = 0, t)
}

ListManager.LM.prototypeGantt_IsSlave = function (e) {

  var t,
    a,
    r = !1;
  return (
    t = ListManager.SDData.GetValue(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
    )
  ) &&
    t.length > 0 &&
    (a = parseInt(t), !isNaN(a) && a >= 0 && (r = !0)),
    r
}

ListManager.LM.prototypeGanttCleanBarsAndTable = function (e) {

  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = [],
    c = [];
  if (s = this.GanttGetFirstDataRow(e, null)) {
    for (r = s.row, n = e.rows.length, i = r; i < n; i++) a = e.rows[i],
      (t = e.cells[a.start]).DataID >= 0 &&
      (
        (l = GlobalData.objectStore.PreserveBlock(t.DataID)) &&
        l.Delete(),
        t.DataID = - 1
      ),
      t.NoteID >= 0 &&
      (
        (l = GlobalData.objectStore.PreserveBlock(t.NoteID)) &&
        l.Delete(),
        t.NoteID = - 1
      ),
      t.datarecordID >= 0 &&
      (o = this.GanttRowToBar(t.datarecordID, !0)) &&
      (
        o.datasetElemID = - 1,
        o.objecttype = 0,
        S.push(o.BlockID),
        this.GanttKillLinks(o.BlockID, - 2, 0, !0, c),
        S = S.concat(c)
      );
    S.length > 0 &&
      this.DeleteObjects(S, !1)
  }
}

ListManager.LM.prototypeGanttRelinkAllBars = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l = 0;
  for (a = e.GetTable(), s = 0; s < a.rows.length; s++) if (
    r = a.rows[s],
    (i = a.cells[r.start]).datarecordID >= 0 &&
    (
      o = i.datarecordID,
      (n = GlobalData.optManager.GanttRowToBar(o)) &&
      0 != (l = GlobalData.optManager.GanttLinkBarToRow(e.BlockID, n.BlockID, a, s))
    )
  ) return - 1;
  return t ||
    (
      GlobalData.optManager.UpdateLinks(),
      l = GlobalData.optManager.GanttUpdateDependencyLines(e.BlockID)
    ),
    l
}

ListManager.LM.prototypeGanttGetDateFrame = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l;
  if (r = Utils1.DeepCopy(e.trect), a = e.GetTable(!1)) for (n = a.rows.length, i = 0; i < n; i++) for (o = a.rows[i], s = 0; s < o.ncells; s++) if (
    (l = a.cells[o.start + s]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID
  ) return r.x += l.frame.x,
    r.y += l.frame.y,
    r.width = l.frame.width,
    r.height -= l.frame.y,
    t &&
    (r.y += l.frame.height, r.height -= l.frame.height),
    r;
  return r
}

ListManager.LM.prototypeGanttLinkBarToRow = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R,
    A,
    _ = - 1,
    E = 0,
    w = null,
    F = new Rectangle(0, 0, 0, 0),
    v = {};
  for (
    u = GlobalData.optManager.GetObjectPtr(e, !0),
    i = a.rows[r],
    o = 0;
    o < i.ncells;
    o++
  ) if (
      (n = a.cells[i.start + o]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID
    ) {
      _ = i.start + o;
      break
    }
  if (_ >= 0 && t >= 0) {
    if (
      p = GlobalData.optManager.GetObjectPtr(t, !0),
      !(
        (n = a.cells[_]).datarecordID == p.datasetElemID &&
        p.datasetElemID >= 0
      )
    ) return 1;
    C = this.GanttGetDataValue(
      n.datarecordID,
      ListManager.Table.CellTypes.SDT_CT_GANTT_START
    ),
      g = parseInt(C),
      C = this.GanttGetDataValue(
        n.datarecordID,
        ListManager.Table.CellTypes.SDT_CT_GANTT_END
      ),
      T = g == (D = parseInt(C)),
      f = Utils1.DeepCopy(p.Frame),
      b = n.frame.width;
    var G = this.GanttTimeToPosition(u, g, D, T, n.frame);
    if (
      l = G.hide,
      R = G.clipLeft,
      A = G.clipRight,
      f = Utils1.DeepCopy(G.barFrame),
      p.datasetElemID >= 0 &&
      null != (
        y = ListManager.SDData.GetValue(
          p.datasetElemID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
        )
      ) &&
      (M = parseInt(y)) >= 0 &&
      (d = this.GanttRowToBar(M)) &&
      M &&
      null != (P = this.HasValidDependencyLine(d.BlockID, p.BlockID))
    ) {
      w = GlobalData.optManager.GetObjectPtr(P, !0),
        C = this.GanttGetDataValue(
          d.datasetElemID,
          ListManager.Table.CellTypes.SDT_CT_GANTT_START
        ),
        m = parseInt(C),
        C = this.GanttGetDataValue(
          d.datasetElemID,
          ListManager.Table.CellTypes.SDT_CT_GANTT_END
        ),
        h = parseInt(C),
        Utils1.DeepCopy(d.frame),
        S = (
          G = this.GanttTimeToPosition(u, m, h, this.GanttIsMilestone(d), n.frame)
        ).hide;
      var N = !1;
      Utils1.DeepCopy(G.frame),
        E = w.flags,
        w.flags = Utils2.SetFlag(w.flags, ConstantData.ObjFlags.SEDO_Hide, l || S || N),
        w.flags = Utils2.SetFlag(w.flags, ConstantData.ObjFlags.SEDO_NotVisible, l || S || N),
        GlobalData.optManager.DirtyListReOrder = !0,
        w.flags != E &&
        GlobalData.optManager.AddToDirtyList(w.BlockID)
    }
    if (
      p.flags = Utils2.SetFlag(p.flags, ConstantData.ObjFlags.SEDO_Hide, l),
      p.flags = Utils2.SetFlag(p.flags, ConstantData.ObjFlags.SEDO_NotVisible, l),
      GlobalData.optManager.DirtyListReOrder = !0,
      l &&
      (
        f.x = 0,
        f.width = ConstantData.Defines.MinLineDistanceForDeterminingOrientation
      ),
      C = p.datasetElemID.toString(),
      c = ListManager.SDData.GetNumRows(
        p.datasetTableID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        C
      ),
      this.SetBarHeight(t, c > 0),
      this.GanttSetBarArrows(t, c > 0, R, A),
      T
    ) {
      var k = f.x + f.width / 2,
        U = p.Frame.height;
      f.x = k - U / 2,
        f.width = U,
        f.width < 15 &&
        (f.width = 15),
        f.x -= f.width
    }
    if (
      0 === f.x &&
      Utils2.OffsetRect(f, 1, 0),
      c > 0 &&
      f.width < 10 &&
      (f.width = 10),
      s = f.width,
      p.Frame.width != s ||
      f.x + u.trect.x + n.frame.x != p.Frame.x ||
      f.y + u.trect.y + n.frame.y != p.Frame.y
    ) {
      GlobalData.optManager.AddToDirtyList(p.BlockID),
        p.hooks.length > 0 &&
        (GlobalData.optManager.ob = Utils1.DeepCopy(p)),
        Utils2.CopyRect(F, f),
        Utils2.OffsetRect(F, u.trect.x + n.frame.x, u.trect.y + n.frame.y);
      var J = GlobalData.optManager.svgObjectLayer.GetElementByID(p.BlockID);
      J ? (
        p.AdjustLineStart(J, F.x, F.y + F.height / 2, 0, !0, !0),
        p.AdjustLineEnd(J, F.x + F.width, F.y + F.height / 2, 0, !0)
      ) : (
        p.StartPoint.x = F.x,
        p.StartPoint.y = F.y + F.height / 2,
        p.EndPoint.x = F.x + F.width,
        p.EndPoint.y = F.y + F.height / 2,
        p.CalcFrame()
      )
    }
    v.y = ConstantData.Defines.SED_CDim / 2,
      v.x = f.x / b * ConstantData.Defines.SED_CDim,
      L = p.hooks.length ? 0 : - 1,
      I = T ? ConstantData.HookPts.SED_KTC : ConstantData.HookPts.SED_KTL,
      u.extraflags = Utils2.SetFlag(u.extraflags, ConstantData.ExtraFlags.SEDE_DataUpdate, !0),
      this.UpdateHook(p.BlockID, L, e, I, v, a.cells[_].uniqueid),
      GlobalData.optManager.SetLinkFlag(
        u.BlockID,
        ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
      ),
      GlobalData.optManager.SetLinkFlag(p.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
      u.extraflags = Utils2.SetFlag(u.extraflags, ConstantData.ExtraFlags.SEDE_DataUpdate, !1)
  }
  return 0
}

ListManager.LM.prototypeGanttTimeToPosition = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u = {
      barFrame: new Rectangle(0, 0, 0, 0),
      clipLeft: !1,
      clipRight: !1,
      hide: !1
    },
    p = {
      offset: 0,
      earlier: !1,
      later: !1
    };
  if (r) {
    var d = this.PlanningTableIsShowingGranularity(e, - 1, ListManager.TimeAmounts.OneHourNS) ? ListManager.TimeScale.SDG_DAY_WITH_HOURS : ListManager.TimeScale.SDG_MONTH_WITH_DAYS;
    t = this.GanttBumpSDRDateInGrid(d, !0, t),
      d === ListManager.TimeScale.SDG_DAY_WITH_HOURS ? t -= 30 * ListManager.TimeAmounts.OneMinNS : t -= ListManager.TimeAmounts.OneMinNS,
      a = t
  }
  return (p = this.GanttGetOffset(e, t)) ? (
    n = p.offset,
    s = p.earlier,
    l = p.later,
    (p = this.GanttGetOffset(e, a)) ? (
      o = p.offset,
      S = p.earlier,
      c = p.later,
      u.barFrame.y = 0,
      u.barFrame.height = i.height,
      i.x + n < i.x ? (u.barFrame.x = 0, u.clipLeft = !0) : u.barFrame.x = n,
      u.barFrame.width = o,
      o > i.width ? (u.barFrame.width = i.width - u.barFrame.x, u.clipRight = !0) : u.barFrame.width = o - u.barFrame.x,
      u.hide = l ||
      S,
      u.barFrame.width <= 10 &&
      (s || c) &&
      (u.hide = !0),
      r &&
      n > i.width &&
      (u.hide = !0),
      u
    ) : (u.hide = !0, u)
  ) : (u.hide = !0, u)
}

ListManager.LM.prototypeHasValidDependencyLine = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s = null;
  GlobalData.optManager.GetObjectPtr(e),
    GlobalData.optManager.GetObjectPtr(t);
  var l = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLinksBlockID, !1);
  if (!l) return null;
  for (
    i = GlobalData.optManager.FindLink(l, t, !0);
    i >= 0 &&
    i < l.length &&
    l[i].targetid === t;
  ) {
    if (
      (a = GlobalData.optManager.GetObjectPtr(l[i].hookid)) &&
      a.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CONNECTOR
    ) {
      for (n = o = !1, r = 0; r < a.hooks.length; r++) a.hooks[r].objid === e &&
        (n = !0),
        a.hooks[r].objid === t &&
        (o = !0);
      if (n && o) {
        !0,
          s = a.BlockID;
        break
      }
    }
    i++
  }
  return s
}

ListManager.LM.prototypeSetBarHeight = function (e, t) {
  var a,
    r,
    i;
  if (
    !(e < 0) &&
    (
      a = GlobalData.optManager.GetObjectPtr(e, !0),
      i = (
        r = t ? ListManager.GanttDefines.GANTT_BTHICK / 2 : ListManager.GanttDefines.GANTT_BTHICK
      ) / 2,
      a.StyleRecord.Line.Thickness !== r
    )
  ) {
    var n = {
      StyleRecord: {
        Line: {
          Thickness: r,
          BThick: i
        }
      }
    };
    a.SetObjectStyle(n),
      GlobalData.optManager.AddToDirtyList(e)
  }
}

ListManager.LM.prototypeGanttSetBarArrows = function (e, t, a, r) {
  var i,
    n,
    o,
    s;
  if (
    !(e < 0) &&
    (
      i = GlobalData.optManager.GetObjectPtr(e, !0),
      n = t ? ListManager.ArrowHeadTypes.ARR_IND_DOWN : ListManager.ArrowHeadTypes.ARR_ROUND_END,
      o = a ? 0 : n,
      s = r ? 0 : n,
      i.StartArrowID != o ||
      i.EndArrowID != s
    )
  ) {
    var l = {
      StartArrowID: o,
      EndArrowID: s
    };
    i.SetObjectStyle(l),
      GlobalData.optManager.AddToDirtyList(e)
  }
}

ListManager.LM.prototypeArrowExtra = function (e, t, a) {
  if (e >= ConstantData1.ArrowheadLookupTable.length) return 0;
  if (e === ListManager.ArrowHeadTypes.ARR_NONE) return 0;
  var r = ConstantData1.ArrowheadLookupTable[e],
    i = 2 * (a + t) / r.defArea.height;
  return r.defArea.width * i
}

ListManager.LM.prototypeGanttKillAllLinks = function (e) {
  var t,
    a,
    r,
    i = GlobalData.optManager.ZList(),
    n = {
      result: 0,
      dependencyLinesFound: !1
    };
  for (r = GlobalData.optManager.GetObjectPtr(e), t = 0; t < i.length; t++) (a = GlobalData.optManager.GetObjectPtr(i[t])) &&
    a.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
    a.datasetTableID === r.datasetTableID &&
    (
      this.GanttKillLinks(a.BlockID, - 2, 0),
      n.dependencyLinesFound = !0
    );
  return n
}

ListManager.LM.prototypeGanttKillLinks = function (e, t, a, r, i) {

  var n,
    o,
    s,
    l,
    S,
    c = !1,
    u = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLinksBlockID, !0),
    p = [];
  if (
    l = GlobalData.optManager.GetObjectPtr(e, !0),
    !((n = GlobalData.optManager.FindLink(u, l.BlockID, !0)) < 0)
  ) {
    for (i && (p = i); n < u.length && u[n].targetid === l.BlockID;) {
      if (c = !1, u[n].hookid >= 0) {
        if (!(S = GlobalData.optManager.GetObjectPtr(u[n].hookid, !0))) {
          n++;
          continue
        }
        if (t >= 0) for (o = 0; o < S.hooks.length; o++) S.hooks[o].objid === t &&
          (c = !0);
        else - 2 === t &&
          (c = !0);
        if (c) if (a > 0) S.flags = Utils2.SetFlag(S.flags, ConstantData.ObjFlags.SEDO_NotVisible, !0),
          GlobalData.optManager.DirtyListReOrder = !0;
        else if (a < 0) {
          for (s = 0, o = 0; o < S.hooks.length; o++) GlobalData.optManager.GetObjectPtr(S.hooks[o].objid, !0).flags & ConstantData.ObjFlags.SEDO_NotVisible &&
            (s = !0);
          s ||
            (
              S.flags = Utils2.SetFlag(S.flags, ConstantData.ObjFlags.SEDO_NotVisible, !1),
              GlobalData.optManager.DirtyListReOrder = !0
            )
        } else p.push(S.BlockID)
      }
      n++
    }
    p.length > 0 &&
      null == i &&
      GlobalData.optManager.DeleteObjects(p),
      r ||
      GlobalData.optManager.UpdateLinks()
  }
}

ListManager.LM.prototypeUpdateDependencyLine = function (e, t, a, r) {

  var i,
    n,
    o,
    s,
    l,
    S = {};
  if (- 1 == t && !(t = this.HasValidDependencyLine(a, r))) return - 1;
  if (
    (o = GlobalData.optManager.GetObjectPtr(t, !0)).flags & ConstantData.ObjFlags.SEDO_NotVisible
  ) return GlobalData.optManager.AddToDirtyList(o.BlockID),
    0;
  n = GlobalData.optManager.GetObjectPtr(a),
    i = GlobalData.optManager.GetObjectPtr(r),
    o.flags = Utils2.SetFlag(o.flags, ConstantData.ObjFlags.SEDO_NoMaintainLink, !0),
    o.objecttype = ConstantData.ObjectTypes.SD_OBJT_GANTT_CONNECTOR,
    o.StartArrowID = 0,
    o.EndArrowID = ListManager.ArrowHeadTypes.ARR_FILL,
    o.ArrowSizeIndex = 1,
    o.CalcFrame(),
    s = 2 == o.hooks.length ? 0 : - 1,
    l = 2 == o.hooks.length ? 1 : - 1,
    S.x = ConstantData.Defines.SED_CDim,
    S.y = ConstantData.Defines.SED_CDim / 2,
    GlobalData.optManager.UpdateHook(t, s, a, ConstantData.HookPts.SED_KTL, S, null),
    S.x = 0,
    S.y = ConstantData.Defines.SED_CDim / 2,
    GlobalData.optManager.UpdateHook(t, l, r, ConstantData.HookPts.SED_KTR, S, null);
  var c = new Point(0, 0);
  c.x = GlobalData.optManager.GetDependencyLineEndX(o),
    c.y = i.Frame.y + i.Frame.height / 2;
  var u = this.svgObjectLayer.GetElementByID(o.BlockID);
  return u &&
    (
      o.EndPoint.x = c.x,
      o.EndPoint.y = c.y,
      o.ModifyShape(u, c.x, c.y, ConstantData.ActionTriggerType.SEGL_PRESERVE)
    ),
    GlobalData.optManager.SetLinkFlag(
      n.uniqueid,
      ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
    ),
    GlobalData.optManager.SetLinkFlag(
      i.uniqueid,
      ConstantData.LinkFlags.SED_L_MOVE | ConstantData.LinkFlags.SED_L_CHANGE
    ),
    GlobalData.optManager.AddToDirtyList(o.BlockID),
    0
}

ListManager.LM.prototypeAddDependencyLine = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = new Rectangle(0, 0, 600, 0),
    d = {};
  r = GlobalData.optManager.GetObjectPtr(a, !1),
    (
      s = ListManager.SDData.GetValue(
        r.datasetElemID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
      )
    ) &&
    s.length &&
    (c = parseInt(s)) >= 0 &&
    (u = this.GanttRowToBar(c), this.GanttKillLinks(a, u.BlockID, !1)),
    i = GlobalData.optManager.GetObjectPtr(t),
    l = Utils1.DeepCopy(i.EndPoint),
    (d = new Point(i.EndPoint.x, r.StartPoint.y)).x += 15,
    p = Utils2.Pt2Rect(l, d);
  var D = new ListManager.SegLine;
  for (
    D.pts.push(Utils1.DeepCopy(l)),
    D.pts.push({
      x: d.x,
      y: l.y
    }),
    D.pts.push(Utils1.DeepCopy(d)),
    S = 1;
    S < D.pts.length;
    S++
  ) D.pts[S].x -= D.pts[0].x,
    D.pts[S].y -= D.pts[0].y;
  D.pts[0].x = 0,
    D.pts[0].y = 0,
    D.lengths.push(D.pts[1].x - D.pts[0].x),
    D.lengths.push(D.pts[2].y - D.pts[1].y),
    D.firstdir = ConstantData.SegLDir.SED_KRC,
    D.lastdir = ConstantData.SegLDir.SED_KTC;
  var g = {
    Frame: p,
    StartPoint: l,
    EndPoint: d,
    segl: D
  },
    h = Resources.FindStyle(ConstantData.Defines.TextBlockStyle);
  return g.StyleRecord = Utils1.DeepCopy(h),
    n = new ListManager.SegmentedLine(g),
    o = this.AddNewObject(n, !1, !0),
    Collab.AddNewBlockToSecondary(o),
    (n = GlobalData.optManager.GetObjectPtr(o)).StyleRecord.Line.Thick = 1,
    n.StyleRecord.Line.Color = ConstantData.Colors.Color_Black,
    n.CalcFrame(),
    GlobalData.optManager.AddToDirtyList(o),
    this.UpdateDependencyLine(e, o, t, a),
    (
      r.flags & ConstantData.ObjFlags.SEDO_Hide ||
      i.flags & ConstantData.ObjFlags.SEDO_Hide
    ) &&
    (
      n.flags = Utils2.SetFlag(n.flags, ConstantData.ObjFlags.SEDO_Hide, !0),
      n.flags = Utils2.SetFlag(n.flags, ConstantData.ObjFlags.SEDO_NotVisible, !0),
      GlobalData.optManager.DirtyListReOrder = !0
    ),
    o
}

ListManager.LM.prototypeGanttUpdateDependencyLines = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o = [],
    s = GlobalData.optManager.ActiveVisibleZList();
  for (i = 0; i < s.length; i++) if (
    null != (t = GlobalData.optManager.GetObjectPtr(s[i], !0)) &&
    t.objecttype == ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR
  ) {
    if (
      !(
        r = ListManager.SDData.GetValue(
          t.datasetElemID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
        )
      )
    ) break;
    (n = parseInt(r)) < 0 ||
      (a = GlobalData.optManager.GanttRowToBar(n)) &&
      o.push({
        slaveId: t.BlockID,
        masterId: a.BlockID
      })
  }
  for (i = 0; i < o.length; i++) GlobalData.optManager.HasValidDependencyLine(o[i].masterId, o[i].slaveId) ? GlobalData.optManager.UpdateDependencyLine(e, - 1, o[i].masterId, o[i].slaveId) : GlobalData.optManager.AddDependencyLine(e, o[i].masterId, o[i].slaveId);
  return 0
}

ListManager.LM.prototypeGanttSelectCell = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = - 1,
    S = GlobalData.optManager.GanttRecordToRow(t, a);
  for (r = t.rows[S.rowIndex], i = 0; i < r.ncells; i++) if (
    t.cells[r.start + i].celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
  ) {
    l = r.start + i;
    break
  }
  l >= 0 &&
    (n = this.svgObjectLayer.GetElementByID(e)) &&
    (
      t.select = l,
      this.ActivateTextEdit(n),
      s = (o = this.svgDoc.GetActiveEdit()).GetText().length,
      o.SetSelectedRange(s, s),
      o.SetSelectedRange(0, s)
    )
}

ListManager.LM.prototypeGanttAddTask = function (e, t) {
  GlobalData.optManager.ActiveVisibleZList();
  var a,
    r,
    i,
    n = this.GetObjectPtr(this.theTEDSessionBlockID, !1);
  tLMB = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !1);
  var o = [],
    s = [];
  if (
    t ||
    - 1 != n.theActiveTextEditObjectID &&
    (this.DeactivateTextEdit(), !0),
    null != (
      a = GlobalData.optManager.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1, null)
    )
  ) {
    if (
      i = a.BlockID,
      a.GetGanttInfo(!1) &&
      (theTable = a.GetTable(!1), theTable)
    ) {
      if (Collab.AllowMessage()) {
        Collab.BeginSecondaryEdit();
        var l = {
          milestone: e
        },
          S = Collab.BuildMessage(ConstantData.CollabMessages.GanttAddTask, l, !0, !0)
      }
      if (
        (a = GlobalData.optManager.GetObjectPtr(i, !0)).GetGanttInfo(!0),
        theTable = a.GetTable(!0),
        !((r = this.GanttCreateNewTask(a, theTable, e, a.datasetTableID)) < 0)
      ) {
        var c = this.GanttRowToBar(r);
        return c &&
          (
            s.push(c.BlockID),
            Collab.AllowMessage() &&
            Collab.IsSecondary() &&
            (l.CreateList = s)
          ),
          o.push(r),
          this.GanttFastFormat(a, o),
          Collab.AllowMessage() &&
          Collab.SendMessage(S),
          this.CompleteOperation(),
          t ||
          this.GanttSelectCell(a.BlockID, theTable, r),
          s.length ? s[0] : void 0
      }
    }
  } else Utils2.Alert(Resources.Strings.NoCellsSelected)
}

ListManager.LM.prototypeGanttTaskIndex = function (e) {
  var t,
    a = - 1;
  return e >= 0 &&
    (
      t = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
      )
    ) &&
    t.length > 0 &&
    (a = parseInt(t)),
    a
}

ListManager.LM.prototypeGanttAddGanttBar = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = - 1,
    S = {
      x: 0,
      y: 0
    };
  for (s = GlobalData.optManager.GetObjectPtr(e, !1), i = 0; i < t.rows[a].ncells; i++) if (
    (n = t.cells[t.rows[a].start + i]).celltype == ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID
  ) {
    l = t.rows[a].start + i;
    break
  }
  return l >= 0 &&
    (S.y = n.frame.y + s.inside.y, S.x = n.frame.x + s.inside.x),
    (r = this.GanttCreateBar(S, !1)) ? (
      (o = GlobalData.optManager.GetObjectPtr(r, !0)).objecttype = ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR,
      o.datasetElemID = n.datarecordID,
      o.datasetID = s.datasetID,
      o.datasetType = s.datasetType,
      o.datasetTableID = s.datasetTableID,
      s.extraflags = Utils2.SetFlag(s.extraflags, ConstantData.ExtraFlags.SEDE_LinkVCenter, !0),
      - 1 === this.GanttGetParentID(n.datarecordID) &&
      (
        o.extraflags = Utils2.SetFlag(o.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !0)
      ),
      0
    ) : - 1
}

ListManager.LM.prototypeGanttDeleteTask = function (e, t, a, r, i) {
  GlobalData.optManager.ActiveVisibleZList();
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = 0;
  if (t < 0) return 0;
  for (
    null == i &&
    (i = []),
    a < 0 ? (u = this.GanttRowToBar(t)) &&
      (
        a = u.BlockID,
        r ||
        (
          (u = GlobalData.optManager.GetObjectPtr(a, !0)).datasetElemID = - 1,
          u.objecttype = 0,
          i.push(a)
        )
      ) : (u = GlobalData.optManager.GetObjectPtr(a, !0)).BlockID,
    n = t.toString(),
    s = (
      l = ListManager.SDData.GetNumRows(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        n
      )
    ) - 1;
    s >= 0;
    s--
  ) (
    S = ListManager.SDData.GetRow(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      n,
      s
    )
  ) >= 0 &&
    this.GanttDeleteTask(e, S, - 1, !1, i);
  for (
    a >= 0 &&
    this.GanttKillLinks(a, - 2, 0, !0, i),
    n = t.toString(),
    l = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
      n
    ),
    s = 0;
    s < l;
    s++
  ) if (
      (
        S = ListManager.SDData.GetRow(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
          n,
          s
        )
      ) >= 0 &&
      (
        p = ListManager.SDData.UpdateValue(
          S,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
          '-1'
        )
      )
    ) return p;
  if (
    c = this.GanttGetParentID(t),
    ListManager.Trello.TrelloArchiveCard(t),
    ListManager.SDData.DeleteRow(t),
    r
  ) {
    for (
      n = c.toString(),
      l = ListManager.SDData.GetNumRows(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        n
      ),
      s = 0;
      s < l;
      s++
    ) if (
        S = ListManager.SDData.GetRow(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          n,
          s
        ),
        o = s.toString(),
        p = ListManager.SDData.UpdateValue(
          S,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
          o
        )
      ) return p;
    ListManager.SDData.SetIndexColumn(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
      ListManager.SDData.Defines.SDDATA_INDEX_ASC
    ),
      i.length > 0 &&
      GlobalData.optManager.DeleteObjects(i)
  }
  return p
}

ListManager.LM.prototypeGanttRemoveTask = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s,
    l = [],
    S = ListManager.Table.CellFlags.SDT_F_Select;
  if (
    - 1 != this.GetObjectPtr(this.theTEDSessionBlockID, !1).theActiveTextEditObjectID &&
    this.CloseEdit(!0, !1),
    (t = GlobalData.optManager.Table_GetActiveID()) >= 0
  ) {
    if (
      (e = this.GetObjectPtr(t, !1)) &&
      e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
    ) for (s = t, p = (a = e.GetTable(!1)).rows.length, u = 0; u < p; u++) for (i = a.rows[u], n = 0; n < i.ncells; n++) if ((r = a.cells[i.start + n]).flags & S) {
      (o = this.GanttRowToBar(r.datarecordID)) &&
        l.push(o.BlockID);
      break
    }
  } else {
    var c = this.GetObjectPtr(this.theSelectedListBlockID, !1);
    for (p = c.length, u = 0; u < p; u++) (e = this.GetObjectPtr(c[u], !1)) &&
      e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
      (l.push(c[u]), s = e.hooks[0].objid)
  }
  if (0 !== l.length) {
    Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit();
    var u,
      p,
      d,
      D = - 1;
    for (p = l.length, u = 0; u < p; u++) e = this.GetObjectPtr(l[u], !1),
      (d = ListManager.SDData.GetRowIndexInfo(e.datasetElemID)) &&
      d.rowIndex > D &&
      (D = d.rowIndex);
    this.CloseEdit(),
      this.DeleteSelectedObjectsCommon(l, !1),
      D -= p - 1,
      s >= 0 &&
      (
        e = this.GetObjectPtr(s, !1),
        D >= (p = ListManager.SDData.GetNumRows(e.datasetTableID, '', '')) &&
        (D = p - 1),
        dataid = ListManager.SDData.GraphGetRowId(e.datasetTableID, D, !1),
        dataid >= 0 &&
        (a = e.GetTable(!1), this.GanttSelectCell(s, a, dataid))
      )
  } else Utils2.Alert(Resources.Strings.DeleteTasks)
}

ListManager.LM.prototypeGantt_HasDependency = function (e) {
  var t = GlobalData.optManager.GetObjectPtr(e, !1),
    a = ListManager.SDData.GetValue(
      t.datasetElemID,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
    );
  return !!(a && a.length > 0 && '-1' != a)
}

ListManager.LM.prototypeGantt_IsDependent = function (e, t) {
  var a,
    r,
    i;
  return !!(
    (
      i = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
      )
    ) &&
    i.length > 0
  ) &&
    ((a = parseInt(i)) >= 0 && ((r = a) === t || this.Gantt_IsDependent(r, t)))
}

ListManager.LM.prototypeGantt_IsParent = function (e, t) {
  var a,
    r,
    i;
  return !!(
    (
      i = ListManager.SDData.GetValue(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
      )
    ) &&
    i.length > 0
  ) &&
    ((a = parseInt(i)) >= 0 && ((r = a) === e || this.Gantt_IsParent(e, r)))
}

ListManager.LM.prototypePlanningTableScrollIntoView = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s;
  return null == (i = null != e ? e : this.GetCurrentPlanningTable(t)) ? - 1 : (
    r = i.GetGanttInfo(),
    null == (n = this.GanttGetVirtualOffset(r, a)) ||
      a >= r.scrollStart &&
      a <= r.scrollEnd ? void 0 : (
      s = this.GanttGetDateblockWidth(
        e,
        ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
      ),
      - 1 != (
        o = a < r.scrollStart ? n - 2 * r.gridWd : a > r.scrollEnd ? n + s - 2 * r.gridWd : - 1
      ) &&
      this.GanttScrollDateblock(i, - 1, o),
      0
    )
  )
}

ListManager.LM.prototypeGanttScrollIntoView = function (e, t) {
  return this.PlanningTableScrollIntoView(e, ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, t)
}

ListManager.LM.prototypeGetGanttScrollPercent = function () {
  var e,
    t,
    a,
    r = this.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1);
  return r ? (
    e = r.GetGanttInfo(),
    a = this.GanttGetDateblockWidth(
      r,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
    ),
    t = e.gridTimes.length * e.gridWd - a,
    e.scrollOffset / t
  ) : null
}

ListManager.LM.prototypeGanttScrollDateblock = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = !1;
  if (
    this.HideAllSVGSelectionStates(),
    null == e &&
    GlobalData.optManager.RightClickParams &&
    (e = this.GetObjectPtr(GlobalData.optManager.RightClickParams.TargetID)),
    null != (
      e = e ||
      this.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1)
    )
  ) {
    switch (
    r = e.GetGanttInfo(),
    n = this.GanttGetDateblockWidth(
      e,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
    ),
    o = r.gridTimes.length * r.gridWd - n,
    t
    ) {
      case 2:
        r.scrollOffset += n,
          s = !0;
        break;
      case 3:
        r.scrollOffset -= n,
          s = !0;
        break;
      case - 1:
        r.scrollOffset = a;
        break;
      case - 2:
        r.scrollOffset = 0.01 * a * o
    }
    return r.scrollOffset < 0 &&
      (r.scrollOffset = 0),
      r.scrollOffset > r.gridTimes.length * r.gridWd - n &&
      (r.scrollOffset = o),
      r.scrollStart = this.GanttGetTimeFromOffset(r, r.scrollOffset, !0),
      r.scrollEnd = this.GanttGetTimeFromOffset(r, r.scrollOffset + n, !0),
      s &&
      SDUI.Commands.MainController.Selection.PlanningTableToolBarSetSlider(r.scrollOffset / o),
      e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
      (i = this.GanttRelinkAllBars(e)),
      0 != i ? i : (
        this.UpdateLinks(),
        this.AddToDirtyList(e.BlockID),
        this.RenderDirtySVGObjects(),
        this.RenderAllSVGSelectionStates(),
        0
      )
  }
}

ListManager.LM.prototypeGetDependencyLineStartX = function (e) {
  var t,
    a;
  return a = (t = GlobalData.optManager.GetObjectPtr(e.hooks[0].objid)).Frame.x + t.Frame.width,
    t.StartArrowID,
    ListManager.ArrowHeadTypes.ARR_ROUND_END,
    a
}

ListManager.LM.prototypeGetDependencyLineEndX = function (e) {
  var t,
    a;
  return t = GlobalData.optManager.GetObjectPtr(e.hooks[1].objid),
    this.GanttIsDrawAsMilestone(t) ? a = t.Frame.x + t.Frame.width / 2 : (
      a = t.Frame.x + 10,
      t.sarrow,
      ListManager.ArrowHeadTypes.ARR_ROUND_END
    ),
    a
}

ListManager.LM.prototypeGanttIsDrawAsMilestone = function (e) {
  return e.Frame.width <= 15
}

ListManager.LM.prototypeGanttIsMilestone = function (e) {
  return null !== e &&
    (
      e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR &&
      ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
      ) == ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
      )
    )
}

ListManager.LM.prototypeGanttAdjustPinRect = function (e, t, a, r) {
  var i = GlobalData.optManager.GetObjectPtr(e, !1);
  if (0 === i.hooks.length) return t;
  var n = GlobalData.optManager.GetObjectPtr(i.hooks[0].objid, !1);
  if (
    n &&
    n.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
    (
      t = GlobalData.optManager.GanttGetDateFrame(n, a),
      a ||
      (t.y = i.Frame.y, t.height = 0),
      GlobalData.optManager.Gantt_HasDependency(i.BlockID)
    )
  ) {
    var o = i.Frame.x - t.x;
    t.x = i.Frame.x,
      t.width -= o,
      a ? t.width = i.Frame.width : r === ConstantData.ActionTriggerType.LINESTART &&
        (t.width = 0)
  }
  return t
}

ListManager.LM.prototypeGanttAdjustBar = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = !1,
    p = [],
    d = !1,
    D = ListManager.GanttTaskModes.TASK_MODE_END,
    g = !1;
  if (
    (a = GlobalData.optManager.GetObjectPtr(e, !1)).hooks.length &&
    (r = GlobalData.optManager.GetObjectPtr(a.hooks[0].objid, !1)),
    null != r &&
    null != (i = r.GetTable(!1)) &&
    !(
      (n = GlobalData.optManager.GanttRecordToRow(i, a.datasetElemID).rowIndex) < 0
    )
  ) {
    p.push(a.datasetElemID);
    var h = GlobalData.optManager.GanttGetDateblockFrame(
      r,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID
    );
    Utils2.OffsetRect(h, r.trect.x, r.trect.y);
    var m = ListManager.SDData.GetValue(
      a.datasetElemID,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
    ),
      C = !(!m || !m.length || '-1' == m);
    if (0 === t) if ((c = GlobalData.optManager.GanttGetDropRow(r, i, a)) === n) {
      if (
        t = ConstantData.ActionTriggerType.LINESTART,
        D = ListManager.GanttTaskModes.TASK_MODE_START,
        d = !0,
        C
      ) return
    } else g = !0;
    switch (t) {
      case ConstantData.ActionTriggerType.LINESTART:
        if (C && !g) return;
        if (
          s = GlobalData.optManager.Gantt_PositionToTime(r, i, a.Frame.x - h.x),
          s = this.GanttGetBarSnapTime(r, s),
          (
            S = this.GanttGetDataValue(
              a.datasetElemID,
              ListManager.Table.CellTypes.SDT_CT_GANTT_START
            )
          ) &&
          S.length &&
          (l = parseInt(S)),
          l === s
        ) return;
        (
          S = this.GanttGetDataValue(
            a.datasetElemID,
            ListManager.Table.CellTypes.SDT_CT_GANTT_END
          )
        ) &&
          S.length &&
          !d &&
          (
            s >= (o = parseInt(S)) ? (
              s = o,
              D = ListManager.GanttTaskModes.TASK_MODE_START,
              o = GlobalData.optManager.Gantt_PositionToTime(r, i, a.Frame.x + a.Frame.width - h.x),
              o = this.GanttGetBarSnapTime(r, o),
              u = !0
            ) : (D = ListManager.GanttTaskModes.TASK_MODE_START, u = !0)
          ),
          GlobalData.optManager.LinkParams &&
          (
            GlobalData.optManager.LinkParams.ConnectIndex = - 1,
            GlobalData.optManager.LinkParams.InitialHook = - 1
          ),
          this.GanttUpdateDateField(
            r.BlockID,
            r.datasetTableID,
            a.datasetElemID,
            s,
            null,
            ListManager.Table.CellTypes.SDT_CT_GANTT_START,
            D,
            p
          ),
          u &&
          this.GanttUpdateDateField(
            r.BlockID,
            r.datasetTableID,
            a.datasetElemID,
            o,
            null,
            ListManager.Table.CellTypes.SDT_CT_GANTT_END,
            D,
            p
          ),
          this.GanttFastFormat(r, p);
        break;
      case ConstantData.ActionTriggerType.LINEEND:
        if (
          D = ListManager.GanttTaskModes.TASK_MODE_START,
          o = GlobalData.optManager.Gantt_PositionToTime(r, i, a.Frame.x + a.Frame.width - h.x),
          o = this.GanttGetBarSnapTime(r, o),
          (
            S = this.GanttGetDataValue(
              a.datasetElemID,
              ListManager.Table.CellTypes.SDT_CT_GANTT_END
            )
          ) &&
          S.length &&
          (l = parseInt(S)),
          l === o
        ) return;
        (
          S = this.GanttGetDataValue(
            a.datasetElemID,
            ListManager.Table.CellTypes.SDT_CT_GANTT_START
          )
        ) &&
          S.length &&
          (s = parseInt(S)) >= o &&
          (
            GlobalData.optManager.LinkParams &&
            (
              GlobalData.optManager.LinkParams.ConnectIndex = - 1,
              GlobalData.optManager.LinkParams.InitialHook = - 1
            ),
            s = GlobalData.optManager.Gantt_PositionToTime(r, i, a.Frame.x - h.x),
            s = this.GanttGetBarSnapTime(r, s),
            this.GanttUpdateDateField(
              r.BlockID,
              r.datasetTableID,
              a.datasetElemID,
              s,
              null,
              ListManager.Table.CellTypes.SDT_CT_GANTT_START,
              D,
              p
            )
          ),
          GlobalData.optManager.LinkParams &&
          (
            GlobalData.optManager.LinkParams.ConnectIndex = - 1,
            GlobalData.optManager.LinkParams.InitialHook = - 1
          ),
          this.GanttUpdateDateField(
            r.BlockID,
            r.datasetTableID,
            a.datasetElemID,
            o,
            null,
            ListManager.Table.CellTypes.SDT_CT_GANTT_END,
            D,
            p
          ),
          this.GanttFastFormat(r, p);
        break;
      default:
        if (this.GanttMoveDataRows(a.datasetTableID, i, c, n)) {
          var y = new Error(Resources.Strings.GanttDropError);
          throw y.name = '1',
          y
        }
        s = GlobalData.optManager.Gantt_PositionToTime(r, i, a.Frame.x - h.x),
          s = this.GanttGetBarSnapTime(r, s),
          (
            S = this.GanttGetDataValue(
              a.datasetElemID,
              ListManager.Table.CellTypes.SDT_CT_GANTT_START
            )
          ) &&
          S.length &&
          (l = parseInt(S)),
          l !== s &&
          this.GanttUpdateDateField(
            r.BlockID,
            r.datasetTableID,
            a.datasetElemID,
            s,
            null,
            ListManager.Table.CellTypes.SDT_CT_GANTT_START,
            ListManager.GanttTaskModes.TASK_MODE_START,
            p
          ),
          GlobalData.optManager.GanttFormat(r.BlockID, !0, !0, !0, null)
    }
  }
}

ListManager.LM.prototypeGanttUpdateDataBasedOnPosition = function (e, t, a, r, i, n, o) {

  var s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f = 0,
    L = 0,
    I = 0,
    T = null,
    b = !1,
    M = {
      firstsecs: 0,
      lastsecs: 0,
      firstend: 0
    };
  if (
    s = (y = this.GanttGetNonWorkingDays()).nonWorkingDays,
    (g = y.holidayMask) &&
    (T = this.LoadHolidays(!1), D = this.CountryNameFromHolidayMask(g)),
    C = GlobalData.optManager.GanttGetDateblockFrame(
      e,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID
    ),
    Utils2.OffsetRect(C, e.Frame.x, e.Frame.y),
    d = GlobalData.optManager.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
    S = parseInt(d),
    l = GlobalData.optManager.GanttGetMode(t),
    i ||
      n ? (
      l === ListManager.GanttTaskModes.TASK_MODE_END &&
        i ? (m = r.x + r.width - C.x, L = GlobalData.optManager.Gantt_PositionToTime(e, t, m)) : (m = r.x - C.x, L = GlobalData.optManager.Gantt_PositionToTime(e, t, m)),
      L = GlobalData.optManager.GanttGetBarSnapTime(e, L),
      this.PlanningTableIsWithinScrollArea(e, S) ||
      (L = S)
    ) : L = S,
    d = this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
    c = parseInt(d),
    i
  ) l === ListManager.GanttTaskModes.TASK_MODE_END ? (this.GanttShiftEnd(a, c, L, s, T, D), u = c) : (this.GanttShiftStart(a, S, L, s, T, D), u = S),
    b = !0,
    p = L,
    l === ListManager.GanttTaskModes.TASK_MODE_BOTH &&
    (l = ListManager.GanttTaskModes.TASK_MODE_START);
  else {
    if (
      n ? (
        I = c,
        u = S,
        p = L,
        l === ListManager.GanttTaskModes.TASK_MODE_START &&
        (b = !0),
        l == ListManager.GanttTaskModes.TASK_MODE_BOTH &&
        (l = ListManager.GanttTaskModes.TASK_MODE_END)
      ) : (
        m = r.x + r.width - C.x,
        I = this.Gantt_PositionToTime(e, t, m),
        I = this.GanttGetBarSnapTime(e, I),
        this.PlanningTableIsWithinScrollArea(e, c) ||
        (I = c),
        u = c,
        p = I,
        l === ListManager.GanttTaskModes.TASK_MODE_END &&
        (b = !0)
      ),
      I < L
    ) return - 1;
    if (
      h = o &&
        i ? 0 : this.GanttGetDuration(L, I, s, T, D),
      d = L.toString(),
      f = ListManager.SDData.UpdateValue(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START],
        d
      )
    ) return f;
    if (
      d = I.toString(),
      f = ListManager.SDData.UpdateValue(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
        d
      )
    ) return f;
    if (
      d = this.GanttDurationToString(h),
      f = ListManager.SDData.UpdateValue(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH],
        d
      )
    ) return f;
    l == ListManager.GanttTaskModes.TASK_MODE_BOTH &&
      (l = ListManager.GanttTaskModes.TASK_MODE_START)
  }
  return M.firstsecs = 0,
    M.lastsecs = 0,
    M.firstend = 0,
    this.GanttUpdateTaskData(
      e.BlockID,
      e.datasetTableID,
      a,
      !1,
      M,
      0,
      - 2,
      u,
      p,
      b,
      l,
      s,
      T,
      D,
      null,
      null
    ),
    f
}

ListManager.LM.prototypeGantt_PositionToTime = function (e, t, a) {
  var r,
    i;
  return (r = e.GetGanttInfo()) ? (i = GlobalData.optManager.GanttGetTimeFromOffset(r, a, !1)) < 0 ? - 1 : i : - 1
}

ListManager.LM.prototypeGanttGetBarSnapTime = function (e, t) {
  var a,
    r,
    i;
  return a = Utils2.SDRLocalTime(t),
    GlobalData.optManager.PlanningTableIsShowingGranularity(e, - 1, ListManager.TimeAmounts.OneHourNS) ? (
      i = a.wSecond >= 30,
      r = ListManager.TimeAmounts.OneMinNS,
      a.wSecond = a.wMilliseconds = 0
    ) : (
      i = a.wHour > 12,
      r = ListManager.TimeAmounts.OneDayNS,
      a.wHour = a.wMinute = a.wSecond = a.wMilliseconds = 0
    ),
    t = Utils2.SDRmktime(a),
    i &&
    (t += r),
    t
}

ListManager.LM.prototypePlanningTableIsWithinScrollArea = function (e, t) {
  var a,
    r = !0;
  return !!(a = e.GetGanttInfo()) &&
    (
      a.gridWd * a.gridTimes.length > this.GanttGetDateblockWidth(
        e,
        ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
      ) &&
      (t < a.scrollStart && (r = !1), t > a.scrollEnd && (r = !1)),
      r
    )
},

  ListManager.LM.prototype.GanttMoveDataRows = function (e, t, a, r) {
    var i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f;
    if (
      y = this.GanttGetFirstDataRow(t),
      firsdatarow = y.row,
      y.cell,
      a <= l &&
      (a = NaN),
      o = t.rows[a],
      i = t.cells[o.start],
      s = t.rows[r],
      n = t.cells[s.start],
      this.Gantt_IsParent(n.datarecordID, i.datarecordID)
    ) return - 1;
    if (
      g = this.GanttGetParentID(n.datarecordID),
      !(
        h = ListManager.SDData.GetValue(
          n.datarecordID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
        )
      )
    ) return - 1;
    if (C = parseInt(h), i.datarecordID >= 0) {
      if (
        S = this.GanttGetParentID(i.datarecordID),
        !(
          h = ListManager.SDData.GetValue(
            i.datarecordID,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
          )
        )
      ) return - 1;
      u = parseInt(h),
        m = S.toString(),
        p = ListManager.SDData.GetNumRows(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          m
        )
    } else m = (S = - 1).toString(),
      u = p = ListManager.SDData.GetNumRows(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        m
      );
    if (g === S) {
      if (C < u) {
        for (d = C + 1; d <= u; d++) if (
          D = ListManager.SDData.GetRow(
            e,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
            m,
            d
          ),
          (f = this.GanttRowToBar(D)) &&
          GlobalData.optManager.SetLinkFlag(f.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          h = Number(d - 1).toString(),
          c = ListManager.SDData.UpdateValue(
            D,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
            h
          )
        ) return c
      } else if (C > u) for (d = u; d < C; d++) if (
        D = ListManager.SDData.GetRow(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          m,
          d
        ),
        (f = this.GanttRowToBar(D)) &&
        GlobalData.optManager.SetLinkFlag(f.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        h = Number(d + 1).toString(),
        c = ListManager.SDData.UpdateValue(
          D,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
          h
        )
      ) return c
    } else {
      for (d = u; d < p; d++) if (
        (
          D = ListManager.SDData.GetRow(
            e,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
            m,
            d
          )
        ) >= 0 &&
        (
          (f = this.GanttRowToBar(D)) &&
          GlobalData.optManager.SetLinkFlag(f.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          h = Number(d + 1).toString(),
          c = ListManager.SDData.UpdateValue(
            D,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
            h
          )
        )
      ) return c;
      for (
        m = g.toString(),
        p = ListManager.SDData.GetNumRows(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          m
        ),
        d = C + 1;
        d < p;
        d++
      ) if (
          D = ListManager.SDData.GetRow(
            e,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
            m,
            d
          ),
          (f = this.GanttRowToBar(D)) &&
          GlobalData.optManager.SetLinkFlag(f.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
          h = Number(d - 1).toString(),
          c = ListManager.SDData.UpdateValue(
            D,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
            h
          )
        ) return c
    }
    return (c = this.SetRowHierarchy(n.datarecordID, u, S)) ? c : c = ListManager.SDData.SetIndexColumn(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
      ListManager.SDData.Defines.SDDATA_INDEX_ASC
    )
  }

ListManager.LM.prototypeGanttTaskIndent = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = [],
    d = {
      success: !1,
      expand: !1,
      fullyIndented: !1
    };
  if ((i = this.GanttGetParentID(t)) < 0) return d.success = !1,
    d;
  if (
    p.push(i),
    u = i.toString(),
    s = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      u
    ),
    ListManager.SDData.SetIndexColumn(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
      ListManager.SDData.Defines.SDDATA_INDEX_ASC
    ),
    !(
      c = ListManager.SDData.GetValue(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
      )
    )
  ) return null;
  if ((r = parseInt(c)) <= 0) return 0 === r &&
    (d.fullyIndented = !0, d.success = !0),
    d;
  if (
    (
      o = ListManager.SDData.GetRow(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        u,
        r - 1
      )
    ) < 0
  ) return d;
  if (
    p.push(o),
    c = o.toString(),
    (
      n = ListManager.SDData.GetNumRows(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        c
      )
    ) &&
    (
      c = ListManager.SDData.GetValue(
        o,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE]
      )
    ) &&
    parseInt(c)
  ) {
    if (
      a = ListManager.SDData.UpdateValue(
        o,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE],
        '0'
      )
    ) return null;
    d.expand = !0
  }
  for (S = r + 1; S < s; S++) if (
    (
      l = ListManager.SDData.GetRow(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        u,
        S
      )
    ) >= 0 &&
    (
      c = Number(S - 1).toString(),
      a = ListManager.SDData.UpdateValue(
        l,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
        c
      )
    )
  ) return null;
  return 0 === (a = this.SetRowHierarchy(t, n, o)) &&
    (
      a = ListManager.SDData.SetIndexColumn(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
        ListManager.SDData.Defines.SDDATA_INDEX_ASC
      )
    ),
    0 == a &&
    (d.success = !0),
    d
}

ListManager.LM.prototypeGanttTaskOutdent = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = [];
  if ((i = this.GanttGetParentID(t)) < 0) return null;
  if (
    p.push(i),
    !(
      c = ListManager.SDData.GetValue(
        i,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
      )
    )
  ) return null;
  if (r = parseInt(c), (n = this.GanttGetParentID(i)) < 0) return null;
  if (
    p.push(n),
    u = i.toString(),
    S = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      u
    ),
    !(
      c = ListManager.SDData.GetValue(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
      )
    )
  ) return null;
  for (l = parseInt(c) + 1; l < S; l++) if (
    (
      s = ListManager.SDData.GetRow(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        u,
        l
      )
    ) >= 0 &&
    (
      c = Number(l - 1).toString(),
      ListManager.SDData.UpdateValue(
        s,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
        c
      )
    )
  ) return null;
  for (
    u = n.toString(),
    o = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      u
    ),
    l = r + 1;
    l < o;
    l++
  ) if (
      (
        s = ListManager.SDData.GetRow(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          u,
          l
        )
      ) >= 0 &&
      (
        c = Number(l + 1).toString(),
        ListManager.SDData.UpdateValue(
          s,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
          c
        )
      )
    ) return null;
  return 0 == this.SetRowHierarchy(t, r + 1, n) &&
    ListManager.SDData.SetIndexColumn(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
      ListManager.SDData.Defines.SDDATA_INDEX_ASC
    ),
    0
}

ListManager.LM.prototypeGanttIndent = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = 0,
    d = !1,
    D = !1,
    g = !1,
    h = null,
    m = (
      GlobalData.optManager.ActiveVisibleZList(),
      this.GetObjectPtr(this.theTEDSessionBlockID, !1)
    ),
    C = [],
    y = null;
  if (
    t ||
    - 1 != m.theActiveTextEditObjectID &&
    this.DeactivateTextEdit(!1),
    null != (
      a = GlobalData.optManager.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1, null)
    )
  ) {
    if (
      a.BlockID,
      GlobalData.optManager.GetActiveLayerIndex() != GlobalData.optManager.FindLayerForShapeID(a.BlockID)
    ) return 0;
    if (!(r = a.GetTable())) return 0;
    for (
      s = (c = this.GanttGetFirstDataRow(r)).row,
      c.cell,
      o = r.rows.length,
      i = s;
      i < o;
      i++
    ) for (n = 0; n < r.rows[i].ncells; n++) if (
      r.cells[r.rows[i].start + n].flags & ListManager.Table.CellFlags.SDT_F_Select
    ) {
      C.push(i);
      break
    }
    if (0 === C.length) for (o = r.rows.length, i = s; i < o; i++) (h = this.GanttRowToBar(r.cells[r.rows[i].start].datarecordID)) &&
      h.IsSelected() &&
      C.push(i);
    if (0 === C.length) return 0;
    if (Collab.AllowMessage()) {
      Collab.BeginSecondaryEdit();
      var f = {
        indent: e
      },
        L = Collab.BuildMessage(ConstantData.CollabMessages.GanttIndent, f, !0, !0)
    }
    if (e) {
      for (o = C.length, i = 0; i < o; i++) if ((u = r.cells[r.rows[C[i]].start].datarecordID) >= 0) {
        if (!(y = this.GanttTaskIndent(a.datasetTableID, u))) return - 1;
        y.success &&
          !y.fullyIndented &&
          (d = y.success),
          y.fullyIndented &&
          (D = !0),
          y.expand &&
          (g = y.expand)
      }
      d ||
        !D ||
        t ||
        Utils2.Alert(Resources.Strings.FullyIndented)
    } else for (i = C.length - 1; i >= 0; i--) if (!((u = r.cells[r.rows[C[i]].start].datarecordID) < 0)) {
      if (S = !1, (l = this.GanttGetParentID(u)) >= 0) for (o = C.length, n = 0; n < o; n++) {
        var I = r.rows[C[n]];
        if (r.cells[I.start].datarecordID === l) {
          this.GanttGetParentID(r.cells[I.start].datarecordID) >= 0 &&
            (S = !0);
          break
        }
      } else S = !0;
      if (S) t ||
        Utils2.Alert(Resources.Strings.FullyOutdented);
      else if (!(d = 0 === (p = this.GanttTaskOutdent(a.datasetTableID, u)))) return - 1
    }
    return d &&
      (p = this.GanttFormat(a.BlockID, g, !0, !1, null)),
      Collab.AllowMessage() &&
      Collab.SendMessage(L),
      GlobalData.optManager.CompleteOperation(),
      p
  }
  Utils2.Alert(Resources.Strings.NoCellsSelected)
}

ListManager.LM.prototypeGanttSortByDueDate = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s = 0,
    l = [],
    S = {};
  if (
    o = t.toString(),
    a = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      o
    )
  ) {
    for (i = 0; i < a; i++) r = ListManager.SDData.GetRow(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      o,
      i
    ),
      S.rowid = r,
      S.date = 0,
      (
        n = ListManager.SDData.GetValue(
          S.rowid,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
        )
      ) &&
      (S.date = parseInt(n)),
      l.push(Utils1.DeepCopy(S));
    for (
      l.sort((function (e, t) {
        return e.date > t.date ? 1 : e.date < t.date ? - 1 : 0
      })),
      i = 0;
      i < l.length &&
      (
        n = i.toString(),
        !(
          s = ListManager.SDData.UpdateValue(
            l[i].rowid,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
            n
          )
        )
      );
      i++
    ) s = this.GanttSortByDueDate(e, l[i].rowid)
  }
  return s
}

ListManager.LM.prototypeGanttSortTasks = function (e, t, a) {

  var r,
    i,
    n,
    o,
    s,
    l,
    S;
  if (
    a ||
    GlobalData.optManager.CloseEdit(),
    n = this.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1)
  ) {
    var c,
      u = {
        resource: e,
        personName: t
      };
    if (e) {
      if (
        (
          o = ListManager.SDData.GetRow(
            n.datasetTableID,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
            '-1',
            0
          )
        ) >= 0
      ) {
        var p = this.GetAssigneeList(n.BlockID, t);
        if (!p) return;
        if (
          !(
            s = ListManager.SDData.GetValue(
              o,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
            )
          ) ||
          0 === s.length
        ) return;
        for (
          S = l = parseInt(s),
          Collab.AllowMessage() &&
          (
            Collab.BeginSecondaryEdit(),
            c = Collab.BuildMessage(ConstantData.CollabMessages.GanttSortTasks, u, !0, !0)
          ),
          n = this.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !0),
          i = p.length,
          r = 0;
          r < i;
          r++
        ) this.GanttOrderByResource(n.datasetTableID, - 1, p[r].personID, {
          StartTime: l
        }),
          l = S
      }
    } else Collab.AllowMessage() &&
      (
        Collab.BeginSecondaryEdit(),
        c = Collab.BuildMessage(ConstantData.CollabMessages.GanttSortTasks, u, !0, !0)
      ),
      this.GanttSortByDueDate(n.datasetTableID, - 1);
    this.GanttFormat(n.BlockID, !1, !0, !1, null),
      Collab.AllowMessage() &&
      Collab.SendMessage(c),
      GlobalData.optManager.CompleteOperation()
  } else Utils2.Alert(Resources.Strings.SelectGantt)
}

ListManager.LM.prototypeGetAssigneeList = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = [],
    c = GlobalData.optManager.GetObjectPtr(e, !1);
  if (!c) return null;
  for (
    l = ListManager.SDData.GetNumRows(c.datasetTableID, '', ''),
    a = 0;
    a < l;
    a++
  ) if (
      n = ListManager.SDData.GetRow(c.datasetTableID, '', '', a),
      r = ListManager.SDData.GetValue(
        n,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_RESOURCE]
      ),
      (!t || !t.length || r.toUpperCase() == t.toUpperCase()) &&
      (
        s = ListManager.SDData.GetValue(
          n,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONID]
        )
      ) &&
      s.length
    ) {
      o = parseInt(s);
      var u = $.grep(S, (function (e) {
        return e.personID === o
      }));
      if (
        (!u || !u.length) &&
        (
          i = ListManager.SDData.GetValue(
            n,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONGUID]
          ),
          S.push({
            name: r,
            personID: o,
            personGuid: i
          }),
          t &&
          t.length
        )
      ) break
    }
  return S
}

ListManager.LM.prototypeGanttOrderByResource = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = null;
  if (
    nwdResults = this.GanttGetNonWorkingDays(),
    c = nwdResults.nonWorkingDays,
    (u = nwdResults.holidayMask) &&
    (d = this.LoadHolidays(!1), S = this.CountryNameFromHolidayMask(u)),
    l = t.toString(),
    i = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      l
    )
  ) for (o = 0; o < i; o++) if (
    n = ListManager.SDData.GetRow(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      l,
      o
    ),
    ListManager.SDData.GetNumChildren(n, ListManager.DataRelationships.PARENT_RELATIONSHIP)
  ) this.GanttOrderByResource(e, n, a, r);
  else {
    if (
      (
        (
          s = ListManager.SDData.GetValue(
            n,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONID]
          )
        ) &&
          s.length > 0 ? parseInt(s) : - 1
      ) != a
    ) continue;
    (
      s = ListManager.SDData.GetValue(
        n,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
      )
    ) &&
      (
        p = parseInt(s),
        this.GanttShiftStart(n, p, r.StartTime, c, d, S),
        (
          s = ListManager.SDData.GetValue(
            n,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
          )
        ) &&
        (r.StartTime = parseInt(s))
      )
  }
  return 0
}

ListManager.LM.prototypePlanningTableSetTimeScale = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c = null,
    u = {},
    p = null;
  if (
    null == e &&
    GlobalData.optManager.RightClickParams &&
    (e = this.GetObjectPtr(GlobalData.optManager.RightClickParams.TargetID)),
    c = e ||
    this.GetCurrentPlanningTable(t, !1)
  ) {
    if (
      Collab.AllowMessage() &&
      Collab.BeginSecondaryEdit(),
      i = c.GetGanttInfo(!0),
      r = c.GetTable(),
      this.GanttGetLabelColumnWidth(
        i,
        r,
        i.gridTimes.length,
        ListManager.Table.GanttLabelTypes.GANTT_GRID_LABELS
      ) * i.gridTimes.length <= this.GanttGetDateblockWidth(
        c,
        ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
      ),
      S = i.timeScale,
      i.flags = Utils2.SetFlag(
        i.flags,
        ListManager.Table.GanttGridFlags.SDGF_FIT_TO_WINDOW,
        a == ListManager.TimeScale.SDG_FIT_TO_WINDOW
      ),
      i.flags & ListManager.Table.GanttGridFlags.SDGF_FIT_TO_WINDOW ? i.timeScale = - 1 : i.timeScale = a,
      this.GanttAdjustTableForTimeScale(c, i, S),
      0 != (l = this.PlanningTableUpdateGeometry(c, !0))
    ) return l;
    if (
      this.GanttScrollDateblock(c, - 1, 0),
      SDUI.Commands.MainController.Selection.PlanningTableToolBarSetSlider(0),
      nwdResults = this.GanttGetNonWorkingDays(),
      o = nwdResults.nonWorkingDays,
      (s = nwdResults.holidayMask) &&
      (p = this.LoadHolidays(!1), n = this.CountryNameFromHolidayMask(s)),
      u.firstsecs = 0,
      u.lastsecs = 0,
      this.GanttUpdateTaskData(
        c.BlockID,
        c.datasetTableID,
        - 1,
        !1,
        u,
        undefined,
        - 1,
        undefined,
        undefined,
        0,
        - 1,
        o,
        p,
        n,
        null,
        null
      ),
      this.PlanningTableUpdateRange(c, c.objecttype, u, !0),
      GlobalData.optManager.RenderDirtySVGObjects(),
      GlobalData.optManager.GanttUpdateDependencyLines(c),
      Collab.AllowMessage()
    ) {
      var d = {
        iNewTimeScale: a
      };
      Collab.BuildMessage(ConstantData.CollabMessages.GanttSetTimeScale, d, !1)
    }
    this.CompleteOperation()
  }
}

ListManager.LM.prototypeGanttSetTimeScale = function (e, t) {
  this.PlanningTableSetTimeScale(e, ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, t),
    SDUI.Commands.MainController.Selection.GanttTimeMeasureIdleMenuButtonText()
}

ListManager.LM.prototypeGantt_UpdateStartProperties = function (e) {
  var t,
    a,
    r,
    i,
    n = null,
    o = null;
  for (r = 0; r < e.rows.length; r++) for (t = e.rows[r], i = 0; i < t.ncells; i++) if (
    (a = e.cells[t.start + i]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTT_START
  ) this.Gantt_IsSlave(a.datarecordID) ? (
    a.flags = Utils2.SetFlag(a.flags, ListManager.Table.CellFlags.SDT_F_NoText, !0),
    a.stylename.toUpperCase() == ListManager.GanttDefines.GANTT_NONEDIT_STYLE.toUpperCase() &&
    (
      null == n &&
      (
        n = Resources.FindStyle(ConstantData.Defines.GANTT_NONEDIT_STYLE)
      ),
      n &&
      (
        a.fill.Paint.Color = n.Fill.Paint.Color,
        a.stylename = ConstantData.Defines.GANTT_NONEDIT_STYLE,
        a.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID
      )
    )
  ) : (
    a.flags = Utils2.SetFlag(a.flags, ListManager.Table.CellFlags.SDT_F_NoText, !1),
    a.stylename.toUpperCase() == ListManager.GanttDefines.GANTT_NONEDIT_STYLE.toUpperCase() &&
    (
      null == o &&
      (
        o = Resources.FindStyle(ConstantData.Defines.GANTT_WORKING_STYLE)
      ),
      o &&
      (
        a.fill.Paint.Color = o.Fill.Paint.Color,
        a.stylename = ConstantData.Defines.GANTT_WORKING_STYLE
      )
    )
  ),
    i = t.ncells
}

ListManager.LM.prototypeGetTimePreference = function () {
  return ListManager.ClockTypes.SDAUTOTIME
}

ListManager.LM.prototypeGanttGetTimePref = function () {
  var e;
  return (e = this.GetTimePreference()) == ListManager.ClockTypes.SDAUTOTIME &&
    (
      e = Utils2.GetActiveDateFormat(GlobalData.optManager.theContentHeader.dateformat) == ListManager.DateCodes.SDUSDATE ? ListManager.ClockTypes.SD12HOURTIME : ListManager.ClockTypes.SD24HOURTIME
    ),
    e
}

ListManager.LM.prototypeShowGanttScroll = function (e, t) {
  var a = GlobalData.optManager.GetObjectPtr(e);
  if (
    a &&
    !SDUI.Commands.MainController.Dropdowns.IsDropdownVisible(Resources.Controls.Dropdowns.GanttScroll.Id)
  ) {
    GlobalData.optManager.RightClickParams = new ListManager.RightClickData,
      GlobalData.optManager.RightClickParams.TargetID = e;
    var r = GlobalData.optManager.GanttGetDateblockFrame(
      a,
      ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_TITLE
    ),
      i = a.trect.x + r.x + r.width / 2 - 200,
      n = r.y + a.Frame.y,
      o = (
        GlobalData.optManager.svgObjectLayer.GetElementByID(a.BlockID),
        GlobalData.docHandler.DocObject().ConvertDocToWindowCoords(i, n)
      );
    o.y < GlobalData.docHandler.hRulerDoc.docInfo.dispY &&
      (o.y = 170),
      o.x < 0 &&
      (o.x = 20),
      SDUI.Commands.MainController.ShowDropdown(
        Resources.Controls.Dropdowns.GanttScroll.Id,
        o.x,
        o.y,
        'below'
      )
  }
}

ListManager.LM.prototypeHideGanttScroll = function (e, t, a) {
  var r = window.event ? window.event : a,
    i = 0;
  posy = 0,
    r.pageX ||
      r.pageY ? (i = r.pageX, posy = r.pageY) : (r.clientX || r.clientY) &&
    (
      i = r.clientX + document.body.scrollLeft + document.documentElement.scrollLeft,
      posy = r.clientY + document.body.scrollTop + document.documentElement.scrollTop
    );
  var n = {
    x: i,
    y: posy
  },
    o = (theSVGGroup = GlobalData.optManager.svgObjectLayer.GetElementByID(e)).GetElementByID(ConstantData.SVGElementClass.GANTTGRIDHOTSPOT).GetRBox();
  Utils2.InflateRect(o, - 2, - 2),
    Utils2.pointInRect(o, n) ||
    SDUI.Commands.MainController.Dropdowns.HideDropdown(Resources.Controls.Dropdowns.GanttScroll.Id)
}

ListManager.LM.prototypeGanttSetPercentCompleteEffectOnBar = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s = GlobalData.optManager.ActiveVisibleZList(),
    l = null,
    S = null,
    c = 0,
    u = 0,
    p = 0,
    d = 0,
    D = 0,
    g = 0,
    h = {
      type: SDGraphics.Element.Style.GradientStyle.LINEAR,
      startPos: SDGraphics.Element.Style.GradientPos.LEFT,
      stops: []
    },
    m = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PC]
    );
  if (m && 0 !== m.length) {
    if (o = parseInt(m), !isNaN(o) && 0 !== o) {
      for (i = s.length, r = 0; r < i; r++) if (
        (l = GlobalData.optManager.GetObjectPtr(s[r], !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
        l.datasetTableID === e.datasetTableID
      ) {
        S = l.GetGanttInfo();
        break
      }
      S &&
        (
          100 == o ||
            0 == o ? c = o : (
            n = ListManager.SDData.GetValue(
              e.datasetElemID,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
            ),
            d = GlobalData.optManager.GanttGetVirtualOffset(S, n.toString()),
            n = ListManager.SDData.GetValue(
              e.datasetElemID,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
            ),
            u = d + o / 100 * ((D = GlobalData.optManager.GanttGetVirtualOffset(S, n.toString())) - d),
            u -= S.scrollOffset,
            p = this.GanttGetDateblockWidth(
              l,
              ListManager.Table.CellTypes.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER
            ),
            u < 0 ? c = 0 : u > p ? c = 100 : (
              c = (u - (g = d > S.scrollOffset ? d - S.scrollOffset : 0)) / ((D < S.scrollOffset + p ? D - S.scrollOffset : p) - g),
              c *= 100
            )
          )
        ),
        h.stops.push({
          color: '#000000',
          opacity: a.Line.Paint.Opacity,
          offset: 0
        }),
        h.stops.push({
          color: '#000000',
          opacity: a.Line.Paint.Opacity,
          offset: c
        }),
        h.stops.push({
          color: a.Line.Paint.Color,
          opacity: a.Line.Paint.Opacity,
          offset: c
        }),
        h.stops.push({
          color: a.Line.Paint.Color,
          opacity: a.Line.Paint.Opacity,
          offset: 100
        }),
        t.SetGradientStroke(h)
    }
  } else t.SetFillColor(a.Line.Paint.Color)
}

ListManager.LM.prototypeSetTaskResourceData = function (e, t) {
  ListManager.SDData.UpdateValue(
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_RESOURCE],
    t
  );
  var a = ListManager.SDData.GetTableIDForRow(e),
    r = ListManager.SDData.GetDataSetID(a);
  GlobalData.optManager.TM_AssignPersonToTask(t, r, e)
}

ListManager.LM.prototypePlanningTableUpdateUserPreferredRange = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l = ListManager.GanttTaskModes.TASK_MODE_START;
  if (!(n = null != e ? e : GlobalData.optManager.GetCurrentPlanningTable(t, !0))) return - 1;
  if (!(o = n.GetGanttInfo())) return - 1;
  o.configuredStart = a.firstsecs,
    o.configuredEnd = a.lastsecs,
    l = ListManager.GanttTaskModes.TASK_MODE_START;
  var S;
  return S = GlobalData.optManager.PlanningTableGetTimeInfo(e, ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !0),
    (i || r != S.dtTasksStart) &&
    (
      s = ListManager.SDData.GetRow(
        n.datasetTableID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
        '-1',
        0
      )
    ) >= 0 &&
    GlobalData.optManager.GanttUpdateDateField(
      n.BlockID,
      n.datasetTableID,
      s,
      r,
      0,
      ListManager.Table.CellTypes.SDT_CT_GANTT_START,
      l,
      null
    ),
    this.GanttFormat(n.BlockID, !0, !1, !1, null)
}

ListManager.LM.prototypeShapeStyleToData = function (e, t) {
  var a;
  (a = Resources.FindStyle(e.StyleRecord.Name)) &&
    (
      a = GlobalData.optManager.GanttStoreStyleExceptions(t, a, e.StyleRecord.Fill)
    )
}

ListManager.LM.prototypeGanttStoreStyleExceptions = function (e, t, a, r) {
  var i = '';
  if (
    a.Paint.Color != t.Fill.Paint.Color &&
    a.Paint.Color.toUpperCase() != ConstantData.Colors.Color_White &&
    a.Paint.Color.toUpperCase() != ConstantData.Colors.Color_Row_Shade
  ) {
    i.length > 0 &&
      (i += '\'');
    var n = SDF.HTMLColorToWin(a.Paint.Color);
    i += ListManager.GanttDefines.SD_EX_FILLCOLOR + ':' + n.toString()
  }
  ListManager.SDData.UpdateValue(
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_STYLE],
    i
  )
}

ListManager.LM.prototypeGanttCleanUpStyles = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o,
    s,
    l = e.GetTable(!1);
  if (null != l) for (a = l.rows.length, t = 2; t < a; t++) {
    if (o = l.rows[t], void 0 === i) for (r = 0; r < o.ncells; r++) if (
      (n = l.cells[o.start + r]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
    ) {
      i = r;
      break
    }
    i >= 0 &&
      (
        (s = (n = l.cells[o.start + i]).fill.Paint.Color) != ConstantData.Colors.Color_White &&
        s.toUpperCase() != ConstantData.Colors.Color_Row_Shade.toUpperCase() ||
        ListManager.SDData.UpdateValue(
          n.datarecordID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_STYLE],
          ''
        )
      )
  }
}

ListManager.LM.prototypeGanttStyleDataToStyle = function (e, t) {
  var a;
  if (
    !(
      a = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_STYLE]
      )
    ) ||
    0 == a.length
  ) return 0;
  var r = a.split('\'');
  for (i = 0; i < r.length; i++) if (
    code = r[i].split(':'),
    parseInt(code[0]) === ListManager.GanttDefines.SD_EX_FILLCOLOR
  ) t.Paint.Color = SDF.WinColorToHTML(parseInt(code[1]))
}

ListManager.LM.prototypeGantt_CopyTableContent = function (e) {
  var t,
    a = ListManager.Table.CellFlags.SDT_F_Select,
    r = [],
    i = e.GetTable(!1);
  if (i && i.select >= 0) {
    var n,
      o,
      s,
      l,
      S;
    for (s = i.rows.length, n = 0; n < s; n++) for (S = i.rows[n], l = 0; l < S.ncells; l++) if ((o = i.cells[S.start + l]).flags & a && o.datarecordID >= 0) {
      t = this.GanttRowToBar(o.datarecordID),
        r.push(t.BlockID);
      break
    }
    r.length &&
      (
        this.theContentHeader.ClipboardBuffer = SDF.WriteSelect(r, !1, !0, !1),
        this.theContentHeader.ClipboardType = ConstantData.ClipboardType.LM
      )
  }
}

ListManager.LM.prototypeGanttRefreshEndDates = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S = {},
    c = 0;
  if (
    a ||
    (
      a = {},
      S = GlobalData.optManager.GanttGetNonWorkingDays(),
      a.nonworkdays = S.nonWorkingDays,
      S.holidayMask &&
      (
        a.holidayptr = GlobalData.optManager.LoadHolidays(!1),
        a.country = GlobalData.optManager.CountryNameFromHolidayMask(S.holidayMask)
      )
    ),
    l = ListManager.SDData.GetNumRows(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      t.toString()
    )
  ) for (r = 0; r < l; r++) (
    n = ListManager.SDData.GetRow(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
      t.toString(),
      r
    )
  ) >= 0 &&
    this.GanttRefreshEndDates(e, n, a);
  else n = t,
    i = this.GanttGetDataValue(n, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
    s = parseInt(i),
    c = (
      i = this.GanttGetDataValue(n, ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH)
    ) &&
      i.length ? parseInt(i) : 0,
    o = s,
    o = this.GanttAddDuration(o, c, a.nonworkdays, a.holidayptr, a.country),
    this.GanttUpdateDataValue(
      n,
      ListManager.Table.CellTypes.SDT_CT_GANTT_END,
      o.toString()
    )
}

ListManager.LM.prototypeSetGanttEndDate = function (e, t, a, r) {
  var i = ListManager.SDData.GetTableIDForRow(t);
  return GlobalData.optManager.GanttUpdateDateField(
    e,
    i,
    t,
    a,
    0,
    ListManager.Table.CellTypes.SDT_CT_GANTT_END,
    ListManager.GanttTaskModes.TASK_MODE_END,
    [
      t
    ],
    r
  )
}

ListManager.LM.prototypeInitializeGanttObject = function (e, t, a) {
  var r = ListManager.Table.CellTypes,
    i = [
      {
        Name: '',
        celltype: r.SDT_CT_GANTT_TASKNUMBER,
        width: 75,
        just: 'center'
      },
      {
        Name: 'Task',
        celltype: r.SDT_CT_GANTTTASK,
        width: 300,
        just: 'left'
      },
      {
        Name: 'Start',
        celltype: r.SDT_CT_GANTT_START,
        width: 100,
        just: 'center'
      },
      {
        Name: 'End',
        celltype: r.SDT_CT_GANTT_END,
        width: 100,
        just: 'center'
      },
      {
        Name: 'Dur.',
        celltype: r.SDT_CT_GANTT_LENGTH,
        width: 100,
        just: 'center'
      },
      {
        Name: '%',
        celltype: r.SDT_CT_GANTT_PC,
        width: 75,
        just: 'center'
      },
      {
        Name: '',
        celltype: r.SDT_CT_GANTT_DATEBLOCK_GRID,
        width: 500,
        just: 'center'
      }
    ];
  if (null != a) {
    var n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h = 0;
    for (
      null != a.UseDataTable &&
      a.UseDataTable.Rows &&
      a.UseDataTable.Rows.length > 0 &&
      (h = a.UseDataTable.Rows.length),
      h += 3,
      n = i.length,
      l = i.length,
      o = 0,
      s = 0;
      s < l;
      s++
    ) o += i[s].width;
    S = 40 * h,
      null == t.TextMargin &&
      (t.TextMargin = 10, SDJS.API.SetTextMargins(e, t)),
      e.SetSize(o, S, 0),
      e.TextAlign = 'center',
      null != t.FillColor &&
      (a.BarColor = t.FillColor),
      GlobalData.optManager.Table_Create(e.BlockID, h, n, e.TextGrow, !0);
    var m = e.GetTable(!0);
    for (s = 0; s < l; s++) GlobalData.optManager.Table_JoinVertically(e, m, s, 0, 1);
    if (null != a.GanttColumns) for (l = a.GanttColumns.length, c = 0; c < l; c++) if (a.GanttColumns[c].Name === VS.GanttChartColumnNames.DateGrid) {
      for (s = 0; s < n; s++) if (
        i[s].celltype === r.SDT_CT_GANTT_DATEBLOCK_GRID &&
        a.GanttColumns[c].Settings.Width > i[s].width
      ) {
        i[s].width = a.GanttColumns[c].Settings.Width;
        break
      }
      break
    }
    var C = {
      DefaultToExistingTable: !0,
      AlternateRows: {
        StartRow: 2
      }
    };
    for (
      SDJS.API.SetShapeTable(e, C, 0, null),
      m.cells[n - 1].celltype = r.SDT_CT_GANTT_DATEBLOCK_TITLE,
      m.cells[2 * n - 1].celltype = r.SDT_CT_GANTT_DATEBLOCK_GRID_HEADER,
      s = 0;
      s < n;
      s++
    ) for (
        p = m.cells[s],
        null == t.TextBold &&
        (p.Text.Face |= ConstantData.TextFace.Bold),
        null == t.TextSize &&
        (p.Text.FontSize = 12),
        i[s].Name.length &&
        (p.DataID = GlobalData.optManager.CreateTextBlock(e, i[s].Name)),
        d = i[s].width - p.frame.width,
        GlobalData.optManager.theActionTable = m,
        D = GlobalData.optManager.Table_GrowColumn(e, m, s, d, e.TextGrow, !0, !1, !0),
        GlobalData.optManager.theActionTable = null,
        (g = Utils1.DeepCopy(e)).trect.width = D.x,
        g.trect.height = D.y,
        g.TRectToFrame(g.trect, !0),
        e.SetSize(g.Frame.width, null, - 1),
        c = 2;
        c < h;
        c++
      ) u = m.rows[c],
        (p = m.cells[u.start + s]).celltype = i[s].celltype,
        i[s].just &&
        (p.just = i[s].just);
    e.objecttype = ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART;
    var y = new ListManager.Table.GanttInfo;
    y.scrollStart = Utils2.SDRtime(null),
      y.scrollEnd = y.scrollStart + ListManager.TimeAmounts.OneDayNS,
      e.SetGanttInfo(y),
      GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theLayersManagerBlockID, !0).layers[0].layertype = ConstantData.LayerTypes.SD_LAYERT_GANTT,
      GlobalData.optManager.AddPlanningDataSet(e),
      GlobalData.optManager.GanttInsertTaskRecord(y, !1, e.datasetTableID, - 1, 0),
      gProjectChartManager.ReadJSONAPI(a, !0)
  }
}

ListManager.LM.prototypeUpdateProjectOptions = function (e, t, a, r) {
  var i,
    n = !1;
  if (
    r ||
    GlobalData.optManager.CloseEdit(),
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    i = GlobalData.optManager.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !0),
    GlobalData.optManager.Gantt_HideandShowColumns(i.BlockID, e),
    a != GlobalData.optManager.GanttGetNonWorkingDays().holidayMask &&
    (GlobalData.optManager.theContentHeader.holidaymask = a, n = !0),
    GlobalData.optManager.theContentHeader.nonworkingdays != t &&
    (n = !0),
    GlobalData.optManager.theContentHeader.nonworkingdays = t,
    n &&
    i &&
    (
      GlobalData.optManager.GanttRefreshEndDates(i.datasetTableID, - 1),
      GlobalData.optManager.GanttFormat(i.BlockID, !1, !1, !1, null)
    ),
    Collab.AllowMessage()
  ) {
    var o = {
      columnMask: e,
      workingdaysMask: t,
      countryEntryMask: a
    };
    Collab.BuildMessage(ConstantData.CollabMessages.UpdateProjectOptions, o, !1)
  }
  GlobalData.optManager.CompleteOperation(null)
}

ListManager.LM.prototypeUpdateProjectTimeframe = function (e, t, a, r) {
  if (
    r ||
    GlobalData.optManager.CloseEdit(),
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    obj = GlobalData.optManager.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !0),
    GlobalData.optManager.PlanningTableUpdateUserPreferredRange(obj, ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, e, t, a),
    Collab.AllowMessage()
  ) {
    var i = {
      taskStartDateSecs: t,
      changedStartDate: a
    };
    i.range = Utils1.DeepCopy(e),
      Collab.BuildMessage(ConstantData.CollabMessages.UpdateProjectTimeframe, i, !1)
  }
  GlobalData.optManager.CompleteOperation(null)
},
  ListManager.GanttDefines = {
    GANTT_NONWORKING_STYLE: 'Style14',
    GANTT_NONEDIT_STYLE: 'Style25',
    GANTT_NONWORKING_COLOR: '#f1f1f1',
    GANTT_WORKING_STYLE: 'Grid',
    GANTT_DATEBLOCK_GRIDLINE_COLOR: '#EAEAEA',
    GANTT_BTHICK: 15,
    SDGANTT_MAXDAYS: 1000,
    SDGANTT_MAXYEARS: 10,
    PLANNING_VERSIONSTR: '1',
    SD_EX_FILLCOLOR: 0
  },
  ListManager.DataTableNames = {
    PLANNING_TASKS: 'SDTASKS',
    PLANNING_MEETING: 'SDMEETING',
    DOCUMENT_DESCRIPTION: 'DOCUMENTDESCRIPTION',
    SHARED_FILESTABLE: 'SHAREDFILESANDFOLDERS',
    SAVED_SHARED_FILES: 'SAVED_SHAREDFILES',
    SERVER_SHARED_FILES: 'SERVER_SHAREDFILES',
    HUB_LINKS: 'SDHUB',
    PERSONTABLE: 'SDPERSON',
    TEAMTABLE: 'SDTEAM',
    TEAMPERSONTABLE: 'SDTEAMPERSON',
    NG_TIMELINE: 'NG_TIMELINE',
    NG_TIMELINE_EVENT: 'NG_TIMELINE_EVENT',
    IMPORT_JIRA_ROADMAP: 'JIRA_PRODUCT_ROADMAP',
    IMPORT_JIRA_BLOCKING_ISSUE: 'JIRA_BLOCKING_ISSUE',
    IMPORT_JIRA_PI_BOARD: 'JIRA_PI_BOARD',
    IMPORT_JIRA_EPIC_DEPENDENCY: 'JIRA_EPIC_DEPENDENCY'
  },
  ListManager.TaskIcons = {
    ICON_BASE: 2200,
    ICON_TASK_GREEN: 2300,
    ICON_TASK_YELLOW: 2301,
    ICON_TASK_RED: 2302,
    ICON_MILESTONE_GREEN: 2310,
    ICON_MILESTONE_YELLOW: 2311,
    ICON_MILESTONE_RED: 2312,
    ICON_TASK_GREEN_25: 2325,
    ICON_TASK_YELLOW_25: 2326,
    ICON_TASK_RED_25: 2327,
    ICON_TASK_GREEN_50: 2350,
    ICON_TASK_YELLOW_50: 2351,
    ICON_TASK_RED_50: 2352,
    ICON_TASK_GREEN_75: 2375,
    ICON_TASK_YELLOW_75: 2376,
    ICON_TASK_RED_75: 2377,
    ICON_TASK_100: 2400
  }

ListManager.LM.prototypeDataSaveField = function (e, t, a, r, i, n) {

  var o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T,
    b,
    M,
    P,
    R = - 1,
    A = 0,
    _ = !1,
    E = - 1,
    w = - 1,
    F = !1,
    v = '',
    G = !1,
    N = 0,
    k = [];
  if (
    t &&
    (h = this.GanttGetMode(t)),
    u = n ? n.GetRuntimeText().text : '',
    D = e.datasetID,
    (d = this.DataGetFieldFormat(r, i)) != ListManager.DataOpsFieldTypes.SD_DATA_FT_TEXT
  ) {
    (p = u.length) > 261 &&
      (p = 261),
      (o = Utils1.DeepCopy(u)).length > p &&
      (o = o.substr(0, p));
    var U = this.DataParseValue(o, d, GlobalData.optManager.theContentHeader.dateformat);
    if (0 != U.result) return r >= 0 ? (!0, v = null) : v = '',
      this.GanttFormat(e.BlockID, !1, !1, !1, null),
      v;
    if (
      v = U.sresult,
      C = U.timevalue,
      E = U.dvalue,
      U.ivalue,
      o.toUpperCase() !== v.toUpperCase() &&
      n &&
      (
        n.SetText(v),
        (R = n.GetUserData()) &&
        (
          GlobalData.optManager.GetObjectPtr(R, !0).runtimeText = n.GetRuntimeText()
        )
      ),
      r >= 0
    ) switch (i) {
      case ListManager.Table.CellTypes.SDT_CT_MEETINGDATE:
        - 2 == (
          A = (
            b = this.GanttDueDateCheck(r, C, GlobalData.optManager.theContentHeader.dateformat, !0)
          ).result
        ) &&
          (
            o = b.sformat,
            A = (
              U = this.DataParseValue(o, d, GlobalData.optManager.theContentHeader.dateformat)
            ).result,
            C = U.timevalue,
            F = !0
          ),
          v = b.sresult,
          i = ListManager.Table.CellTypes.SDT_CT_GANTT_END;
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
      case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
        switch (h) {
          case ListManager.GanttTaskModes.TASK_MODE_START:
          case ListManager.GanttTaskModes.TASK_MODE_BOTH:
            var J = this.GanttEndRangeCheck(e, t, r, C, i, GlobalData.optManager.theContentHeader.dateformat, v);
            - 2 == (A = J.result) &&
              (
                o = J.sformat,
                A = (
                  U = this.DataParseValue(o, d, GlobalData.optManager.theContentHeader.dateformat)
                ).result,
                C = U.timevalue,
                F = !0
              ),
              v = J.sformat
        }
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
      case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
        switch (h) {
          case ListManager.GanttTaskModes.TASK_MODE_END:
          case ListManager.GanttTaskModes.TASK_MODE_BOTH:
            var x = this.GanttStartRangeCheck(t, r, C, i, GlobalData.optManager.theContentHeader.dateformat, v);
            - 2 == (A = x.result) &&
              (
                o = x.sformat,
                A = (
                  U = this.DataParseValue(o, d, GlobalData.optManager.theContentHeader.dateformat)
                ).result,
                C = U.timevalue,
                F = !0
              ),
              v = x.sformat
        }
        break;
      case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
        (M = this.GanttRowToBar(r)) &&
          (
            o != v &&
            (o = v),
            '0' == o &&
            (o = ''),
            this.GanttIsMilestone(M) &&
            0 != (w = parseInt(v, 10)) &&
            100 != w &&
            (o = o && o.length && !isNaN(o) ? '100' : '', n && (v = o, F = !0))
          )
    } else if (i === ListManager.Table.CellTypes.SDT_CT_MEETINGDATE) A = (
      b = this.GanttDueDateCheck(- 1, C, GlobalData.optManager.theContentHeader.dateformat, !0)
    ).result,
      v = b.sresult;
    if (0 === A) {
      if (
        e.BlockID,
        _ = e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
        GlobalData.optManager.FindLayerForShapeID(e.BlockID) === GlobalData.optManager.GetActiveLayerIndex(),
        r < 0
      ) return null;
      switch (i) {
        case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
        case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
          k.push(r),
            L = 0,
            i != ListManager.Table.CellTypes.SDT_CT_GANTT_START &&
            i != ListManager.Table.CellTypes.SDT_CT_GANTT_END ||
            (
              o = this.GanttGetDataValue(r, i),
              y = f = parseInt(o),
              L = f - (y = this.TrimHours(y))
            ),
            i == ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME ? (
              o = this.GanttGetDataValue(r, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
              T = parseInt(o),
              C += T = this.TrimHours(T)
            ) : i == ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME ? (
              o = this.GanttGetDataValue(r, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
              I = parseInt(o),
              C += I = this.TrimHours(I)
            ) : i === ListManager.Table.CellTypes.SDT_CT_GANTT_END &&
              0 === L ? 0 === L &&
            (
              G = !1,
              M = this.GanttRowToBar(r),
              this.GanttIsMilestone(M) &&
              (
                N = this.GanttGetDataValue(r, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
                N = parseInt(N),
                G = (N = this.TrimHours(N)) === C
              ),
              G ||
              (C += ListManager.TimeAmounts.OneDayNS)
            ) : C += L,
            0 == (A = this.GanttUpdateDateField(e.BlockID, a, r, C, E, i, h, k)) ? _ &&
              this.GanttFastFormat(e, k) : - 1 == A &&
            (A = 0);
          break;
        case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
          if (r >= 0) {
            if (
              this.GanttGetDataValue(r, ListManager.Table.CellTypes.SDT_CT_GANTT_PC) === o
            ) break;
            P = ListManager.SDData.GetValue(
              r,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
            ),
              s = this.GanttGetFieldName(i),
              k.push(r),
              0 == (A = ListManager.SDData.UpdateValue(r, s, o)) &&
              (
                P &&
                P.length &&
                ListManager.Trello.TrelloUpdateCardData(
                  r,
                  ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PC],
                  o
                ),
                _ &&
                this.GanttFastFormat(e, k)
              )
          }
          break;
        case ListManager.Table.CellTypes.CT_VS_DEMAND:
        case ListManager.Table.CellTypes.CT_VS_HOURS:
          r < 0 &&
            (r = this.FlowChart_AddTaktRecord(t)),
            r >= 0 &&
            null != (s = this.Flowchart_GetFieldName(i)) &&
            (
              A = ListManager.SDData.UpdateValue(r, s, o),
              this.FlowChart_UpdateTakt(t)
            );
          break;
        case ListManager.Table.CellTypes.CT_FLOW_NVA:
        case ListManager.Table.CellTypes.CT_FLOW_VA:
        case ListManager.Table.CellTypes.CT_FLOW_INV:
          r >= 0 &&
            (s = this.Flowchart_GetFieldName(i)) &&
            (
              A = ListManager.SDData.UpdateValue(r, s, o),
              this.FlowChart_InvalTimeline(tindex)
            );
          break;
        case ListManager.Table.CellTypes.CT_FLOW_OP:
          r >= 0 &&
            (s = this.Flowchart_GetFieldName(i)) &&
            (A = ListManager.SDData.UpdateValue(r, s, o));
          break;
        default:
          r >= 0 &&
            (
              s = this.GanttGetFieldName(i),
              A = ListManager.SDData.UpdateValue(r, s, o)
            )
      }
    }
  } else if (
    g = null != (l = this.GanttGetFieldName(i)),
    m = null != (S = this.Flowchart_GetFieldName(i)),
    g ? s = l : m &&
      (s = S),
    u.length
  ) {
    if (
      e.BlockID,
      _ = e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART &&
      GlobalData.optManager.FindLayerForShapeID(e.BlockID) === GlobalData.optManager.GetActiveLayerIndex(),
      r >= 0
    ) {
      if (g) {
        switch (
        P = ListManager.SDData.GetValue(
          r,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
        ),
        i
        ) {
          case ListManager.Table.CellTypes.SDT_CT_GANTTTASK:
            P &&
              P.length &&
              ListManager.Trello.TrelloUpdateCardData(
                r,
                ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_FIELD],
                u
              );
            break;
          case ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE:
            if (
              ListManager.Trello.AllowIntegrationWithTrello() &&
              ListManager.Trello.AreAnyTasksLinkedToTrello(a) &&
              (
                !(
                  o = ListManager.SDData.GetValue(
                    r,
                    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_RESOURCE]
                  )
                ) ||
                0 === o.length ||
                o.toUpperCase() != u.toUpperCase()
              ) &&
              (
                (c = GlobalData.optManager.TM_GetPersonRow(u, D)) < 0 ||
                !GlobalData.optManager.TM_IsPersonFlagSet(c, ListManager.PersonTableFlags.SF_LF_FROM_TRELLO)
              )
            ) return Collab.IsProcessingMessage() ||
              setTimeout(
                (
                  function () {
                    Utils2.Alert(Resources.Strings.TrelloMustAssignTrelloMembers)
                  }
                ),
                200
              ),
              A = ListManager.SDData.UpdateValue(r, s, ''),
              GlobalData.optManager.TM_AssignPersonToTask('', D, - 1),
              ''
        }
        A = ListManager.SDData.UpdateValue(r, s, u)
      } else m &&
        (A = ListManager.SDDataUpdateValue(r, s, u));
      switch (i) {
        case ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE:
          GlobalData.optManager.TM_AddNewPerson(u, D),
            A = GlobalData.optManager.TM_AssignPersonToTask(u, D, r);
          break;
        case ListManager.Table.CellTypes.SDT_CT_PERSON:
          GlobalData.optManager.TM_AddNewPerson(u, D),
            A = GlobalData.optManager.TM_AssignPersonToTask(u, D, - 1);
          break;
        case ListManager.Table.CellTypes.SDT_CT_MEETINGTASK:
          this.UpdateMeetingTaskLabels(u, r, i)
      }
    } else if (i === ListManager.Table.CellTypes.SDT_CT_PERSON) A = GlobalData.optManager.TM_AssignPersonToTask(u, D, - 1)
  } else if (r >= 0 && s) {
    if (
      o = '',
      i === ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE
    ) this.TM_UnAssignPersonToTask(r);
    A = ListManager.SDData.UpdateValue(r, s, o)
  }
  return F ? v : null
}

ListManager.LM.prototypeGanttUpdateDataValue = function (e, t, a) {
  var r;
  return (r = this.GanttGetFieldName(t)) ? ListManager.SDData.UpdateValue(e, r, a) : - 1
}

ListManager.LM.prototypeGanttGetDataValue = function (e, t) {
  var a;
  return (a = this.GanttGetFieldName(t)) ? ListManager.SDData.GetValue(e, a) : null
}

ListManager.LM.prototypeGanttGetFieldName = function (e) {
  var t = - 1;
  switch (e) {
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
      e = ListManager.Table.CellTypes.SDT_CT_GANTT_START;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
    case ListManager.Table.CellTypes.SDT_CT_MEETINGDATE:
      e = ListManager.Table.CellTypes.SDT_CT_GANTT_END
  }
  switch (e) {
    case ListManager.Table.CellTypes.SDT_CT_GANTTTASK:
      t = ListManager.GanttTaskFields.TASK_FIELD;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_RESOURCE:
      t = e - ListManager.Table.CellTypes.SDT_CT_GANTT_START + 1 + ListManager.GanttTaskFields.TASK_FIELD;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_DEPT:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_COST:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_CUST:
      t = e - ListManager.Table.CellTypes.SDT_CT_GANTT_START - 1
  }
  return t < 0 ? null : ListManager.GanttFieldNameList[t]
}

ListManager.LM.prototypeDataGetFieldFormat = function (e, t) {
  var a = ListManager.DataOpsFieldTypes.SD_DATA_FT_TEXT;
  switch (t) {
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END:
    case ListManager.Table.CellTypes.SDT_CT_MEETINGDATE:
      a = ListManager.DataOpsFieldTypes.SD_DATA_FT_DATE;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME:
    case ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME:
      a = ListManager.DataOpsFieldTypes.SD_DATA_FT_TIME;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_LENGTH:
      a = ListManager.DataOpsFieldTypes.SD_DATA_FT_FP;
      break;
    case ListManager.Table.CellTypes.SDT_CT_GANTT_PC:
      a = ListManager.DataOpsFieldTypes.SD_DATA_FT_PC;
      break;
    case ListManager.Table.CellTypes.CT_FLOW_OP:
    case ListManager.Table.CellTypes.CT_FLOW_INV:
      a = ListManager.DataOpsFieldTypes.SD_DATA_FT_INT;
      break;
    case ListManager.Table.CellTypes.CT_VS_DEMAND:
    case ListManager.Table.CellTypes.CT_VS_HOURS:
    case ListManager.Table.CellTypes.CT_FLOW_VA:
    case ListManager.Table.CellTypes.CT_FLOW_NVA:
      a = ListManager.DataOpsFieldTypes.SD_DATA_FT_FPG
  }
  return a
}

ListManager.LM.prototypeValidateCharAgainstFieldFormat = function (e, t) {
  switch (t) {
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_DATE:
      if (- 1 === e.search(/(\d|\/)/)) return !1;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_TIME:
      if (- 1 === e.search(/(\d|\.|\:|A|P|M| )/)) return !1;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_FP:
      if (- 1 === e.search(/(\d|\.)/)) return !1;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_PC:
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_INT:
      if (- 1 === e.search(/(\d)/)) return !1;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_FPG:
      if (- 1 === e.search(/(\d|\.)/)) return !1
  }
  return !0
}

ListManager.LM.prototypeGanttPCToString = function (e) {
  return Math.round(e).toString()
}

ListManager.LM.prototypeDataParseValue = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p = 0,
    d = {};
  switch (t) {
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_DATE:
      e.length > 0 &&
        (
          S = Utils2.ParseSDRDate(e, 0, Utils2.GetActiveDateFormat(a))
        ) ? (
        s = Utils2.SDRLocalTime(S),
        l = Utils2.SDRTimeToStringYY(s, Utils2.GetActiveDateFormat(a))
      ) : p = 1;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_TIME:
      e.length > 0 &&
        (d = Utils2.ParseTimeField(e, S, l)) ? (l = d.time, S = d.secs) : p = 1;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_FP:
      if (p = 1, e.length > 0) {
        if (
          (n = parseFloat(e)) >= 0 &&
          n <= ListManager.GanttDefines.SDGANTT_MAXDAYS
        ) {
          if (l = this.GanttDurationToString(n), 0 === e.indexOf('.')) e = '0' + e;
          var D = - 1;
          if (e.indexOf('.') > 0) for (r = e.length - 1; r > 0 && 0 == e.charAt(r); r--) D = r;
          D >= 0 &&
            (e = e.substr(0, D)),
            '.' === e.charAt(e.length - 1) &&
            (e = e.substr(0, e.length - 1)),
            l == e ? (p = 0, c = n) : p = - 2
        }
      } else l = '',
        c = 0,
        p = 0;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_INT:
      p = 1,
        e &&
          e.length ? (i = parseInt(e, 10)) >= 0 &&
        (p = 0, u = i, l = i.ToString()) : (l = '', u = 0, p = 0);
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_FPG:
      p = 1,
        e &&
          e.length ? (n = parseFloat(e)) >= 0 &&
        (p = 0, c = n, l = n.toString(), l = parseFloat(n).toFixed(2)) : (l = '', c = 0, p = 0);
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_PC:
      p = 1,
        e &&
          e.length ? (o = parseFloat(e)) >= 0 &&
          o <= 100 &&
        (p = 0, c = o, l = this.GanttPCToString(o)) : (l = '', u = 0, p = 0);
      break;
    default:
      l = e
  }
  return {
    result: p,
    sresult: l,
    timevalue: S,
    dvalue: c,
    ivalue: u
  }
}

ListManager.LM.prototypeDataValueToString = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S;
  switch (i = this.GanttGetDataValue(e, t), a) {
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_DATE:
      n = parseInt(i),
        o = Utils2.SDRLocalTime(n),
        S = Utils2.SDRTimeToStringYY(o, Utils2.GetActiveDateFormat(r));
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_TIME:
      n = (n = parseInt(i)) - (n = this.TrimHours(n)),
        S = this.GanttTimeToString(n);
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_PC:
      i &&
        i.length ? (l = parseFloat(i), S = this.GanttPCToString(l)) : S = i;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_FP:
      i &&
        i.length ? (s = parseFloat(i), S = this.GanttDurationToString(s)) : S = i;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_INT:
      S = i;
      break;
    case ListManager.DataOpsFieldTypes.SD_DATA_FT_FPG:
      i &&
        i.length > 0 ? (
        s = parseInt(i),
        S = parseFloat(Math.round(10 * s) / 10).toFixed(1).toString()
      ) : S = i
  }
  return S
}

ListManager.LM.prototypeGanttEndRangeCheck = function (e, t, a, r, i, n, o) {
  var s,
    l,
    S,
    c,
    u,
    p = '',
    d = 0;
  return p = o,
    u = this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_START),
    s = parseInt(u),
    u = this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_END),
    l = parseInt(u),
    i == ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME ? r += l = this.TrimHours(l) : (S = l, r += l - (S = this.TrimHours(S))),
    r < s &&
    (
      r = s,
      i === ListManager.Table.CellTypes.SDT_CT_GANTT_END_TIME ? p = this.GanttTimeToString(r) : (
        c = Utils2.SDRLocalTime(r),
        p = Utils2.SDRTimeToStringYY(c, Utils2.GetActiveDateFormat(n)),
        u = r.toString()
      ),
      d = - 2
    ),
  {
    result: d,
    sformat: p
  }
}

ListManager.LM.prototypeGanttStartRangeCheck = function (e, t, a, r, i, n, o) {
  var s,
    l,
    S,
    c,
    u,
    p = '',
    d = 0;
  return p = o,
    this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_END, u),
    s = _atoi64(u),
    this.GanttGetDataValue(a, ListManager.Table.CellTypes.SDT_CT_GANTT_START, u),
    l = _atoi64(u),
    i == ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME ? r += l = this.TrimHours(l) : (S = l, r += l - (S = this.TrimHours(S))),
    r > s &&
    (
      r = i == ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME ? s - ListManager.TimeAmounts.OneHourNS : s - ListManager.TimeAmounts.OneDayNS,
      i == ListManager.Table.CellTypes.SDT_CT_GANTT_START_TIME ? p = this.GanttTimeToString(r) : (
        c = Utils2.SDRLocalTime(r),
        Utils2.SDRTimeToStringYY(p, c, Utils2.GetActiveDateFormat(n)),
        u = r.toString()
      ),
      d = - 2
    ),
  {
    result: d,
    sformat: p
  }
}

ListManager.LM.prototypeGanttDueDateCheck = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l = 0,
    S = '',
    c = new Date,
    u = new Date(c.getFullYear(), c.getMonth(), c.getDate(), 0, 0, 0, 0);
  if (
    i = Utils2.JSDateToFiletime(u),
    e >= 0 &&
    (
      s = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_START]
      )
    ) &&
    s.length > 0 &&
    t < (n = parseInt(s, 10))
  ) {
    if (t = n, t += ListManager.TimeAmounts.OneDayNS - 1, r) s = (t + 1).toString(),
      ListManager.SDData.UpdateValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
        s
      );
    o = Utils2.SDRLocalTime(t),
      S = Utils2.SDRTimeToStringYY(o, Utils2.GetActiveDateFormat(a)),
      l = - 2
  }
  if (t < i) {
    if (
      t = i,
      t += ListManager.TimeAmounts.OneDayNS - 1,
      o = Utils2.SDRLocalTime(t),
      S = Utils2.SDRTimeToStringYY(o, Utils2.GetActiveDateFormat(a)),
      e >= 0
    ) if (r) s = (t + 1).toString(),
      ListManager.SDData.UpdateValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END],
        s
      );
    l = - 2
  }
  return {
    result: l,
    sformat: S
  }
}

ListManager.LM.prototypeGanttGetDropRow = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s;
  for (n = t.rows.length, r = a.Frame.y - e.trect.y, i = 0; i < n; i++) if (
    s = t.rows[i],
    r >= (o = t.cells[s.start]).frame.y &&
    r < o.frame.y + o.frame.height
  ) return i;
  return - 1
}

ListManager.LM.prototypeGanttBarToRow = function (e, t) {

  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u = - 1,
    p = - 1,
    d = {
      rowIndex: - 1,
      dropRowIndex: - 1
    };
  if (
    S = (l = GlobalData.optManager.GetObjectPtr(e)).GetTable(),
    (c = GlobalData.optManager.GetObjectPtr(t)).hooks.length &&
    c.hooks[0].id == S.UniqueID &&
    c.hooks[0].cellindex >= 0 &&
    (a = c.hooks[0].cellindex) < S.cells.length &&
    (o = S.cells[a]).datarecordID === c.datasetElemID &&
    (u = this.Table_GetRow(S, a)),
    u < 0
  ) for (r = 0; r < S.rows.length && u < 0; r++) for (s = S.rows[r], i = 0; i < s.ncells; i++) if (
    (o = S.cells[s.start + i]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK &&
    o.datarecordID === c.datasetElemID
  ) {
    u = r;
    break
  }
  if (u >= 0) {
    for (n = c.Frame.y - l.inside.y, r = 0; r < S.rows.length; r++) if (
      s = S.rows[r],
      n >= (o = S.cells[s.start]).frame.y &&
      n < o.frame.y + o.frame.height
    ) {
      p = r;
      break
    }
    d.dropRowIndex = p
  }
  return d.rowIndex = u,
    d
}

ListManager.LM.prototypeGanttCellIndexToBar = function (e, t, a) {
  var r;
  return t ? (r = t.cells[a], this.GanttRowToBar(r.datarecordID)) : null
}

ListManager.LM.prototypeGanttRecordToRow = function (e, t) {

  var a,
    r,
    i,
    n,
    o = - 1,
    s = - 1;
  for (i = 0; i < e.rows.length; i++) for (r = e.rows[i], n = 0; n < r.ncells; n++) if (
    (a = e.cells[r.start + n]).celltype == ListManager.Table.CellTypes.SDT_CT_GANTTTASK
  ) {
    if (a.datarecordID === t) {
      o = i,
        s = r.start + n;
      break
    }
    break
  }
  return {
    rowIndex: o,
    cellIndex: s
  }
}

ListManager.LM.prototypeGanttRowToBar = function (e, t) {
  var a,
    r,
    i = GlobalData.optManager.ActiveVisibleZList();
  if (e < 0) return null;
  for (r = 0; r < i.length; r++) if (
    (a = GlobalData.optManager.GetObjectPtr(i[r], t)) &&
    a.datasetElemID === e &&
    a.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR
  ) return a;
  return null
}

ListManager.LM.prototypeGanttRowToTopic = function (e) {

  var t,
    a,
    r,
    i = GlobalData.optManager.ActiveVisibleZList(),
    n = GlobalData.optManager.GetObjectPtr(this.theLayersManagerBlockID, !1);
  for (t = 0; t < i.length; t++) if (
    a = GlobalData.optManager.GetObjectPtr(i[t], !1),
    r = GlobalData.optManager.FindLayerForShapeID(a.BlockID),
    a.datasetElemID === e &&
    a instanceof ListManager.BaseShape &&
    r >= 0 &&
    r < n.nlayers &&
    r === n.activelayer
  ) return a.BlockID;
  return - 1
}

ListManager.LM.prototypeGanttNumberofHolidays = function (e, t, a, r, i) {
  var n = 0;
  if (null == a) return 0;
  for (Utils2.SDRLocalTime(e); e < t;) this.GetHolidayStr(a, r, e) &&
    (1 << Utils2.SDRLocalTime(e).wDayOfWeek + 1 & i || n++),
    e += ListManager.TimeAmounts.OneDayNS;
  return n
}

ListManager.LM.prototypeGanttGetDuration = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m = 7;
  for (l = 1; l <= 7; l++) a & 1 << l &&
    m--;
  for (
    c = u = e,
    c += (D = (t - u) / 10000000 / ListManager.TimeAmounts.OneDay) * ListManager.TimeAmounts.OneDayNS,
    p = u,
    d = t,
    g = u - (p = this.TrimHours(p)),
    h = t - (d = this.TrimHours(d)),
    o = Utils2.SDRLocalTime(u),
    Utils2.SDRLocalTime(t),
    s = Utils2.SDRLocalTime(c),
    n = 0;
    o.wDayOfWeek != s.wDayOfWeek;
  ) 1 << o.wDayOfWeek + 1 & a ||
    n++,
    o.wDayOfWeek++,
    o.wDayOfWeek > 6 &&
    (o.wDayOfWeek = 0);
  return S = Math.floor(D + 0.5),
    n += Math.floor(S / 7) * m,
    g > h &&
    n &&
    n--,
    (n -= this.GanttNumberofHolidays(u, t, r, i, a)) < 0 &&
    (n = 0),
    n + (D - Math.floor(D))
}

ListManager.LM.prototypeGanttAddDuration = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d = 7;
  if (0 == t) return e;
  for (S = 1; S <= 7; S++) a & 1 << S &&
    d--;
  for (
    c = e,
    o = Math.floor(t / d),
    l = Math.floor(t - o * d),
    t - Math.floor(t) > 0 &&
    l++,
    n = Utils2.SDRLocalTime(e),
    0 == l &&
    o > 0 &&
    (l = d, o--),
    s = 7 * o,
    u = e,
    u += ListManager.TimeAmounts.OneDayNS * s,
    l += this.GanttNumberofHolidays(c, u, r, i, a);
    l > 0;
  ) r &&
    null != this.GetHolidayStr(r, i, u) ||
    1 << n.wDayOfWeek + 1 & a ||
    l--,
    n.wDayOfWeek++,
    n.wDayOfWeek > 6 &&
    (n.wDayOfWeek = 0),
    s++,
    u += ListManager.TimeAmounts.OneDayNS;
  return t - Math.floor(t) > 0 &&
    (
      p = 1 - (t - Math.floor(t)),
      u -= ListManager.TimeAmounts.OneDayNS * p
    ),
    ListManager.TimeAmounts.OneDayNS * s,
    e = u
}

ListManager.LM.prototypeGanttRemoveDuration = function (e, t, a, r, i) {
  var n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g = 7;
  if (0 != t) {
    if (
      o = Utils2.SDRLocalTime(e),
      !(
        t < 1 &&
        (
          p = e,
          d = e - (p = this.TrimHours(p)),
          (D = t * ListManager.TimeAmounts.OneDayNS) <= d
        )
      )
    ) {
      for (u = 1; u <= 7; u++) a & 1 << u &&
        g--;
      for (
        s = Math.floor(t / g),
        S = Math.floor(t - s * g),
        t - Math.floor(t) > 0 &&
        S++,
        o = Utils2.SDRLocalTime(e),
        l = 7 * s;
        S > 0;
      ) 1 << o.wDayOfWeek + 1 & a ||
        S--,
        o.wDayOfWeek--,
        o.wDayOfWeek < 0 &&
        (o.wDayOfWeek = 6),
        l++;
      return p = e,
        p -= n = t - Math.floor(t) > 0 &&
          l > 0 ? ListManager.TimeAmounts.OneDayNS * (l - 1) + (t - Math.floor(t)) * ListManager.TimeInNS.OneDayNS : ListManager.TimeAmounts.OneDayNS * l,
        (c = r ? this.GanttNumberofHolidays(p, e, r, i, a) : 0) &&
        (e -= ListManager.TimeAmounts.OneDayNS * c),
        e -= n,
        o = Utils2.SDRLocalTime(e),
        e
    }
    e -= D
  }
}

ListManager.LM.prototypeTrimHours = function (e) {
  var t = Utils2.FiletimeToJSDate(e);
  return newTime = new Date(t.getFullYear(), t.getMonth(), t.getDate(), 0, 0, 0, 0),
    Utils2.JSDateToFiletime(newTime)
}

ListManager.LM.prototypeTrimSecs = function (e) {
  var t = Utils2.FiletimeToJSDate(e);
  return newTime = new Date(
    t.getUTCFullYear(),
    t.getUTCMonth(),
    t.getUTCDate(),
    t.getHours(),
    t.getUTCMinutes(),
    0,
    0
  ),
    Utils2.JSDateToFiletime(newTime)
}

ListManager.LM.prototypeTrimMinutes = function (e) {
  var t = Utils2.FiletimeToJSDate(e);
  return newTime = new Date(
    t.getUTCFullYear(),
    t.getUTCMonth(),
    t.getUTCDate(),
    t.getUTCHours(),
    0,
    0,
    0
  ),
    Utils2.JSDateToFiletime(newTime)
}

ListManager.LM.prototypeRoundHours = function (e) {
  var t = Utils2.FiletimeToJSDate(e);
  return t.getHours() > 11 &&
    (t += 86400000),
    newTime = new Date(
      t.getUTCFullYear(),
      t.getUTCMonth(),
      t.getUTCDate(),
      t.getUTCHours(),
      0,
      0,
      0
    ),
    Utils2.JSDateToFiletime(newTime)
}

ListManager.LM.prototypeGanttDurationToString = function (e) {
  var t = parseFloat(e).toFixed(3);
  if (t.indexOf('.') >= 0) for (i = t.length - 1; i > 0; i--) {
    if ('.' === t.charAt(i)) {
      t = t.substr(0, t.length - 1);
      break
    }
    if ('0' !== t.charAt(i)) break;
    t = t.substr(0, t.length - 1)
  }
  return t
}

ListManager.LM.prototypeGanttTimeToString = function (e) {
  var t,
    a,
    r,
    i;
  return t = Utils2.SDRLocalTime(e),
    i = Utils2.GetTimeSeparators(!1),
    r = 'AM',
    'PM',
    1 === (a = t.wMinute.toString()).length &&
    (a = '0' + a),
    this.GanttGetTimePref() === ListManager.ClockTypes.SD12HOURTIME ? (
      0 == t.wHour ? t.wHour = 12 : t.wHour > 12 ? (t.wHour -= 12, r = 'PM') : 12 === t.wHour &&
        (r = 'PM'),
      s = t.wHour.toString() + i.charAt(0) + a + ' ' + r
    ) : s = t.wHour.toString() + i.charAt(0) + a,
    s
}

ListManager.LM.prototypeGanttGetNonWorkingDays = function () {
  ConstantData.Defines.DEFAULT_NONWORKINGDAYS;
  return {
    nonWorkingDays: GlobalData.optManager.theContentHeader.nonworkingdays,
    holidayMask: GlobalData.optManager.theContentHeader.holidaymask
  }
}

ListManager.LM.prototypeSetRowHierarchy = function (e, t, a) {
  var r,
    i;
  return r = e.toString(),
    (
      i = ListManager.SDData.UpdateValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.ROW_FIELD],
        r
      )
    ) ? i : (
      r = a.toString(),
      (
        i = ListManager.SDData.UpdateValue(
          e,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          r
        )
      ) ? i : (
        r = t.toString(),
        (
          i = ListManager.SDData.UpdateValue(
            e,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
            r
          )
        ) ||
        i
      )
    )
}

ListManager.LM.prototypeGanttCreateBar = function (e, t) {
  var a,
    r,
    i = new Rectangle(0, 0, 600, 0);
  t &&
    (i.width = ConstantData.Defines.SED_MinDim),
    Utils2.OffsetRect(i, e.x, e.y);
  var n = {
    Frame: i,
    StartPoint: {
      x: i.x,
      y: i.y + i.height / 2
    },
    EndPoint: {
      x: i.x + i.width,
      y: i.y + i.height / 2
    },
    StartArrowID: ListManager.ArrowHeadTypes.ARR_ROUND_END,
    EndArrowID: ListManager.ArrowHeadTypes.ARR_ROUND_END,
    objecttype: ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR,
    TextFlags: ConstantData.TextFlags.SED_TF_None
  };
  return barStyle = Resources.FindStyle(ConstantData.Defines.GanttBarDefaultStyle),
    n.StyleRecord = Utils1.DeepCopy(barStyle),
    (r = new ListManager.Line(n)).StyleRecord.Line.BThick = ListManager.GanttDefines.GANTT_BTHICK / 2,
    r.StyleRecord.Line.Thickness = ListManager.GanttDefines.GANTT_BTHICK,
    r.StyleRecord.Line.Pattern = 0,
    r.StyleRecord.Line.Paint = Utils1.DeepCopy(barStyle.Fill.Paint),
    r.StyleRecord.Line.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
    a = this.AddNewObject(r, !1, !0),
    Collab.AddNewBlockToSecondary(a),
    r.CalcFrame(),
    GlobalData.optManager.AddToDirtyList(a),
    a
}

ListManager.LM.prototypeAddPlanningDataSet = function (e) {
  var t = 0,
    a = !1;
  if (
    e.datasetID < 0 &&
    (
      e.datasetType = ListManager.DataSetNameListIndexes.DATASET_PLANNING,
      e.datasetID = ListManager.SDData.CreateDataSet(
        ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_PLANNING]
      )
    ),
    e.datasetID >= 0
  ) {
    if (e.datasetTableID < 0) {
      e.datasetTableID = ListManager.SDData.CreateTable(
        ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_PLANNING],
        ListManager.DataTableNames.PLANNING_TASKS
      ),
        a = !0;
      var r = ListManager.SDData.AddTable(e.datasetID, ListManager.DataTableNames.PERSONTABLE);
      t = this.AddPersonFields(r)
    }
    if (
      e.datasetTableID >= 0 &&
      a &&
      (t = this.AddPlanningFields(e.datasetTableID))
    ) return t
  }
  return 0
}

ListManager.LM.prototypeConfirmPlanningFields = function (e) {
  var t,
    a;
  for (a = ListManager.GanttFieldNameList.length, t = 0; t < a; t++) ListManager.SDData.IsColumnExists(e, ListManager.GanttFieldNameList[t]) ||
    ListManager.SDData.AddColumn(e, ListManager.GanttFieldNameList[t], !1)
}

ListManager.LM.prototypeAddPlanningFields = function (e) {
  var t,
    a;
  for (a = ListManager.GanttFieldNameList.length, t = 0; t < a; t++) {
    if (
      !ListManager.SDData.AddColumn(e, ListManager.GanttFieldNameList[t], !1)
    ) return - 1
  }
  return ListManager.SDData.CreateRelationship(
    ListManager.DataRelationships.PARENT_RELATIONSHIP,
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.ROW_FIELD],
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD]
  ),
    ListManager.SDData.CreateRelationship(
      ListManager.DataRelationships.DEPENDENT_RELATIONSHIP,
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.ROW_FIELD],
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
    ),
    ListManager.SDData.SetIndexColumn(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
      ListManager.SDData.Defines.SDDATA_INDEX_ASC
    )
}

ListManager.LM.prototypeAddPersonFields = function (e) {
  var t,
    a;
  for (a = ListManager.PersonFieldNameList.length, t = 0; t < a; t++) {
    if (
      !ListManager.SDData.AddColumn(e, ListManager.PersonFieldNameList[t], !1)
    ) return - 1
  }
  return 0
}

ListManager.LM.prototypeDataAddNotesToRecord = function (e, t) {
  var a = '';
  e >= 0 &&
    (a = GlobalData.objectStore.GetObject(e, !1).Data.runtimeText.text);
  return ListManager.SDData.UpdateValue(
    t,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_NOTES],
    a
  )
}

ListManager.LM.prototypeDataAddHyperlinkToRecord = function (e, t) {
  ListManager.SDData.UpdateValue(
    t,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_CHILDURL],
    e
  )
}

ListManager.LM.prototypeTextToTaskData = function (e, t) {
  var a,
    r,
    i,
    n,
    o = - 1,
    s = '';
  if (e.DataID >= 0) o = e.DataID;
  else {
    var l = e.GetTable();
    if (l) for (a = l.cells.length, r = 0; r < a; r++) if (
      (i = l.cells[r]).celltype === ListManager.Table.CellTypes.SDT_CT_GANTTTASK
    ) {
      o = i.DataID;
      break
    }
  }
  o >= 0 &&
    (n = this.GetObjectPtr(o, !1)) &&
    n.runtimeText &&
    (s = n.runtimeText.text),
    ListManager.SDData.UpdateValue(
      t,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_FIELD],
      s
    )
}

ListManager.LM.prototypeGanttUpdateNotes = function (e, t) {
  var a,
    r = {
      x: 150,
      y: 500
    };
  if (
    (
      a = ListManager.SDData.GetValue(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_NOTES]
      )
    ) &&
    a.length
  ) if (e.NoteID >= 0) {
    var i = GlobalData.optManager.GetObjectPtr(e.NoteID, !0);
    i &&
      GlobalData.optManager.SetTextBlock(i, a, r)
  } else e.NoteID = GlobalData.optManager.AddObjectNoteBlock(a, r);
  else if (e.NoteID >= 0) {
    var n = GlobalData.objectStore.GetObject(e.NoteID);
    n &&
      n.Delete(),
      e.NoteID = - 1
  }
}

ListManager.LM.prototypeGanttUpdateHyperlink = function (e, t) {
  var a = ListManager.SDData.GetValue(
    t,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_CHILDURL]
  );
  e.hyperlink = a ||
    ''
}

ListManager.LM.prototypeCommitConnector = function (e, t, a, r, i, n, o, s, l) {
  var S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C = 0,
    y = SDJS.ConnectorDefines.SEDA_NSkip,
    f = ListManager.Table.CellTypes.SDT_CT_GANTTTASK;
  for (
    u = (g = GlobalData.optManager.GetObjectPtr(t, !1)).arraylist.hook.length,
    n >= 0 &&
    (
      m = g.extraflags & ConstantData.ExtraFlags.SEDE_CollapseConn ? '1' : '0',
      ListManager.SDData.UpdateValue(
        n,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE],
        m
      )
    ),
    S = y;
    S < u;
    S++
  ) if ((p = g.arraylist.hook[S].id) >= 0) {
    if ('' !== (D = GlobalData.optManager.GetObjectPtr(p, !0)).ImageURL) continue;
    if (
      (h = D.GetTable(!1)) &&
      (
        this.Table_GetCellWithType(h, f) ||
        (d = this.Table_GetFirstTextCell(h)) >= 0 &&
        (h.cells[d].celltype = f)
      ),
      D.datasetID = a,
      D.datasetType = i,
      D.datasetTableID = r,
      D.datasetElemID < 0 &&
      (
        D.datasetElemID = GlobalData.optManager.GanttInsertTaskRecord(e, !1, r, n, S - y - 1 + l)
      ),
      GlobalData.optManager.DataAddNotesToRecord(D.NoteID, D.datasetElemID),
      C = GlobalData.optManager.SetRowHierarchy(D.datasetElemID, S - y + l, n)
    ) return C;
    if (
      C = ListManager.SDData.SetIndexColumn(
        r,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
        ListManager.SDData.Defines.SDDATA_INDEX_ASC
      )
    ) return C;
    if (
      GlobalData.optManager.TextToTaskData(D, D.datasetElemID),
      GlobalData.optManager.FieldToPersonData(D, a, D.datasetElemID),
      m = '',
      iconIndex = GlobalData.optManager.GetShapeIcon(D),
      iconIndex >= 0 &&
      (m = iconIndex.toString()),
      C = ListManager.SDData.UpdateValue(
        D.datasetElemID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_ICON],
        m
      )
    ) return C;
    if (
      GlobalData.optManager.ShapeStyleToData(D, D.datasetElemID),
      0 === o &&
      (
        C = ListManager.SDData.UpdateValue(
          D.datasetElemID,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_SIDE],
          s.toString()
        )
      )
    ) return C;
    (c = GlobalData.optManager.FindChildArray(p, - 1, - 1)) >= 0 &&
      GlobalData.optManager.CommitConnector(e, c, a, r, i, D.datasetElemID, o + 1, s, 0)
  }
  return C
}

ListManager.LM.prototypeFieldToPersonData = function (e, t, a) {
  var r;
  null != (
    r = GlobalData.optManager.GetFieldTextPtr(e, ListManager.Table.CellTypes.SDT_CT_PERSON)
  ) &&
    (
      r == Resources.ReplaceTextStrings[Resources.ReplaceTextStrings.Indexes.PersonClick] &&
      (r = ''),
      ListManager.SDData.GetValue(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_RESOURCE]
      ).toUpperCase() !== r.toUpperCase() &&
      (
        ListManager.SDData.UpdateValue(
          a,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_RESOURCE],
          r
        ),
        '' === r ? GlobalData.optManager.TM_UnAssignPersonToTask(a) : GlobalData.optManager.TM_AssignPersonToTask(r, t, a)
      )
    )
}

ListManager.LM.prototypeTM_AssignPersonToTask = function (e, t, a, r) {
  var i,
    n,
    o;
  if (- 1, (n = GlobalData.optManager.TM_GetPersonRow(e, t, - 1, !0)) && n >= 0) {
    if (
      o = ListManager.SDData.GetValue(
        n,
        ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_GUID]
      ),
      !r
    ) {
      var s = ListManager.SDData.GetValue(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
      );
      if (s && s.length) {
        var l = ListManager.SDData.GetValue(
          a,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONGUID]
        );
        ListManager.Trello.TrelloChangeAssignment(s, a, l, o)
      }
    }
    0 == (
      i = ListManager.SDData.UpdateValue(
        a,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONID],
        n.toString()
      )
    ) &&
      (
        i = ListManager.SDData.UpdateValue(
          a,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONGUID],
          o
        )
      )
  }
  return i
}

ListManager.LM.prototypeTM_UnAssignPersonToTask = function (e, t) {
  var a = ListManager.SDData.GetValue(
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
  ),
    r = ListManager.SDData.GetValue(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONGUID]
    );
  ListManager.SDData.UpdateValue(
    e,
    ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONID],
    ''
  ),
    ListManager.SDData.UpdateValue(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONGUID],
      ''
    ),
    !t &&
    a &&
    a.length &&
    r &&
    r.length &&
    ListManager.Trello.TrelloRemoveAssignment(a, e, r)
}

ListManager.LM.prototypeTM_AddNewPerson = function (e, t) {
  var a;
  return !(a = GlobalData.optManager.TM_GetPersonRow(e, t, undefined, !0)) ||
    a < 0 ? - 1 : a
}

ListManager.LM.prototypeTM_GetPersonRowByID = function (e, t, a, r, i, n) {
  var o,
    s,
    l,
    S,
    c = !1;
  if (
    (
      o = ListManager.SDData.GetTableID(a, ListManager.DataTableNames.PERSONTABLE)
    ) >= 0
  ) for (s = ListManager.SDData.GetNumRows(o, '', ''), S = 0; S < s; S++) if (
    l = ListManager.SDData.GetRow(o, '', '', S),
    ListManager.SDData.GetValue(
      l,
      ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_GUID]
    ).toUpperCase() == e.toUpperCase()
  ) {
    c = !0;
    break
  }
  return !c &&
    i &&
    (l = GlobalData.optManager.TM_AddPerson(a, t, o, r, e)) >= 0 &&
    (
      c = !0,
      n &&
      (
        flags = ListManager.SDData.GetValue(
          l,
          ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_LOCALFLAGS]
        ),
        flags &&
        0 != flags.length ||
        (flags = 0),
        iFlags = parseInt(flags),
        iFlags = Utils2.SetFlag(
          iFlags,
          ListManager.PersonTableFlags.SF_LF_FROM_TRELLO,
          !0
        ),
        ListManager.SDData.UpdateValue(
          l,
          ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_LOCALFLAGS],
          iFlags.toString()
        )
      )
    ),
    c ? l : - 1
}

ListManager.LM.prototypeTM_GetPersonRow = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S = !1;
  if (
    (
      i = ListManager.SDData.GetTableID(t, ListManager.DataTableNames.PERSONTABLE)
    ) >= 0
  ) {
    for (n = ListManager.SDData.GetNumRows(i, '', ''), s = 0; s < n; s++) if (
      o = ListManager.SDData.GetRow(i, '', '', s),
      (
        l = ListManager.SDData.GetValue(
          o,
          ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_NAME]
        )
      ) &&
      l.toUpperCase() == e.toUpperCase()
    ) {
      S = !0,
        0;
      break
    }
    if (!r) return S ? o : - 1;
    S ||
      (o = GlobalData.optManager.TM_AddPerson(t, e, i, a)) >= 0 &&
      (S = !0)
  }
  return o >= 0 &&
    (
      guidstr = ListManager.SDData.GetValue(
        o,
        ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_GUID]
      )
    ),
    S ? o : - 1
}

ListManager.LM.prototypeTM_AddPerson = function (e, t, a, r, i) {
  var n,
    o;
  return a < 0 ? - 1 : (
    (o = ListManager.SDData.AddRow(a)) >= 0 &&
    0 == ListManager.SDData.UpdateValue(
      o,
      ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_NAME],
      t
    ) &&
    (
      n = i ||
      SDUI.Utils.MakeGuid(),
      ListManager.SDData.UpdateValue(
        o,
        ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_GUID],
        n
      ),
      ListManager.SDData.UpdateValue(
        o,
        ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_STATUS],
        'NEW'
      )
    ),
    o
  )
}

ListManager.LM.prototypeTM_IsPersonFlagSet = function (e, t) {
  var a = ListManager.SDData.GetValue(
    e,
    ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_LOCALFLAGS]
  );
  return a &&
    0 !== a.length ||
    (a = '0'),
    0 != (parseInt(a) & t)
}

ListManager.LM.prototypeGetFieldTextPtr = function (e, t) {
  var a = e.GetTable();
  if (!a) return null;
  for (var r = 0; r < a.cells.length; r++) if (a.cells[r].celltype === t) {
    if (!(a.cells[r].DataID >= 0)) return '';
    if (
      textObj = GlobalData.objectStore.GetObject(a.cells[r].DataID),
      textObj &&
      textObj.Data &&
      textObj.Data.runtimeText &&
      textObj.Data.runtimeText.text
    ) return textObj.Data.runtimeText.text
  }
  return null
}

ListManager.LM.prototypeGetShapeIcon = function (e) {
  var t = e.GetTable();
  if (!t) return - 1;
  for (i = 0; i < t.cells.length; i++) if (
    t.cells[i].celltype === ListManager.Table.CellTypes.SDT_CT_ICONCELL
  ) return t.cells[i].Image ? t.cells[i].Image.iconid : - 1;
  return - 1
}

ListManager.LM.prototypeUpdateGanttTaskIcons = function (e) {
  var t,
    a,
    r,
    i,
    n,
    o = 0;
  for (t = ListManager.SDData.GetNumRows(e, '', ''), a = 0; a < t; a++) {
    if (
      r = ListManager.SDData.GetRow(e, '', '', a),
      s = ListManager.SDData.GetValue(
        r,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PC]
      ),
      null === s
    ) return - 1;
    if (
      i = s.length > 0 ? parseInt(s) : 0,
      n = GlobalData.optManager.GetTaskIcon(r, i),
      0 != (
        o = ListManager.SDData.UpdateValue(
          r,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_ICON],
          n.toString()
        )
      )
    ) return o
  }
  return o
}

ListManager.LM.prototypeGetTaskIcon = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = ListManager.TaskIcons.ICON_TASK_GREEN;
  return (
    n = ListManager.SDData.GetValue(
      e,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_END]
    )
  ) &&
    n.length > 0 &&
    (o = parseInt(n)) < (s = Utils2.SDRtime(null)) &&
    (S = ListManager.TaskIcons.ICON_TASK_RED),
    a = 100 == t ? ListManager.TaskIcons.ICON_TASK_100 : S + (t = t >= 75 ? 75 : t >= 50 ? 50 : t >= 25 ? 25 : 0),
    t < 100 &&
    S != ListManager.TaskIcons.ICON_TASK_RED &&
    (
      n = ListManager.SDData.GetValue(
        e,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_LENGTH]
      )
    ) &&
    n.length > 0 &&
    (l = parseInt(n)) >= 4 &&
    (
      r = Math.floor((o - s) / ListManager.TimeAmounts.OneDayNS),
      (i = 100 - Math.floor(100 * r / l)) > 50 &&
      i > t + 25 &&
      (a = (S = ListManager.TaskIcons.ICON_TASK_YELLOW) + t)
    ),
    a -= ListManager.TaskIcons.ICON_BASE
}

ListManager.LM.prototypeIsTaskIcon = function (e) {
  for (var t in ListManager.TaskIcons) if (
    ListManager.TaskIcons[t] === e + ListManager.TaskIcons.ICON_BASE
  ) return !0;
  return !1
}

ListManager.LM.prototypeFixMindmapCelltypes = function (e) {
  if (
    0 === e.objecttype &&
    e.subtype === ConstantData.ObjectSubTypes.SD_SUBT_TASK
  ) {
    var t = e.GetTable(!0);
    t &&
      2 === t.cells.length &&
      0 === t.cells[1].celltype &&
      (
        t.cells[1].celltype = ListManager.Table.CellTypes.SDT_CT_GANTTTASK
      )
  }
}


SDJS.DATA = {},
  SDJS.DATA.DataTableReMap = function (e) {
    this.newTableID = e,
      this.firstElem = - 1,
      this.DataElementMap = []
  },
  SDJS.DATA.DatasetReMap = function (e, t) {
    this.newDatasetID = e,
      this.datasetType = t,
      this.firstTable = - 1,
      this.datasetAdded = !1,
      this.DataTableMap = []
  }

ListManager.LM.prototypeSDData_Transfer = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c = [],
    u = - 1,
    p = [],
    d = [],
    D = - 1,
    g = function (e, a) {
      var i = function (i, n, o, s) {
        var c = ListManager.SDData.GetNumDataSets(),
          u = function (e) {
            var t,
              a = ListManager.DataSetNameListIndexes;
            switch (e) {
              case a.DATASET_PLANNING:
                if (
                  t = ListManager.DataSetNameList[e],
                  void 0 === p[e] &&
                  (
                    p[e] = new SDJS.DataSet.Planning,
                    !C &&
                    D < 0 &&
                    (D = ListManager.SDData.AddDataSet(t)),
                    D >= 0
                  )
                ) return S = p[e],
                  D;
                break;
              case a.DATASET_GRAPH:
                t = ListManager.DataSetNameList[e],
                  void 0 === p[e] &&
                  (p[e] = new SDJS.DataSet.Graph);
                break;
              case a.DATASET_FIELDEDDATA:
                t = ListManager.DataSetNameList[e],
                  void 0 === p[e] &&
                  (p[e] = new SDJS.DataSet.FieldedData);
                break;
              default:
                return null
            }
            return (S = p[e]).GetDestinationDataset(t)
          }(i),
          d = ListManager.SDData.GetNumDataSets();
        null != u &&
          - 1 != u &&
          (
            void 0 === a[n] &&
            (a[n] = new SDJS.DATA.DatasetReMap(u, i), a[n].datasetAdded = d > c),
            void 0 === (r = a[n].DataTableMap)[o] &&
            (
              l = S.GetDestinationTable(t, o, u, s < 0),
              a[n].DataTableMap[o] = new SDJS.DATA.DataTableReMap(l),
              r = a[n].DataTableMap,
              a[n].firstTable < 0 ? a[n].firstTable = o : l < a[n].firstTable &&
                (a[n].firstTable = l)
            ),
            r[o].DataElementMap,
            S.CopyElement(a, t, n, o, s, e)
          )
      };
      e.datasetElemID >= 0 &&
        e.datasetTableID >= 0 &&
        e.datasetID >= 0 &&
        e.datasetType >= 0 &&
        (
          i(e.datasetType, e.datasetID, e.datasetTableID, e.datasetElemID),
          a[e.datasetID] &&
            a[e.datasetID].DataTableMap[e.datasetTableID] &&
            a[e.datasetID].DataTableMap[e.datasetTableID].DataElementMap[e.datasetElemID] ? (
            e.datasetElemID = a[e.datasetID].DataTableMap[e.datasetTableID].DataElementMap[e.datasetElemID],
            e.datasetTableID = a[e.datasetID].DataTableMap[e.datasetTableID].newTableID,
            e.datasetID = a[e.datasetID].newDatasetID,
            e.dataStyleOverride = null
          ) : (
            e.datasetType = - 1,
            e.datasetID = - 1,
            e.datasetTableID = - 1,
            e.datasetElemID = - 1,
            e.dataStyleOverride = null
          )
        ),
        e.fieldDataTableID >= 0 &&
        e.fieldDataDatasetID >= 0 &&
        (
          i(
            ListManager.DataSetNameListIndexes.DATASET_FIELDEDDATA,
            e.fieldDataDatasetID,
            e.fieldDataTableID,
            e.fieldDataElemID
          ),
          a[e.fieldDataDatasetID] &&
            a[e.fieldDataDatasetID].DataTableMap[e.fieldDataTableID] &&
            (
              e.fieldDataElemID < 0 ||
              a[e.fieldDataDatasetID].DataTableMap[e.fieldDataTableID].DataElementMap[e.fieldDataElemID]
            ) ? (
            e.fieldDataElemID = e.fieldDataElemID < 0 ? - 1 : a[e.fieldDataDatasetID].DataTableMap[e.fieldDataTableID].DataElementMap[e.fieldDataElemID],
            e.fieldDataTableID = a[e.fieldDataDatasetID].DataTableMap[e.fieldDataTableID].newTableID,
            e.fieldDataDatasetID = a[e.fieldDataDatasetID].newDatasetID,
            e.dataStyleOverride = null
          ) : (
            e.fieldDataDatasetID = - 1,
            e.fieldDataTableID = - 1,
            e.fieldDataElemID = - 1,
            e.dataStyleOverride = null
          )
        )
    },
    h = function (e, t) {
      var a,
        r,
        i,
        n,
        o = {},
        s = e.GetTable(!0);
      if (s) {
        for (a = s.rows.length, r = 0; r < a; r++) for (
          n = s.rows[r],
          i = s.cells[n.start],
          o.datasetType = e.datasetType,
          o.datasetID = e.datasetID,
          o.datasetTableID = e.datasetTableID,
          o.datasetElemID = i.datarecordID,
          g(o, t),
          j = 0;
          j < n.ncells;
          j++
        ) (i = s.cells[n.start + j]).datarecordID = o.datasetElemID;
        e.datasetID = o.datasetID,
          e.datasetTableID = o.datasetTableID
      }
    },
    m = function (e) {
      var t,
        a,
        r,
        i = GlobalData.optManager.ZList();
      for (r = e.length, t = i.length, a = 0; a < t - r; a++) if (
        GlobalData.optManager.GetObjectPtr(i[a], !1).objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
      ) return i[a];
      return null
    },
    C = GlobalData.optManager.IsPlanningDocument();
  C === ConstantData.LayerTypes.SD_LAYERT_MINDMAP &&
    ListManager.TaskMap.CommitVisualOutline(e);
  var y,
    f = null,
    L = - 1,
    I = null;
  for (n = e.length, i = 0; i < n; i++) if (
    s = e[i],
    (o = this.GetObjectPtr(s, !1)).objecttype !== ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART
  ) {
    if (o.subtype === ConstantData.ObjectSubTypes.SD_SUBT_TASKMAP) {
      if (
        C &&
        o.objecttype === ConstantData.ObjectTypes.SD_OBJT_MINDMAP_MAIN &&
        (
          o.extraflags = Utils2.SetFlag(o.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1),
          I = o
        ),
        0 === C
      ) {
        o.datasetTableID = - 1,
          o.datasetID = - 1,
          o.datasetElemID = - 1;
        continue
      }
    } else if (
      C &&
      o.objecttype === ConstantData.ObjectTypes.SD_OBJT_MINDMAP_CONNECTOR
    ) o.hooks.length &&
      (y = this.GetObjectPtr(o.hooks[0].objid, !1)) &&
      y.objecttype === ConstantData.ObjectTypes.SD_OBJT_MINDMAP_MAIN &&
      y.subtype === ConstantData.ObjectSubTypes.SD_SUBT_TASKMAP &&
      (
        o.extraflags = Utils2.SetFlag(y.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1),
        o.arraylist.hook.length <= SDJS.ConnectorDefines.SEDA_NSkip &&
        d.push(o.BlockID)
      );
    else if (o.subtype === ConstantData.ObjectSubTypes.SD_SUBT_TASK) {
      if (0 === C) {
        o.datasetTableID = - 1,
          o.datasetID = - 1,
          o.datasetElemID = - 1;
        continue
      }
    } else if (
      o.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_BAR
    ) {
      if (!C && D < 0) {
        var T = GlobalData.optManager.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !1, null, !0);
        T &&
          (D = T.datasetID, f = u = T.BlockID)
      }
      o.extraflags = Utils2.SetFlag(o.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1)
    } else o instanceof ListManager.GroupSymbol &&
      GlobalData.optManager.SDData_Transfer(o.ShapesInGroup, t, a);
    g(o, c)
  } else h(o, c),
    f = m(e),
    C &&
      f > 0 ? (
      o.datasetTableID = - 1,
      o.datasetID = - 1,
      o.datasetElemID = - 1,
      o.extraflags = Utils2.SetFlag(o.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1),
      d.push(o.BlockID),
      u = f,
      f = null
    ) : (L = s, u = s, f = null);
  if (
    I &&
    (
      I.objecttype = 0,
      I.subtype = ConstantData.ObjectSubTypes.SD_SUBT_TASK
    ),
    d.length
  ) {
    var b = GlobalData.optManager.GanttAddtoDelete,
      M = GlobalData.optManager.AddtoDelete;
    this.GanttAddtoDelete = function () {
    },
      this.AddtoDelete = function () {
      };
    var P = ListManager.TaskMap.CommitVisualOutline;
    ListManager.TaskMap.CommitVisualOutline = function () {
    },
      GlobalData.optManager.CloseEdit(),
      GlobalData.optManager.DeleteSelectedObjectsCommon(d, !0),
      GlobalData.optManager.GanttAddtoDelete = b,
      GlobalData.optManager.AddtoDelete = M,
      ListManager.TaskMap.CommitVisualOutline = P
  }
  var R = c.length;
  for (i = 0; i < R; i++) if (c[i] && (S = p[c[i].datasetType])) {
    S.RemapPastedData(c, i, t, a);
    var A = c[i].DataTableMap[c[i].DataTableMap.length - 1].newTableID
  }
  switch (C) {
    case ConstantData.LayerTypes.SD_LAYERT_GANTT:
      if (u < 0 && A >= 0) u = this.GetCurrentPlanningTable(ConstantData.ObjectTypes.SD_OBJT_GANTT_CHART, !0, A).BlockID;
      GlobalData.optManager.GanttFormat(u, !1, !0, !0, null);
      break;
    case ConstantData.LayerTypes.SD_LAYERT_MINDMAP:
      ListManager.TaskMap.FormatMindMap();
      break;
    default:
      if (f > 0) GlobalData.optManager.GanttFormat(f, !1, !0, !0, null);
      else if (L >= 0) {
        var _ = ListManager.SDData.GetRow(
          A,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          '-1',
          0
        );
        if (_ >= 0) {
          var E = GlobalData.optManager.GanttRowToBar(_);
          E &&
            (
              (E = GlobalData.optManager.GetObjectPtr(E.BlockID, !0)).extraflags = Utils2.SetFlag(E.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !0)
            )
        }
        GlobalData.optManager.AddSVGObject(0, L, !0, !1),
          GlobalData.optManager.GanttFormat(L, !1, !0, !0, null)
      }
  }
},
  SDJS.DataSet = {},
  SDJS.DataSet.Base = function () {
    return this
  },
  SDJS.DataSet.Planning = function () {
    return SDJS.DataSet.Base.apply(this)
  },
  SDJS.DataSet.FieldedData = function () {
    var e = SDJS.DataSet.Base.apply(this);
    return this.gTableFieldMap = {},
      this.gTableRuleMap = {},
      e
  },
  SDJS.DataSet.Base.prototype.GetDestinationDataset = function (e) {
    var t = ListManager.SDData.GetDataSetIdByName(e);
    return t < 0 &&
      (t = ListManager.SDData.AddDataSet(e)),
      t
  },
  SDJS.DataSet.Base.prototype.GetDestinationTable = function (e, t, a, r) {
    return - 1
  },
  SDJS.DataSet.Base.prototype.GetDestinationParent = function (e, t) {
    return {
      parentid: - 1,
      index: - 1
    }
  },
  SDJS.DataSet.Base.prototype.CopyElement = function (e, t, a, r, i, n) {
  },
  SDJS.DataSet.Base.prototype.RemapPastedData = function (e, t, a, r) {
  },
  SDJS.DataSet.Planning.prototype = new SDJS.DataSet.Base,
  SDJS.DataSet.Planning.prototype.constructor = SDJS.DataSet.Planning,
  SDJS.DataSet.Planning.prototype.GetDestinationDataset = function (e) {
    var t,
      a,
      r,
      i,
      n,
      o = GlobalData.optManager.ZListPreserve(),
      s = ConstantData.ObjectTypes,
      l = !1;
    for (t = o.length, a = 0; a < t; a++) if (i = o[a], r = GlobalData.optManager.GetObjectPtr(i, !1)) {
      switch (r.objecttype) {
        case s.SD_OBJT_GANTT_CHART:
          l = !0;
          break;
        case s.SD_OBJT_MINDMAP_MAIN:
          r.subtype === ConstantData.ObjectSubTypes.SD_SUBT_TASKMAP &&
            (l = !0)
      }
      if (l) break
    }
    return l &&
      (n = ListManager.SDData.GetDataSetIdByName(e)) < 0 &&
      (n = ListManager.SDData.AddDataSet(e)),
      n
  },
  SDJS.DataSet.Planning.prototype.GetDestinationTable = function (e, t, a, r) {
    var i = ListManager.SDData.GetTableID(a, ListManager.DataTableNames.PLANNING_TASKS, !1);
    i < 0 &&
      (
        i = ListManager.SDData.AddTable(a, ListManager.DataTableNames.PLANNING_TASKS),
        GlobalData.optManager.AddPlanningFields(i)
      );
    var n = ListManager.SDData.GetTableID(a, ListManager.DataTableNames.PERSONTABLE, !1);
    return n < 0 &&
      (
        n = ListManager.SDData.AddTable(a, ListManager.DataTableNames.PERSONTABLE),
        GlobalData.optManager.AddPersonFields(n)
      ),
      i
  },
  SDJS.DataSet.Planning.prototype.GetDestinationParent = function (e, t) {
    var a,
      r,
      i,
      n,
      o = - 1,
      s = - 1,
      l = 0,
      S = ConstantData.ObjectTypes,
      c = ListManager.SDData.GetTableID(e, ListManager.DataTableNames.PLANNING_TASKS, !1);
    if (
      c >= 0 &&
      (
        n = (
          o = ListManager.SDData.GetRow(
            c,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
            '-1',
            0
          )
        ).toString(),
        l = ListManager.SDData.GetNumRows(
          c,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          n
        ) - 1,
        t
      )
    ) return {
      parentid: - 1,
      index: 0
    };
    if ((a = GlobalData.optManager.GetTargetSelect()) >= 0) switch ((r = GlobalData.optManager.GetObjectPtr(a, !1)).objecttype) {
      case S.SD_OBJT_GANTT_BAR:
        s = r.datasetElemID;
        break;
      case S.SD_OBJT_GANTT_CHART:
        if (GlobalData.optManager.Table_GetActiveID() === a) {
          var u = r.GetTable(!1);
          if (u) {
            var p = GlobalData.optManager.Table_GetSelectedRange(u);
            p.rowstart >= 0 &&
              (s = u.cells[u.rows[p.rowend].start + 1].datarecordID)
          }
        }
        break;
      default:
        r.hooks.length &&
          (i = GlobalData.optManager.GetObjectPtr(r.hooks[0].objid, !1)) &&
          i.objecttype === S.SD_OBJT_MINDMAP_CONNECTOR &&
          (s = r.datasetElemID)
    }
    s >= 0 &&
      (
        - 1 == (o = GlobalData.optManager.GanttGetParentID(s)) ? (o = s, l = 0) : (
          l = 0,
          (
            n = ListManager.SDData.GetValue(
              s,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
            )
          ).length &&
          (l = parseInt(n), l++)
        )
      );
    return ListManager.SDData.UpdateValue(
      o,
      ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_HIDE],
      '0'
    ),
    {
      parentid: o,
      index: l
    }
  },
  SDJS.DataSet.Planning.prototype.CopyElement = function (e, t, a, r, i, n) {
    var o,
      s,
      l,
      S,
      c = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theContentHeader.SDDataID, !0).SDData;
    if (
      null != (l = t.Index[i]) &&
      e[a] &&
      e[a].DataTableMap[r] &&
      null == e[a].DataTableMap[r].DataElementMap[i]
    ) {
      e[a].newDatasetID,
        o = e[a].DataTableMap[r].newTableID,
        s = ListManager.SDData.AddRow(o),
        S = c.Index[s],
        ListManager.SDData.CopyRow(t, l, S) &&
        (
          e[a].DataTableMap[r].DataElementMap[i] = s,
          (
            e[a].DataTableMap[r].firstElem < 0 ||
            i < e[a].DataTableMap[r].firstElem
          ) &&
          (e[a].DataTableMap[r].firstElem = i)
        );
      var u,
        p,
        d,
        D,
        g = t.DataSets[l.datasetIndex].Tables[l.tableIndex],
        h = g.Rows.length,
        m = ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD];
      if (g.Name === ListManager.DataTableNames.PLANNING_TASKS) for (u = 0; u < h; u++) d = null,
        (p = ListManager.SDData.GetRowValueFromTable(g, u, m)).length &&
        (d = parseInt(p)),
        d === i &&
        (D = parseInt(g.Rows[u].ID), this.CopyElement(e, t, a, r, D, n))
    }
  },
  SDJS.DataSet.Planning.prototype.RemapPastedData = function (e, t, a, r) {
    var i,
      n,
      o,
      s,
      l,
      S,
      c,
      u,
      p,
      d,
      D,
      g,
      h,
      m,
      C,
      y,
      f,
      L,
      I,
      T,
      b,
      M = - 1,
      P = - 1,
      R = [],
      A = function (e, t) {
        var a,
          r,
          i,
          n;
        for (
          n = t.toUpperCase(),
          r = ListManager.SDData.GetNumRows(e, '', ''),
          a = 0;
          a < r;
          a++
        ) if (
            i = ListManager.SDData.GetRow(e, '', '', a),
            ListManager.SDData.GetValue(
              i,
              ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_GUID]
            ).toUpperCase() === n
          ) return i;
        return - 1
      },
      _ = function (e, t) {
        return e.index - t.index
      };
    o = e[t].DataTableMap.length,
      (L = e[t].firstTable) < 0 &&
      (L = 0),
      C = ListManager.SDData.GetTableID(
        e[t].newDatasetID,
        ListManager.DataTableNames.PERSONTABLE,
        !1
      );
    var E = e[t].datasetAdded,
      w = this.GetDestinationParent(e[t].newDatasetID, E);
    for (i = L; i < o; i++) if (
      null != e[t].DataTableMap[i] &&
      (
        l = ListManager.SDData.GetTable(e[t].DataTableMap[i].newTableID)
      ) &&
      l.Name === ListManager.DataTableNames.PLANNING_TASKS
    ) {
      for (
        (I = e[t].DataTableMap[i].firstElem) < 0 &&
        (I = 0),
        s = e[t].DataTableMap[i].DataElementMap.length,
        n = I;
        n < s;
        n++
      ) null != (S = e[t].DataTableMap[i].DataElementMap[n]) &&
        (
          p = S.toString(),
          ListManager.SDData.UpdateValue(
            S,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.ROW_FIELD],
            p
          ),
          c = GlobalData.optManager.GanttGetParentID(S),
          void 0 === (u = e[t].DataTableMap[i].DataElementMap[c]) &&
          (
            u = w.parentid,
            b = 0,
            (
              p = ListManager.SDData.GetValue(
                S,
                ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD]
              )
            ) &&
            p.length &&
            (b = parseInt(p)),
            R.push({
              rowid: S,
              index: b
            })
          ),
          p = u.toString(),
          ListManager.SDData.UpdateValue(
            S,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
            p
          ),
          (
            p = ListManager.SDData.GetValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
            )
          ) &&
          p.length &&
          (
            p = '',
            ListManager.SDData.UpdateValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID],
              p
            )
          ),
          (
            p = ListManager.SDData.GetValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_URL]
            )
          ) &&
          p.length &&
          (
            p = '',
            ListManager.SDData.UpdateValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_URL],
              p
            )
          ),
          r &&
          (
            p = ListManager.SDData.GetValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_STYLE]
            )
          ) &&
          p.length &&
          (
            p = '',
            ListManager.SDData.UpdateValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_STYLE],
              p
            )
          ),
          d = - 1,
          (
            p = ListManager.SDData.GetValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER]
            )
          ).length &&
          (d = parseInt(p)),
          d >= 0 &&
          (
            void 0 === (D = e[t].DataTableMap[i].DataElementMap[d]) &&
            (D = - 1),
            p = D.toString(),
            ListManager.SDData.UpdateValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_MASTER],
              p
            )
          ),
          g = - 1,
          h = - 1,
          C >= 0 &&
          (
            p = ListManager.SDData.GetValue(
              S,
              ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONID]
            )
          ).length &&
          (g = parseInt(p)),
          g >= 0 &&
          (m = a.Index[g]) &&
          (
            M < 0 &&
            (
              M = parseInt(a.DataSets[m.datasetIndex].Tables[m.tableIndex].ID)
            ),
            P < 0 &&
            (P = parseInt(a.DataSets[m.datasetIndex].ID)),
            void 0 === e[t].DataTableMap[M] &&
            (e[t].DataTableMap[M] = new SDJS.DATA.DataTableReMap(C)),
            null == e[t].DataTableMap[M].DataElementMap[g] &&
            (
              f = - 1,
              (
                y = a.DataSets[m.datasetIndex].Tables[m.tableIndex].Rows[m.rowIndex][ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_GUID]].innerData
              ) &&
              (f = A(C, y)),
              f < 0 ? this.CopyElement(e, a, P, M, g, null) : e[t].DataTableMap[M].DataElementMap[g] = f
            ),
            h = e[t].DataTableMap[M].DataElementMap[g]
          ),
          p = '',
          h >= 0 &&
          (p = h.toString()),
          ListManager.SDData.UpdateValue(
            S,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONID],
            p
          )
        );
      T = R.length;
      var F = e[t].DataTableMap[i].newTableID,
        v = w.parentid.toString();
      if (T) {
        R.sort(_);
        var G = ListManager.SDData.GetNumRows(
          F,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          v
        );
        for (w.index > G - T && (w.index = G - T), n = 0; n < T; n++) p = (w.index + n).toString(),
          ListManager.SDData.UpdateValue(
            R[n].rowid,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
            p
          );
        for (n = w.index; n < G - T; n++) S = ListManager.SDData.GetRow(
          F,
          ListManager.GanttFieldNameList[ListManager.GanttTaskFields.PARENT_FIELD],
          v,
          n
        ),
          p = (n + T).toString(),
          ListManager.SDData.UpdateValue(
            S,
            ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
            p
          )
      }
      ListManager.SDData.SetIndexColumn(
        F,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.INDEX_FIELD],
        ListManager.SDData.Defines.SDDATA_INDEX_ASC
      )
    }
  },
  SDJS.DataSet.FieldedData.prototype = new SDJS.DataSet.Base,
  SDJS.DataSet.FieldedData.prototype.constructor = SDJS.DataSet.FieldedData,
  SDJS.DataSet.FieldedData.prototype.GetDestinationTable = function (e, t, a, r) {
    var i,
      n,
      o = null,
      s = - 1;
    for (i = 0; i < e.DataSets.length; i++) if ('FIELDEDDATA' == e.DataSets[i].Name) {
      for (s = i, n = 0; n < e.DataSets[i].Tables.length; n++) if (e.DataSets[i].Tables[n].ID == t) {
        o = e.DataSets[i].Tables[n];
        break
      }
      break
    }
    if (!o) return - 1;
    var l,
      S = - 1,
      c = ListManager.SDData.FieldedDataDecodeTableName(o.Name),
      u = ListManager.SDData.GetFieldedDataTableList();
    if (!r) for (i = 0; i < u.length; i++) if (
      0 == u[i].name.indexOf(c) &&
      (
        l = [],
        ListManager.SDData.FieldedDataMapFields(o, u[i].tableID, l)
      )
    ) {
      S = u[i].tableID,
        this.gTableFieldMap[t] = l;
      break
    }
    if (S < 0) {
      var p = c;
      if (!r) for (
        i = 1;
        i < 100 &&
        !(ListManager.SDData.GetFieldedDataTableId(p) < 0);
        i++
      ) p = c + '-' + i;
      S = ListManager.SDData.NewFieldedDataTable(p);
      var d,
        D,
        g,
        h,
        m,
        C = o.Columns,
        y = o.Rows[0],
        f = o.Rows[1],
        L = o.Rows[2],
        I = [],
        T = !0;
      for (i = 0; i < C.length; i++) if (
        (h = C[i].Name) != ListManager.SDData.FieldedDataReservedFields.RULE
      ) {
        if (
          g = parseInt(L[h].innerData, 10),
          isNaN(g) ||
          g < 0 ||
          g >= C.length ||
          I[g]
        ) {
          T = !1;
          break
        }
        I[g] = !0
      }
      for (l = [], i = 0; i < C.length; i++) (h = C[i].Name) != ListManager.SDData.FieldedDataReservedFields.RULE ? (
        d = y[h].innerData,
        D = f[h].innerData,
        g = T ? parseInt(L[h].innerData, 10) : void 0,
        m = ListManager.SDData.FieldedDataAddColumn(S, d, D, g),
        l.push({
          srcFieldID: h,
          dstFieldID: m
        })
      ) : l.push({
        srcFieldID: h,
        dstFieldID: h
      });
      this.gTableFieldMap[t] = l
    }
    var b = '{{RULES}}_' + t,
      M = null;
    for (i = 0; i < e.DataSets[s].Tables.length; i++) if (e.DataSets[s].Tables[i].Name == b) {
      M = e.DataSets[s].Tables[i];
      break
    }
    var P,
      R,
      A,
      _,
      E = [];
    if (M) for (i = 0; i < M.Rows.length; i++) R = (P = M.Rows[i])[ListManager.SDData.FieldedDataRulesEntry.NAME].innerData,
      _ = P[ListManager.SDData.FieldedDataRulesEntry.DATA].innerData,
      A = P.ID,
      this.MapRuleData(R, _, A, l, S, E);
    return this.gTableRuleMap[t] = E,
      S
  },
  SDJS.DataSet.FieldedData.prototype.MapRuleData = function (e, t, a, r, i, n) {
    var o,
      s,
      l,
      S = ListManager.SDData.FieldedDataDecodeRuleData(t);
    for (o = 0; o < S.length; o++) for (l = S[o], s = 0; s < r.length; s++) if (r[s].srcFieldID == l.field) {
      l.field = r[s].dstFieldID;
      break
    }
    t = ListManager.SDData.FieldedDataEncodeRuleData(S);
    var c = ListManager.SDData.FieldedDataGetRuleList(i),
      u = {
        srcRuleID: a,
        dstRuleID: - 1
      };
    for (o = 0; o < c.length; o++) if (c[o].name == e && c[o].rawData == t) {
      u.dstRuleID = c[o].id;
      break
    }
    if (u.dstRuleID < 0) {
      var p,
        d = e;
      for (o = 1; o < 100; o++) {
        for (p = !1, s = 0; s < c.length; s++) if (d == c[s].name) {
          p = !0;
          break
        }
        if (!p) break;
        d = e + '-' + o
      }
      u.dstRuleID = ListManager.SDData.FieldedDataAddRule(i, d, S)
    }
    n.push(u)
  },
  SDJS.DataSet.FieldedData.prototype.FindSourceTable = function (e, t) {
    var a,
      r,
      i = null;
    for (a = 0; a < e.DataSets.length; a++) if ('FIELDEDDATA' == e.DataSets[a].Name) {
      for (r = 0; r < e.DataSets[a].Tables.length; r++) if (e.DataSets[a].Tables[r].ID == t) {
        i = e.DataSets[a].Tables[r];
        break
      }
      break
    }
    return i
  },
  SDJS.DataSet.FieldedData.prototype.CopyElement = function (e, t, a, r, i, n) {
    if (e[a] && e[a].DataTableMap[r]) {
      var o,
        s,
        l,
        S,
        c,
        u,
        p,
        d,
        D,
        g,
        h,
        m = i < 0,
        C = [],
        y = !1,
        f = this.FindSourceTable(t, r);
      if (f) {
        if (m) for (
          ListManager.SDData.RebuildIndex(t),
          s = 3;
          s < f.Rows.length;
          s++
        ) C.push(f.Rows[s].ID);
        else C.push(i);
        for (s = 0; s < C.length; s++) if (
          o = C[s],
          null == e[a].DataTableMap[r].DataElementMap[o] &&
          (S = t.Index[o])
        ) {
          c = f.Rows[S.rowIndex],
            e[a].newDatasetID,
            d = e[a].DataTableMap[r].newTableID,
            D = ListManager.SDData.FieldedDataAddRecord(d),
            (h = this.gTableFieldMap[r]) ||
            (
              h = [],
              ListManager.SDData.FieldedDataMapFields(f, d, h),
              this.gTableFieldMap[r] = h
            );
          var L = this.gTableRuleMap[r];
          for (l = 0; l < h.length; l++) u = h[l].srcFieldID,
            g = h[l].dstFieldID,
            c[u] &&
            (
              (p = c[u].innerData) &&
                L &&
                L.length &&
                u == ListManager.SDData.FieldedDataReservedFields.RULE ? (
                p = this.MapRuleIDs(p, L),
                ListManager.SDData.IsColumnExists(d, ListManager.SDData.FieldedDataReservedFields.RULE) ||
                ListManager.SDData.AddColumn(d, ListManager.SDData.FieldedDataReservedFields.RULE),
                ListManager.SDData.FieldedDataSetFieldValue(d, D, g, p)
              ) : p &&
              ListManager.SDData.FieldedDataSetFieldValue(d, D, g, p)
            );
          e[a].DataTableMap[r].DataElementMap[o] = D,
            (
              e[a].DataTableMap[r].firstElem < 0 ||
              o < e[a].DataTableMap[r].firstElem
            ) &&
            (e[a].DataTableMap[r].firstElem = o),
            y = !0
        }
        n &&
          y &&
          n.RemapDataFields(h)
      }
    }
  },
  SDJS.DataSet.FieldedData.prototype.MapRuleIDs = function (e, t) {
    var a,
      r,
      i = e.split('.');
    for (a = 0; a < i.length; a++) for (r = 0; r < t.length; r++) if (i[a] == t[r].srcRuleID) {
      i[a] = t[r].dstRuleID;
      break
    }
    return e = i.join('.')
  }

ListManager.LM.prototypeBuildAssignmentMenu = function () {
  var e,
    t,
    a,
    r,
    i,
    n,
    o,
    s,
    l = 0,
    S = - 1,
    c = !1,
    u = null,
    p = null,
    d = - 1,
    D = '';
  resources = [],
    cellWindowCoords = {},
    boundingRect = {},
    viewportBottom = - 1;
  var g = null,
    h = GlobalData.optManager.Table_GetActiveID();
  if (
    !(h < 0 || null == h) &&
    (u = GlobalData.optManager.GetObjectPtr(h)) &&
    (i = u.GetTable()) &&
    !((n = i.select) < 0 || null == n)
  ) {
    for (
      ListManager.SDData.GetValue(
        i.cells[n].datarecordID,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_TRELLO_CARD_ID]
      ),
      menuList = document.getElementById(Resources.Controls.Dropdowns.AssignmentMenu.Id);
      menuList &&
      menuList.hasChildNodes();
    ) menuList.removeChild(menuList.firstChild);
    if (
      (d = u.datasetID) < 0 &&
      (
        u.subtype === ConstantData.ObjectSubTypes.SD_SUBT_TASK ||
        u.subtype === ConstantData.ObjectSubTypes.SD_SUBT_TASKMAP
      )
    ) for (l = (g = GlobalData.optManager.ActiveVisibleZList()).length, e = 0; e < l; e++) if (
      (p = GlobalData.optManager.GetObjectPtr(g[e], !1)).objecttype === ConstantData.ObjectTypes.SD_OBJT_MINDMAP_MAIN
    ) {
      d = p.datasetID;
      break
    }
    if (
      o = ListManager.SDData.GetTableID(d, ListManager.DataTableNames.PERSONTABLE),
      !(a = ListManager.SDData.GetNumRows(o, '', ''))
    ) return SDUI.Commands.MainController.Dropdowns.HideAllDropdowns(),
      !1;
    for (
      s = ListManager.SDData.GetTableID(d, ListManager.DataTableNames.PLANNING_TASKS),
      r = ListManager.Trello.AreAnyTasksLinkedToTrello(s),
      e = 0;
      e < a;
      e++
    ) if (
        S = ListManager.SDData.GetRow(o, '', '', e),
        (
          D = ListManager.SDData.GetValue(
            S,
            ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_NAME]
          )
        ) &&
        0 !== D.length &&
        (
          !r ||
          !ListManager.Trello.AllowIntegrationWithTrello() ||
          GlobalData.optManager.TM_IsPersonFlagSet(S, ListManager.PersonTableFlags.SF_LF_FROM_TRELLO)
        ) &&
        (
          !GlobalData.optManager.AssignmentMenuFilter ||
          0 == D.toUpperCase().indexOf(GlobalData.optManager.AssignmentMenuFilter.toUpperCase())
        )
      ) {
        for (c = !1, l = resources.length, t = 0; t < l; t++) if (D.toUpperCase() == resources[t].toUpperCase()) {
          c = !0;
          break
        }
        c ||
          resources.push(D)
      }
    if (0 === resources.length) return SDUI.Commands.MainController.Dropdowns.HideAllDropdowns(),
      !1;
    for (resources.sort(), e = 0; e < resources.length; e++) {
      var m = document.createElement('li');
      menuList.appendChild(m),
        m.innerHTML = '<a href="#" onclick="SD_Click(event, \'SD_Gantt_Assign\')" ' + Constants.Attr_GanttAssign + '="' + resources[e] + '">' + resources[e] + '</a>'
    }
    return cellWindowCoords = GlobalData.docHandler.DocObject().ConvertDocToWindowCoords(u.trect.x + i.cells[n].frame.x, u.trect.y + i.cells[n].frame.y),
      menuList.style.top = cellWindowCoords.y + i.cells[n].frame.height + 'px',
      boundingRect = menuList.getBoundingClientRect(),
      viewportBottom = window.innerHeight ||
      document.documentElement.clientHeight,
      boundingRect.bottom > viewportBottom ? (
        newTop = boundingRect.top - boundingRect.height,
        newTop -= i.cells[n].frame.height,
        newTop >= 0 &&
        (menuList.style.top = newTop + 'px')
      ) : boundingRect.top < cellWindowCoords.y &&
      boundingRect.bottom >= cellWindowCoords.y &&
      (
        newTop = cellWindowCoords.y - boundingRect.height,
        menuList.style.top = newTop + 'px'
      ),
      this,
      setTimeout((function () {
        GlobalData.optManager.AssignmentMenuFilter = ''
      }), 500),
      !1
  }
}

ListManager.LM.prototypeGanttAssign = function (e) {
  var t = null,
    a = null,
    r = - 1,
    i = - 1,
    n = GlobalData.optManager.svgDoc.GetActiveEdit();
  if (n) {
    n.SetText(e);
    var o = GlobalData.optManager.Table_GetActiveID();
    if (o < 0) return;
    if (!(t = GlobalData.optManager.GetObjectPtr(o, !1))) return;
    if (!(a = t.GetTable(!0))) return;
    if (!(r = n.GetUserData()) || r < 0) return;
    if (!(i = GlobalData.optManager.Table_CellFromDataID(a, r)) || i < 0) return;
    GlobalData.optManager.Table_ReformatText(t, a, 0, 0, [
      i
    ]),
      GlobalData.optManager.AddToDirtyList(t.BlockID),
      GlobalData.optManager.CloseEdit()
  }
}

ListManager.LM.prototypeTrimPersonTable = function (e, t) {
  var a = 0,
    r = - 1,
    i = 0,
    n = ListManager.SDData.GetTableID(e, ListManager.DataTableNames.PERSONTABLE);
  for (a = ListManager.SDData.GetNumRows(n, '', '') - 1; a >= 0; a--) r = ListManager.SDData.GetRow(n, '', '', a),
    'string' == typeof (
      i = ListManager.SDData.GetValue(
        r,
        ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_LOCALFLAGS]
      )
    ) &&
    (i = parseInt(i)),
    i & ListManager.PersonTableFlags.SF_LF_FROM_TRELLO ||
    (
      personGuid = ListManager.SDData.GetValue(
        r,
        ListManager.PersonFieldNameList[ListManager.PersonTableFields.TM_P_GUID]
      ),
      nTasksAssignedToPerson = ListManager.SDData.GetNumRows(
        t,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONGUID],
        personGuid
      ),
      0 === nTasksAssignedToPerson &&
      ListManager.SDData.DeleteRow(r)
    )
}

ListManager.LM.prototypeGetTasksAssignedToUserByPersonGuid = function (e, t) {
  var a,
    r,
    i = - 1,
    n = '',
    o = [];
  for (r = ListManager.SDData.GetNumRows(e, '', ''), a = 0; a < r; a++) i = ListManager.SDData.GetRow(e, '', '', a),
    (
      n = ListManager.GetValue(
        i,
        ListManager.GanttFieldNameList[ListManager.GanttTaskFields.TASK_PERSONGUID]
      )
    ) &&
    n === t &&
    o.push(i);
  return o
}

ListManager.LM.prototypeFlowChart_InvalTimeline = function (e) {
  return - 1
}

ListManager.LM.prototypeFlowchart_GetFieldName = function (e) {
  return null
}

ListManager.LM.prototypeFlowChart_AddTaktRecord = function (e) {
  return - 1
}

ListManager.LM.prototypeFlowChart_UpdateTakt = function (e) {
  return null
}

ListManager.LM.prototypeToggleFieldedDataTooltip = function (e, t) {
  this.ShowFieldedDataTooltip(e, t, !0)
}

ListManager.LM.prototypeShowFieldedDataTooltip = function (e, t, a) {
  var r = Resources.Controls.Dropdowns.EditDataValues.Id,
    i = this.GetObjectPtr(e, !1);
  if (
    a = a ||
    !0 === t,
    t &&
    GlobalData.optManager.CloseEdit(!1, !1, !0),
    i &&
    i.HasFieldData() &&
    (
      !this.ActiveDataTT ||
      this.ActiveDataTT.shape != e ||
      !this.FieldedDataTooltipVisible() ||
      this.ActiveDataTT.inEditMode != t
    )
  ) if (this.ActiveDataTT) {
    if (!this.ActiveDataTT.inPartialGet) {
      this.ActiveDataTT.shape = e,
        this.ActiveDataTT.inEditMode = t,
        this.ActiveDataTT.leaveOpen = a,
        this.ActiveDataTT.dataChanged = !1;
      var n = i.GetNotePos(i);
      n = this.svgDoc.ConvertDocToWindowCoords(n.x, n.y),
        SDUI.Commands.MainController.ShowContextualMenu(r, n.x, n.y)
    }
  } else {
      this.ActiveDataTT = {
        shape: - 1,
        stringPartialHTML: null,
        datePartialHTML: null,
        boolPartialHTML: null,
        jsonPartialHTML: null,
        presetPartialHTML: null,
        comboPartialHTML: null,
        staticPartialHTML: null,
        hidePartialHTML: null,
        endPartialHTML: null,
        inPartialGet: !0,
        inEditMode: !1,
        leaveOpen: !1
      };
      var o = this,
        s = new SDUI.HTMLPartialLoader.PartialLoadRequest('stringDataPartial', 'views/partials/EditFieldValueItem.html'),
        l = new SDUI.HTMLPartialLoader.PartialLoadRequest('dateDataPartial', 'views/partials/EditFieldDateItem.html'),
        S = new SDUI.HTMLPartialLoader.PartialLoadRequest(
          'boolDataPartial',
          'views/partials/EditFieldBoolMenuItem.html'
        ),
        c = new SDUI.HTMLPartialLoader.PartialLoadRequest('presetPartial', 'views/partials/EditFieldPresetItem.html'),
        u = new SDUI.HTMLPartialLoader.PartialLoadRequest('comboPartial', 'views/partials/EditFieldComboItem.html'),
        p = new SDUI.HTMLPartialLoader.PartialLoadRequest('jsonDataPartial', 'views/partials/EditFieldJSONItem.html'),
        d = new SDUI.HTMLPartialLoader.PartialLoadRequest(
          'staticDataPartial',
          'views/partials/EditFieldStaticItem.html'
        ),
        D = new SDUI.HTMLPartialLoader.PartialLoadRequest(
          'hideDataPartial',
          'views/partials/EditFieldHideDataItem.html'
        ),
        g = new SDUI.HTMLPartialLoader.PartialLoadRequest('endDataPartial', 'views/partials/EditFieldHidden.html');
      SDUI.Commands.MainController.HTMLLoader.LoadHTMLPartials(
        [s,
          l,
          S,
          p,
          c,
          u,
          d,
          D,
          g],
        (
          function () {
            o.ActiveDataTT.stringPartialHTML = s.HTML,
              o.ActiveDataTT.datePartialHTML = l.HTML,
              o.ActiveDataTT.boolPartialHTML = S.HTML,
              o.ActiveDataTT.jsonPartialHTML = p.HTML,
              o.ActiveDataTT.presetPartialHTML = c.HTML,
              o.ActiveDataTT.comboPartialHTML = u.HTML,
              o.ActiveDataTT.staticPartialHTML = d.HTML,
              o.ActiveDataTT.hidePartialHTML = D.HTML,
              o.ActiveDataTT.endPartialHTML = g.HTML,
              o.ActiveDataTT.inPartialGet = !1,
              o.ShowFieldedDataTooltip(e, t)
          }
        )
      )
    }
}

ListManager.LM.prototypeFieldedDataTooltipVisible = function (e) {
  return !(
    !this.ActiveDataTT ||
    !SDUI.Commands.MainController.Dropdowns.IsDropdownVisible(Resources.Controls.Dropdowns.EditDataValues.Id)
  ) &&
    (!e || this.ActiveDataTT.shape == e)
}

ListManager.LM.prototypeHideFieldedDataTooltip = function (e, t) {
  this.FieldedDataTooltipVisible() &&
    (
      this.ActiveDataTT &&
      this.ActiveDataTT.leaveOpen &&
      this.ActiveDataTT.shape == e &&
      !t ||
      (
        this.ActiveDataTT.inEditMode = !1,
        this.ActiveDataTT.leaveOpen = !1,
        this.ActiveDataTT.shape = - 1,
        SDUI.Commands.MainController.Dropdowns.HideDropdown(Resources.Controls.Dropdowns.EditDataValues.Id)
      )
    )
},
  ,
  ListManager.LM.prototype.BuildFieldedDataTooltip = function () {
    if (
      this.ActiveDataTT &&
      !(this.ActiveDataTT.shape < 0) &&
      this.ActiveDataTT.stringPartialHTML &&
      this.ActiveDataTT.datePartialHTML &&
      this.ActiveDataTT.boolPartialHTML &&
      this.ActiveDataTT.staticPartialHTML &&
      this.ActiveDataTT.hidePartialHTML
    ) {
      var e = this.GetObjectPtr(this.ActiveDataTT.shape, !1);
      if (e && e.HasFieldData()) {
        var t = e.GetFieldDataTable(),
          a = e.GetFieldDataRecord();
        if (!(t < 0 || a < 0)) {
          var r = Resources.Controls.Dropdowns.EditDataValues.GetControl();
          r.empty(),
            this.ActiveDataTT.fieldItems = [];
          var i = this;
          r.off('sd.dropdown.hide'),
            r.on('sd.dropdown.hide', (function (e) {
              i.HandleDataTooltipClose()
            }));
          var n,
            o,
            s,
            l,
            S,
            c,
            u,
            p,
            d,
            D,
            g,
            h,
            m,
            C,
            y,
            f,
            L = ListManager.SDData.FieldedDataGetFieldList(t, !0),
            I = '',
            T = ListManager.SDData.GetFieldedDataTableLock(t) ||
              ListManager.SDData.GetFieldedDataAutoUpdate(t),
            b = !this.ActiveDataTT.inEditMode ||
              GlobalData.docHandler.IsReadOnly() ||
              T;
          if (
            b ? r.addClass('static') : r.removeClass('static'),
            s = $(this.ActiveDataTT.endPartialHTML),
            $('span', s).attr(Constants.Attr_EditDataEndID, 'start'),
            r.append(s),
            L
          ) for (n = 0; n < L.length; n++) {
            if (
              u = L[n].fieldID,
              l = L[n].name,
              p = L[n].type,
              I = ListManager.SDData.FieldedDataGetFieldValue(t, a, u),
              S = ListManager.SDData.FieldedDataGetFieldStyle(t, a, u),
              c = this.CleanShapeDataHyperlink(ListManager.SDData.FieldedDataGetFieldHyperlink(t, a, u)),
              C = L[n].presets,
              d = p == ListManager.SDData.FieldedDataTypes.BOOL,
              D = p == ListManager.SDData.FieldedDataTypes.JSON,
              g = p == ListManager.SDData.FieldedDataTypes.HEADER,
              m = C &&
              C.items.length &&
              !C.noManualInput,
              h = C &&
              C.items.length &&
              C.noManualInput,
              b
            ) s = $(this.ActiveDataTT.staticPartialHTML),
              D &&
              (s = $(this.ActiveDataTT.jsonPartialHTML)),
              I = this.ModifyFieldDataForDisplay(I, p);
            else {
              switch (p) {
                case ListManager.SDData.FieldedDataTypes.DATE:
                  s = $(this.ActiveDataTT.datePartialHTML);
                  break;
                case ListManager.SDData.FieldedDataTypes.BOOL:
                  s = $(this.ActiveDataTT.boolPartialHTML);
                  break;
                case ListManager.SDData.FieldedDataTypes.HEADER:
                  s = $(this.ActiveDataTT.staticPartialHTML);
                  break;
                case ListManager.SDData.FieldedDataTypes.JSON:
                  s = $(this.ActiveDataTT.jsonPartialHTML);
                  break;
                default:
                  s = m ? $(this.ActiveDataTT.comboPartialHTML) : h ? $(this.ActiveDataTT.presetPartialHTML) : $(this.ActiveDataTT.stringPartialHTML)
              }
              I = this.ModifyFieldDataForEdit(I, p)
            }
            if (
              f = Constants.Attr_EditDataTTCtrlID + u,
              $(s).attr('id', f),
              this.ActiveDataTT.fieldItems.push(f),
              $('.shape-data-field', s).text(l),
              g
            ) {
              for (
                $('.shape-data-value', s).text(''),
                $('.shape-data-value', s).css('display', 'none'),
                y = ListManager.SDData.FieldedDataParseStyle(S),
                o = 0;
                o < y.length;
                o++
              ) $('.shape-data-field', s).css(y[o].name, y[o].val);
              $('.shape-data-field', s).css('max-width', 'none'),
                $('.shape-data-field', s).css('display', 'block'),
                $(s).css('display', 'block'),
                c = '',
                S = '',
                b ||
                $(s).addClass('shape-data-header')
            } else D ? $('.shape-data-value', s).empty() : b ||
              d ||
              h ? $('.shape-data-value', s).text(I) : $('.shape-data-value', s).val(I);
            $('.shape-data-value', s).attr(Constants.Attr_EditDataFieldID, u),
              $('.shape-data-value', s).attr(Constants.Attr_EditDataFieldType, p),
              $('.shape-data-value', s).attr(Constants.Attr_EditDataShapeID, this.ActiveDataTT.shape),
              S &&
              b &&
              !D &&
              $('.shape-data-value', s).attr('style', S),
              c &&
              b &&
              !D &&
              (
                $('.shape-data-value', s).wrapInner('<a target="_blank" href="' + c + '"></a>'),
                $('.shape-data-value', s).css('pointer-events', 'all')
              ),
              r.append(s),
              s = $('#' + f, r),
              this.InitFieldDataCtrl(s, p, null, I, L.length)
          }
          s = $(this.ActiveDataTT.endPartialHTML),
            $('span', s).attr(Constants.Attr_EditDataEndID, 'end'),
            r.append(s),
            this.ActiveDataTT.fieldItems.length &&
            !b &&
            (
              f = this.ActiveDataTT.fieldItems[0],
              s = $('#' + f, r),
              setTimeout((function () {
                $('.shape-data-value', s).select()
              }), 1)
            ),
            r.off('dblclick'),
            b &&
            !GlobalData.docHandler.IsReadOnly() &&
            r.on(
              'dblclick',
              (
                function (e) {
                  i.ShowFieldedDataTooltip(i.ActiveDataTT.shape, !0, !0)
                }
              )
            )
        }
      }
    }
  }

ListManager.LM.prototypeUpdateFieldedDataTooltipItem = function (e, t, a, r, i) {
  var n = this.GetObjectPtr(e, !1);
  if (n && n.HasFieldData()) {
    var o = n.GetFieldDataTable(),
      s = n.GetFieldDataRecord();
    if (!(o < 0 || s < 0)) {
      var l = this.ValidateFieldDataInput(r, a);
      if (l != ListManager.SDData.FieldedDataGetFieldValue(o, s, t)) {
        // try {
        if (
          Collab.AllowMessage() &&
          Collab.BeginSecondaryEdit(),
          ListManager.SDData.FieldedDataSetFieldValue(o, s, t, l),
          n.RefreshFromFieldData(),
          Collab.AllowMessage()
        ) {
          var S = {
            BlockID: e,
            fieldID: t,
            dataType: a,
            value: r,
            TableID: o
          };
          Collab.BuildMessage(
            ConstantData.CollabMessages.UpdateFieldedDataTooltipItem,
            S,
            !1
          )
        }
        SDUI.Commands.MainController.DataPanel.IdleDataPanel()
        // } catch (e) {
        // }
        this.ActiveDataTT &&
          this.CompleteOperation()
      }
      if (
        this.ActiveDataTT &&
        this.ActiveDataTT.shape == e &&
        this.FieldedDataTooltipVisible()
      ) {
        var c = this.ModifyFieldDataForEdit(l, a);
        if (r != c || i) {
          var u = $('#' + Constants.Attr_EditDataTTCtrlID + t);
          a == ListManager.SDData.FieldedDataTypes.BOOL ? $('.shape-data-value', u).text(c) : (
            $('.shape-data-value', u).val(c),
            i &&
            $('.shape-data-value', u).text(c)
          )
        }
      }
    }
  }
}

ListManager.LM.prototypeUpdateTooltipFromMessage = function (e, t, a, r) {
  if (
    this.ActiveDataTT &&
    this.ActiveDataTT.shape == e &&
    this.FieldedDataTooltipVisible()
  ) {
    var i = this.ModifyFieldDataForEdit(r, a),
      n = $('#' + Constants.Attr_EditDataTTCtrlID + t);
    a == ListManager.SDData.FieldedDataTypes.BOOL ||
      $('.shape-data-value', n).val(i),
      $('.shape-data-value', n).text(i)
  }
},
  ,
  ListManager.LM.prototype.HandleDataFieldEndFocus = function (e) {
    if (
      this.ActiveDataTT &&
      this.ActiveDataTT.fieldItems &&
      this.ActiveDataTT.fieldItems.length > 0
    ) {
      var t;
      t = 'start' == e ? this.ActiveDataTT.fieldItems[this.ActiveDataTT.fieldItems.length - 1] : this.ActiveDataTT.fieldItems[0];
      var a = Resources.Controls.Dropdowns.EditDataValues.GetControl(),
        r = $('#' + t, a);
      $('.shape-data-value', r).select()
    }
  }

ListManager.LM.prototypeInitFieldDataCtrl = function (e, t, a, r, i) {
  if (
    a = a ||
    $('.shape-data-value', e),
    t == ListManager.SDData.FieldedDataTypes.DATE
  ) {
    var n = Utils2.GetActiveDateFormat(- 1),
      o = n == ListManager.DateCodes.SDEURODATE ? 'dd-mm-yy' : 'mm-dd-yy',
      s = n == ListManager.DateCodes.SDEURODATE ? 'dd-mm-yyyy' : 'mm-dd-yyyy';
    a.datepicker({
      dateFormat: o,
      showOn: 'none',
      onSelect: function (e, t) {
        $(this).select();
        var r = a.attr(Constants.Attr_EditDataFieldID),
          i = a.attr(Constants.Attr_EditDataFieldType),
          n = a.attr(Constants.Attr_EditDataShapeID),
          o = a.attr(Constants.Attr_EditDataPanelFlag),
          s = a.val();
        void 0 !== r &&
          i &&
          void 0 !== n &&
          !o &&
          (
            n = parseInt(n, 10),
            GlobalData.optManager.UpdateFieldedDataTooltipItem(n, r, i, s)
          )
      },
      beforeShow: function (e, t) {
        t.dpDiv &&
          $(t.dpDiv).addClass('ui-datepicker-fieldedData'),
          GlobalData.optManager._curDatePickerElem = a
      },
      onClose: function (e, t) {
        t.dpDiv &&
          $(t.dpDiv).removeClass('ui-datepicker-fieldedData'),
          GlobalData.optManager._curDatePickerElem = null
      }
    }),
      a.datepicker('widget').click(
        (
          function (e) {
            a.select(),
              e.stopPropagation(),
              e.preventDefault()
          }
        )
      ),
      a.click((function () {
        a.datepicker('show')
      })),
      a.attr('placeholder', s)
  } else if (t == ListManager.SDData.FieldedDataTypes.JSON && r) {
    try {
      var l = JSON.parse(r)
    } catch (e) {
      return
    }
    var S = new JSONFormatter(l, i > 1 ? 0 : 1);
    a.append(S.render())
  }
},
  ,
  ListManager.LM.prototype.ModifyFieldDataForDisplay = function (e, t) {
    return this.ModifyFieldDataForEdit(e, t)
  }

ListManager.LM.prototypeModifyFieldDataForEdit = function (e, t) {
  var a = e;
  switch (t) {
    case ListManager.SDData.FieldedDataTypes.BOOL:
      a = (e = !!e && parseInt(e, 10)) ? 'True' : 'False';
      break;
    case ListManager.SDData.FieldedDataTypes.DATE:
      if (!e) break;
      var r = e.split('-'),
        i = Utils2.GetActiveDateFormat(- 1);
      3 == r.length &&
        (
          a = i == ListManager.DateCodes.SDEURODATE ? r[2] + '-' + r[1] + '-' + r[0] : r[1] + '-' + r[2] + '-' + r[0]
        )
  }
  return a
}

ListManager.LM.prototypeValidateFieldDataInput = function (e, t) {
  var a = e;
  switch (t) {
    case ListManager.SDData.FieldedDataTypes.BOOL:
      a = 'string' == typeof e ? 'true' == e.toLowerCase() ? '1' : 'false' == e.toLowerCase() ? '0' : (e = parseInt(e, 10)) ? '1' : '0' : e ? '1' : '0';
      break;
    case ListManager.SDData.FieldedDataTypes.FLOAT:
      if (!e) break;
      a = (a = parseFloat(e)).toString();
      break;
    case ListManager.SDData.FieldedDataTypes.INT:
      if (!e) break;
      a = (a = parseInt(e, 10)).toString();
      break;
    case ListManager.SDData.FieldedDataTypes.DATE:
      if (!e) break;
      var r = e.split('-'),
        i = Utils2.GetActiveDateFormat(- 1);
      3 != r.length &&
        (r = e.split('/')),
        3 == r.length &&
        (
          a = i == ListManager.DateCodes.SDEURODATE ? r[2] + '-' + r[1] + '-' + r[0] : r[2] + '-' + r[0] + '-' + r[1]
        )
  }
  return a
}


ListManager.LM.prototypeFindShapeForFieldData = function (e, t) {
  this.ZList();
  var a = null,
    r = null,
    i = function (n, o) {
      var s,
        l;
      for (
        s = 0;
        s < n.length &&
        (
          l = GlobalData.optManager.GetObjectPtr(n[s], !1),
          o ||
          (r = null),
          l.HasFieldDataRecord(e, t) ? a = {
            shapeID: l.BlockID,
            inGroup: o,
            parentGroup: r
          }
            : l instanceof ListManager.GroupSymbol &&
            l.ShapesInGroup &&
            l.ShapesInGroup.length &&
            (o || (r = l), i(l.ShapesInGroup, !0)),
          null == a
        );
        s++
      );
    };
  return i(this.ZList(), !1),
    a
}

ListManager.LM.prototypeClearShapesFieldData = function (e) {
  var t,
    a,
    r = this.ZList();
  for (t = 0; t < r.length; t++) (a = GlobalData.optManager.GetObjectPtr(r[t], !1)).HasFieldDataForTable(e) &&
    (a.RemoveFieldData(!1, e), a.RefreshFromFieldData())
}

ListManager.LM.prototypeUpdateShapeTextWithFieldData = function (e) {
  var t,
    a = this.ZList();
  for (t = 0; t < a.length; t++) GlobalData.optManager.GetObjectPtr(a[t], !1).RefreshFromFieldData(e)
}

ListManager.LM.prototypeUpdateShapesFromRuleChange = function (e, t) {
  var a,
    r = this.ZList();
  for (a = 0; a < r.length; a++) GlobalData.optManager.GetObjectPtr(r[a], !1).RefreshFromRuleChange(e, t)
}

ListManager.LM.prototypeCleanShapeDataHyperlink = function (e) {
  return e ? (e.indexOf('://') < 0 && (e = 'https://' + e), e) : e
}

ListManager.LM.prototypeSetShapeDataFromSDON = function (e, t, a) {
  var r,
    i,
    n,
    o;
  if (a && a.length) for (i = 0; i < a.length; i++) n = a[i],
    o = new RegExp(n.placeholder, 'g'),
    t = t.replace(o, n.value);
  // try {
  r = JSON.parse(t)
  // } catch (e) {
  //   return
  // }
  if (
    r &&
    r.DataTable &&
    Array.isArray(r.DataTable) &&
    r.DataTable.length
  ) {
    var s = r.DataTable[0],
      l = ListManager.SDData.FieldedDataImportFromSDON(s);
    if (l) {
      var S = GlobalData.optManager.GetObjectPtr(e, !0);
      S &&
        S.SetFieldDataRecord(l.tableID, l.recordID)
    }
  }
},
  SDF.PageActionRequestCallbacks = [],
  SDF.HandlePageActionResponse = function (e) {
    if (
      null != e &&
      (
        !1 === e.Success ? SDF.LogPageActionError(e) : !0 === SDUI.AppSettings.PagedSDR2 ? SDF.LogPageActionSuccess2(e) : SDF.LogPageActionSuccess(e),
        null != e.Request
      )
    ) {
      for (
        var t = (new Date).getTime(),
        a = [],
        r = 0;
        r < SDF.PageActionRequestCallbacks.length;
        r++
      ) {
        var i = SDF.PageActionRequestCallbacks[r];
        if (e.Request.RequestID === i.Request.RequestID) try {
          SDF.PageActionCommonCallback(e, i)
        } catch (e) {
        } else t - i.RequestSentTime < 30000 &&
          a.push(i)
      }
      SDF.PageActionRequestCallbacks = a
    }
  },
  SDF.PageActionCommonCallback = function (e, t) {
    if (null != e) {
      if (!0 === e.Success) if (!0 === SDUI.AppSettings.PagedSDR2 && null != e.Manifest2) {
        var a = new Resources.PagedSDRManifest2;
        a.FromJSON(e.Manifest2),
          e.Manifest2 = a,
          SDUI.Commands.MainController.PagedSDRController.Build2(e.Manifest2)
      } else null != e.Manifest &&
        SDUI.Commands.MainController.PagedSDRController.Build(e.Manifest);
      !0 === e.Success &&
        e.Request.Action === SDJS.SocketClient.PageAction.DeletePage &&
        (
          !0 === SDUI.AppSettings.PagedSDR2 &&
            null == e.Manifest2 ? SDUI.Commands.MainController.PagedSDRController.Build2(null) : !1 === SDUI.AppSettings.PagedSDR2 &&
            null == e.Manifest &&
          SDUI.Commands.MainController.PagedSDRController.Build(null)
        ),
        null != t &&
        'function' == typeof t.Callback &&
        t.Callback(e)
    }
  },
  SDF.CommitPage = function (e, t) {
    var a = new SDJS.SocketClient.PageActionRequest;
    a.Action = SDJS.SocketClient.PageAction.CommitPage,
      !0 === SDUI.AppSettings.PagedSDR2 ? a.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID : a.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
      a.FlushBlocks = e,
      SDF.QueuePageActionCallback(a, t),
      SDJS.SocketClient.SendPageActionRequest(a)
  },
  SDF.SetDefaultPage = function (e, t) {
    var a = new SDJS.SocketClient.PageActionRequest;
    a.Action = SDJS.SocketClient.PageAction.SetDefaultPage,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        a.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        a.PageID = e
      ) : (
        a.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        a.PageNumber = e
      ),
      SDF.QueuePageActionCallback(a, t),
      SDJS.SocketClient.SendPageActionRequest(a)
  },
  SDF.DeletePage = function (e, t) {
    var a = new SDJS.SocketClient.PageActionRequest;
    a.Action = SDJS.SocketClient.PageAction.DeletePage,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        a.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        a.PageID = e
      ) : (
        a.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        a.PageNumber = e
      ),
      SDF.QueuePageActionCallback(a, t),
      SDJS.SocketClient.SendPageActionRequest(a)
  },
  SDF.RenamePage = function (e, t, a) {
    var r = new SDJS.SocketClient.PageActionRequest;
    r.Action = SDJS.SocketClient.PageAction.RenamePage,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        r.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        r.PageID = e,
        r.PageName = t
      ) : (
        r.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        r.PageNumber = e,
        r.PageName = t
      ),
      SDF.QueuePageActionCallback(r, a),
      SDJS.SocketClient.SendPageActionRequest(r)
  },
  SDF.AddPage = function (e, t) {
    var a = new SDJS.SocketClient.PageActionRequest;
    a.Action = SDJS.SocketClient.PageAction.AddPage,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        a.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        a.PageID = e
      ) : (
        a.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        a.PageNumber = e
      ),
      a.FlushBlocks = !0,
      SDF.QueuePageActionCallback(a, t),
      SDJS.SocketClient.SendPageActionRequest(a)
  },
  SDF.InsertSelectedPage = function (e, t) {
    var a = new SDJS.SocketClient.PageActionRequest;
    a.Action = SDJS.SocketClient.PageAction.InsertSelectedPage,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        a.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        a.PageID = e
      ) : (
        a.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        a.PageNumber = e
      ),
      a.FlushBlocks = !0,
      SDF.QueuePageActionCallback(a, t),
      SDJS.SocketClient.SendPageActionRequest(a)
  },
  SDF.InsertTemplate = function (e, t, a) {
    var r = new SDJS.SocketClient.PageActionRequest;
    r.Action = SDJS.SocketClient.PageAction.InsertTemplate,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        r.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        r.PageID = e
      ) : (
        r.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        r.PageNumber = e
      ),
      r.FlushBlocks = !0,
      r.TemplateID = t,
      r.SDVersion = SDUI.AppSettings.SDVersion,
      SDF.QueuePageActionCallback(r, a),
      SDJS.SocketClient.SendPageActionRequest(r)
  },
  SDF.InsertExistingDocument = function (e, t, a, r) {
    var i = new SDJS.SocketClient.PageActionRequest;
    i.Action = SDJS.SocketClient.PageAction.InsertExistingDocument,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        i.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        i.PageID = e
      ) : (
        i.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        i.PageNumber = e
      ),
      i.FlushBlocks = !0,
      i.DepositoryID = t,
      i.CredentialID = a,
      SDF.QueuePageActionCallback(i, r),
      SDJS.SocketClient.SendPageActionRequest(i)
  },
  SDF.DuplicatePage = function (e, t) {
    var a = new SDJS.SocketClient.PageActionRequest;
    a.Action = SDJS.SocketClient.PageAction.DuplicatePage,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        a.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        a.PageID = e,
        e === a.CurrentPageID &&
        a.CurrentPageID !== Constants.Guid_Empty ||
        (a.FlushBlocks = !0)
      ) : (
        a.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        a.PageNumber = e,
        e !== a.CurrentPageNumber &&
        (a.FlushBlocks = !0)
      ),
      SDF.QueuePageActionCallback(a, t),
      SDJS.SocketClient.SendPageActionRequest(a)
  },
  SDF.PrepCreateSubProcess = function (e, t) {
    var a,
      r,
      i,
      n,
      o,
      s = ConstantData.ObjFlags.SEDO_Select;
    if (
      n = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSelectedListBlockID, !1),
      o = GlobalData.optManager.GetTargetSelect(),
      null == e
    ) {
      var l = Business.GetSelectionBusinessManager(o);
      if (null == l) return Utils2.Alert(Resources.Strings.NoShapeConnector, null),
        !1;
      if (
        l === gTaskMapManager &&
        ListManager.TaskMap.CommitVisualOutline(),
        0 == l.SetSubprocessSelection(o)
      ) return !1;
      for (a = (r = n.length) - 1; a >= 0; a--) (i = GlobalData.optManager.GetObjectPtr(n[a], !1)).IsSwimlane() &&
        (i.flags = Utils2.SetFlag(i.flags, s, !1), n.splice(a, 1));
      if (
        o >= 0 &&
        GlobalData.optManager.AddtoDelete(n, !0, !0),
        Collab.AllowMessage() &&
        Collab.IsSecondary()
      ) {
        var S = {
          BlockID: o
        };
        S.listtodelete = Utils1.DeepCopy(n);
        var c = S.listtodelete.indexOf(o);
        return c >= 0 &&
          S.listtodelete.splice(c, 1),
          void Collab.BuildMessage(ConstantData.CollabMessages.CreateSubProcess, S, !1, !1)
      }
    } else {
      var u = o,
        p = Utils1.DeepCopy(n);
      o = e.Data.BlockID,
        n = Utils1.DeepCopy(e.Data.listtodelete)
    }
    for (r = n.length, GlobalData.optManager.SetTargetSelect(o, !1), a = 0; a < r; a++) (
      i = GlobalData.optManager.GetObjectPtr(n[a], !1 === SDUI.AppSettings.UseBackplane)
    ).DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.CONNECTOR &&
      (i.flags = Utils2.SetFlag(i.flags, s, !0));
    return !0 === SDUI.AppSettings.UseBackplane &&
      (
        GlobalData.optManager.theContentHeader.ParentPageID = SDUI.SDBackplane.CurrentClientSession.PageID
      ),
      e &&
      t &&
      (t.oldSelected = p, t.target = u),
      !1 === SDUI.AppSettings.UseBackplane &&
      (GlobalData.optManager.PreserveUndoState(!1), SDF.SaveAllBlocks()),
      !0
  },
  SDF.RestorePrepCreateSubProcess = function (e) {
    var t,
      a,
      r = e.oldSelected,
      i = r.length,
      n = ConstantData.ObjFlags.SEDO_Select;
    for (GlobalData.optManager.SetTargetSelect(e.target, !1), t = 0; t < i; t++) (a = GlobalData.optManager.GetObjectPtr(r[t], !1)).DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.CONNECTOR &&
      (a.flags = Utils2.SetFlag(a.flags, n, !1));
    GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSelectedListBlockID, !1);
    Utils1.DeepCopy(r)
  },
  SDF.SubProcess_UpdateParent = function (e, t, a) {
    var r,
      i,
      n,
      o,
      s = GlobalData.optManager.ActiveVisibleZList();
    i = s.length;
    var l,
      S = [],
      c = ConstantData.ObjFlags.SEDO_Select,
      u = [],
      p = function (a) {
        if (n = GlobalData.optManager.GetObjectPtr(a, !0)) {
          var r = n;
          if (
            (l = GlobalData.optManager.SD_GetVisioTextChild(a)) >= 0 &&
            (r = GlobalData.optManager.GetObjectPtr(l)),
            null != t
          ) r.HyperlinkText = '/#' + t;
          else {
            var i = e;
            r.HyperlinkText = '/#Page ' + i.toString()
          }
          GlobalData.optManager.AddToDirtyList(r.BlockID)
        }
      };
    if (
      o = null != a ? a.Data.BlockID : GlobalData.optManager.GetTargetSelect(),
      null == a
    ) {
      if (o >= 0) for (p(o), r = 0; r < i; r++) if ((n = GlobalData.optManager.GetObjectPtr(s[r], !1)).flags & c) {
        if (
          (n = GlobalData.optManager.GetObjectPtr(s[r], !0)).flags = Utils2.SetFlag(n.flags, c, !1),
          s[r] === l
        ) continue;
        n.DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.CONNECTOR &&
          s[r] !== o &&
          (
            S.push(s[r]),
            n.IsSwimlane() &&
            n.moreflags & ConstantData.ObjMoreFlags.SED_MF_Frame_Group &&
            (
              u[n.BlockID] = n.moreflags,
              n.moreflags = Utils2.SetFlag(
                n.moreflags,
                ConstantData.ObjMoreFlags.SED_MF_Frame_Group,
                !1
              )
            )
          )
      }
    } else S = Utils1.DeepCopy(a.Data.listtodelete),
      p(a.Data.BlockID);
    if (GlobalData.optManager.DeleteSelectedObjectsCommon(S, !0, !1, !0), null == a) for (r = 0; r < i; r++) null != u[r] &&
      ((n = GlobalData.optManager.GetObjectPtr(r, !1)).moreflags = u[r]);
    if (Collab.AllowMessage()) {
      var d = {
        BlockID: o,
        pageName: t
      };
      d.listtodelete = Utils1.DeepCopy(S),
        Collab.BuildMessage(
          ConstantData.CollabMessages.SubProcess_UpdateParent,
          d,
          !1,
          !1
        )
    }
    GlobalData.optManager.CompleteOperation()
  },
  SDF.SubProcess_UpdateChild = function (e) {
    var t,
      a,
      r = GlobalData.optManager.ActiveVisibleZList(),
      i = r.length,
      n = ConstantData.ObjFlags.SEDO_Select,
      o = [],
      s = GlobalData.optManager.GetTargetSelect(),
      l = ConstantData.ObjectTypes;
    GlobalData.objectStore.GetObject(GlobalData.optManager.theSelectedListBlockID).Data = [];
    var S = Business.GetSelectionBusinessManager(s);
    for (
      null == S ? S = GlobalData.gBusinessManager : (
        GlobalData.optManager.theContentHeader.BusinessModule = SDJS_Business_GetModuleName(S),
        GlobalData.gBusinessManager = S
      ),
      t = 0;
      t < i;
      t++
    ) if ((a = GlobalData.optManager.GetObjectPtr(r[t], !1)).flags & n || r[t] === s) (a = GlobalData.optManager.GetObjectPtr(r[t], !0)).flags = Utils2.SetFlag(a.flags, n, !1);
      else if (
        a.DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.CONNECTOR
      ) {
        if (
          a.extraflags = Utils2.SetFlag(a.extraflags, ConstantData.ExtraFlags.SEDE_NoDelete, !1),
          a.objecttype === l.SD_OBJT_GANTT_CHART
        ) a.objecttype = 0;
        o.push(r[t])
      }
    if (s >= 0) {
      var c = GlobalData.gBusinessManager.RemoveParentConnector(s);
      if (null != c && (o = o.concat(c)), a = GlobalData.optManager.GetObjectPtr(s, !0)) {
        var u = a,
          p = GlobalData.optManager.SD_GetVisioTextChild(s);
        p >= 0 &&
          (u = GlobalData.optManager.GetObjectPtr(p)),
          u.HyperlinkText = '/#' + e,
          GlobalData.optManager.AddToDirtyList(u.BlockID)
      }
      if (a.ParentFrameID >= 0) {
        var d = GlobalData.optManager.GetObjectPtr(a.ParentFrameID, !1);
        if (d) {
          var D = d.moreflags;
          d.moreflags = Utils2.SetFlag(
            d.moreflags,
            ConstantData.ObjMoreFlags.SED_MF_Frame_Group,
            !1
          )
        } else a.ParentFrameID = - 1
      }
      GlobalData.optManager.AddtoDelete(o, !0, !0),
        GlobalData.optManager.DeleteSelectedObjectsCommon(o),
        GlobalData.optManager.SelectObjects([s], !1),
        GlobalData.optManager.SetTargetSelect(s, !0),
        d &&
        (d.moreflags = D),
        GlobalData.optManager.CenterOnPage(),
        GlobalData.optManager.ResetStateManager(),
        GlobalData.optManager.ClearFutureUndoStates()
    }
  },
  SDF.ReOrderPages = function (e, t) {
    var a = new SDJS.SocketClient.PageActionRequest;
    a.Action = SDJS.SocketClient.PageAction.ReOrderPages,
      !0 === SDUI.AppSettings.PagedSDR2 ? (
        a.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
        a.ReOrderedTabOrder2 = e
      ) : (
        a.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
        a.ReOrderedTabOrder = e
      ),
      SDF.QueuePageActionCallback(a, t),
      SDJS.SocketClient.SendPageActionRequest(a)
  },
  SDF.SetCurrentPageNumber = function (e) {
    if (!0 === SDUI.AppSettings.PagedSDR2) return SDF.SetCurrentPageID(e);
    var t = new SDJS.SocketClient.PageActionRequest;
    t.Action = SDJS.SocketClient.PageAction.SetCurrentPageNumber,
      t.CurrentPageNumber = SDUI.Commands.MainController.PagedSDRController.CurrentPageNumber,
      SDF.QueuePageActionCallback(t, e),
      SDJS.SocketClient.SendPageActionRequest(t)
  },
  SDF.SetCurrentPageID = function (e) {
    var t = new SDJS.SocketClient.PageActionRequest;
    t.Action = SDJS.SocketClient.PageAction.SetCurrentPageID,
      t.CurrentPageID = SDUI.Commands.MainController.PagedSDRController.CurrentPageID,
      SDF.QueuePageActionCallback(t, e),
      SDJS.SocketClient.SendPageActionRequest(t)
  },
  SDF.QueuePageActionCallback = function (e, t) {
    if (null != e && !0 !== SDUI.AppSettings.UseBackplane) {
      var a = new SDJS.SocketClient.RequestCallback;
      a.Request = e,
        a.Callback = t,
        a.RequestSentTime = (new Date).getTime(),
        SDF.PageActionRequestCallbacks.push(a)
    }
  },
  SDF.LogPageActionError = function (e) {
    try {
      if (null == e || !1 !== e.Success) return;
      var t = null,
        a = null;
      if (null != e.Request) {
        var r = SDF.GetPageActionName(e.Request.Action);
        null != r &&
          (t = 'SDSOCKET ERROR (' + r + ')'),
          a = e.ErrorMessage
      }
      null == t &&
        (t = 'SDSOCKET ERROR (UnknownCommand)'),
        null != a &&
        '' != a ||
        (a = 'Unknown error.'),
        SDUI.Utils.Logger.LogMessage(t, a)
    } catch (e) {
    }
  },
  SDF.LogPageActionSuccess = function (e) {
    try {
      if (null == e || !0 !== e.Success) return;
      if (null == e.Request) return;
      var t = SDF.GetPageActionName(e.Request.Action);
      if (null == t) return;
      var a = 'SDSOCKET SUCCESS (' + t + ')',
        r = null;
      switch (e.Request.Action) {
        case SDJS.SocketClient.PageAction.AddPage:
        case SDJS.SocketClient.PageAction.InsertExistingDocument:
          r = 'Page #' + e.OpenToPage + ' added and set as default page.';
          break;
        case SDJS.SocketClient.PageAction.CommitPage:
          r = 'Page #' + e.Request.CurrentPageNumber + ' committed to server.';
          break;
        case SDJS.SocketClient.PageAction.DeletePage:
          r = 'Page #' + e.Request.PageNumber + ' deleted.';
          break;
        case SDJS.SocketClient.PageAction.DuplicatePage:
          r = 'Page #' + e.Request.PageNumber + ' duplicated.';
          break;
        case SDJS.SocketClient.PageAction.InsertExistingDocument:
          r = 'Document ' + e.Request.DepositoryID + ' (CredentialID: ' + e.Request.CredentialID + ') added at index ' + e.Request.PageNumber + '.';
          break;
        case SDJS.SocketClient.PageAction.InsertTemplate:
          r = 'Template ' + e.Request.TemplateID + ' added as page # ' + e.Request.PageNumber + '.';
          break;
        case SDJS.SocketClient.PageAction.RenamePage:
          r = 'Page #' + e.Request.PageNumber + ' renamed to ' + e.Request.PageName;
          break;
        case SDJS.SocketClient.PageAction.ReOrderPages:
          r = 'Pages Re-Ordered.';
          break;
        case SDJS.SocketClient.PageAction.SetDefaultPage:
          r = 'Page #' + e.Request.PageNumber + ' set as default page';
          break;
        case SDJS.SocketClient.PageAction.SetCurrentPageNumber:
          r = 'Page #' + e.Request.CurrentPageNumber + ' set as current page.';
          break;
        case SDJS.SocketClient.PageAction.SetCurrentPageID:
          r = 'Page #' + e.Request.CurrentPageID + ' set as current page.';
          break;
        default:
          r = 'Unknown action.'
      }
      SDUI.Utils.Logger.LogMessage(a, r)
    } catch (e) {
    }
  },
  SDF.LogPageActionSuccess2 = function (e) {
    try {
      if (null == e || !0 !== e.Success) return;
      if (null == e.Request) return;
      var t = SDF.GetPageActionName(e.Request.Action);
      if (null == t) return;
      var a = 'SDSOCKET SUCCESS (' + t + ')',
        r = null;
      switch (e.Request.Action) {
        case SDJS.SocketClient.PageAction.AddPage:
        case SDJS.SocketClient.PageAction.InsertExistingDocument:
          r = 'Page #' + e.OpenToPageID + ' added and set as default page.';
          break;
        case SDJS.SocketClient.PageAction.CommitPage:
          r = 'Page #' + e.Request.CurrentPageID + ' committed to server.';
          break;
        case SDJS.SocketClient.PageAction.DeletePage:
          r = 'Page #' + e.Request.PageID + ' deleted.';
          break;
        case SDJS.SocketClient.PageAction.DuplicatePage:
          r = 'Page #' + e.Request.PageID + ' duplicated.';
          break;
        case SDJS.SocketClient.PageAction.InsertExistingDocument:
          r = 'Document ' + e.Request.DepositoryID + ' (CredentialID: ' + e.Request.CredentialID + ') added at index ' + e.Request.PageNumber + '.';
          break;
        case SDJS.SocketClient.PageAction.InsertTemplate:
          r = 'Template ' + e.Request.TemplateID + ' added as page # ' + e.Request.PageNumber + '.';
          break;
        case SDJS.SocketClient.PageAction.RenamePage:
          r = 'Page #' + e.Request.PageID + ' renamed to ' + e.Request.PageName;
          break;
        case SDJS.SocketClient.PageAction.ReOrderPages:
          r = 'Pages Re-Ordered.';
          break;
        case SDJS.SocketClient.PageAction.SetDefaultPage:
          r = 'Page #' + e.Request.PageID + ' set as default page';
          break;
        case SDJS.SocketClient.PageAction.SetCurrentPageNumber:
          r = 'Page #' + e.Request.CurrentPageNumber + ' set as current page.';
          break;
        case SDJS.SocketClient.PageAction.SetCurrentPageID:
          r = 'Page #' + e.Request.CurrentPageID + ' set as current page.';
          break;
        default:
          r = 'Unknown action.'
      }
      SDUI.Utils.Logger.LogMessage(a, r)
    } catch (e) {
    }
  },
  SDF.GetPageActionName = function (e) {
    for (var t in SDJS.SocketClient.PageAction) if (SDJS.SocketClient.PageAction[t] === e) return t;
    return null
  }

ListManager.LM.prototypeTimeline_AddNGDataSet = function (e) {
  if (
    e.datasetID < 0 &&
    (
      e.datasetType = ListManager.DataSetNameListIndexes.DATASET_NG_TIMELINE,
      e.datasetID = ListManager.SDData.AddDataSet(
        ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_NG_TIMELINE]
      ),
      e.datasetID = parseInt(e.datasetID)
    ),
    e.datasetID >= 0
  ) {
    e.datasetTableID = ListManager.SDData.AddTable(e.datasetID, ListManager.DataTableNames.NG_TIMELINE),
      e.datasetTableID = parseInt(e.datasetTableID),
      e.datasetTableID >= 0 &&
      function (e) {
        var t,
          a;
        for (a = ListManager.TimelineFieldNameList.length, t = 0; t < a; t++) if (
          !ListManager.SDData.AddColumn(e, ListManager.TimelineFieldNameList[t], !1)
        ) return - 1
      }(e.datasetTableID);
    var t = parseInt(
      ListManager.SDData.CreateTable(
        ListManager.DataSetNameList[ListManager.DataSetNameListIndexes.DATASET_NG_TIMELINE],
        ListManager.DataTableNames.NG_TIMELINE_EVENT
      )
    );
    t >= 0 &&
      (
        !function (e) {
          var t,
            a;
          for (
            a = ListManager.TimelineEventFieldNameList.length,
            t = 0;
            t < a;
            t++
          ) if (
              !ListManager.SDData.AddColumn(e, ListManager.TimelineEventFieldNameList[t], !1)
            ) return - 1;
          ListManager.SDData.SetIndexColumn(
            e,
            ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.STARTSECS],
            ListManager.SDData.Defines.SDDATA_INDEX_ASC
          )
        }(t),
        e.datasetElemID = function (t, a) {
          var r,
            i,
            n = ListManager.SDData.AddRow(t);
          if (n >= 0) {
            ListManager.SDData.UpdateValue(
              n,
              ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.BLOCKID],
              e.BlockID.toString()
            );
            var o = new Date,
              s = o.getMonth() + 1;
            r = o.getFullYear().toString() + '-' + s.toString() + '-01',
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START],
                r
              ),
              r = (i = Utils2.ParseShapeDataDate(r)).toString(),
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_START],
                r
              ),
              r = 365 .toString(),
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH],
                r
              ),
              r = (i += 365 * ListManager.TimeAmounts.OneDayNS).toString(),
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_END],
                r
              ),
              r = '31',
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS],
                r
              ),
              r = 'true',
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.AUTO],
                r
              ),
              r = 'above',
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_POSITION],
                r
              ),
              r = 'Bubble',
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_EVENT],
                r
              ),
              r = a.toString(),
              ListManager.SDData.UpdateValue(
                n,
                ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_TABLEID],
                r
              )
          }
          return n
        }(e.datasetTableID, t)
      )
  }
  return t
}

ListManager.LM.prototypeTimeline_GetUnits = function (e, t, a, r) {
  var i,
    n,
    o,
    s = 100,
    l = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.COLWIDTH]
    );
  if (l && l.length) {
    var S = parseInt(l);
    isNaN(S) ||
      (s = S)
  }
  if (!r) {
    l = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS]
    );
    var c = parseInt(l);
    if ((i = Math.ceil(t / c)) * s <= a) return c
  }
  if ((i = a / s) >= t) {
    var u = 24 * t;
    o = i >= u ? ListManager.TimelineUnits.Hour : i >= (u = 12 * t) ? ListManager.TimelineUnits.TwoHour : i >= (u = 6 * t) ? ListManager.TimelineUnits.FourHour : i >= (u = 4 * t) ? ListManager.TimelineUnits.SixHour : i >= (u = 2 * t) ? ListManager.TimelineUnits.TwelveHour : ListManager.TimelineUnits.Day
  } else o = i >= Math.ceil(t / ListManager.TimelineUnits.Week) ? ListManager.TimelineUnits.Week : i >= Math.ceil(t / ListManager.TimelineUnits.Month) ? ListManager.TimelineUnits.Month : i >= Math.ceil(t / ListManager.TimelineUnits.Quarter) ? ListManager.TimelineUnits.Quarter : i >= (n = Math.ceil(t / ListManager.TimelineUnits.Year)) ? ListManager.TimelineUnits.Year : i >= Math.ceil(n / 2) ? ListManager.TimelineUnits.TwoYear : i >= Math.ceil(n / 5) ? ListManager.TimelineUnits.FiveYear : i >= Math.ceil(n / 10) ? ListManager.TimelineUnits.TenYear : i >= Math.ceil(n / 50) ? ListManager.TimelineUnits.FiftyYear : ListManager.TimelineUnits.HundredYear;
  return o
}

ListManager.LM.prototypeTimeline_GetStartTime = function (e, t) {
  t = '';
  var a = e.getHours(),
    r = e.getMinutes(),
    i = e.getSeconds(),
    n = (60 * a * 60 + 60 * r + i) * ListManager.TimeAmounts.OneSecondNS;
  return n > 0 &&
    (t = a.toString() + ':' + r.toString() + ':' + i.toString()),
  {
    secs: n,
    s: t
  }
}

ListManager.LM.prototypeTimeline_UnitsToStartAndEnd = function (e, t, a, r) {
  var i,
    n,
    o,
    s = ListManager.TimeAmounts.OneDayNS,
    l = ListManager.TimeAmounts.OneHourNS,
    S = ListManager.TimelineUnits,
    c = Utils2.FiletimeToJSDate(a),
    u = c.getFullYear(),
    p = c.getMonth(),
    d = c.getDate(),
    D = c.getDay(),
    g = Math.floor(p / 3),
    h = c.getHours(),
    m = c.getMinutes(),
    C = c.getSeconds(),
    y = (60 * h * 60 + 60 * m + C) * ListManager.TimeAmounts.OneSecondNS;
  switch (t) {
    case S.TwelveHour:
    case S.SixHour:
    case S.FourHour:
    case S.TwoHour:
      var f = Math.floor(h / - t);
      a += f * - t * l - y;
      var L = h = (c = Utils2.FiletimeToJSDate(r)).getHours();
      m = c.getMinutes(),
        C = c.getSeconds(),
        (m > 0 || C > 0) &&
        h++,
        (f = h % - t) > 0 &&
        (h += - t - f),
        r += (h - L) * l - (y = (60 * m + C) * ListManager.TimeAmounts.OneSecondNS);
      break;
    case S.Hour:
      a += h * l - y,
        h = (c = Utils2.FiletimeToJSDate(r)).getHours(),
        y = (60 * (m = c.getMinutes()) + (C = c.getSeconds())) * ListManager.TimeAmounts.OneSecondNS,
        (m > 0 || C > 0) &&
        (r += l - y);
      break;
    case S.Day:
      break;
    case S.Week:
      a -= D * s,
        r += (6 - (D = (c = Utils2.FiletimeToJSDate(r)).getDay())) * s;
      break;
    case S.Month:
      a -= s * (d - 1),
        p = (c = Utils2.FiletimeToJSDate(r)).getMonth() + 1,
        u = c.getFullYear(),
        d = c.getDate(),
        r += s * (Utils2.GetMonthDays(p, u) - d);
      break;
    case S.Quarter:
      c = new Date(u, p - p % 3, 1, 0, 0, 0, 0),
        a = Utils2.JSDateToFiletime(c),
        u = (c = Utils2.FiletimeToJSDate(r)).getFullYear(),
        p = c.getMonth(),
        g = Math.floor(p / 3),
        c = new Date(u, 3 * g + 2, Utils2.GetMonthDays(3 * g + 3), 0, 0, 0, 0),
        r = Utils2.JSDateToFiletime(c);
      break;
    case S.Year:
      c = new Date(u, 0, 1, 0, 0, 0, 0),
        a = Utils2.JSDateToFiletime(c),
        c = Utils2.FiletimeToJSDate(r),
        c = new Date(c.getFullYear(), 11, 31, 0, 0, 0, 0),
        r = Utils2.JSDateToFiletime(c);
      break;
    case S.TwoYear:
      c = new Date(u, 0, 1, 0, 0, 0, 0),
        a = Utils2.JSDateToFiletime(c),
        ((n = (c = Utils2.FiletimeToJSDate(r)).getFullYear()) - u) % 2 &&
        n++,
        c = new Date(n, 11, 31, 0, 0, 0, 0),
        r = Utils2.JSDateToFiletime(c);
      break;
    case S.FiveYear:
    case S.TenYear:
    case S.FiftyYear:
    case S.HundredYear:
      o = u % t,
        c = new Date(u - o, 0, 1, 0, 0, 0, 0),
        a = Utils2.JSDateToFiletime(c),
        (o = (n = (c = Utils2.FiletimeToJSDate(r)).getFullYear()) % t) > 0 ? n += t - o - 1 : 0 === o &&
          (0 === c.getMonth() && 1 === c.getDate() || (n += t - 1)),
        c = new Date(n, 11, 31, 0, 0, 0, 0),
        r = Utils2.JSDateToFiletime(c)
  }
  i = ListManager.SDData.GetValue(
    e.datasetElemID,
    ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START]
  );
  Utils2.ParseShapeDataDate(i);
  if (
    (
      i = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME]
      )
    ) &&
    i.length > 0
  ) {
    y = Utils2.ParseShapeDataTime(i);
    isNaN(y) ||
      y
  }
  i = ListManager.SDData.GetValue(
    e.datasetElemID,
    ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH]
  );
  parseFloat(i);
  var I = (r - a) / s;
  p = (c = Utils2.FiletimeToJSDate(a)).getMonth() + 1,
    i = c.getFullYear().toString() + '-' + p.toString() + '-' + c.getDate(),
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START],
      i
    );
  var T = GlobalData.optManager.Timeline_GetStartTime(c, i);
  return ListManager.SDData.UpdateValue(
    e.datasetElemID,
    ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME],
    T.s
  ),
    i = I.toString(),
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH],
      i
    ),
    !0
}

ListManager.LM.prototypeTimeline_GetFirstLinkRow = function (e) {
  var t = e.rows.length;
  if (1 === t) return 0;
  var a = 1;
  if (t > 2) {
    var r = 0,
      i = ListManager.Table.CellTypes.SD_CT_TIMELINE_DATETITLE,
      n = ListManager.Table.CellTypes.SD_CT_TIMELINE_LABELROW;
    (o = e.cells[e.rows[0].start + e.rows[0].ncells - 1]).celltype === i &&
      (r = 1);
    for (var o = e.cells[e.rows[a + r].start]; o.celltype === n;) ++a < t &&
      (o = e.cells[e.rows[a + r].start])
  }
  return a
}

ListManager.LM.prototypeTimeline_SetScale = function (e, t, a) {
  var r,
    i,
    n = ListManager.TimeAmounts.OneDayNS,
    o = ListManager.TimeAmounts.OneHourNS,
    s = e.GetTable(!0),
    l = null,
    S = null,
    c = function (e, t) {
      var a;
      switch (e) {
        case VS.Timeline_RowIndexes.Year:
          a = t ? 1 : - 1;
          break;
        case VS.Timeline_RowIndexes.Date:
          a = t ? 2 : 1;
          break;
        case VS.Timeline_RowIndexes.Event:
          a = t ? 3 : 2;
          break;
        default:
          a = e
      }
      return a
    };
  if (
    e.objecttype === ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) {
    if (
      e.datasetID < 0 &&
      GlobalData.optManager.Timeline_AddNGDataSet(e),
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.AUTO]
      ),
      i = SDJS.API.IsTrue(r)
    ) {
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_START]
      );
      var u = parseInt(r);
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_END]
      );
      var p = parseInt(r);
      (d = (p - u) / n) <= 0 &&
        (d = 1)
    } else {
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START]
      );
      var d;
      u = Utils2.ParseShapeDataDate(r);
      (
        r = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME]
        )
      ) &&
        r.length &&
        (u += Utils2.ParseShapeDataTime(r)),
        r = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH]
        ),
        p = u,
        p += (d = parseFloat(r)) * n
    } (
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.ALTERNATECOLUMNS]
      )
    ) &&
      r.length &&
      (l = JSON.parse(r)),
      (
        r = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.ROWPROPERTIES]
        )
      ) &&
      r.length &&
      (S = JSON.parse(r));
    var D = e.trect.width,
      g = s.rows.length,
      h = s.cells[s.rows[g - 1].start];
    h.celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL &&
      (D -= h.frame.width);
    var m = this.Timeline_GetUnits(e, d, D, i);
    parseInt(
      ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS]
      )
    );
    (!t && i || !a && !i) &&
      GlobalData.optManager.Timeline_UnitsToStartAndEnd(e, m, u, p),
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH]
      ),
      d = parseFloat(r),
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START]
      ),
      u = Utils2.ParseShapeDataDate(r);
    (
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME]
      )
    ) &&
      r.length &&
      (u += Utils2.ParseShapeDataTime(r)),
      function (a, r, i) {
        var u = ListManager.TimelineUnits,
          p = a,
          d = 0;
        switch (a) {
          case u.TwoYear:
          case u.FiveYear:
          case u.TenYear:
          case u.FiftyYear:
          case u.HundredYear:
            p *= 366;
            break;
          case u.TwelveHour:
          case u.SixHour:
          case u.FourHour:
          case u.TwoHour:
          case u.Hour:
            p = 1 / 24 * - a,
              d = function (e, t) {
                var a = Utils2.FiletimeToJSDate(e),
                  r = (60 * a.getHours() * 60 + 60 * a.getMinutes() + a.getSeconds()) * ListManager.TimeAmounts.OneSecondNS / n;
                return Math.ceil(t + r)
              }(r, i);
            break;
          case u.Day:
            d = function (e, t) {
              var a = Utils2.FiletimeToJSDate(e),
                r = e + t * n - ListManager.TimeAmounts.OneSecondNS,
                i = Utils2.FiletimeToJSDate(r),
                o = 12 * a.getFullYear() + a.getMonth();
              return 12 * i.getFullYear() + i.getMonth() - o + 1
            }(r, i);
            break;
          case u.Year:
            d = 0;
            break;
          case u.Week:
            d = function (e, t) {
              var a = Utils2.FiletimeToJSDate(e),
                r = e + Math.floor(t / 7) * n * 7 - ListManager.TimeAmounts.OneSecondNS,
                i = Utils2.FiletimeToJSDate(r),
                o = a.getFullYear();
              return i.getFullYear() - o + 1
            }(r, i);
            break;
          default:
            d = function (e, t) {
              var a = Utils2.FiletimeToJSDate(e),
                r = e + t * n - ListManager.TimeAmounts.OneSecondNS,
                i = Utils2.FiletimeToJSDate(r),
                o = a.getFullYear();
              return i.getFullYear() - o + 1
            }(r, i)
        }
        var D = Math.round(i / p),
          g = 0;
        s.cells[0].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_DATETITLE &&
          (g = s.rows[1].start),
          s.cells[g].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL &&
          (D += 1);
        var h = function (e, t, a) {
          if (t.DataID >= 0) {
            var r = GlobalData.objectStore.GetObject(t.DataID);
            t.DataID = - 1,
              r &&
              r.Delete()
          }
          if (- 1 === t.DataID) t.DataID = GlobalData.optManager.CreateTextBlock(e, a),
            GlobalData.optManager.AddToDirtyList(e.BlockID);
          else {
            var i = GlobalData.optManager.GetObjectPtr(t.DataID, !0);
            GlobalData.optManager.SetTextBlock(i, a, null, t.just),
              GlobalData.optManager.AddToDirtyList(e.BlockID)
          }
        };
        if (s && (s.cols.length !== D || t)) {
          var m = GlobalData.optManager.Table_SetNumberofTitleColumns(e, s, d);
          GlobalData.optManager.Table_SetNumberofColumns(e, s, D, m),
            function (t, a, r, i) {
              var n = 0,
                s = 0,
                l = ListManager.TimelineUnits,
                S = ListManager.MonthAbrStrings,
                c = ListManager.QuarterStrings,
                u = ListManager.TimeAmounts.OneDayNS,
                p = ListManager.SDData.GetValue(
                  e.datasetElemID,
                  ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START]
                ),
                d = Utils2.ParseShapeDataDate(p),
                D = ListManager.SDData.GetValue(
                  e.datasetElemID,
                  ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME]
                );
              D &&
                D.length &&
                (d += Utils2.ParseShapeDataTime(D));
              var g,
                m,
                C = 0 == (
                  t.flags & ListManager.Table.TableFlags.SDT_TF_NGTIMELINE_USE_DEFAULT_JUST
                ),
                y = Utils2.FiletimeToJSDate(d),
                f = y.getFullYear(),
                L = y.getMonth(),
                I = y.getDate(),
                T = (y.getDay(), Math.floor(L / 3));
              t.cells[0].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL &&
                (n = 1),
                t.cells[n].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_DATETITLE &&
                n > 0 &&
                i++,
                g = t.rows[0].start + n + i;
              var b,
                M,
                P,
                R,
                A,
                _ = t.cells[g];
              switch (a) {
                case l.TwelveHour:
                case l.SixHour:
                case l.FourHour:
                case l.TwoHour:
                case l.Hour:
                  i > n &&
                    (
                      b = S[L] + ' ' + I.toString() + ' ' + f.toString(),
                      m = t.cells[n],
                      C &&
                      (m.just = ConstantData.TextAlign.CENTER),
                      t.select = n,
                      h(e, m, b),
                      s = 1 + n
                    );
                  var E = y.getHours();
                  for (
                    b = E.toString() + ':00',
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    t.select = g,
                    h(e, _, b),
                    _.starttime = d,
                    M = n + 1;
                    M < r;
                    M++
                  ) d += - a * o,
                    R = (y = Utils2.FiletimeToJSDate(d)).getMonth(),
                    b = '',
                    (A = y.getDate()) !== I ? (
                      E = 0,
                      b = S[R] + ' ' + A.toString(),
                      (P = y.getFullYear()) > f &&
                      (b = b + ' ' + P.toString()),
                      L = R,
                      I = A,
                      f = P,
                      s < i &&
                      (
                        m = t.cells[s],
                        C &&
                        (m.just = ConstantData.TextAlign.CENTER),
                        t.select = s,
                        h(e, m, b),
                        GlobalData.optManager.Table_AlignTitleCellWithColumn(t, s - 1, M - 1),
                        s++
                      ),
                      b = E.toString() + ':00'
                    ) : b = (E += - a).toString() + ':00',
                    _ = t.cells[M + i],
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    t.select = M + i,
                    h(e, _, b),
                    _.starttime = d;
                  t.cols = GlobalData.optManager.Table_BuildColumns(e, t, e.TextGrow),
                    GlobalData.optManager.Table_BuildFills(e, t, e.StyleRecord.Fill);
                  break;
                case l.Day:
                  for (
                    i > n &&
                    (
                      b = S[L] + ' ' + f.toString(),
                      m = t.cells[n],
                      C &&
                      (m.just = ConstantData.TextAlign.CENTER),
                      t.select = n,
                      h(e, m, b),
                      s = 1 + n
                    ),
                    b = ' ' + I.toString(),
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    t.select = g,
                    h(e, _, b),
                    _.starttime = d,
                    M = n + 1;
                    M < r;
                    M++
                  ) d += u,
                    P = (y = Utils2.FiletimeToJSDate(d)).getFullYear(),
                    R = y.getMonth(),
                    I = y.getDate(),
                    R > L ||
                      P > f ? (
                      b = S[R],
                      L = R,
                      P > f &&
                      (b = b + ' ' + (f = P).toString()),
                      s < i &&
                      (
                        m = t.cells[s],
                        C &&
                        (m.just = ConstantData.TextAlign.CENTER),
                        t.select = s,
                        h(e, m, b),
                        GlobalData.optManager.Table_AlignTitleCellWithColumn(t, s - 1, M - 1),
                        s++
                      ),
                      b = ' ' + I.toString()
                    ) : b = ' ' + I.toString(),
                    _ = t.cells[M + i],
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    t.select = M + i,
                    h(e, _, b),
                    _.starttime = d;
                  t.select = - 1,
                    t.cols = GlobalData.optManager.Table_BuildColumns(e, t, e.TextGrow),
                    GlobalData.optManager.Table_BuildFills(e, t, e.StyleRecord.Fill);
                  break;
                case l.Week:
                  for (
                    i > n &&
                    (
                      b = f.toString(),
                      m = t.cells[n],
                      C &&
                      (m.just = ConstantData.TextAlign.CENTER),
                      t.select = n,
                      h(e, m, b),
                      s = 1 + n
                    ),
                    f = (y = Utils2.FiletimeToJSDate(d)).getFullYear(),
                    L = y.getMonth(),
                    I = y.getDate(),
                    b = S[L] + ' ' + I.toString(),
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    t.select = g,
                    h(e, _, b),
                    _.starttime = d,
                    M = n + 1;
                    M < r;
                    M++
                  ) d += 7 * ListManager.TimeAmounts.OneDayNS,
                    P = (y = Utils2.FiletimeToJSDate(d)).getFullYear(),
                    L = y.getMonth(),
                    I = y.getDate(),
                    P > f ? (
                      f = P,
                      s < i &&
                      (
                        b = f.toString(),
                        m = t.cells[s],
                        C &&
                        (m.just = ConstantData.TextAlign.CENTER),
                        t.select = s,
                        h(e, m, b),
                        GlobalData.optManager.Table_AlignTitleCellWithColumn(t, s - 1, M - 1),
                        s++
                      ),
                      b = S[L] + ' ' + I.toString()
                    ) : b = S[L] + ' ' + I.toString(),
                    _ = t.cells[M + i],
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    t.select = M + i,
                    h(e, _, b),
                    _.starttime = d;
                  t.select = - 1,
                    t.cols = GlobalData.optManager.Table_BuildColumns(e, t, e.TextGrow),
                    GlobalData.optManager.Table_BuildFills(e, t, e.StyleRecord.Fill);
                  break;
                case l.Month:
                  for (
                    i > n &&
                    (
                      b = f.toString(),
                      m = t.cells[n],
                      C &&
                      (m.just = ConstantData.TextAlign.CENTER),
                      t.select = n,
                      h(e, m, b),
                      s = 1 + n
                    ),
                    b = S[L],
                    C &&
                    (_.just = ConstantData.TextAlign.CENTER),
                    t.select = g,
                    h(e, _, b),
                    _.starttime = d,
                    M = n + 1;
                    M < r;
                    M++
                  ) ++L >= 12 ? (
                    L = 0,
                    f++,
                    s < i &&
                    (
                      b = f.toString(),
                      m = t.cells[s],
                      C &&
                      (m.just = ConstantData.TextAlign.CENTER),
                      t.select = s,
                      h(e, m, b),
                      GlobalData.optManager.Table_AlignTitleCellWithColumn(t, s - 1, M - 1),
                      s++
                    ),
                    b = S[L]
                  ) : b = S[L],
                    y = new Date(f, L, 1, 0, 0, 0, 0),
                    (_ = t.cells[M + i + 0]).starttime = Utils2.JSDateToFiletime(y),
                    C &&
                    (_.just = ConstantData.TextAlign.CENTER),
                    t.select = M + i,
                    h(e, _, b);
                  t.select = - 1,
                    t.cols = GlobalData.optManager.Table_BuildColumns(e, t, e.TextGrow),
                    GlobalData.optManager.Table_BuildFills(e, t, e.StyleRecord.Fill);
                  break;
                case l.Quarter:
                  for (
                    i > n &&
                    (
                      b = f.toString(),
                      m = t.cells[n],
                      C &&
                      (m.just = ConstantData.TextAlign.CENTER),
                      t.select = n,
                      h(e, m, b),
                      s = 1 + n
                    ),
                    b = c[T],
                    C &&
                    (_.just = ConstantData.TextAlign.CENTER),
                    t.select = g,
                    h(e, _, b),
                    _.starttime = d,
                    M = n + 1;
                    M < r;
                    M++
                  ) ++T >= 4 ? (
                    T = 0,
                    f++,
                    s < i &&
                    (
                      b = f.toString(),
                      m = t.cells[s],
                      C &&
                      (m.just = ConstantData.TextAlign.CENTER),
                      t.select = s,
                      h(e, m, b),
                      GlobalData.optManager.Table_AlignTitleCellWithColumn(t, s - 1, M - 1),
                      s++
                    ),
                    b = c[T]
                  ) : b = c[T],
                    y = new Date(f, 3 * T, 1, 0, 0, 0, 0),
                    (_ = t.cells[M + i]).starttime = Utils2.JSDateToFiletime(y),
                    C &&
                    (_.just = ConstantData.TextAlign.CENTER),
                    t.select = M + i,
                    h(e, _, b);
                  t.select = - 1;
                  break;
                case l.Year:
                  for (
                    y = new Date(f, 0, 1, 0, 0, 0, 0),
                    d = Utils2.JSDateToFiletime(y),
                    _.starttime = d,
                    b = f.toString(),
                    C &&
                    (_.just = ConstantData.TextAlign.CENTER),
                    t.select = g,
                    h(e, _, b),
                    M = n + 1;
                    M < r;
                    M++
                  ) b = (++f).toString(),
                    y = new Date(f, 0, 1, 0, 0, 0, 0),
                    d = Utils2.JSDateToFiletime(y),
                    _ = t.cells[M],
                    C &&
                    (_.just = ConstantData.TextAlign.CENTER),
                    t.select = M,
                    h(e, _, b),
                    _.starttime = d;
                  t.select = - 1;
                  break;
                case l.TwoYear:
                case l.FiveYear:
                case l.TenYear:
                case l.FiftyYear:
                case l.HundredYear:
                  for (
                    y = new Date(f, 0, 1, 0, 0, 0, 0),
                    d = Utils2.JSDateToFiletime(y),
                    _.starttime = d,
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    b = f.toString(),
                    t.select = g,
                    h(e, _, b),
                    M = n + 1;
                    M < r;
                    M++
                  ) b = (f += a).toString(),
                    y = new Date(f, 0, 1, 0, 0, 0, 0),
                    d = Utils2.JSDateToFiletime(y),
                    _ = t.cells[M],
                    C &&
                    (_.just = ConstantData.TextAlign.LEFT),
                    t.select = M,
                    h(e, _, b),
                    _.starttime = d;
                  t.select = - 1
              }
            }(s, a, D, d),
            s.cols = GlobalData.optManager.Table_BuildColumns(e, s, e.TextGrow);
          var C,
            y = {},
            f = !1;
          if (l) {
            var L,
              I;
            for (I = l.length, L = 0; L < I; L++) l[L].StartRow = c(l[L].StartRow, d > 0),
              l[L].EndRow = c(l[L].EndRow, d > 0);
            y.DefaultToExistingTable = !0,
              y.AlternateColumns = l,
              f = !0
          }
          S &&
            (
              y.RowProperties = [],
              (
                C = GlobalData.optManager.VS_Table_GetRowProperties(S, VS.Timeline_RowIndexes.Year)
              ) >= 0 &&
              (S[C].Index = c(S[C].Index, d > 0), y.RowProperties.push(S[C]), f = !0),
              (
                C = GlobalData.optManager.VS_Table_GetRowProperties(S, VS.Timeline_RowIndexes.Date)
              ) >= 0 &&
              (S[C].Index = c(S[C].Index, d > 0), y.RowProperties.push(S[C]), f = !0)
            ),
            f &&
            SDJS.API.SetShapeTable(e, y, 0, null, !1)
        }
      }(m, u, d),
      r = m.toString(),
      ListManager.SDData.UpdateValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS],
        r
      );
    var C = {};
    GlobalData.optManager.Timeline_LinkEvents(e, i, C),
      GlobalData.optManager.Timeline_AvoidGridOverlap(e, C) &&
      (
        GlobalData.optManager.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        GlobalData.optManager.UpdateLinks()
      ),
      GlobalData.optManager.Timeline_AvoidRowOverlap(e, C) &&
      (
        GlobalData.optManager.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        GlobalData.optManager.UpdateLinks()
      )
  }
}

ListManager.LM.prototypeTimeline_AvoidRowOverlap = function (e, t) {
  var a,
    r,
    i,
    n,
    o = !1,
    s = function (e) {
      this.eventid = e;
      var t = GlobalData.optManager.GetObjectPtr(e, !1),
        a = GlobalData.optManager.GetObjectPtr(t.associd, !1);
      if (a) {
        var r = Utils1.DeepCopy(a.r);
        this.r = r
      }
      return this
    },
    l = function (t, a) {
      let r,
        i,
        n,
        o,
        s,
        l;
      let S,
        c,
        u = [],
        p = !1,
        d = 0,
        D = 0,
        g = t.length;
      for (let e = 0; e < g; e++) {
        let r = t[e],
          i = GlobalData.optManager.GetObjectPtr(r.eventid);
        if (75 !== i.r.height) {
          var h = GlobalData.optManager.svgObjectLayer.GetElementByID(i.BlockID);
          if (null == h) continue;
          a ? (
            S = i.EndPoint.x,
            c = i.EndPoint.y,
            i.AdjustLineEnd(
              h,
              i.StartPoint.x,
              i.StartPoint.y + 75,
              ConstantData.ActionTriggerType.LINEEND,
              !0
            ),
            D = i.StartPoint.x - S,
            d = i.StartPoint.y + 75 - c
          ) : (
            S = i.StartPoint.x,
            c = i.StartPoint.y,
            i.AdjustLineStart(
              h,
              i.EndPoint.x,
              i.EndPoint.y - 75,
              ConstantData.ActionTriggerType.LINESTART,
              !0
            ),
            D = i.EndPoint.x - S,
            d = i.EndPoint.y - 75 - c
          ),
            r.r.x = r.r.x + D,
            r.r.y = r.r.y + d,
            GlobalData.optManager.SetLinkFlag(r.eventid, ConstantData.LinkFlags.SED_L_MOVE)
        }
      }
      for (let S = 0; S < g; S++) {
        l = !1,
          n = t[S],
          o = n.r,
          s = u.length;
        for (let t = 0; t < s; t++) if (r = u[t], i = r.r, Utils2.IntersectRect(i, o)) {
          l = !0,
            p = !0,
            a ? (d = r.r.y - n.r.y + r.r.height + 15, n.r.y = n.r.y + d) : (d = n.r.y - r.r.y + n.r.height + 15, n.r.y = n.r.y - d),
            (e = GlobalData.optManager.GetObjectPtr(n.eventid, !0)) &&
            (
              e.SetSize(e.r.height + d, 0, ConstantData.ActionTriggerType.LINELENGTH),
              GlobalData.optManager.SetLinkFlag(n.eventid, ConstantData.LinkFlags.SED_L_MOVE)
            ),
            GlobalData.optManager.PutBehindObject(r.eventid, n.eventid),
            S--;
          break
        }
        !1 === l &&
          (u.push(n), t.splice(S, 1), S--, g--)
      }
      return !0
    };
  if (null != t.Above) {
    for (a = t.Above.length, n = [], r = 0; r < a; r++) i = new s(t.Above[r]),
      n.push(i);
    l(n, !1) &&
      (o = !0)
  }
  if (null != t.Below) {
    for (a = t.Below.length, n = [], r = 0; r < a; r++) i = new s(t.Below[r]),
      n.push(i);
    l(n, !0) &&
      (o = !0)
  }
  return o
}

ListManager.LM.prototypeTimeline_AvoidGridOverlap = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l,
    S = function (e) {
      this.eventid = e;
      var t = GlobalData.optManager.GetObjectPtr(e, !1),
        a = t,
        r = Utils1.DeepCopy(t.Frame);
      t.subtype === ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BAR &&
        Utils2.InflateRect(r, 0, t.StyleRecord.Line.Thickness / 2);
      var i = GlobalData.optManager.GetObjectPtr(t.associd, !1);
      i &&
        (Utils2.UnionRect(r, i.Frame, r), a = i);
      var n = GlobalData.optManager.svgObjectLayer.GetElementByID(a.BlockID);
      if (n) {
        var o = n.GetElementByID(ConstantData.SVGElementClass.TEXT);
        if (o) {
          var s = o.GetTextMinDimensions();
          if (
            t.subtype === ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BAR
          ) s.width > t.Frame.width ? a.TextAlign !== ConstantData.TextAlign.LEFT &&
            (
              a.TextAlign = ConstantData.TextAlign.LEFT,
              r.width = s.width,
              GlobalData.optManager.AddToDirtyList(t.BlockID)
            ) : a.TextAlign !== ConstantData.TextAlign.CENTER &&
          (
            a.TextAlign = ConstantData.TextAlign.CENTER,
            GlobalData.optManager.AddToDirtyList(t.BlockID)
          );
          else {
            var l = {
              x: a.Frame.x,
              width: s.width,
              y: a.Frame.y,
              height: s.height
            };
            s.width > a.Frame.width ? a.TextAlign !== ConstantData.TextAlign.LEFT &&
              (
                a.TextAlign = ConstantData.TextAlign.LEFT,
                Utils2.UnionRect(r, l, r),
                GlobalData.optManager.AddToDirtyList(t.BlockID)
              ) : s.width < a.Frame.width &&
              a.TextAlign !== ConstantData.TextAlign.CENTER &&
            (
              a.TextAlign = ConstantData.TextAlign.CENTER,
              GlobalData.optManager.AddToDirtyList(t.BlockID)
            )
          }
        }
      }
      return this.frame = r,
        this.subtype = t.subtype,
        this
    },
    c = function (e, t) {
      var a,
        r,
        i,
        n,
        o,
        s;
      for (s = e[t], newlist = [], a = s.length, r = 0; r < a; r++) for (o = s[r].frame, i = r + 1; i < a; i++) (n = s[i]).subtype !== ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_SWIMLANE &&
        Utils2.IntersectRect(n.frame, o) &&
        (newlist.push(n), s.splice(i, 1), i--, a--);
      newlist.length &&
        (e.push(newlist), c(e, t + 1))
    },
    u = function (e) {
      var t,
        a,
        r,
        i,
        n,
        o,
        s,
        l = [];
      for (t = e.length, a = 0; a < t; a++) {
        for (i = 0, o = (r = e[a]).length, s = 0; s < o; s++) (n = r[s]).frame.height > i &&
          n.subtype !== ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_SWIMLANE &&
          (i = n.frame.height);
        l.push(i)
      }
      return l
    },
    p = function (t) {
      var a = e.Frame.y + e.Frame.height,
        r = GlobalData.optManager.GetObjectPtr(t.eventid, !0),
        i = r.Frame.y + r.Frame.height;
      if (i !== a) {
        var n = a - i;
        r.Frame.height + n < 25 &&
          (n = 25 - r.Frame.height);
        var o = r.GetTable(!0);
        if (null != o) {
          var s = o.rows.length - 1;
          GlobalData.optManager.theActionTable = o;
          var l = GlobalData.optManager.Table_GrowRow(o, s, n, !1);
          GlobalData.optManager.theActionTable = null;
          var S = Utils1.DeepCopy(r.trect);
          S.height = l.y,
            r.TRectToFrame(S, !0)
        } else r.SetSize(null, r.Frame.height + n, - 1)
      }
    },
    d = function (t, a, r) {
      a.length;
      var i,
        n,
        o = 0,
        s = ConstantData.Defines.SED_CDim;
      for (n = r.length, i = 0; i < n; i++) o += r[i],
        i > 0 &&
        (o += 5);
      (o += 10) < ConstantData.Defines.TimelineRowHeight &&
        (o = ConstantData.Defines.TimelineRowHeight);
      var l,
        S,
        c,
        u = e.GetTable(!0),
        p = u.rows[t].frame.height;
      p !== o &&
        (
          l = o - p,
          GlobalData.optManager.theActionTable = u,
          S = GlobalData.optManager.Table_GrowRow(u, t, l, !1),
          GlobalData.optManager.theActionTable = null,
          (c = Utils1.DeepCopy(e)).trect.width = S.x,
          c.trect.height = S.y,
          c.TRectToFrame(c.trect, !0),
          e.SetSize(null, c.Frame.height, - 1)
        );
      var d,
        D,
        g,
        h,
        m,
        C,
        y = GlobalData.optManager.GetObjectPtr();
      for (n = a.length, h = 0, m = 0, i = 0; i < n; i++) for (
        h = (m += 5 + r[i] / 2) / o * s,
        C = (m - r[i] / 2) / o * s,
        m += r[i] / 2,
        g = (d = a[i]).length,
        D = 0;
        D < g;
        D++
      ) if (
          (y = GlobalData.optManager.GetObjectPtr(d[D].eventid, !0)) &&
          y.hooks.length
        ) switch (y.subtype) {
          case ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BLOCK:
          case ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_SWIMLANE:
            y.hooks[0].connect.y = C;
            break;
          default:
            y.hooks[0].connect.y = h
        }
    },
    D = !1,
    g = !1,
    h = [];
  if (null != t.Rows) {
    for (t.RowHts = [], a = t.Rows.length, r = 0; r < a; r++) if (null != (o = t.Rows[r])) {
      for (i = o.length, l = [], t.RowHts[r] = 0, n = 0; n < i; n++) s = new S(o[n]),
        l.push(s),
        s.subtype !== ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_SWIMLANE ? s.frame.height > t.RowHts[r] &&
          (
            t.RowHts[r] = s.frame.height,
            t.RowHts[r] > ConstantData.Defines.TimelineRowHeight &&
            (g = !0)
          ) : (GlobalData.optManager.PutBehindObject(e.BlockID, o[n]), h.push(s));
      var m = [];
      m.push(l),
        c(m, 0);
      var C = u(m);
      (m.length > 1 || !0 === g) &&
        (d(r, m, C), D = !0)
    }
    if ((i = h.length) > 0) for (n = 0; n < i; n++) p(h[n])
  }
  return D
}

ListManager.LM.prototypeTimeline_InitializeTemplate = function () {
  var e,
    t = gTimelineManager.AddShape(!0);
  return t &&
    (
      (e = GlobalData.optManager.GetObjectPtr(t, !0)).SetSize(800, null, 0),
      GlobalData.optManager.Table_Create(e.BlockID, 1, 4, e.TextGrow, !0),
      e.objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE,
      e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_OneClick, !1),
      GlobalData.optManager.Timeline_AddNGDataSet(e),
      GlobalData.optManager.Timeline_SetScale(e, !0, !0)
    ),
    t
}

ListManager.LM.prototypeTimeline_GetColumnWidth = function (e) {
  var t = e.GetTable(!1);
  if (null == t) return 100;
  var a = t.cells[0],
    r = GlobalData.optManager.CalcDefaultInitialTextStyle(a.Text),
    i = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
  i.SetText('DEC 31', r);
  var n = i.GetTextMinDimensions();
  return n.width = Math.ceil(n.width),
    this.svgDoc.RemoveElement(i),
    n.width + 20
}

ListManager.LM.prototypeTimeline_GetRowHeight = function (e, t) {
  var a = ConstantData.Defines.TimelineRowHeight;
  if (null != e.TextSize) {
    var r = GlobalData.optManager.CalcDefaultInitialTextStyle(t.StyleRecord.Text),
      i = this.svgDoc.CreateShape(ConstantData.CreateShapeType.TEXT);
    i.SetText('DEC 31', r);
    var n = i.GetTextMinDimensions();
    n.height = Math.ceil(n.height),
      this.svgDoc.RemoveElement(i),
      a = n.height + 10
  }
  return a
}

ListManager.LM.prototypeTimeline_InitializeShape = function (e, t, a) {
  var r = 400,
    i = ConstantData.Defines.TimelineRowHeight,
    n = '#D8D8D8',
    o = '#545454',
    s = '#C1E1E4',
    l = '#72ACD9',
    S = '#F8D585',
    c = '#E4B9B7',
    u = 'Arial',
    p = VS.Timeline_Arrangements,
    d = VS.Timeline_EventTypes,
    D = null,
    g = null,
    h = function (t, r, i, n) {
      if (r && r.length > i) {
        var o = a.Rows[i],
          s = {};
        o.Label &&
          (
            SDJS.API.TruncateText(n, o) &&
            (n.trect.width -= 20),
            t.select = t.rows[i + 1].start,
            s.x = n.trect.width,
            s.y = n.trect.height,
            n.DataID = GlobalData.optManager.CreateTextBlock(e, o.Label, s, !0),
            GlobalData.optManager.RenderDirtySVGObjects(),
            t.select = - 1
          )
      }
    },
    m = function (e, a, D) {
      var g,
        m,
        C,
        y,
        f,
        L,
        I,
        T,
        b = !0,
        M = !1;
      !0 === a.HideGridLabelColumn &&
        (b = !1);
      var P = function (e, t) {
        var r,
          n;
        e.flags = Utils2.SetFlag(
          e.flags,
          ListManager.Table.TableFlags.SDT_TF_NGTIMELINE_USE_DEFAULT_JUST,
          !0
        ),
          r = GlobalData.optManager.VS_Table_GetAlternateColProperties(a.AlternateColumns, VS.Timeline_RowIndexes.Year),
          n = GlobalData.optManager.VS_Table_GetRowProperties(a.RowProperties, VS.Timeline_RowIndexes.Year),
          r < 0 &&
          (
            n >= 0 ? null == a.RowProperties[n].FillColor &&
              (a.RowProperties[n].FillColor = '#FFFFFF') : (
              null == a.RowProperties &&
              (a.RowProperties = []),
              a.RowProperties.push({
                Index: VS.Timeline_RowIndexes.Year,
                FillColor: '#FFFFFF',
                TextBold: !0
              })
            )
          ),
          n < 0 ? (
            null == a.RowProperties &&
            (a.RowProperties = []),
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Year,
              TextAlignH: VS.TextAlignH.Left,
              TextAlignV: VS.TextAlignV.Bottom,
              LineThick: 2,
              Height: 2 * i
            })
          ) : (
            null == a.RowProperties[n].TextAlignH &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Year,
              TextAlignH: VS.TextAlignH.Left
            }),
            null == a.RowProperties[n].TextAlignV &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Year,
              TextAlignV: VS.TextAlignV.Bottom
            }),
            null == a.RowProperties[n].LineThick &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Year,
              LineThick: 2
            }),
            null == a.RowProperties[n].Height &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Year,
              Height: 2 * i
            })
          ),
          n = GlobalData.optManager.VS_Table_GetRowProperties(a.RowProperties, VS.Timeline_RowIndexes.Date),
          (
            r = GlobalData.optManager.VS_Table_GetAlternateColProperties(a.AlternateColumns, VS.Timeline_RowIndexes.Date)
          ) < 0 &&
          (n < 0 || null == a.RowProperties[n].FillColor) &&
          (
            null == a.AlternateColumns &&
            (a.AlternateColumns = []),
            a.AlternateColumns.push({
              Color1: '#9EC6E5',
              Color2: '#B5D7EC',
              StartRow: VS.Timeline_RowIndexes.Date,
              EndRow: VS.Timeline_RowIndexes.Date,
              UseFirstRow: !0
            })
          ),
          n < 0 ? (
            null == a.RowProperties &&
            (a.RowProperties = []),
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Date,
              TextAlignH: VS.TextAlignH.Left,
              TextAlignV: VS.TextAlignV.Bottom,
              LineThick: 10,
              LineColor: l,
              Height: 3 * i
            })
          ) : (
            null == a.RowProperties[n].TextAlignH &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Date,
              TextAlignH: VS.TextAlignH.Left
            }),
            null == a.RowProperties[n].TextAlignV &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Date,
              TextAlignV: VS.TextAlignV.Bottom
            }),
            null == a.RowProperties[n].LineThick &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Date,
              LineThick: 10
            }),
            null == a.RowProperties[n].Height &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Date,
              Height: 3 * i
            }),
            null == a.RowProperties[n].LineColor &&
            a.RowProperties.push({
              Index: VS.Timeline_RowIndexes.Date,
              LineColor: l
            })
          ),
          t ||
          (
            r = GlobalData.optManager.VS_Table_GetAlternateColProperties(a.AlternateColumns, VS.Timeline_RowIndexes.Event)
          ) < 0 &&
          (
            null == a.AlternateColumns &&
            (a.AlternateColumns = []),
            a.AlternateColumns.push({
              Color1: '#F0F7FB',
              Color2: '#FFFFFF',
              StartRow: VS.Timeline_RowIndexes.Event,
              UseFirstRow: !0
            })
          )
      },
        R = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !0);
      switch (
      e.StyleRecord.Line.Thickness = 0,
      e.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
      e.StyleRecord.Fill.Paint.Color = '#FFFFFF',
      D < 2 &&
      (D = 2),
      R.def.lf.fontName = u,
      null == t.TextSize &&
      (e.StyleRecord.Text.FontSize = 11),
      e.StyleRecord.Text.Paint.Color = o,
      a.Arrangement
      ) {
        case p.GridBlock1:
          e.TMargins.top = 4,
            e.TMargins.right = 4,
            e.TMargins.left = 10,
            e.TMargins.bottom = 10,
            e.StyleRecord.Line.Paint.Color = '#BFBFBF';
          break;
        case p.GridSwimlane1:
          e.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT,
            e.StyleRecord.Line.Paint.Color = n
      }
      g = (i = GlobalData.optManager.Timeline_GetRowHeight(t, e)) * D;
      var A = t.MinWidth;
      null == A ? A = 1200 : A < r &&
        (A = r),
        e.SetSize(A, 2 * g, 0);
      var _ = 11;
      if (b && _++, a.Rows && a.Rows.length) {
        T = a.Rows.length;
        var E = 0;
        for (y = 0; y < T; y++) if (a.Rows[y].RowType !== VS.Timeline_RowTypes.LabelRow) {
          E++;
          break
        }
        0 === E &&
          (D++, a.Rows.push({
          }))
      }
      GlobalData.optManager.Table_Create(e.BlockID, D, _, e.TextGrow, !0),
        e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_OneClick, !1);
      var w,
        F = e.GetTable(!1);
      switch (a.Arrangement) {
        case p.GridBlock1:
          P(F, !1),
            a.EventType = d.GridBlock;
          break;
        case p.GridSwimlane1:
          M = !0,
            P(F, !0),
            a.EventType = d.GridSwimlane;
          break;
        default:
          !function () {
            for (m = F.rows[0], f = m.ncells, L = 0; L < f; L++) (C = F.cells[m.start + L]).fill.Paint.Color = n,
              C.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
              C.Text.Paint.Color = o,
              null == t.TextSize &&
              (C.Text.FontSize = 11);
            for (
              void 0 === a.ColumnProperties &&
              (a.ColumnProperties = []),
              y = 0;
              y < 11;
              y++
            ) GlobalData.optManager.VS_Table_ColumnProperties(a.ColumnProperties, y + 1) < 0 &&
              (
                I = {
                  Index: y + 1,
                  LineThick: 1,
                  LineColor: n
                },
                a.ColumnProperties.push(I)
              );
            void 0 === a.RowProperties &&
              (a.RowProperties = []);
            var e = GlobalData.optManager.VS_Table_GetRowProperties(a.RowProperties, VS.Timeline_RowIndexes.Date);
            e < 0 ? (
              I = {
                Index: VS.Timeline_RowIndexes.Date,
                LineThick: 5,
                LineColor: '7F7F7F'
              },
              a.RowProperties.push(I)
            ) : a.RowProperties[e].TextAlignH &&
            (
              F.flags = Utils2.SetFlag(
                F.flags,
                ListManager.Table.TableFlags.SDT_TF_NGTIMELINE_USE_DEFAULT_JUST,
                !0
              )
            )
          }()
      }
      if (b) {
        for (y = 0; y < D; y++) m = F.rows[y],
          (C = F.cells[m.start]).celltype = ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL,
          C.flags = Utils2.SetFlag(C.flags, ListManager.Table.CellFlags.SDT_F_FixedWidth, !0);
        F.cols[0].fixed = !0
      }
      if (null != a.Rows) for (y = 1; y < D; y++) null != (w = a.Rows[y - 1]) &&
        w.RowType &&
        w.RowType === VS.Timeline_RowTypes.LabelRow &&
        (
          m = F.rows[y],
          (C = F.cells[m.start]).celltype = ListManager.Table.CellTypes.SD_CT_TIMELINE_LABELROW,
          C.flags = Utils2.SetFlag(
            C.flags,
            ListManager.Table.CellFlags.SDT_F_FixedHeight,
            !0
          ),
          C.just = ConstantData.TextAlign.LEFT,
          null == a.Join &&
          (a.Join = []),
          a.Join.push({
            Row: y + 1,
            Column: 1,
            N: m.ncells
          }),
          h(F, a.Rows, y - 1, F.cells[F.rows[y].start])
        );
      for (
        a.DefaultToExistingTable = !0,
        b &&
        (
          null == a.ColumnProperties &&
          (a.ColumnProperties = []),
          I = {
            Index: 1,
            Width: 200
          },
          a.ColumnProperties.push(I)
        ),
        y = 1;
        y < D;
        y++
      ) rp = GlobalData.optManager.VS_Table_GetRowProperties(a.RowProperties, y + 1),
        rp < 0 &&
        (I = {
          Index: y + 1,
          LineThick: 0
        }, a.RowProperties.push(I)),
        b &&
        h(F, a.Rows, y - 1, F.cells[F.rows[y].start]);
      if (M) for (y = 1; y < D; y++) for (m = F.rows[y], f = m.ncells, L = 0; L < f; L++) if (
        (C = F.cells[m.start + L]).celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_LABELROW
      ) {
        C.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID;
        break
      }
      !function () {
        if (void 0 === a.EventType) a.EventType = d.GridBar;
        else {
          if (a.EventType === d.GridBullet) return void 0 === a.EventType &&
            (a.EventType = d.GridBullet),
            void 0 === a.DefaultShape &&
            (a.DefaultShape = {}),
            void 0 === a.DefaultShape.LineThick &&
            (a.DefaultShape.LineThick = 1),
            void 0 === a.DefaultShape.LineColor &&
            (a.DefaultShape.LineColor = S, a.DefaultShape.FillColor = S),
            void 0 === a.DefaultShape.TextColor &&
            (a.DefaultShape.TextColor = o),
            void 0 === a.DefaultShape.TextFont &&
            (a.DefaultShape.TextFont = u),
            void 0 === a.DefaultShape.TextSize &&
            (a.DefaultShape.TextSize = 9),
            void (void 0 === a.Position && (a.Position = '0'));
          if (a.EventType === d.GridBlock) return void function () {
            if (
              void 0 === a.EventType &&
              (a.EventType = d.GridBlock),
              void 0 === a.DefaultShape &&
              (a.DefaultShape = {}),
              void 0 === a.DefaultShape.LineThick &&
              (a.DefaultShape.LineThick = 1),
              void 0 === a.DefaultShape.LineColor &&
              (
                a.DefaultShape.LineColor = '#0D71BE',
                a.DefaultShape.FillColor = '#FFFFFF'
              ),
              void 0 === a.DefaultShape.TextColor &&
              (a.DefaultShape.TextColor = '#FFFFFF'),
              void 0 === a.DefaultShape.TextFont &&
              (a.DefaultShape.TextFont = u),
              void 0 === a.DefaultShape.TextSize &&
              (a.DefaultShape.TextSize = 11),
              void 0 === a.DefaultShape.Table
            ) {
              var e = {};
              a.DefaultShape.Table = e,
                e.Rows = 2,
                e.Columns = 1,
                e.RowProperties = [],
                e.RowProperties.push({
                  Index: 1,
                  Height: i,
                  FillColor: '#0070C0'
                }),
                e.RowProperties.push({
                  Index: 2,
                  Height: 2 * i,
                  TextColor: o
                })
            }
            void 0 === a.Position &&
              (a.Position = '0')
          }();
          if (a.EventType === d.GridSwimlane) return void function () {
            if (
              void 0 === a.EventType &&
              (a.EventType = d.GridSwimlane),
              void 0 === a.DefaultShape &&
              (a.DefaultShape = {}),
              void 0 === a.DefaultShape.LineThick &&
              (a.DefaultShape.LineThick = 3),
              void 0 === a.DefaultShape.LineColor &&
              (a.DefaultShape.LineColor = c, a.DefaultShape.FillColor = n),
              void 0 === a.DefaultShape.TextColor &&
              (a.DefaultShape.TextColor = o),
              void 0 === a.DefaultShape.TextFont &&
              (a.DefaultShape.TextFont = u),
              void 0 === a.DefaultShape.TextSize &&
              (a.DefaultShape.TextSize = 11),
              void 0 === a.DefaultShape.Table
            ) {
              var e = {};
              a.DefaultShape.Table = e,
                e.Rows = 2,
                e.Columns = 1,
                e.RowHeight = i,
                e.Cell = [],
                e.Cell.push({
                  Row: 1,
                  Column: 1,
                  FillColor: c
                })
            } else void 0 === a.DefaultShape.Table.RowHeight &&
              (a.DefaultShape.Table.RowHeight = 2 * i);
            void 0 === a.Position &&
              (a.Position = '0')
          }()
        }
        void 0 === a.DefaultShape &&
          (a.DefaultShape = {}),
          void 0 === a.DefaultShape.LineThick &&
          (a.DefaultShape.LineThick = i),
          void 0 === a.DefaultShape.LineColor &&
          (a.DefaultShape.LineColor = s),
          void 0 === a.DefaultShape.TextColor &&
          (a.DefaultShape.TextColor = o),
          void 0 === a.DefaultShape.TextFont &&
          (a.DefaultShape.TextFont = u),
          void 0 === a.DefaultShape.TextSize &&
          (a.DefaultShape.TextSize = 9),
          void 0 === a.Position &&
          (a.Position = '0')
      }()
    };
  if (e.StyleRecord.Text.Face = 0, null != e.GetTable(!1)) return !1;
  var C = function (e) {
    var t = 1;
    return e.Rows &&
      e.Rows.length > 0 &&
      (t += e.Rows.length),
      t
  }(a);
  e.TextAlign = ConstantData.TextAlign.CENTER;
  var y = p.Row1;
  switch (void 0 !== a.Arrangement ? y = a.Arrangement : C > 1 && (y = p.Grid1), y) {
    case p.Grid1:
    case p.GridBlock1:
    case p.GridSwimlane1:
      1 === C &&
        (C = 2),
        m(e, a, C);
      break;
    default:
      !function (e, a, l) {
        var S,
          c,
          p,
          d,
          D,
          g,
          h;
        e.StyleRecord.Line.Thickness = 0,
          e.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT,
          l < 2 &&
          (l = 2),
          i = GlobalData.optManager.Timeline_GetRowHeight(t, e);
        var m = t.MinWidth;
        null == m ? m = 1200 : m < r &&
          (m = r),
          S = i * l,
          e.SetSize(m, S, 0),
          GlobalData.optManager.Table_Create(e.BlockID, l, 12, e.TextGrow, !0),
          e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_OneClick, !1),
          e.TextFlags = Utils2.SetFlag(e.TextFlags, ConstantData.TextFlags.SED_TF_None, !0),
          e.flags = Utils2.SetFlag(e.flags, ConstantData.ObjFlags.SEDO_UseConnect, !0);
        var C = e.GetTable(!1);
        for (d = 1; d < l; d++) for (D = (c = C.rows[d]).ncells, g = 0; g < D; g++) (p = C.cells[c.start + g]).fill.Paint.Color = n,
          p.fill.Paint.FillType = ConstantData.FillTypes.SDFILL_SOLID,
          p.Text.Paint.Color = o,
          null == t.TextSize &&
          (p.Text.FontSize = 9);
        for (D = (c = C.rows[0]).ncells, g = 0; g < D; g++) (p = C.cells[c.start + g]).Text.Paint.Color = o,
          null == t.TextSize &&
          (p.Text.FontSize = 9);
        for (
          void 0 === a.ColumnProperties &&
          (a.ColumnProperties = []),
          a.DefaultToExistingTable = !0,
          d = 0;
          d < 12;
          d++
        ) GlobalData.optManager.VS_Table_ColumnProperties(a.ColumnProperties, d + 1) < 0 &&
          (
            h = {
              Index: d + 1,
              LineThick: 5,
              LineColor: '#FFFFFF'
            },
            a.ColumnProperties.push(h)
          );
        void 0 === a.RowProperties &&
          (a.RowProperties = []);
        var y = GlobalData.optManager.VS_Table_GetRowProperties(a.RowProperties, VS.Timeline_RowIndexes.Date);
        y < 0 ? (h = {
          Index: 1,
          LineThick: 0
        }, a.RowProperties.push(h)) : a.RowProperties[y].Index = 1,
          void 0 === a.EventType &&
          (a.EventType = 'Bubble'),
          void 0 === a.DefaultShape &&
          (a.DefaultShape = {}),
          void 0 === a.Position &&
          (a.Position = 'Alternate-Center'),
          void 0 === a.DefaultShape.EndArrow &&
          (a.DefaultShape.EndArrow = 4),
          void 0 === a.DefaultShape.LineThick &&
          (a.DefaultShape.LineThick = 1),
          void 0 === a.DefaultShape.LineColor &&
          (a.DefaultShape.LineColor = o),
          void 0 === a.LineLength &&
          (a.LineLength = 75),
          void 0 === a.DefaultShape.ShapeType &&
          (a.DefaultShape.ShapeType = 'Circle'),
          void 0 === a.DefaultShape.BorderThick &&
          (a.DefaultShape.BorderThick = 0),
          void 0 === a.DefaultShape.FillColor &&
          (a.DefaultShape.FillColor = s),
          void 0 === a.DefaultShape.TextColor &&
          (a.DefaultShape.TextColor = o),
          void 0 === a.DefaultShape.TextFont &&
          (a.DefaultShape.TextFont = u),
          void 0 === a.DefaultShape.TextSize &&
          (a.DefaultShape.TextSize = 10)
      }(e, a, C)
  }
  e.objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE;
  var f = GlobalData.optManager.Timeline_AddNGDataSet(e);
  if (null != a.AlternateColumns) {
    var L = a.AlternateColumns;
    g = JSON.stringify(L);
    var I = GlobalData.optManager.VS_Table_GetAlternateColProperties(a.AlternateColumns, VS.Timeline_RowIndexes.Year);
    I >= 0 &&
      a.AlternateColumns.splice(I, 1);
    var T = GlobalData.optManager.VS_Table_GetAlternateColProperties(a.AlternateColumns, VS.Timeline_RowIndexes.Date);
    T >= 0 &&
      (
        a.AlternateColumns[T].StartRow === VS.Timeline_RowIndexes.Date &&
        (a.AlternateColumns[T].StartRow = 1),
        a.AlternateColumns[T].EndRow === VS.Timeline_RowIndexes.Date &&
        (a.AlternateColumns[T].EndRow = 1)
      );
    var b = GlobalData.optManager.VS_Table_GetAlternateColProperties(a.AlternateColumns, VS.Timeline_RowIndexes.Event);
    b >= 0 &&
      (
        a.AlternateColumns[b].StartRow === VS.Timeline_RowIndexes.Event &&
        (a.AlternateColumns[b].StartRow = 2),
        a.AlternateColumns[b].EndRow === VS.Timeline_RowIndexes.Event &&
        (a.AlternateColumns[b].EndRow = 2)
      )
  }
  if (null != a.RowProperties && a.RowProperties.length > 0) {
    var M = GlobalData.optManager.VS_Table_GetRowProperties(a.RowProperties, VS.Timeline_RowIndexes.Year),
      P = GlobalData.optManager.VS_Table_GetRowProperties(a.RowProperties, VS.Timeline_RowIndexes.Date);
    (P >= 0 || M >= 0) &&
      (
        D = JSON.stringify(a.RowProperties),
        P >= 0 &&
        (a.RowProperties[P].Index = 1),
        M >= 0 &&
        a.RowProperties.splice(M, 1)
      )
  }
  g &&
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.ALTERNATECOLUMNS],
      g
    ),
    D &&
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.ROWPROPERTIES],
      D
    );
  var R = GlobalData.optManager.Timeline_GetColumnWidth(e);
  (
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.COLWIDTH],
      R.toString()
    ),
    SDJS.API.SetShapeTable(e, a, 0, null),
    void 0 !== a.Position &&
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_POSITION],
      a.Position.toString()
    ),
    void 0 !== a.EventType &&
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_EVENT],
      a.EventType.toString()
    ),
    null == a.Auto ||
    SDJS.API.IsTrue(a.Auto) ||
    (
      ListManager.SDData.UpdateValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.AUTO],
        'false'
      ),
      null != a.Units &&
      ListManager.SDData.UpdateValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS],
        a.Units.toString()
      )
    ),
    void 0 !== a.Start
  ) &&
    (
      null != Utils2.ParseShapeDataDate(a.Start) &&
      ListManager.SDData.UpdateValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START],
        a.Start.toString()
      )
    );
  if (void 0 !== a.Length) {
    var A = parseFloat(a.Length);
    isNaN(A) ||
      ListManager.SDData.UpdateValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH],
        a.Length.toString()
      )
  }
  return void 0 !== a.DefaultShape &&
    ListManager.SDData.UpdateValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEFAULTSHAPE],
      JSON.stringify(a.DefaultShape)
    ),
    GlobalData.optManager.Timeline_SetScale(e, !0, !0),
    f
}

ListManager.LM.prototypeTimeline_CalculateRange = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l,
    S = void 0,
    c = void 0,
    u = ListManager.TimeAmounts.OneDayNS,
    p = ListManager.SDData.GetNumRows(t, '', '');
  ListManager.TimelineUnits;
  if (p > 0) for (i = 0; i < p; i++) (n = ListManager.SDData.GetRow(t, '', '', i)) &&
    (
      o = ListManager.SDData.GetValue(
        n,
        ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.STARTSECS]
      ),
      s = parseInt(o),
      o = ListManager.SDData.GetValue(
        n,
        ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.LENGTH]
      ),
      l = parseFloat(o),
      s &&
      ((void 0 === S || s < S) && (S = s), s += l * u, (void 0 === c || s > c) && (c = s))
    );
  if (void 0 !== S) {
    S === c &&
      (c += u - ListManager.TimeAmounts.OneSecondNS),
      o = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_START]
      );
    var d = parseInt(o);
    o = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_END]
    );
    var D = parseInt(o);
    d === S &&
      D === c &&
      (
        o = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS]
        )
      );
    var g = parseInt(o);
    o = S.toString(),
      ListManager.SDData.UpdateValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_START],
        o
      ),
      o = c.toString(),
      ListManager.SDData.UpdateValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_END],
        o
      );
    var h = e.GetTable(!1),
      m = Math.ceil((c - S) / u),
      C = h.rows.length,
      y = e.trect.width,
      f = h.cells[h.rows[C - 1].start];
    f.celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL &&
      (y -= f.frame.width);
    var L = this.Timeline_GetUnits(e, m, y, a);
    (GlobalData.optManager.Timeline_UnitsToStartAndEnd(e, L, S, c) || g !== L || r) &&
      GlobalData.optManager.Timeline_SetScale(e, !0, !1)
  }
}

ListManager.LM.prototypeTimeline_UpdateBlockIDEvent = function (e) {
  ListManager.SDData.UpdateValue(
    e.datasetElemID,
    ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.BLOCKID],
    e.BlockID.toString()
  )
}

ListManager.LM.prototypeTimeline_UpdateBlockID = function (e) {
  ListManager.SDData.UpdateValue(
    e.datasetElemID,
    ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.BLOCKID],
    e.BlockID.toString()
  )
}

ListManager.LM.prototypeVS_Table_GetRowProperties = function (e, t) {
  var a,
    r;
  if (null == e || null == e.length) return - 1;
  for (r = e.length, a = 0; a < r; a++) if (e[a].Index === t) return a;
  return - 1
}

ListManager.LM.prototypeVS_Table_ColumnProperties = function (e, t) {
  var a,
    r;
  if (null == e || null == e.length) return - 1;
  for (r = e.length, a = 0; a < r; a++) if (e[a].Index === t) return a;
  return - 1
}

ListManager.LM.prototypeVS_Table_GetAlternateColProperties = function (e, t) {
  var a,
    r,
    i;
  if (null == e || null == e.length) return - 1;
  for (Array.isArray(e) ? i = e : (i = []).push(e), r = i.length, a = 0; a < r; a++) if (i[a].StartRow === t || i[a].EndRow === t) return a;
  return - 1
}

ListManager.LM.prototypeTimeline_UpdateCellTimes = function (e) {
  var t,
    a = ListManager.TimeAmounts.OneDayNS,
    r = e.GetTable(!0),
    i = 0,
    n = 0,
    o = ListManager.TimelineUnits,
    s = (
      a = ListManager.TimeAmounts.OneDayNS,
      ListManager.TimeAmounts.OneHourNS
    ),
    l = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START]
    ),
    S = Utils2.ParseShapeDataDate(l),
    c = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME]
    );
  c &&
    c.length &&
    (S += Utils2.ParseShapeDataTime(c));
  var u = Utils2.FiletimeToJSDate(S),
    p = u.getFullYear(),
    d = u.getMonth(),
    D = (u.getDate(), u.getDay(), Math.floor(d / 3));
  r.cells[0].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL &&
    (i = 1),
    r.cells[i].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_DATETITLE &&
    (n = 1),
    t = r.rows[n];
  var g,
    h = r.cells[t.start + i],
    m = r.cols.length,
    C = parseInt(
      ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS]
      )
    );
  switch (C) {
    case o.TwelveHour:
    case o.SixHour:
    case o.FourHour:
    case o.TwoHour:
    case o.Hour:
      for (h.starttime = S, g = i + 1; g < m; g++) S += - C * s,
        (h = r.cells[t.start + g]).starttime = S;
      break;
    case o.Day:
      for (h.starttime = S, g = i + 1; g < m; g++) S += a,
        (h = r.cells[t.start + g]).starttime = S;
      break;
    case o.Week:
      for (h.starttime = S, g = i + 1; g < m; g++) S += 7 * ListManager.TimeAmounts.OneDayNS,
        (h = r.cells[t.start + g]).starttime = S;
      break;
    case o.Month:
      for (h.starttime = S, g = i + 1; g < m; g++) ++d >= 12 &&
        (d = 0, p++),
        u = new Date(p, d, 1, 0, 0, 0, 0),
        (h = r.cells[t.start + g]).starttime = Utils2.JSDateToFiletime(u);
      break;
    case o.Quarter:
      for (h.starttime = S, g = i + 1; g < m; g++) ++D >= 4 &&
        (D = 0, p++),
        u = new Date(p, 3 * D, 1, 0, 0, 0, 0),
        (h = r.cells[t.start + g]).starttime = Utils2.JSDateToFiletime(u);
      break;
    case o.Year:
      for (
        u = new Date(p, 0, 1, 0, 0, 0, 0),
        S = Utils2.JSDateToFiletime(u),
        h.starttime = S,
        g = i + 1;
        g < m;
        g++
      ) p++,
        u = new Date(p, 0, 1, 0, 0, 0, 0),
        S = Utils2.JSDateToFiletime(u),
        (h = r.cells[t.start + g]).starttime = S;
      break;
    case o.TwoYear:
    case o.FiveYear:
    case o.TenYear:
    case o.FiftyYear:
    case o.HundredYear:
      for (
        u = new Date(p, 0, 1, 0, 0, 0, 0),
        S = Utils2.JSDateToFiletime(u),
        h.starttime = S,
        g = i + 1;
        g < m;
        g++
      ) p += C,
        u = new Date(p, 0, 1, 0, 0, 0, 0),
        S = Utils2.JSDateToFiletime(u),
        (h = r.cells[t.start + g]).starttime = S
  }
}

ListManager.LM.prototypeTimeline_LinkEvents = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S,
    c,
    u,
    p,
    d,
    D,
    g,
    h,
    m,
    C,
    y,
    f,
    L,
    I,
    T = ConstantData.Defines.SED_CDim,
    b = {},
    M = (ListManager.TimelineUnits, ConstantData.HookPts),
    P = ListManager.TimeAmounts.OneDayNS,
    R = function (e, t) {
      e.flags = Utils2.SetFlag(e.flags, ConstantData.ObjFlags.SEDO_NotVisible, t),
        GlobalData.optManager.AddToDirtyList(e.BlockID),
        GlobalData.optManager.DirtyListReOrder = !0;
      var a = GlobalData.optManager.GetObjectPtr(e.associd, !0);
      a &&
        (
          a.flags = Utils2.SetFlag(a.flags, ConstantData.ObjFlags.SEDO_NotVisible, t),
          GlobalData.optManager.AddToDirtyList(a.BlockID)
        )
    },
    A = function (e, t) {
      if (
        e.DrawingObjectBaseClass !== ConstantData.DrawingObjectBaseClass.SHAPE
      ) {
        var a = e.associd,
          r = GlobalData.optManager.GetObjectPtr(a, !1);
        if (!(null == r || r.hooks.length < 1)) {
          var i = ConstantData.HookPts.SED_KCB,
            n = ConstantData.HookPts.SED_KCT,
            o = r.hooks[0].hookpt === i,
            s = 0;
          90 === Math.abs(r.RotationAngle) &&
            (
              s = 90,
              i = ConstantData.HookPts.SED_KCL,
              n = ConstantData.HookPts.SED_KCL,
              o = - 90 === r.RotationAngle
            ),
            o ? t &&
              (
                GlobalData.optManager.UpdateHook(a, 0, e.BlockID, n, {
                  x: T,
                  y: T
                }, null),
                90 === s &&
                (r.RotationAngle = 90),
                GlobalData.optManager.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
                e.EndArrowID &&
                (e.StartArrowID = e.EndArrowID, e.EndArrowID = 0)
              ) : t ||
            (
              GlobalData.optManager.UpdateHook(a, 0, e.BlockID, i, {
                x: 0,
                y: 0
              }, null),
              90 === s &&
              (r.RotationAngle = - 90),
              GlobalData.optManager.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
              e.StartArrowID &&
              (e.EndArrowID = e.StartArrowID, e.StartArrowID = 0)
            )
        }
      }
    },
    _ = function (e, t, i, n, o) {
      var l = ListManager.Table.CellTypes;
      '' == (
        D = ListManager.SDData.GetValue(
          n,
          ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.POSITION]
        )
      ) &&
        (D = o),
        r = ListManager.SDData.GetValue(
          n,
          ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.STARTSECS]
        ),
        s = parseInt(r);
      var S,
        c,
        p,
        h,
        m,
        C,
        L,
        I,
        b = 0,
        R = 0;
      i.cells[0].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_ROWLABEL &&
        (R = 1),
        i.cells[R].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_DATETITLE &&
        (b = 1);
      var _ = i.rows[b],
        E = GlobalData.optManager.Timeline_GetFirstLinkRow(i),
        w = function (e) {
          var a,
            r,
            n,
            o,
            s,
            l = i.rows[b];
          for (a = R; a < t - 1; a++) if (
            r = i.cells[l.start + a],
            n = i.cells[l.start + a + 1],
            e >= r.starttime &&
            e < n.starttime
          ) {
            s = a,
              o = n.starttime - r.starttime;
            break
          }
          return void 0 === s &&
            (s = t - 1, r = i.cells[l.start + l.ncells - 1], o = u + d - r.starttime),
          {
            cell: r,
            gap: o,
            linkindex: s
          }
        },
        F = w(s);
      S = F.cell,
        p = F.gap,
        c = F.linkindex;
      var v = (s - S.starttime) / p * T;
      y = S.frame.x + (s - S.starttime) / p * S.frame.width;
      var G = 0;
      switch (e.subtype) {
        case ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BULLET:
          if (
            G = T / 2,
            h = M.SED_KAT,
            g = parseInt(D),
            (isNaN(g) || g < E || g + b >= i.rows.length) &&
            (g = E),
            _ = i.rows[b + g],
            i.cells[_.start].celltype === l.SD_CT_TIMELINE_LABELROW &&
            (++g + b >= i.rows.length && (g = E), _ = i.rows[b + g]),
            c = _.start + c,
            S = i.cells[c],
            null == a.Rows &&
            (a.Rows = []),
            null == a.Rows[b + g] &&
            (a.Rows[b + g] = []),
            a.Rows[b + g].push(e.BlockID),
            L = GlobalData.optManager.GetObjectPtr(e.associd)
          ) {
            if (
              r = ListManager.SDData.GetValue(
                n,
                ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.LENGTH]
              ),
              m = parseFloat(r) * P,
              F = w(I = s + m),
              f = I - F.cell.starttime,
              C = F.cell.frame.x + f / F.gap * F.cell.frame.width - y,
              (C -= e.Frame.width / 2) < 1 &&
              (C = 1),
              Utils2.IsEqual(L.Frame.width, C)
            ) break;
            L.SetSize(C, null, 0),
              L.TextAlign = ConstantData.TextAlign.LEFT,
              C > 1 ? (
                L.EndArrowID = 1,
                C > 20 &&
                (L.TextAlign = ConstantData.TextAlign.TOPCENTER)
              ) : L.EndArrowID = 0
          }
          break;
        case ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BAR:
          if (
            G = T / 2,
            h = M.SED_KTL,
            g = parseInt(D),
            (isNaN(g) || g < E || g + b >= i.rows.length) &&
            (g = E),
            _ = i.rows[b + g],
            i.cells[_.start].celltype === l.SD_CT_TIMELINE_LABELROW &&
            (++g + b >= i.rows.length && (g = E), _ = i.rows[b + g]),
            c = _.start + c,
            S = i.cells[c],
            null == a.Rows &&
            (a.Rows = []),
            null == a.Rows[b + g] &&
            (a.Rows[b + g] = []),
            a.Rows[b + g].push(e.BlockID),
            L = e
          ) {
            if (
              r = ListManager.SDData.GetValue(
                n,
                ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.LENGTH]
              ),
              m = parseFloat(r) * P,
              F = w(I = s + m),
              f = I - F.cell.starttime,
              C = F.cell.frame.x + f / F.gap * F.cell.frame.width - y,
              (C -= e.Frame.height / 2) < 1 &&
              (C = 1),
              Utils2.IsEqual(L.Frame.width, C)
            ) break;
            L.SetSize(C, null, 0)
          }
          break;
        case ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BLOCK:
        case ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_SWIMLANE:
          if (
            h = M.SED_KCTL,
            G = 0,
            g = parseInt(D),
            (isNaN(g) || g < E || g + b >= i.rows.length) &&
            (g = E),
            _ = i.rows[b + g],
            i.cells[_.start].celltype === l.SD_CT_TIMELINE_LABELROW &&
            (
              ++g + b >= i.rows.length &&
              (g = E),
              _ = i.rows[b + g],
              i.cells[_.start].celltype === l.SD_CT_TIMELINE_LABELROW &&
              (g = E, _ = i.rows[b + g])
            ),
            c = _.start + c,
            S = i.cells[c],
            null == a.Rows &&
            (a.Rows = []),
            null == a.Rows[b + g] &&
            (a.Rows[b + g] = []),
            a.Rows[b + g].push(e.BlockID),
            L = e
          ) {
            if (
              r = ListManager.SDData.GetValue(
                n,
                ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.LENGTH]
              ),
              m = parseFloat(r) * P,
              F = w(I = s + m),
              f = I - F.cell.starttime,
              (C = F.cell.frame.x + f / F.gap * F.cell.frame.width - y) < 1 &&
              (C = 1),
              Utils2.IsEqual(L.Frame.width, C)
            ) break;
            null != (i = L.GetTable(!0)) &&
              GlobalData.optManager.Table_FixSizeDimToMin(i),
              L.SetSize(C, null, ConstantData.ActionTriggerType.LINELENGTH)
          }
          break;
        default:
          switch (
          G = 0,
          g = E,
          c = (_ = i.rows[b + g]).start + c,
          S = i.cells[c],
          D.toLowerCase()
          ) {
            case 'below-center':
              A(e, !0),
                G = T / 2,
                h = M.SED_KTL,
                null == a.Below &&
                (a.Below = []),
                a.Below.push(e.BlockID);
              break;
            case 'below':
              A(e, !0),
                G = T,
                h = M.SED_KTL,
                null == a.Below &&
                (a.Below = []),
                a.Below.push(e.BlockID);
              break;
            case 'above-center':
              A(e, !1),
                G = T / 2,
                h = M.SED_KTR,
                null == a.Above &&
                (a.Above = []),
                a.Above.push(e.BlockID);
              break;
            default:
              A(e, !1),
                G = 0,
                h = M.SED_KTR,
                null == a.Above &&
                (a.Above = []),
                a.Above.push(e.BlockID)
          }
      }
      return {
        x: v,
        y: G,
        cellid: S.uniqueid,
        hookpt: h
      }
    };
  if (
    e.datasetType === ListManager.DataSetNameListIndexes.DATASET_NG_TIMELINE &&
    e.datasetTableID >= 0
  ) {
    r = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_TABLEID]
    ),
      i = parseInt(r);
    var E = ListManager.SDData.GetNumRows(i, '', '');
    if (E > 0) {
      if (
        ListManager.SDData.SetIndexColumn(
          i,
          ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.STARTSECS],
          ListManager.SDData.Defines.SDDATA_INDEX_ASC
        ),
        r = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START]
        ),
        u = Utils2.ParseShapeDataDate(r),
        (
          r = ListManager.SDData.GetValue(
            e.datasetElemID,
            ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME]
          )
        ) &&
        r.length > 0
      ) {
        var w = Utils2.ParseShapeDataTime(r);
        isNaN(w) ||
          (u += w)
      }
      r = ListManager.SDData.GetValue(
        e.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH]
      ),
        d = parseFloat(r) * ListManager.TimeAmounts.OneDayNS,
        p = u + d,
        e.Frame.width / d;
      var F = 'alternate' === (
        h = ListManager.SDData.GetValue(
          e.datasetElemID,
          ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_POSITION]
        )
      ).toLowerCase(),
        v = 'alternate-center' === h.toLowerCase();
      if (m = h, null == (I = e.GetTable(!1))) return;
      I.rows.length;
      var G = 0;
      for (
        I.cells[I.rows[0].ncells - 1].celltype === ListManager.Table.CellTypes.SD_CT_TIMELINE_DATETITLE &&
        (G = 1),
        L = I.rows[G].ncells,
        n = 0;
        n < E;
        n++
      ) if (
          (o = ListManager.SDData.GetRow(i, '', '', n)) &&
          (
            r = ListManager.SDData.GetValue(
              o,
              ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.BLOCKID]
            ),
            l = parseInt(r),
            S = GlobalData.optManager.GetObjectPtr(l, !0)
          )
        ) {
          if (t) R(S, !1);
          else {
            if (
              r = ListManager.SDData.GetValue(
                o,
                ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.STARTSECS]
              ),
              (s = parseInt(r)) < u ||
              s > p
            ) {
              R(S, !0);
              continue
            }
            R(S, !1)
          }
          F &&
            (m = 'Above' === m ? 'Below' : 'Above'),
            v &&
            (
              m = 'above-center' === m.toLowerCase() ? 'below-center' : 'above-center'
            ),
            C = _(S, L, I, o, m),
            b.x = C.x,
            b.y = C.y,
            c = 0 === S.hooks.length ? - 1 : 0,
            GlobalData.optManager.UpdateHook(l, c, e.BlockID, C.hookpt, b, C.cellid)
        }
      GlobalData.optManager.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
        GlobalData.optManager.UpdateLinks()
    }
  }
}

ListManager.LM.prototypeTimeline_Format = function (e, t) {
  var a,
    r;
  if (null == GlobalData.optManager.GetObjectPtr(e.BlockID)) return !1;
  if (
    Collab.NoRedrawFromSameEditor = !1,
    e.datasetType === ListManager.DataSetNameListIndexes.DATASET_NG_TIMELINE &&
    e.datasetTableID >= 0
  ) {
    a = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.AUTO]
    );
    var i = SDJS.API.IsTrue(a);
    a = ListManager.SDData.GetValue(
      e.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_TABLEID]
    ),
      r = parseInt(a),
      i ? GlobalData.optManager.Timeline_CalculateRange(e, r, !0, t) : GlobalData.optManager.Timeline_SetScale(e, !0, !1)
  }
}

ListManager.LM.prototypeCreateEvent_Bubble = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l = {},
    S = 100,
    c = 100,
    u = 100,
    p = ConstantData.HookFlags,
    d = ConstantData.HookPts.SED_KCB,
    D = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  void 0 !== t.LineLength &&
    (u = t.LineLength),
    e &&
    void 0 !== e.LineLength &&
    (isNaN(e.LineLength) || (u = e.LineLength));
  var g = Utils1.DeepCopy(D.def.style);
  if (
    g.Line.Thickness = 2,
    void 0 !== t.EventType &&
    t.EventType.indexOf() &&
    t.EventType.indexOf('Bar') > 0 &&
    void 0 !== t.DefaultShape &&
    void 0 !== t.DefaultShape.LineThick &&
    e.LineThick === t.DefaultShape.LineThick &&
    delete e.LineThick,
    a = 'TextOnly' === e.ShapeType ||
    'TextOnly' === e.EventType,
    r = 'Bubble-Vertical' === e.EventType,
    l = {
      Frame: {
        x: S,
        y: c,
        width: 0,
        height: u
      },
      StartPoint: {
        x: S,
        y: c
      },
      EndPoint: {
        x: S,
        y: c + u
      },
      TextFlags: ConstantData.TextFlags.SED_TF_None,
      ArrowSizeIndex: 1,
      EndArrowID: 4,
      StyleRecord: g
    },
    i = new ListManager.Line(l),
    n = this.AddNewObject(i, !1, !1),
    GlobalData.optManager.AddToDirtyList(n),
    a
  ) {
    var h = Resources.FindStyle(ConstantData.Defines.TextBlockStyle);
    null == (
      l = {
        StyleRecord: $.extend(!0, {
        }, h),
        Frame: {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        },
        TMargins: {
          top: 0,
          left: 0,
          bottom: 0,
          right: 0
        },
        TextGrow: ConstantData.TextGrowBehavior.HORIZONTAL,
        TextAlign: ConstantData.TextAlign.LEFT,
        flags: ConstantData.ObjFlags.SEDO_TextOnly,
        hookflags: ConstantData.HookFlags.SED_LC_AttachToLine | ConstantData.HookFlags.SED_LC_Shape,
        RotationAngle: - 90
      }
    ).StyleRecord.Line &&
      (l.StyleRecord.Line = Utils1.DeepCopy(h.Border)),
      l.StyleRecord.Line.Thickness = 0,
      s = new ListManager.Rect(l),
      o = this.AddNewObject(s, !1, !1),
      GlobalData.optManager.AddToDirtyList(o),
      d = ConstantData.HookPts.SED_KCL,
      e.ShapeType &&
      delete e.ShapeType,
      e.BorderThick = 0,
      e.FillColor &&
      delete e.FillColor
  } else {
    var m = Utils1.DeepCopy(D.def.style);
    m.Line.Thickness = 1,
      l = {
        Frame: {
          x: S,
          y: c,
          width: 150,
          height: 75
        },
        hookflags: p.SED_LC_AttachToLine | p.SED_LC_Shape,
        moreflags: ConstantData.ObjMoreFlags.SED_MF_FixedRR,
        shapeparam: 0.2,
        StyleRecord: m
      },
      r &&
      (l.RotationAngle = - 90, d = ConstantData.HookPts.SED_KCL),
      s = new ListManager.RRect(l),
      o = this.AddNewObject(s, !1, !1),
      GlobalData.optManager.AddToDirtyList(o)
  }
  return GlobalData.optManager.UpdateHook(o, - 1, n, d, {
    x: 0,
    y: 0
  }, null),
    i = GlobalData.optManager.GetObjectPtr(n, !0),
    (s = GlobalData.optManager.GetObjectPtr(o, !0)).objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL,
    GlobalData.optManager.SetLinkFlag(n, ConstantData.LinkFlags.SED_L_MOVE),
    i.objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_EVENT,
    i.subtype = ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_STRAIGHT,
    r &&
    (
      i.subtype = ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_VERTICAL
    ),
    a &&
    (
      i.subtype = ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_TEXTONLY
    ),
    i.flags = Utils2.SetFlag(i.flags, ConstantData.ObjFlags.SEDO_UseConnect, !0),
    s.flags = Utils2.SetFlag(s.flags, ConstantData.ObjFlags.SEDO_UseConnect, !0),
    s.flags = Utils2.SetFlag(s.flags, ConstantData.ObjFlags.SEDO_Assoc, !0),
    s.associd = n,
    i.associd = o,
  {
    OtherID: o,
    EventID: n
  }
}

ListManager.LM.prototypeCreateEvent_Bullet = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l = {},
    S = 100,
    c = 100,
    u = (ConstantData.HookFlags, ConstantData.Defines.SED_CDim),
    p = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
  r = 0.5 * e.rows[0].frame.height / 2,
    void 0 !== a.EventType &&
    a.EventType.indexOf() &&
    a.EventType.indexOf('Bar') > 0 &&
    void 0 !== a.DefaultShape &&
    void 0 !== a.DefaultShape.LineThick &&
    t.LineThick === a.DefaultShape.LineThick &&
    delete t.LineThick;
  var d = Utils1.DeepCopy(p.def.style);
  d.Line.Thickness = 2,
    l = {
      Frame: {
        x: S,
        y: c,
        width: 10,
        height: 0
      },
      StartPoint: {
        x: S,
        y: c
      },
      EndPoint: {
        x: 110,
        y: c
      },
      TextAlign: ConstantData.TextAlign.CENTER,
      ArrowSizeIndex: 1,
      StyleRecord: d
    },
    i = new ListManager.Line(l),
    n = this.AddNewObject(i, !1, !1),
    GlobalData.optManager.AddToDirtyList(n);
  var D = Utils1.DeepCopy(p.def.style);
  return D.Line.Thickness = 1,
    l = {
      Frame: {
        x: S,
        y: c,
        width: 2 * r,
        height: 2 * r
      },
      TextFlags: ConstantData.TextFlags.SED_TF_None,
      StyleRecord: D
    },
    s = new ListManager.Oval(l),
    o = this.AddNewObject(s, !1, !1),
    GlobalData.optManager.AddToDirtyList(o),
    GlobalData.optManager.UpdateHook(n, - 1, o, ConstantData.HookPts.SED_KTL, {
      x: u,
      y: u / 2
    }, null),
    (i = GlobalData.optManager.GetObjectPtr(n, !0)).TextAlign = ConstantData.TextAlign.CENTER,
    i.objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL,
    (s = GlobalData.optManager.GetObjectPtr(o, !0)).objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_EVENT,
    s.subtype = ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BULLET,
    GlobalData.optManager.SetLinkFlag(o, ConstantData.LinkFlags.SED_L_MOVE),
    i.flags = Utils2.SetFlag(s.flags, ConstantData.ObjFlags.SEDO_Assoc, !0),
    s.associd = n,
    i.associd = o,
  {
    OtherID: n,
    EventID: o
  }
}

ListManager.LM.prototypeCreateEvent_Bar = function (e, t, a) {
  var r,
    i = GlobalData.optManager.GanttCreateBar({
      x: 0,
      y: 0
    }, !0),
    n = GlobalData.optManager.GetObjectPtr(i, !0);
  return r = 0.5 * e.rows[0].frame.height,
    n.objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_EVENT,
    n.subtype = ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BAR,
    n.TextFlags = 0,
    n.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT,
    t.FillColor = 'None',
    delete t.EndArrow,
    void 0 !== a.EventType &&
    a.EventType.indexOf() &&
    a.EventType.indexOf('Bar') < 0 &&
    void 0 !== a.DefaultShape &&
    (
      void 0 !== a.DefaultShape.LineThick &&
      t.LineThick === a.DefaultShape.LineThick &&
      (t.LineThick = r),
      void 0 !== a.DefaultShape.LineColor &&
      t.LineColor === a.DefaultShape.LineColor &&
      (t.LineColor = '#C1E1E4')
    ),
  {
    OtherID: - 1,
    EventID: i
  }
}

ListManager.LM.prototypeCreateEvent_Block = function (e, t, a) {
  ConstantData.HookFlags,
    ConstantData.Defines.SED_CDim;
  var r,
    i,
    n,
    o = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1),
    s = e.rows[0].frame.height,
    l = 2 * s;
  void 0 !== a.EventType &&
    a.EventType.indexOf() &&
    a.EventType.indexOf('Bar') > 0 &&
    void 0 !== a.DefaultShape &&
    void 0 !== a.DefaultShape.LineThick &&
    t.LineThick === a.DefaultShape.LineThick &&
    delete t.LineThick;
  var S = Utils1.DeepCopy(o.def.style);
  if (
    S.Line.Thickness = 1,
    r = {
      Frame: {
        x: 100,
        y: 100,
        width: l,
        height: s
      },
      TextFlags: ConstantData.TextFlags.SED_TF_None,
      StyleRecord: S
    },
    n = new ListManager.Rect(r),
    i = this.AddNewObject(n, !1, !1),
    GlobalData.optManager.AddToDirtyList(i),
    (n = GlobalData.optManager.GetObjectPtr(i, !0)).objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_EVENT,
    n.subtype = ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_BLOCK,
    GlobalData.optManager.SetLinkFlag(i, ConstantData.LinkFlags.SED_L_MOVE),
    a.EventType !== VS.Timeline_EventTypes.GridBlock
  ) {
    if (null == t.Table || null == t.Table.Rows) {
      var c = GlobalData.optManager.Timeline_GetRowHeight(t, n);
      null == t.Table &&
        (t.Table = {
          Rows: 2,
          Columns: 1
        }),
        null == t.Table.Rows &&
        (t.Table.Rows = 2, t.Table.Columns = 1),
        null == t.Table.RowProperties &&
        (t.Table.RowProperties = []),
        t.Table.RowProperties.unshift({
          Index: 1,
          Height: c
        }),
        t.Table.RowProperties.unshift({
          Index: 1,
          Height: 2 * c
        }),
        null == t.Table.Cell &&
        (t.Table.Cell = []),
        t.Table.Cell.unshift({
          Row: 1,
          Column: 1,
          FillColor: '#0070C0',
          TextColor: '#FFFFFF'
        }),
        t.Table.Cell.unshift({
          Row: 2,
          Column: 1,
          FillColor: '#FFFFFF',
          TextColor: '#545454'
        })
    }
    null == t.LineColor &&
      (t.LineColor = '#0D71BE'),
      null == t.LineThick &&
      (t.LineThick = 1)
  }
  return {
    OtherID: - 1,
    EventID: i
  }
},



  ListManager.LM.prototype.CreateEvent_SwimLane = function (e, t, a) {
    ConstantData.HookFlags,
      ConstantData.Defines.SED_CDim;
    var r,
      i,
      n,
      o = GlobalData.optManager.GetObjectPtr(GlobalData.optManager.theSEDSessionBlockID, !1);
    e.rows[0].frame.height,
      void 0 !== a.EventType &&
      a.EventType.indexOf() &&
      a.EventType.indexOf('Bar') > 0 &&
      void 0 !== a.DefaultShape &&
      void 0 !== a.DefaultShape.LineThick &&
      t.LineThick === a.DefaultShape.LineThick &&
      delete t.LineThick;
    var s = Utils1.DeepCopy(o.def.style);
    return s.Line.Thickness = 1,
      s.Fill.Paint.Color = '#D8D8D8',
      r = {
        Frame: {
          x: 100,
          y: 100,
          width: 100,
          height: 100
        },
        TextFlags: ConstantData.TextFlags.SED_TF_None,
        StyleRecord: s
      },
      n = new ListManager.Rect(r),
      i = this.AddNewObject(n, !1, !1),
      GlobalData.optManager.AddToDirtyList(i),
      (n = GlobalData.optManager.GetObjectPtr(i, !0)).objecttype = ConstantData.ObjectTypes.SD_OBJT_NG_EVENT,
      n.subtype = ConstantData.ObjectSubTypes.SD_SUBT_NGEVENT_SWIMLANE,
      GlobalData.optManager.SetLinkFlag(i, ConstantData.LinkFlags.SED_L_MOVE),
      null == t.Table &&
      (
        t.Table = {
          NRows: 2,
          NColumns: 0,
          RowProperties: [
            {
              Index: 1,
              Height: 25
            }
          ],
          Cell: [
            {
              Row: 1,
              Column: 1,
              FillColor: '#F8D585'
            }
          ]
        }
      ),
    {
      OtherID: - 1,
      EventID: i
    }
  }

ListManager.LM.prototypeTimelineAddEvent = function (e, t) {
  let a = GlobalData.optManager.GetTimeline();
  if (isNaN(parseInt(a))) return Utils2.Alert(Resources.Strings.SelectTimeline);
  let r = GlobalData.optManager.GetObjectPtr(a, !0);
  if (
    null == r ||
    r.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return Utils2.Alert(Resources.Strings.SelectTimeline);
  if (!(r.datasetTableID < 0)) {
    if (null == t && GlobalData.optManager.CloseEdit(), Collab.AllowMessage()) {
      Collab.BeginSecondaryEdit();
      var i = {
        newEvent: e
      }
    }
    GlobalData.optManager.TimelineCreateEvent(e, null, r),
      GlobalData.optManager.Timeline_Format(r, !0),
      Collab.AllowMessage() &&
      Collab.BuildMessage(ConstantData.CollabMessages.TimelineAddEvent, i, !0),
      GlobalData.optManager.CompleteOperation()
  }
}

ListManager.LM.prototypeTimelineCreateEvent = function (e, t, a) {
  Timeline = {
    LineLength: 75
  };
  var r,
    i = ListManager.NGTimelineEventFields;
  let n;
  if (
    !(
      a.datasetType === ListManager.DataSetNameListIndexes.DATASET_NG_TIMELINE &&
      a.datasetTableID >= 0
    )
  ) return;
  {
    let e = ListManager.SDData.GetValue(
      a.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_TABLEID]
    );
    n = parseInt(e)
  }
  let o = ListManager.SDData.GetValue(
    a.datasetElemID,
    ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEFAULTSHAPE]
  );
  o = JSON.parse(o),
    Timeline.DefaultShape = o,
    null != e.Note &&
    (r = e.Note),
    theEvent = Utils1.DeepCopy(Timeline.DefaultShape),
    e = SDJS.API.MergeShapeDefaults(e, theEvent),
    null != r &&
    (e.Note = r),
    null == e.EventType &&
    (
      e.EventType = ListManager.SDData.GetValue(
        a.datasetElemID,
        ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_EVENT]
      )
    );
  let s = GlobalData.optManager.CreateEvent_Bubble(e, Timeline);
  return lobj = GlobalData.optManager.GetObjectPtr(s.EventID, !0),
    sobj = GlobalData.optManager.GetObjectPtr(s.OtherID, !0),
    eobj = lobj,
    SDJS.API.SetShapeSize(sobj, e),
    SDJS.API.SetShapeProperties(e, sobj.BlockID, null),
    delete e.Label,
    delete e.Table,
    delete e.Hyperlink,
    delete e.ExpandedView,
    delete e.Note,
    SDJS.API.SetShapeProperties(e, lobj.BlockID, null),
    eobj.datasetID = a.datasetID,
    eobj.datasetType = a.datasetType,
    eobj.datasetTableID = n,
    eobj.datasetElemID = null == t ? function (e, t, a) {
      var r,
        n = 0,
        o = '';
      r = '2018-01-01',
        n = Utils2.ParseShapeDataDate(r),
        duration = 0,
        void 0 !== e.Position &&
        (o = e.Position),
        e.Start &&
        e.Start.length &&
        (
          null != (n = Utils2.ParseShapeDataDate(e.Start)) &&
          (r = e.Start),
          n += ListManager.TimeAmounts.OneSecondNS
        ),
        e.StartTime &&
        e.StartTime.length &&
        (
          starttime = Utils2.ParseShapeDataTime(e.StartTime),
          null != starttime &&
          (n += starttime)
        );
      var s = ListManager.SDData.AddRow(a);
      return s > 0 ? (
        ListManager.SDData.UpdateValue(s, ListManager.TimelineEventFieldNameList[i.START], r),
        ListManager.SDData.UpdateValue(
          s,
          ListManager.TimelineEventFieldNameList[i.STARTSECS],
          n.toString()
        ),
        ListManager.SDData.UpdateValue(
          s,
          ListManager.TimelineEventFieldNameList[i.POSITION],
          o.toString()
        ),
        ListManager.SDData.UpdateValue(
          s,
          ListManager.TimelineEventFieldNameList[i.LENGTH],
          duration.toString()
        ),
        ListManager.SDData.UpdateValue(
          s,
          ListManager.TimelineEventFieldNameList[i.BLOCKID],
          t.toString()
        ),
        s
      ) : - 1
    }(e, s.EventID, n) : t,
    s.EventID
}

ListManager.LM.prototypeTimelineRemoveEvent = function (e) {
  let t = - 1,
    a = [],
    r = GlobalData.optManager.GetTimeline();
  if (isNaN(r)) return Utils2.Alert(Resources.Strings.SelectTimeline);
  null == e &&
    GlobalData.optManager.CloseEdit();
  let i = GlobalData.optManager.GetObjectPtr(r, !0);
  if (
    null == i ||
    i.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return Utils2.Alert(Resources.Strings.SelectTimeline);
  if (!(i.datasetTableID < 0)) {
    if (Collab.AllowMessage()) {
      Collab.BeginSecondaryEdit();
      var n = {}
    }
    selectionManager = Business.GetSelectionBusinessManager(r, !1),
      selectedList = Business.GetSelectedObjectsInChart(selectionManager, r);
    for (let e = 0; e < selectedList.length; e++) {
      let r = GlobalData.optManager.GetObjectPtr(selectedList[e]);
      if (
        !(
          r.objecttype === ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE &&
          selectedList.length > 1
        )
      ) {
        switch (r.objecttype) {
          case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL:
            let e = GlobalData.optManager.GetObjectPtr(r.associd, !0);
            a.push(e.BlockID),
              a.push(r.BlockID),
              t = e.datasetElemID;
            break;
          case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT:
            let i = GlobalData.optManager.GetObjectPtr(r.associd, !0);
            a.push(i.BlockID),
              a.push(r.BlockID),
              t = r.datasetElemID;
            break;
          case ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE:
            continue
        }
        ListManager.SDData.DeleteRow(t)
      }
    }
    Collab.AllowMessage() &&
      Collab.BuildMessage(ConstantData.CollabMessages.TimelineRemoveEvent, n, !0),
      a.length > 0 &&
      GlobalData.optManager.DeleteObjects(a, !0),
      GlobalData.optManager.Timeline_Format(i, !0),
      GlobalData.optManager.CompleteOperation()
  }
}

ListManager.LM.prototypeTimelineChangePosition = function (e, t) {
  let a = GlobalData.optManager.GetTimeline();
  if (isNaN(a)) return Utils2.Alert(Resources.Strings.SelectTimeline);
  null == t &&
    GlobalData.optManager.CloseEdit();
  let r = GlobalData.optManager.GetObjectPtr(a, !0);
  if (
    null == r ||
    r.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return Utils2.Alert(Resources.Strings.SelectTimeline);
  if (!(r.datasetTableID < 0)) {
    if (Collab.AllowMessage()) {
      Collab.BeginSecondaryEdit();
      var i = {
        eventPosition: e
      }
    }
    selectionManager = Business.GetSelectionBusinessManager(a, !1),
      selectedList = Business.GetSelectedObjectsInChart(selectionManager, a);
    for (let t = 0; t < selectedList.length; t++) {
      let a = selectedList[t],
        r = GlobalData.optManager.GetObjectPtr(a, !0);
      if (null != r) switch (r.objecttype) {
        case ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE:
          let t = ListManager.SDData.GetValue(
            r.datasetElemID,
            ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_TABLEID]
          ),
            a = parseInt(t),
            i = ListManager.SDData.GetNumRows(a, '', '');
          for (let e = 0; e < i; e++) {
            let t = ListManager.SDData.GetRow(a, '', '', e);
            ListManager.SDData.UpdateValue(
              t,
              ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.POSITION],
              ''
            )
          }
          ListManager.SDData.UpdateValue(
            r.datasetElemID,
            ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_POSITION],
            e.toString()
          );
          break;
        case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL:
          r = GlobalData.optManager.GetObjectPtr(r.associd);
        case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT:
          ListManager.SDData.UpdateValue(
            r.datasetElemID,
            ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.POSITION],
            e.toString()
          )
      }
    }
    GlobalData.optManager.Timeline_Format(r, !0),
      Collab.AllowMessage() &&
      Collab.BuildMessage(ConstantData.CollabMessages.TimelineChangePosition, i, !0),
      GlobalData.optManager.CompleteOperation()
  }
};

ListManager.LM.prototype.TimelineChangeType = function (e, t) {
  var a = function (t) {
    u = GlobalData.optManager.GetObjectPtr(t, !0),
      sobj = GlobalData.optManager.GetObjectPtr(u.associd, !0);
    let a = u.datasetElemID;
    if (null != sobj) {
      let e = GlobalData.objectStore.GetObject(sobj.DataID);
      if (s = e.Data.runtimeText.text, D.push(sobj.BlockID), sobj.NoteID > 0) {
        let e = GlobalData.objectStore.GetObject(sobj.NoteID);
        l = e.Data.runtimeText.text
      }
    }
    o = ListManager.SDData.GetValue(
      a,
      ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.START]
    ),
      D.push(u.BlockID);
    let r = {
      Label: s,
      Start: o,
      EventType: e
    };
    null != l &&
      (r.Note = l),
      S = GlobalData.optManager.TimelineCreateEvent(r, a, i),
      ListManager.SDData.UpdateValue(
        a,
        ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.BLOCKID],
        S.toString()
      ),
      u.datasetElemID = - 1
  };
  let r = GlobalData.optManager.GetTimeline();
  if (isNaN(r)) return Utils2.Alert(Resources.Strings.SelectTimeline);
  null == t &&
    GlobalData.optManager.CloseEdit();
  let i = GlobalData.optManager.GetObjectPtr(r, !0);
  if (
    null == i ||
    i.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return Utils2.Alert(Resources.Strings.SelectTimeline);
  if (i.datasetTableID < 0) return;
  if (Collab.AllowMessage()) {
    Collab.BeginSecondaryEdit();
    var n = {
      eventType: e
    }
  }
  Collab.AllowMessage() &&
    Collab.BuildMessage(ConstantData.CollabMessages.TimelineChangeType, n, !0),
    selectionManager = Business.GetSelectionBusinessManager(r, !1),
    selectedList = Business.GetSelectedObjectsInChart(selectionManager, r);
  let o,
    s,
    l,
    S,
    c,
    u,
    p = ListManager.SDData.GetValue(
      i.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_TABLEID]
    ),
    d = parseInt(p),
    D = [];
  if (- 1 !== selectedList.indexOf(r)) {
    selectedList = [];
    let t = ListManager.SDData.GetNumRows(d, '', '');
    ListManager.SDData.UpdateValue(
      i.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.DEF_EVENT],
      e.toString()
    );
    for (let e = 0; e < t; e++) {
      let t = ListManager.SDData.GetRow(d, '', '', e);
      c = ListManager.SDData.GetValue(
        t,
        ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.BLOCKID]
      ),
        c = parseInt(c),
        isNaN(c) ||
        selectedList.push(c)
    }
  }
  let g,
    h = selectedList.length,
    m = {};
  for (let e = 0; e < h; e++) {
    g = selectedList[e];
    let t = GlobalData.optManager.GetObjectPtr(g);
    if (null != t) switch (t.objecttype) {
      case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL:
        g = t.associd;
      case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT:
        !0 !== m[g] &&
          (m[g] = !0, a(g))
    }
  }
  GlobalData.optManager.DeleteObjects(D, !0),
    GlobalData.optManager.Timeline_Format(i, !0),
    GlobalData.optManager.CompleteOperation()
};

ListManager.LM.prototype.TimelineChangeDate = function (e, t, a, r) {
  let i = GlobalData.optManager.GetTimeline();
  if (isNaN(i)) return Utils2.Alert(Resources.Strings.SelectTimeline);
  null == r &&
    GlobalData.optManager.CloseEdit();
  let n = GlobalData.optManager.GetObjectPtr(i, !1);
  if (
    null == n ||
    n.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return Utils2.Alert(Resources.Strings.SelectTimeline);
  if (Collab.AllowMessage()) {
    Collab.BeginSecondaryEdit();
    var o = {
      startDate: e,
      duration: t,
      units: a
    }
  }
  ListManager.SDData.UpdateValue(
    n.datasetElemID,
    ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.AUTO],
    !1
  ),
    ListManager.SDData.UpdateValue(
      n.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START],
      e.toString()
    ),
    ListManager.SDData.UpdateValue(
      n.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH],
      t.toString()
    ),
    ListManager.SDData.UpdateValue(
      n.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.UNITS],
      a.toString()
    ),
    GlobalData.optManager.Timeline_Format(n, !0),
    Collab.AllowMessage() &&
    Collab.BuildMessage(ConstantData.CollabMessages.TimelineChangeDate, o, !0),
    GlobalData.optManager.CompleteOperation()
};

ListManager.LM.prototype.TimelineSetAuto = function (e) {
  let t = GlobalData.optManager.GetTimeline();
  if (isNaN(parseInt(t))) return Utils2.Alert(Resources.Strings.SelectTimeline);
  let a = GlobalData.optManager.GetObjectPtr(t, !1);
  if (
    null == a ||
    a.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return Utils2.Alert(Resources.Strings.SelectTimeline);
  if (null == e && GlobalData.optManager.CloseEdit(), Collab.AllowMessage()) {
    Collab.BeginSecondaryEdit();
    var r = {}
  }
  a = GlobalData.optManager.GetObjectPtr(t, !0),
    ListManager.SDData.UpdateValue(
      a.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.AUTO],
      !0
    ),
    GlobalData.optManager.Timeline_Format(a, !0),
    Collab.AllowMessage() &&
    Collab.BuildMessage(ConstantData.CollabMessages.TimelineSetAuto, r, !0),
    GlobalData.optManager.CompleteOperation()
};

ListManager.LM.prototype.TimelineMoveEvent = function (e, t, a, r) {
  if (0 === a || e < 0) return !1;
  for (let e = 0; e < t.length; e++) {
    let a = GlobalData.optManager.GetObjectPtr(t[e]);
    if (
      a.objecttype == ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
    ) return !1;
    a.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_EVENT &&
      a.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL &&
      (t.splice(e, 1), e--)
  }
  null == r &&
    GlobalData.optManager.CloseEdit();
  var i = new Date(Constants.TimelineMinYear, 0, 1);
  let n = Utils2.JSDateToFiletime(i),
    o = GlobalData.optManager.GetObjectPtr(e, !0);
  if (
    o.objecttype === ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL &&
    o.associd &&
    (o = GlobalData.optManager.GetObjectPtr(o.associd)),
    null == o
  ) return !1;
  let s = ListManager.SDData.GetTableID(o.datasetID, ListManager.DataTableNames.NG_TIMELINE, !0),
    l = ListManager.SDData.GetRow(s, '', '', 0),
    S = ListManager.SDData.GetValue(
      l,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.BLOCKID]
    );
  if (S = parseInt(S), isNaN(S)) return !1;
  let c = GlobalData.optManager.GetObjectPtr(S, !0);
  if (
    null == c ||
    c.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return !1;
  let u = GlobalData.optManager.GetObjectPtr(c.ParentFrameID, !0);
  if (null == u) return !1;
  selectedList = t,
    selectedList.indexOf(e) < 0 &&
    selectedList.push(e);
  let p = c.GetTable(!0),
    d = p.wd,
    D = p.rows[p.rows.length - 1],
    g = D.frame.y + c.r.y + D.frame.height / 2,
    h = ListManager.SDData.GetValue(
      c.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.LENGTH]
    );
  h = 24 * h * 60 * 60 * 1000 * 10000;
  let m = ListManager.SDData.GetValue(
    c.datasetElemID,
    ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.START]
  ),
    C = ListManager.SDData.GetValue(
      c.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.STARTTIME]
    );
  m = Utils2.ParseShapeDataDate(m) + Utils2.ParseShapeDataTime(C);
  for (let e = 0; e < selectedList.length; e++) {
    let t = GlobalData.optManager.GetObjectPtr(selectedList[e], !0);
    if (
      null == t ||
      t.objecttype != ConstantData.ObjectTypes.SD_OBJT_NG_EVENT
    ) continue;
    let a = t.r.y + t.r.height / 2;
    if (Utils2.IntersectRect(t.Frame, u.Frame)) {
      let e = (t.r.x - c.r.x) * (h / d);
      e += m;
      let r = Utils2.FiletimeToJSDate(e),
        i = r.getFullYear() + '-' + (1 + r.getMonth()) + '-' + r.getDate();
      if (
        e < n &&
        (
          Utils2.Alert(Resources.Strings.BelowMinDateTimeline),
          i = Constants.TimelineMinYear.toString() + '-01-01',
          e = Utils2.ParseShapeDataDate(i)
        ),
        0 === t.hooks.length
      ) {
        var y = ListManager.SDData.AddRow(t.datasetTableID);
        y > 0 &&
          (
            ListManager.SDData.UpdateValue(
              y,
              ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.LENGTH],
              '0'
            ),
            ListManager.SDData.UpdateValue(
              y,
              ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.BLOCKID],
              t.BlockID.toString()
            )
          ),
          t.datasetElemID = y
      }
      ListManager.SDData.UpdateValue(
        t.datasetElemID,
        ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.START],
        i.toString()
      ),
        ListManager.SDData.UpdateValue(
          t.datasetElemID,
          ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.STARTSECS],
          e.toString()
        ),
        a < g ? ListManager.SDData.UpdateValue(
          t.datasetElemID,
          ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.POSITION],
          'above-center'
        ) : ListManager.SDData.UpdateValue(
          t.datasetElemID,
          ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.POSITION],
          'below-center'
        )
    } else if (
      ListManager.SDData.DeleteRow(t.datasetElemID),
      t.datasetElemID = - 1,
      t.hooks.length > 0
    ) {
      var f = this.GetObjectPtr(this.theLinksBlockID, !0);
      this.DeleteLink(f, t.hooks[0].objid, t.BlockID, t.hooks[0].cellid, 0, !1)
    }
  }
  return GlobalData.optManager.Timeline_Format(c, !0),
    !0
};

ListManager.LM.prototype.GetTimeline = function () {
  let e = GlobalData.optManager.GetTargetSelect();
  if (isNaN(e)) return null;
  let t = GlobalData.optManager.GetObjectPtr(e, !1);
  if (null == t) return null;
  switch (t.objecttype) {
    case ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE:
      return e;
    case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT:
      return t.hooks.length > 0 ? t.hooks[0].objid : null;
    case ConstantData.ObjectTypes.SD_OBJT_NG_EVENT_LABEL:
      let a = GlobalData.optManager.GetObjectPtr(t.associd, !1);
      return a.hooks.length > 0 ? a.hooks[0].objid : null
  }
  return null
};

ListManager.LM.prototype.TimelineGenerateText = function () {
  let e = GlobalData.optManager.GetTimeline();
  isNaN(parseInt(e)) &&
    (
      e = function () {
        if (zList = GlobalData.optManager.ZList(), zList) for (len = zList.length, i = 0; i < len; i++) if (
          obj = GlobalData.optManager.GetObjectPtr(zList[i], !1),
          obj &&
          obj.objecttype === ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
        ) return zList[i];
        return !1
      }()
    );
  let t = GlobalData.optManager.GetObjectPtr(e, !1);
  if (
    null == t ||
    t.objecttype !== ConstantData.ObjectTypes.SD_OBJT_NG_TIMELINE
  ) return Utils2.Alert(Resources.Strings.SelectTimeline);
  let a,
    r,
    n,
    o = ListManager.SDData.GetValue(
      t.datasetElemID,
      ListManager.TimelineFieldNameList[ListManager.NGTimelineFields.EVENT_TABLEID]
    ),
    s = parseInt(o),
    l = ListManager.SDData.GetNumRows(s, '', ''),
    S = 'Date,Event Title',
    c = '';
  for (let e = 0; e < l; e++) {
    let t = ListManager.SDData.GetRow(s, '', '', e);
    if (
      lineBlockID = ListManager.SDData.GetValue(
        t,
        ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.BLOCKID]
      ),
      lineBlockID = parseInt(lineBlockID),
      isNaN(lineBlockID)
    ) return !1;
    if (
      lobj = GlobalData.optManager.GetObjectPtr(lineBlockID, !1),
      isNaN(lobj.associd)
    ) return !1;
    if (
      sobj = GlobalData.optManager.GetObjectPtr(lobj.associd, !1),
      null == lobj ||
      null == sobj
    ) return !1;
    n = ListManager.SDData.GetValue(
      t,
      ListManager.TimelineEventFieldNameList[ListManager.NGTimelineEventFields.START]
    ),
      c += n + ',',
      a = '';
    let i = GlobalData.objectStore.GetObject(sobj.DataID);
    if (
      i &&
      (a = i.Data.runtimeText.text),
      a = a.replace(/(\r\n|\n|\r)/gm, ''),
      c += a,
      sobj.NoteID > 0
    ) {
      S.indexOf('Note') < 0 &&
        (S += ',Note'),
        r = GlobalData.objectStore.GetObject(sobj.NoteID).Data.runtimeText.text,
        r = r.replace(/(\r\n|\n|\r)/gm, ''),
        c += ',' + r
    }
    c += '\n'
  }
  let u = function () {
    const e = GlobalData.optManager.GetDocumentName();
    return `${e &&
      e.length ? e : 'ExportText'}.csv`
  }();
  c = S + '\n' + c,
    GlobalData.optManager.ExportString(c, u)
};



ListManager.LM.prototype.PolyLRemoveNodes = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s = [],
    l = {},
    S = null,
    c = ConstantData.ActionTriggerType.LINEEND;
  Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit();
  var u = this.GetObjectPtr(this.theLinksBlockID, !0);
  if (null == (a = this.GetObjectPtr(e, !0))) return - 1;
  if (Collab.AllowMessage()) {
    var p = {};
    p.BlockID = e,
      p.targetseg = t,
      Collab.BuildMessage(ConstantData.CollabMessages.PolyLRemoveNodes, p, !1)
  }
  for (
    n = u.length,
    r = this.FindLink(u, e, !0);
    r >= 0 &&
    r < n &&
    u[r].targetid === e;
    r++
  ) this.GetObjectPtr(u[r].hookid, !0);
  if (
    o = Utils1.DeepCopy(a),
    a.LineType != ConstantData.LineType.POLYLINE
  ) return - 1;
  if ((i = a.polylist.segs.length) < 3 || t < 0 || t >= i - 1) return - 1;
  if (
    GlobalData.optManager.ShowSVGSelectionState(e, !1),
    a.polylist.closed &&
    4 == a.polylist.segs.length
  ) {
    for (
      s = a.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null),
      a.polylist.closed = !1,
      s.splice(s.length - 1, 1),
      a.polylist.segs.splice(a.polylist.segs.length - 1, 1),
      r = 0;
      r < t + 1;
      r++
    ) s.push(s.shift()),
      a.polylist.segs.push(a.polylist.segs.shift());
    a.StartPoint = Utils1.DeepCopy(s[0]),
      a.EndPoint = Utils1.DeepCopy(s[s.length - 1]),
      Utils2.GetPolyRect(a.Frame, s);
    var d = a.StartPoint.x - a.Frame.x,
      D = a.StartPoint.y - a.Frame.y;
    for (r = 0; r < a.polylist.segs.length; r++) a.polylist.segs[r].pt.x = s[r].x - (a.Frame.x + d),
      a.polylist.segs[r].pt.y = s[r].y - (a.Frame.y + D);
    return a.UpdateFrame(this.Frame),
      this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
      this.MaintainLink(e, a, o, c, !1),
      GlobalData.optManager.AddToDirtyList(e),
      void GlobalData.optManager.CompleteOperation(null)
  }
  s = a.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null),
    t === i - 2 &&
    (
      a.EndPoint.x = a.polylist.segs[t].pt.x + a.StartPoint.x,
      a.EndPoint.y = a.polylist.segs[t].pt.y + a.StartPoint.y
    ),
    a.polylist.closed ||
    0 !== t ||
    (
      l.x = a.polylist.segs[1].pt.x + a.StartPoint.x,
      l.y = a.polylist.segs[1].pt.y + a.StartPoint.y,
      (S = {}).x = l.x - a.StartPoint.x,
      S.y = l.y - a.StartPoint.y,
      a.StartPoint.x = l.x,
      a.StartPoint.y = l.y
    );
  var g = t + 1;
  if (
    a.polylist.closed ? t === a.polylist.segs.length - 1 &&
      (g = t) : 0 === t &&
    (g = 0),
    a.polylist.segs.splice(g, 1),
    S
  ) for (r = 0; r < a.polylist.segs.length; r++) a.polylist.segs[r].pt.x -= S.x,
    a.polylist.segs[r].pt.y -= S.y;
  a.polylist.closed &&
    (
      a.polylist.segs[a.polylist.segs.length - 1].pt.x = a.polylist.segs[0].pt.x,
      a.polylist.segs[a.polylist.segs.length - 1].pt.y = a.polylist.segs[0].pt.y,
      a.EndPoint.x = a.StartPoint.x,
      a.EndPoint.y = a.StartPoint.y
    ),
    a.CalcFrame();
  var h = GlobalData.optManager.ActiveVisibleZList().indexOf(e);
  h >= 0 &&
    this.AddSVGObject(h, e, !0, !0),
    this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
    this.MaintainLink(e, a, o, c, !1),
    GlobalData.optManager.CompleteOperation(null)
};

ListManager.LM.prototype.PolyLAddNode = function (e, t, a, r) {
  var i,
    n,
    o,
    s,
    l = ConstantData.ActionTriggerType.LINEEND;
  if (
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    null == (i = this.GetObjectPtr(e, !0))
  ) return - 1;
  if (Collab.AllowMessage()) {
    var S = {};
    S.BlockID = e,
      S.targetseg = t,
      S.HitPt = Utils1.DeepCopy(a),
      Collab.BuildMessage(ConstantData.CollabMessages.PolyLAddNode, S, !1)
  }
  return o = Utils1.DeepCopy(i),
    i.LineType != ConstantData.LineType.POLYLINE ||
      (n = i.polylist.segs.length) >= ConstantData.Defines.SED_MaxPolySegs ||
      t < 0 ||
      t >= n - 1 ? - 1 : (
      GlobalData.optManager.ShowSVGSelectionState(e, !1),
      s = new PolySeg(
        i.polylist.segs[t].LineType,
        a.x - i.StartPoint.x,
        a.y - i.StartPoint.y
      ),
      i.polylist.segs.splice(t + 1, 0, s),
      i.CalcFrame(),
      GlobalData.optManager.ActiveVisibleZList().indexOf(e) >= 0 &&
      (
        GlobalData.optManager.AddToDirtyList(e),
        GlobalData.optManager.RenderDirtySVGObjects()
      ),
      this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
      this.MaintainLink(e, i, o, l, !1),
      GlobalData.optManager.AddToDirtyList(e),
      void (r && GlobalData.optManager.CompleteOperation(null))
    )
};

ListManager.LM.prototype.Wall_EditCorners = function (e) {
  var t = GlobalData.optManager.GetObjectPtr(e, !1);
  t &&
    t.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL &&
    t.polylist &&
    t.polylist.closed &&
    (
      GlobalData.optManager.HideAllSVGSelectionStates(),
      GlobalData.optManager.ForceWallCorners = !0,
      GlobalData.optManager.RenderAllSVGSelectionStates(),
      GlobalData.optManager.ForceWallCorners = !1
    )
};

ListManager.LM.prototype.PolyLSetSegmentType = function (e, t, a) {
  var r,
    i,
    n,
    o,
    s,
    l,
    S = {},
    c = ConstantData.ActionTriggerType.LINEEND;
  if (
    Collab.AllowMessage() &&
    Collab.BeginSecondaryEdit(),
    null == (r = this.GetObjectPtr(e, !0))
  ) return - 1;
  if (l = Utils1.DeepCopy(r), Collab.AllowMessage()) {
    var u = {};
    u.BlockID = e,
      u.targetseg = t,
      u.LineTypeStr = a,
      Collab.BuildMessage(ConstantData.CollabMessages.PolyLSetSegmentType, u, !1)
  }
  if (r.LineType != ConstantData.LineType.POLYLINE) return - 1;
  if ((n = r.polylist.segs.length) < 2 || t < 0 || t > n - 2) return - 1;
  switch (
  t++,
  i = ConstantData.LineType[a],
  r.polylist.segs[t].LineType
  ) {
    case ConstantData.LineType.PARABOLA:
    case ConstantData.LineType.ARCLINE:
      s = r.polylist.segs[t].param
  }
  if (r.polylist.segs[t].LineType === i) return - 1;
  switch (
  GlobalData.optManager.ShowSVGSelectionState(e, !1),
  r.polylist.segs[t].LineType = i,
  p = r.polylist.segs[t].pt.x - r.polylist.segs[t - 1].pt.x,
  d = r.polylist.segs[t].pt.y - r.polylist.segs[t - 1].pt.y,
  o = Math.sqrt(p * p + d * d),
  i
  ) {
    case ConstantData.LineType.PARABOLA:
      r.polylist.segs[t].param = s ||
        o / 4,
        r.polylist.segs[t].ShortRef = 0;
      break;
    case ConstantData.LineType.ARCLINE:
      r.polylist.segs[t].param = s ||
        - o / 4,
        r.polylist.segs[t].ShortRef = 0;
      break;
    case ConstantData.LineType.ARCSEGLINE:
      S = r.Pr_PolyLGetArcQuadrant(
        r.polylist.segs[t - 1].pt,
        r.polylist.segs[t].pt,
        r.polylist.segs[t].param
      ),
        r.polylist.segs[t].param = 0,
        r.polylist.segs[t].ShortRef = S.ShortRef;
      break;
    case ConstantData.LineType.LINE:
      r.polylist.segs[t].param = 0,
        r.polylist.segs[t].ShortRef = 0
  }
  r.CalcFrame();
  var p = 0,
    d = 0;
  r.r.x < 0 &&
    (p = - r.r.x),
    r.r.y < 0 &&
    (d = - r.r.y),
    (p || d) &&
    r.OffsetShape(p, d);
  var D = GlobalData.optManager.ActiveVisibleZList().indexOf(e);
  return D >= 0 &&
    this.AddSVGObject(D, e, !0, !0),
    this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
    this.MaintainLink(e, r, l, c, !1),
    GlobalData.optManager.CompleteOperation(null),
    0
};



ListManager.LM.prototype.CN_GetNShapes = function (e) {
  var t,
    a = 0;
  return (t = this.GetObjectPtr(e, !1)) &&
    t.arraylist &&
    (
      a = t.arraylist.hook.length - SDJS.ConnectorDefines.SEDA_NSkip
    ) < 0 &&
    (a = 0),
    a
};

ListManager.LM.prototype.CN_GetConnectorShape = function (e, t) {
  var a,
    r,
    i,
    n = SDJS.ConnectorDefines,
    o = SDJS.ConnectorDefines.SEDA_NSkip;
  if ((a = this.GetObjectPtr(e, !1)) && a.arraylist) if (r = a.arraylist.hook.length - o, t < 0 && (t = r - 1), t >= 0 && t < r) i = a.arraylist.hook[SDJS.ConnectorDefines.SEDA_NSkip + t].id;
  else if (r >= 0) {
    if (a.arraylist.hook[n.A_Cl].id >= 0) return a.arraylist.hook[n.A_Cl].id;
    if (a.arraylist.hook[n.A_Cr].id >= 0) return a.arraylist.hook[n.A_Cr].id
  }
  return i
};

ListManager.LM.prototype.CN_GetConnectorShapeList = function (e, t, a) {
  var r,
    i,
    n,
    o = [];
  if (
    (r = this.GetObjectPtr(e, !1)) &&
    r.arraylist &&
    (
      i = r.arraylist.hook.length - SDJS.ConnectorDefines.SEDA_NSkip
    ) > 0
  ) if (a < 0 && (a = i), t < a) for (t < 0 && (t = 0), a > i && (a = i), n = t; n < a; n++) o.push(
    r.arraylist.hook[n + SDJS.ConnectorDefines.SEDA_NSkip].id
  );
    else if (t >= a) for (a < 0 && (a = 0), t > i - 1 && (t = i - 1), n = t; n >= a; n--) o.push(
      r.arraylist.hook[n + SDJS.ConnectorDefines.SEDA_NSkip].id
    );
  return o
};

ListManager.LM.prototype.CN_SetStyle = function (e, t) {
  var a,
    r,
    i,
    n,
    o,
    s,
    l = ConstantData.SEDA_Styles;
  (a = this.GetObjectPtr(e, !0)) &&
    a.arraylist &&
    (
      t == ConstantData.SEDA_Styles.SEDA_Linear &&
      (
        t = a.arraylist.styleflags,
        t = Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Stagger, !1),
        t = Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_PerpConn, !1),
        t = Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Linear, !0)
      ),
      t == ConstantData.SEDA_Styles.SEDA_Stagger &&
      (
        t = a.arraylist.styleflags,
        t = a.arraylist.styleflags & ConstantData.SEDA_Styles.SEDA_Stagger ? Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Stagger, !1) : Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Stagger, !0)
      ),
      t == ConstantData.SEDA_Styles.SEDA_Radial &&
      (
        t = a.arraylist.styleflags,
        t = a.arraylist.styleflags & ConstantData.SEDA_Styles.SEDA_Radial ? Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Radial, !1) : Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Radial, !0)
      ),
      a.arraylist.styleflags !== t &&
      (
        o = a.arraylist.styleflags & l.SEDA_StartLeft,
        s = a.arraylist.styleflags & l.SEDA_ReverseCol,
        i = a.arraylist.styleflags & l.SEDA_BothSides ||
        0 == (a.arraylist.styleflags & l.SEDA_PerpConn),
        n = t & l.SEDA_BothSides ||
        0 == (t & l.SEDA_PerpConn),
        a.arraylist.styleflags = t,
        i != n ? (
          a.vertical = !a.vertical,
          !i &&
          o &&
          (
            a.arraylist.styleflags = Utils2.SetFlag(
              a.arraylist.styleflags,
              ConstantData.SEDA_Styles.SEDA_ReverseCol,
              !0
            )
          )
        ) : n &&
        s &&
        (
          a.arraylist.styleflags = Utils2.SetFlag(
            a.arraylist.styleflags,
            ConstantData.SEDA_Styles.SEDA_ReverseCol,
            !0
          )
        ),
        GlobalData.optManager.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_CHANGE),
        GlobalData.optManager.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
        a._FixHook(!1, !1),
        r = a.arraylist.hook.length,
        t & ConstantData.SEDA_Styles.SEDA_Radial ? r > 1 &&
          (a.arraylist.hook[1].gap = 0) : r > 1 &&
          0 === a.arraylist.hook[1].gap &&
        (a.arraylist.hook[1].gap = a.arraylist.ht),
        a.Pr_Format(e),
        Business.FindTreeTop(
          a,
          ConstantData.LinkFlags.SED_L_MOVE,
          {
            topconnector: - 1,
            topshape: - 1,
            foundtree: !1
          }
        ),
        GlobalData.optManager.CompleteOperation(null)
      )
    )
};



ListManager.LM.prototype.PolyLSplit = function (e, t, a) {
  var r, i, n, o, s, l, S, c, u = [], p = [], d = ConstantData.ActionTriggerType.LINEEND, D = {}, g = {}, h = !1, m = !1;
  if (Collab.AllowMessage() && Collab.BeginSecondaryEdit(),
    null == (r = this.GetObjectPtr(e, !0)))
    return -1;
  if (r.LineType != ConstantData.LineType.POLYLINE)
    return -1;
  if ((s = r.polylist.segs.length) < 3 || t >= s)
    return -1;
  if (Collab.AllowMessage() && !a) {
    var C = {};
    C.BlockID = e,
      C.targetseg = t,
      C.recursiveCall = a;
    var y = Collab.BuildMessage(ConstantData.CollabMessages.PolyLSplit, C, !1, !0)
  }
  if (GlobalData.optManager.ShowSVGSelectionState(e, !1),
    r.polylist.closed || 1 != t && t != r.polylist.segs.length - 1 || (m = !0),
    r.polylist.closed) {
    if (this instanceof ListManager.PolyLineContainer && r.MaintainDimensionThroughPolygonOpennessChange(!1),
      s = r.polylist.segs.length,
      t < (o = (u = r.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null)).length) - 2) {
      for (D.x = u[t + 1].x,
        D.y = u[t + 1].y,
        n = t + 1; n < s; n++)
        r.polylist.segs[n].pt.x += r.StartPoint.x - D.x,
          r.polylist.segs[n].pt.y += r.StartPoint.y - D.y;
      for (r.polylist.segs.shift(),
        n = 1; n <= t; n++)
        g = Utils1.DeepCopy(r.polylist.segs[0]),
          r.polylist.segs.shift(),
          g.pt.x += r.StartPoint.x - D.x,
          g.pt.y += r.StartPoint.y - D.y,
          r.polylist.segs.push(g);
      g = Utils1.DeepCopy(r.polylist.segs[0]),
        r.polylist.segs.push(g),
        r.StartPoint.x = D.x,
        r.StartPoint.y = D.y,
        r.EndPoint.x = D.x,
        r.EndPoint.y = D.y
    }
    r.polylist.closed = !1,
      r.polylist.segs[o - 1].pt.y = 0,
      r instanceof ListManager.PolyLineContainer || (r.polylist.segs[o - 1].pt.x = -10,
        r.EndPoint.x -= 10),
      r.StyleRecord.Fill.Hatch = 0,
      r.maxhooks = 2,
      r.targflags |= ConstantData.HookFlags.SED_LC_Line | ConstantData.HookFlags.SED_LC_AttachToLine,
      r.hookflags |= ConstantData.HookFlags.SED_LC_Shape | ConstantData.HookFlags.SED_LC_Line,
      GlobalData.optManager.AddToDirtyList(e),
      r instanceof ListManager.PolyLineContainer ? t = r.polylist.segs.length - 2 : h = !0
  } else
    0 === t && (t = 1);
  if (!h) {
    c = GlobalData.optManager.GetPolyLineLinks(e, t);
    var f = {
      Frame: {
        x: r.Frame.x,
        y: r.Frame.y,
        width: r.Frame.width,
        height: r.Frame.height
      },
      StartPoint: {
        x: r.StartPoint.x,
        y: r.StartPoint.y
      },
      EndPoint: {
        x: r.EndPoint.x,
        y: r.EndPoint.y
      },
      StartArrowID: r.StartArrowID,
      EndArrowID: r.EndArrowID,
      StartArrowDisp: r.StartArrowDisp,
      EndArrowDisp: r.EndArrowDisp,
      ArrowSizeIndex: r.ArrowSizeIndex,
      Dimensions: r.Dimensions,
      objecttype: r.objecttype,
      dataclass: ConstantData.SDRShapeTypes.SED_S_Poly,
      TextFlags: r.TextFlags,
      bOverrideDefaultStyleOnDraw: !0,
      polylist: new PolyList()
    };
    for (f.StyleRecord = Utils1.DeepCopy(r.StyleRecord),
      o = (u = r.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null)).length,
      f.StartPoint.x = u[t].x,
      f.StartPoint.y = u[t].y,
      n = t; n < o; n++)
      S = n === t ? ConstantData.LineType.LINE : r.polylist.segs[n].LineType,
        f.polylist.segs.push(new PolySeg(S, u[n].x - f.StartPoint.x, u[n].y - f.StartPoint.y)),
        n > t && (f.polylist.segs[f.polylist.segs.length - 1] = Utils1.DeepCopy(r.polylist.segs[n]),
          f.polylist.segs[f.polylist.segs.length - 1].pt.x = u[n].x - f.StartPoint.x,
          f.polylist.segs[f.polylist.segs.length - 1].pt.y = u[n].y - f.StartPoint.y);
    f.EndPoint.x = r.EndPoint.x,
      f.EndPoint.y = r.EndPoint.y,
      r.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL ? 2 == f.polylist.segs.length ? (Utils2.GetPolyRect(f.Frame, [f.StartPoint, f.EndPoint]),
        i = new ListManager.Line(f)) : i = new ListManager.PolyLineContainer(f) : i = new ListManager.PolyLine(f),
      l = this.AddNewObject(i, !1, !0),
      i.CalcFrame(),
      r.polylist.segs.splice(t + 1),
      r.EndPoint.x = u[t].x,
      r.EndPoint.y = u[t].y,
      GlobalData.optManager.AddToDirtyList(e),
      GlobalData.optManager.AddToDirtyList(l)
  }
  r.CalcFrame();
  var L = GlobalData.optManager.ActiveVisibleZList().indexOf(e);
  if (L >= 0 && this.AddSVGObject(L, e, !0, !0),
    l && i && (this.IsTopMostVisibleLayer() ? this.RenderDirtySVGObjects() : this.RenderAllSVGObjects()),
    this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
    this.SetLinkFlag(l, ConstantData.LinkFlags.SED_L_MOVE),
    c && c.length && this.MoveLinks(l, e, c, null),
    this.MaintainLink(e, r, null, d, !1),
    l && this.MaintainLink(l, i, null, d, !1),
    l && i && i.objecttype == ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL && i.MoveBehindAllLinked() && GlobalData.optManager.RenderAllSVGObjects(),
    r instanceof ListManager.PolyLineContainer && 2 === r.polylist.segs.length) {
    var I = r.BlockID
      , T = r.objecttype;
    GlobalData.optManager.ChangeToLine(r, ConstantData.LineType.LINE, 0),
      (r = GlobalData.optManager.GetObjectPtr(I, !1)) && (r.objecttype = T,
        r.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL && r.MoveBehindAllLinked() && GlobalData.optManager.RenderAllSVGObjects())
  }
  if (l ? p.push(l) : p.push(e),
    m && i && i.polylist && i.polylist.segs && i.polylist.segs.length > 2 && (a || GlobalData.optManager.PolyLSplit(i.BlockID, 1, !0)),
    !a) {
    if (r && r instanceof ListManager.PolyLineContainer && i) {
      var b = {
        x: i.Frame.x + i.Frame.width / 2,
        y: i.Frame.y + i.Frame.height / 2
      }
        , M = {
          x: r.Frame.x + r.Frame.width / 2,
          y: r.Frame.y + r.Frame.height / 2
        }
        , P = b.x > M.x ? 10 : -10;
      Math.abs(b.x - M.x) < 5 && (P = 0);
      var R = b.y > M.y ? 10 : -10;
      Math.abs(b.y - M.y) < 5 && (R = 0),
        GlobalData.optManager.OffsetShape(i.BlockID, P, R, ConstantData.ActionTriggerType.TABLE_SELECT),
        GlobalData.optManager.AddToDirtyList(i.BlockID)
    }
    y && (Collab.IsSecondary() && Collab.CreateList.length && (y.Data.CreateList = [],
      y.Data.CreateList = y.Data.CreateList.concat(Collab.CreateList)),
      Collab.SendMessage(y)),
      GlobalData.optManager.CompleteOperation(p)
  }
  return l
}

ListManager.LM.prototype.PolyLJoin = function (e, t, a, r, i) {
  var n, o, s, l, S, c, u, p, d, D, g, h, m, C, y, f = null, L = null, I = null, T = null, b = [], M = [], P = !1, R = [], A = !1, _ = ConstantData.ActionTriggerType.LINEEND, E = {
    x: 0,
    y: 0
  }, w = {}, F = ConstantData.Defines.SED_KnobSize, v = -1, G = GlobalData.optManager.ActiveVisibleZList(), N = !1;
  if (null == (f = this.GetObjectPtr(e, !0)))
    return -1;
  if (null == (L = this.GetObjectPtr(a, !0)))
    return -1;
  if (h = f.DataID,
    L.DataID >= 0 && (h = L.DataID),
    m = f.NoteID,
    L.NoteID >= 0 && (m = L.NoteID),
    y = f.CommentID,
    L.CommentID >= 0 && (y = L.CommentID),
    C = f.HyperlinkText,
    L.HyperlinkText && (C = L.HyperlinkText),
    r !== ConstantData.HookPts.SED_WTL && r !== ConstantData.HookPts.SED_WTR || (r = ConstantData.HookPts.SED_KTL),
    e === a && f.LineType === ConstantData.LineType.POLYLINE) {
    A = f.polylist.closed,
      f.polylist.closed = !0,
      s = f.polylist.segs.length,
      f.polylist.segs[s - 1].pt.x = f.polylist.segs[0].pt.x,
      f.polylist.segs[s - 1].pt.y = f.polylist.segs[0].pt.y,
      f.EndPoint.x = f.StartPoint.x,
      f.EndPoint.y = f.StartPoint.y,
      f.objecttype !== ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL && this.OpenShapeEdit(e);
    var k = -1;
    return f instanceof ListManager.PolyLineContainer && !A && !0 !== i && (f.MaintainDimensionThroughPolygonOpennessChange(f.polylist.closed),
      k = -2),
      f.CalcFrame(),
      GlobalData.optManager.AddToDirtyList(f.BlockID),
      this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
      this.MaintainLink(e, f, null, _, !1),
      k
  }
  if (f.LineType === ConstantData.LineType.POLYLINE ? (I = f,
    T = L,
    M.push(a),
    c = e) : L.LineType === ConstantData.LineType.POLYLINE && (I = L,
      T = f,
      u = t,
      t = r,
      r = u,
      M.push(e),
      c = a),
    null == I) {
    M.push(a),
      M.push(e),
      v = Math.min(G.indexOf(a), G.indexOf(e));
    var U = {
      Frame: {
        x: f.Frame.x,
        y: f.Frame.x,
        width: f.Frame.width,
        height: f.Frame.height
      },
      inside: {
        x: f.inside.x,
        y: f.inside.x,
        width: f.inside.width,
        height: f.inside.height
      },
      StartPoint: {
        x: f.StartPoint.x,
        y: f.StartPoint.y
      },
      EndPoint: {
        x: f.EndPoint.x,
        y: f.EndPoint.y
      },
      flags: ConstantData.ObjFlags.SEDO_Erase | ConstantData.ObjFlags.SEDO_EraseOnGrow,
      extraflags: ConstantData.ExtraFlags.SEDE_SideKnobs,
      StartArrowID: L.StartArrowID,
      EndArrowID: L.EndArrowID,
      StartArrowDisp: L.StartArrowDisp,
      EndArrowDisp: L.EndArrowDisp,
      ArrowSizeIndex: L.ArrowSizeIndex,
      TextFlags: f.TextFlags,
      objecttype: f.objecttype,
      Dimensions: f.Dimensions,
      dataclass: ConstantData.SDRShapeTypes.SED_S_Poly,
      polylist: new PolyList()
    };
    for (0 === L.StartArrowID && f.StartArrowID > 0 && (U.StartArrowID = f.StartArrowID,
      U.StartArrowDisp = f.StartArrowDisp,
      U.ArrowSizeIndex = f.ArrowSizeIndex),
      0 === L.EndArrowID && f.EndArrowID > 0 && (U.EndArrowID = f.EndArrowID,
        U.EndArrowDisp = f.EndArrowDisp,
        U.ArrowSizeIndex = f.ArrowSizeIndex),
      U.StyleRecord = Utils1.DeepCopy(f.StyleRecord),
      U.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL && (U.StyleRecord.Fill.Paint.FillType = ConstantData.FillTypes.SDFILL_TRANSPARENT),
      U.StyleRecord.Fill.Hatch = 0,
      o = (b = f.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null)).length,
      n = 0; n < o; n++)
      switch (p = 0 === n || f.LineType === ConstantData.LineType.SEGLINE ? ConstantData.LineType.LINE : f.LineType,
      U.polylist.segs.push(new PolySeg(p, b[n].x - f.StartPoint.x, b[n].y - f.StartPoint.y)),
      p) {
        case ConstantData.LineType.ARCLINE:
          f.IsReversed ? U.polylist.segs[U.polylist.segs.length - 1].param = f.CurveAdjust : U.polylist.segs[U.polylist.segs.length - 1].param = -f.CurveAdjust;
          break;
        case ConstantData.LineType.ARCSEGLINE:
          g = ListManager.PolyLine.prototype.Pr_PolyLGetArcQuadrant.call(null, b[n - 1], b[n], 0),
            U.polylist.segs[U.polylist.segs.length - 1].param = g.param,
            U.polylist.segs[U.polylist.segs.length - 1].ShortRef = g.ShortRef
      }
    null == (I = gBusinessManager.AddNewPolyLine(f.objecttype, U)) && (I = new ListManager.PolyLine(U)),
      I && ConstantData.LineType.ARCSEGLINE,
      T = L,
      P = !0
  }
  if (t === ConstantData.HookPts.SED_KTL)
    var J = {
      x: I.StartPoint.x,
      y: I.StartPoint.y
    };
  else
    J = {
      x: I.EndPoint.x,
      y: I.EndPoint.y
    };
  if (r === ConstantData.HookPts.SED_KTL)
    var x = {
      x: T.StartPoint.x,
      y: T.StartPoint.y
    };
  else
    x = {
      x: T.EndPoint.x,
      y: T.EndPoint.y
    };
  if (l = J.x - x.x,
    S = J.y - x.y,
    T.StartPoint.x += l,
    T.StartPoint.y += S,
    T.EndPoint.x += l,
    T.EndPoint.y += S,
    (o = (b = T.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null)).length) + (s = I.polylist.segs.length) > ConstantData.Defines.SED_MaxPolySegs)
    return Utils2.Alert(Resources.Strings.MaxPolySegs, null),
      -1;
  if (t === ConstantData.HookPts.SED_KTL) {
    if (_ = ConstantData.ActionTriggerType.LINESTART,
      r === ConstantData.HookPts.SED_KTL) {
      for (l = I.StartPoint.x - b[o - 1].x,
        S = I.StartPoint.y - b[o - 1].y,
        n = 0; n < s; n++)
        I.polylist.segs[n].pt.x += l,
          I.polylist.segs[n].pt.y += S;
      for (I.StartPoint.x = b[o - 1].x,
        I.StartPoint.y = b[o - 1].y,
        n = 1; n < o; n++) {
        switch (T.LineType) {
          case ConstantData.LineType.POLYLINE:
            E.x = I.polylist.segs[0].pt.x,
              E.y = I.polylist.segs[0].pt.y,
              I.polylist.segs[0] = Utils1.DeepCopy(T.polylist.segs[n]),
              I.polylist.segs[0].pt.x = E.x,
              I.polylist.segs[0].pt.y = E.y,
              I.polylist.segs[0].param = -I.polylist.segs[0].param;
            break;
          case ConstantData.LineType.ARCLINE:
            I.polylist.segs[0].LineType = T.LineType,
              T.IsReversed ? I.polylist.segs[0].param = -T.CurveAdjust : I.polylist.segs[0].param = T.CurveAdjust;
            break;
          case ConstantData.LineType.ARCSEGLINE:
            I.polylist.segs[0].LineType = T.LineType,
              I.polylist.segs[0].param = 0,
              g = I.Pr_PolyLGetArcQuadrant(b[n], b[n - 1], 0),
              I.polylist.segs[0].param = g.param,
              I.polylist.segs[0].ShortRef = g.ShortRef;
            break;
          default:
            I.polylist.segs[0].LineType = ConstantData.LineType.LINE
        }
        I.polylist.segs.unshift(new PolySeg(ConstantData.LineType.LINE, b[n].x - I.StartPoint.x, b[n].y - I.StartPoint.y))
      }
    } else {
      for (l = I.StartPoint.x - b[0].x,
        S = I.StartPoint.y - b[0].y,
        n = 0; n < s; n++)
        I.polylist.segs[n].pt.x += l,
          I.polylist.segs[n].pt.y += S;
      switch (I.StartPoint.x = b[0].x,
      I.StartPoint.y = b[0].y,
      T.LineType) {
        case ConstantData.LineType.POLYLINE:
          E.x = I.polylist.segs[0].pt.x,
            E.y = I.polylist.segs[0].pt.y,
            I.polylist.segs[0] = Utils1.DeepCopy(T.polylist.segs[o - 1]),
            I.polylist.segs[0].pt.x = E.x,
            I.polylist.segs[0].pt.y = E.y;
          break;
        case ConstantData.LineType.ARCLINE:
          I.polylist.segs[0].LineType = T.LineType,
            T.IsReversed ? I.polylist.segs[0].param = T.CurveAdjust : I.polylist.segs[0].param = -T.CurveAdjust;
          break;
        case ConstantData.LineType.ARCSEGLINE:
          I.polylist.segs[0].LineType = T.LineType,
            I.polylist.segs[0].param = 0,
            g = I.Pr_PolyLGetArcQuadrant(b[o - 2], b[o - 1], 0),
            I.polylist.segs[0].param = g.param,
            I.polylist.segs[0].ShortRef = g.ShortRef;
          break;
        default:
          I.polylist.segs[0].LineType = ConstantData.LineType.LINE
      }
      for (n = o - 2; n >= 0; n--)
        if (I.polylist.segs.unshift(new PolySeg(ConstantData.LineType.LINE, b[n].x - I.StartPoint.x, b[n].y - I.StartPoint.y)),
          n > 0)
          switch (T.LineType) {
            case ConstantData.LineType.POLYLINE:
              E.x = I.polylist.segs[0].pt.x,
                E.y = I.polylist.segs[0].pt.y,
                I.polylist.segs[0] = Utils1.DeepCopy(T.polylist.segs[n]),
                I.polylist.segs[0].pt.x = E.x,
                I.polylist.segs[0].pt.y = E.y;
              break;
            case ConstantData.LineType.ARCSEGLINE:
              I.polylist.segs[0].LineType = T.LineType,
                w.x = b[n].x - I.StartPoint.x,
                w.y = b[n].y - I.StartPoint.y,
                I.polylist.segs[0].param = 0,
                g = I.Pr_PolyLGetArcQuadrant(b[n - 1], b[n], 0),
                I.polylist.segs[0].param = g.param,
                I.polylist.segs[0].ShortRef = g.ShortRef
          }
    }
    D = Utils2.InflatePoint(I.polylist.segs[0].pt, F),
      !I.polylist.closed && Utils2.pointInRect(D, I.polylist.segs[I.polylist.segs.length - 1].pt) && (I.polylist.closed = !0,
        I.polylist.segs[I.polylist.segs.length - 1].pt.x = I.polylist.segs[0].pt.x,
        I.polylist.segs[I.polylist.segs.length - 1].pt.y = I.polylist.segs[0].pt.y,
        I.EndPoint.x = I.StartPoint.x,
        I.EndPoint.y = I.StartPoint.y,
        I instanceof ListManager.PolyLine && !0 !== i && I.MaintainDimensionThroughPolygonOpennessChange(I.polylist.closed),
        I.objecttype !== ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL && this.OpenShapeEdit(I.BlockID),
        GlobalData.optManager.AddToDirtyList(I.BlockID))
  } else {
    if (r === ConstantData.HookPts.SED_KTL) {
      for (n = 1; n < o; n++) {
        switch (T.LineType) {
          case ConstantData.LineType.POLYLINE:
            p = T.polylist.segs[n].LineType;
            break;
          case ConstantData.LineType.ARCLINE:
          case ConstantData.LineType.ARCSEGLINE:
            p = T.LineType;
            break;
          default:
            p = ConstantData.LineType.LINE
        }
        switch (I.polylist.segs.push(new PolySeg(p, b[n].x - I.StartPoint.x, b[n].y - I.StartPoint.y)),
        T.LineType) {
          case ConstantData.LineType.ARCLINE:
            T.IsReversed ? I.polylist.segs[I.polylist.segs.length - 1].param = T.CurveAdjust : I.polylist.segs[I.polylist.segs.length - 1].param = -T.CurveAdjust;
            break;
          case ConstantData.LineType.POLYLINE:
            I.polylist.segs[I.polylist.segs.length - 1] = Utils1.DeepCopy(T.polylist.segs[n]),
              I.polylist.segs[I.polylist.segs.length - 1].pt.x = b[n].x - I.StartPoint.x,
              I.polylist.segs[I.polylist.segs.length - 1].pt.y = b[n].y - I.StartPoint.y;
            break;
          case ConstantData.LineType.ARCSEGLINE:
            w.x = b[n].x - I.StartPoint.x,
              w.y = b[n].y - I.StartPoint.y,
              d = I.polylist.segs.length,
              I.polylist.segs[d - 1].param = 0,
              g = I.Pr_PolyLGetArcQuadrant(b[n - 1], b[n], 0),
              I.polylist.segs[d - 1].param = g.param,
              I.polylist.segs[d - 1].ShortRef = g.ShortRef
        }
      }
      I.EndPoint.x = b[o - 1].x,
        I.EndPoint.y = b[o - 1].y
    } else {
      for (n = o - 2; n >= 0; n--) {
        switch (T.LineType) {
          case ConstantData.LineType.POLYLINE:
            p = T.polylist.segs[n + 1].LineType;
            break;
          case ConstantData.LineType.ARCLINE:
          case ConstantData.LineType.ARCSEGLINE:
            p = T.LineType;
            break;
          default:
            p = ConstantData.LineType.LINE
        }
        switch (I.polylist.segs.push(new PolySeg(p, b[n].x - I.StartPoint.x, b[n].y - I.StartPoint.y)),
        T.LineType) {
          case ConstantData.LineType.ARCLINE:
            T.IsReversed ? I.polylist.segs[I.polylist.segs.length - 1].param = -T.CurveAdjust : I.polylist.segs[I.polylist.segs.length - 1].param = T.CurveAdjust;
            break;
          case ConstantData.LineType.POLYLINE:
            I.polylist.segs[I.polylist.segs.length - 1] = Utils1.DeepCopy(T.polylist.segs[n + 1]),
              I.polylist.segs[I.polylist.segs.length - 1].pt.x = b[n].x - I.StartPoint.x,
              I.polylist.segs[I.polylist.segs.length - 1].pt.y = b[n].y - I.StartPoint.y,
              I.polylist.segs[I.polylist.segs.length - 1].param = -I.polylist.segs[I.polylist.segs.length - 1].param;
            break;
          case ConstantData.LineType.ARCSEGLINE:
            d = I.polylist.segs.length,
              I.polylist.segs[d - 1].param = 0,
              g = I.Pr_PolyLGetArcQuadrant(b[n + 1], b[n], 0),
              I.polylist.segs[d - 1].param = g.param,
              I.polylist.segs[d - 1].ShortRef = g.ShortRef
        }
      }
      I.EndPoint.x = b[0].x,
        I.EndPoint.y = b[0].y
    }
    D = Utils2.InflatePoint(I.polylist.segs[I.polylist.segs.length - 1].pt, F),
      Utils2.pointInRect(D, I.polylist.segs[0].pt) && (I.polylist.closed = !0,
        I.polylist.segs[I.polylist.segs.length - 1].pt.x = I.polylist.segs[0].pt.x,
        I.polylist.segs[I.polylist.segs.length - 1].pt.y = I.polylist.segs[0].pt.y,
        I.EndPoint.x = I.StartPoint.x,
        I.EndPoint.y = I.StartPoint.y,
        I.objecttype !== ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL && this.OpenShapeEdit(I.BlockID),
        I instanceof ListManager.PolyLine && !0 !== i && I.MaintainDimensionThroughPolygonOpennessChange(I.polylist.closed),
        GlobalData.optManager.AddToDirtyList(I.BlockID))
  }
  if (I.CalcFrame(),
    P)
    c = this.AddNewObject(I, !1, !0),
      Collab.AddNewBlockToSecondary(c),
      Collab.ClearCreateList(),
      Collab.AddToCreateList(c),
      N = !0,
      GlobalData.optManager.AddToDirtyList(c);
  else {
    var O = GlobalData.optManager.VisibleZList().indexOf(c);
    O >= 0 && this.AddSVGObject(O, c, !0, !0)
  }
  for ((I = GlobalData.optManager.GetObjectPtr(c, !1)) && I.DataID < 0 && (I.DataID = h,
    f.DataID === h ? (I.TextDirection = f.TextDirection,
      f.DataID = -1) : L.DataID === h && (I.TextDirection = L.TextDirection,
        L.DataID = -1),
    I.TextFlags = Utils2.SetFlag(I.TextFlags, ConstantData.TextFlags.SED_TF_HorizText, !I.TextDirection)),
    I && I.NoteID < 0 && (I.NoteID = m,
      f.NoteID === m ? f.NoteID = -1 : L.NoteID === m && (L.NoteID = -1),
      I.TextFlags = Utils2.SetFlag(I.TextFlags, ConstantData.TextFlags.SED_TF_HorizText, !I.TextDirection)),
    I && I.CommentID < 0 && (I.CommentID = y,
      f.CommentID === y ? f.CommentID = -1 : L.CommentID === y && (L.CommentID = -1),
      I.TextFlags = Utils2.SetFlag(I.TextFlags, ConstantData.TextFlags.SED_TF_HorizText, !I.TextDirection)),
    I && !I.HyperlinkText && (I.HyperlinkText = C),
    n = 0; n < M.length; n++)
    this.MoveLinks(c, M[n], null, null);
  if (this.DeleteObjects(M, !1),
    this.SetLinkFlag(c, ConstantData.LinkFlags.SED_L_MOVE),
    this.MaintainLink(c, I, null, _, !1),
    this.UpdateLinks(),
    R.push(c),
    this.SelectObjects(R, !1, !0),
    P && v >= 0) {
    var B = G.indexOf(c);
    G.splice(B, 1),
      G.splice(v, 0, c),
      N = !0,
      GlobalData.optManager.AddToDirtyList(c)
  }
  return I instanceof ListManager.PolyLineContainer && I.MoveBehindAllLinked() && (N = !0),
    N && (GlobalData.optManager.IsTopMostVisibleLayer() ? GlobalData.optManager.RenderDirtySVGObjects() : GlobalData.optManager.RenderAllSVGObjects()),
    c
}

ListManager.LM.prototype.PolyLRemoveNodes = function (e, t) {
  var a, r, i, n, o, s = [], l = {}, S = null, c = ConstantData.ActionTriggerType.LINEEND;
  Collab.AllowMessage() && Collab.BeginSecondaryEdit();
  var u = this.GetObjectPtr(this.theLinksBlockID, !0);
  if (null == (a = this.GetObjectPtr(e, !0)))
    return -1;
  if (Collab.AllowMessage()) {
    var p = {};
    p.BlockID = e,
      p.targetseg = t,
      Collab.BuildMessage(ConstantData.CollabMessages.PolyLRemoveNodes, p, !1)
  }
  for (n = u.length,
    r = this.FindLink(u, e, !0); r >= 0 && r < n && u[r].targetid === e; r++)
    this.GetObjectPtr(u[r].hookid, !0);
  if (o = Utils1.DeepCopy(a),
    a.LineType != ConstantData.LineType.POLYLINE)
    return -1;
  if ((i = a.polylist.segs.length) < 3 || t < 0 || t >= i - 1)
    return -1;
  if (GlobalData.optManager.ShowSVGSelectionState(e, !1),
    a.polylist.closed && 4 == a.polylist.segs.length) {
    for (s = a.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null),
      a.polylist.closed = !1,
      s.splice(s.length - 1, 1),
      a.polylist.segs.splice(a.polylist.segs.length - 1, 1),
      r = 0; r < t + 1; r++)
      s.push(s.shift()),
        a.polylist.segs.push(a.polylist.segs.shift());
    a.StartPoint = Utils1.DeepCopy(s[0]),
      a.EndPoint = Utils1.DeepCopy(s[s.length - 1]),
      Utils2.GetPolyRect(a.Frame, s);
    var d = a.StartPoint.x - a.Frame.x
      , D = a.StartPoint.y - a.Frame.y;
    for (r = 0; r < a.polylist.segs.length; r++)
      a.polylist.segs[r].pt.x = s[r].x - (a.Frame.x + d),
        a.polylist.segs[r].pt.y = s[r].y - (a.Frame.y + D);
    return a.UpdateFrame(this.Frame),
      this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
      this.MaintainLink(e, a, o, c, !1),
      GlobalData.optManager.AddToDirtyList(e),
      void GlobalData.optManager.CompleteOperation(null)
  }
  s = a.GetPolyPoints(ConstantData.Defines.NPOLYPTS, !1, !0, !1, null),
    t === i - 2 && (a.EndPoint.x = a.polylist.segs[t].pt.x + a.StartPoint.x,
      a.EndPoint.y = a.polylist.segs[t].pt.y + a.StartPoint.y),
    a.polylist.closed || 0 !== t || (l.x = a.polylist.segs[1].pt.x + a.StartPoint.x,
      l.y = a.polylist.segs[1].pt.y + a.StartPoint.y,
      (S = {}).x = l.x - a.StartPoint.x,
      S.y = l.y - a.StartPoint.y,
      a.StartPoint.x = l.x,
      a.StartPoint.y = l.y);
  var g = t + 1;
  if (a.polylist.closed ? t === a.polylist.segs.length - 1 && (g = t) : 0 === t && (g = 0),
    a.polylist.segs.splice(g, 1),
    S)
    for (r = 0; r < a.polylist.segs.length; r++)
      a.polylist.segs[r].pt.x -= S.x,
        a.polylist.segs[r].pt.y -= S.y;
  a.polylist.closed && (a.polylist.segs[a.polylist.segs.length - 1].pt.x = a.polylist.segs[0].pt.x,
    a.polylist.segs[a.polylist.segs.length - 1].pt.y = a.polylist.segs[0].pt.y,
    a.EndPoint.x = a.StartPoint.x,
    a.EndPoint.y = a.StartPoint.y),
    a.CalcFrame();
  var h = GlobalData.optManager.ActiveVisibleZList().indexOf(e);
  h >= 0 && this.AddSVGObject(h, e, !0, !0),
    this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
    this.MaintainLink(e, a, o, c, !1),
    GlobalData.optManager.CompleteOperation(null)
}

ListManager.LM.prototype.PolyLAddNode = function (e, t, a, r) {
  var i, n, o, s, l = ConstantData.ActionTriggerType.LINEEND;
  if (Collab.AllowMessage() && Collab.BeginSecondaryEdit(),
    null == (i = this.GetObjectPtr(e, !0)))
    return -1;
  if (Collab.AllowMessage()) {
    var S = {};
    S.BlockID = e,
      S.targetseg = t,
      S.HitPt = Utils1.DeepCopy(a),
      Collab.BuildMessage(ConstantData.CollabMessages.PolyLAddNode, S, !1)
  }
  return o = Utils1.DeepCopy(i),
    i.LineType != ConstantData.LineType.POLYLINE || (n = i.polylist.segs.length) >= ConstantData.Defines.SED_MaxPolySegs || t < 0 || t >= n - 1 ? -1 : (GlobalData.optManager.ShowSVGSelectionState(e, !1),
      s = new PolySeg(i.polylist.segs[t].LineType, a.x - i.StartPoint.x, a.y - i.StartPoint.y),
      i.polylist.segs.splice(t + 1, 0, s),
      i.CalcFrame(),
      GlobalData.optManager.ActiveVisibleZList().indexOf(e) >= 0 && (GlobalData.optManager.AddToDirtyList(e),
        GlobalData.optManager.RenderDirtySVGObjects()),
      this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
      this.MaintainLink(e, i, o, l, !1),
      GlobalData.optManager.AddToDirtyList(e),
      void (r && GlobalData.optManager.CompleteOperation(null)))
}

ListManager.LM.prototype.Wall_EditCorners = function (e) {
  var t = GlobalData.optManager.GetObjectPtr(e, !1);
  t && t.objecttype === ConstantData.ObjectTypes.SD_OBJT_FLOORPLAN_WALL && t.polylist && t.polylist.closed && (GlobalData.optManager.HideAllSVGSelectionStates(),
    GlobalData.optManager.ForceWallCorners = !0,
    GlobalData.optManager.RenderAllSVGSelectionStates(),
    GlobalData.optManager.ForceWallCorners = !1)
}

ListManager.LM.prototype.PolyLSetSegmentType = function (e, t, a) {
  var r, i, n, o, s, l, S = {}, c = ConstantData.ActionTriggerType.LINEEND;
  if (Collab.AllowMessage() && Collab.BeginSecondaryEdit(),
    null == (r = this.GetObjectPtr(e, !0)))
    return -1;
  if (l = Utils1.DeepCopy(r),
    Collab.AllowMessage()) {
    var u = {};
    u.BlockID = e,
      u.targetseg = t,
      u.LineTypeStr = a,
      Collab.BuildMessage(ConstantData.CollabMessages.PolyLSetSegmentType, u, !1)
  }
  if (r.LineType != ConstantData.LineType.POLYLINE)
    return -1;
  if ((n = r.polylist.segs.length) < 2 || t < 0 || t > n - 2)
    return -1;
  switch (t++,
  i = ConstantData.LineType[a],
  r.polylist.segs[t].LineType) {
    case ConstantData.LineType.PARABOLA:
    case ConstantData.LineType.ARCLINE:
      s = r.polylist.segs[t].param
  }
  if (r.polylist.segs[t].LineType === i)
    return -1;
  switch (GlobalData.optManager.ShowSVGSelectionState(e, !1),
  r.polylist.segs[t].LineType = i,
  p = r.polylist.segs[t].pt.x - r.polylist.segs[t - 1].pt.x,
  d = r.polylist.segs[t].pt.y - r.polylist.segs[t - 1].pt.y,
  o = Math.sqrt(p * p + d * d),
  i) {
    case ConstantData.LineType.PARABOLA:
      r.polylist.segs[t].param = s || o / 4,
        r.polylist.segs[t].ShortRef = 0;
      break;
    case ConstantData.LineType.ARCLINE:
      r.polylist.segs[t].param = s || -o / 4,
        r.polylist.segs[t].ShortRef = 0;
      break;
    case ConstantData.LineType.ARCSEGLINE:
      S = r.Pr_PolyLGetArcQuadrant(r.polylist.segs[t - 1].pt, r.polylist.segs[t].pt, r.polylist.segs[t].param),
        r.polylist.segs[t].param = 0,
        r.polylist.segs[t].ShortRef = S.ShortRef;
      break;
    case ConstantData.LineType.LINE:
      r.polylist.segs[t].param = 0,
        r.polylist.segs[t].ShortRef = 0
  }
  r.CalcFrame();
  var p = 0
    , d = 0;
  r.r.x < 0 && (p = -r.r.x),
    r.r.y < 0 && (d = -r.r.y),
    (p || d) && r.OffsetShape(p, d);
  var D = GlobalData.optManager.ActiveVisibleZList().indexOf(e);
  return D >= 0 && this.AddSVGObject(D, e, !0, !0),
    this.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
    this.MaintainLink(e, r, l, c, !1),
    GlobalData.optManager.CompleteOperation(null),
    0
}



ListManager.LM.prototype.CN_ChangeHook = function (e, t, a, r) {
  var i, n, o, s, l, S, c, u, p = {}, d = [];
  if (a) {
    if (e.hooks && e.hooks[t] && e.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE) {
      if ((o = Business.GetParentConnector(e.BlockID, null)) >= 0) {
        if (null == (i = GlobalData.optManager.GetObjectPtr(o, !1)))
          return;
        if (i._IsFlowChartConnector())
          return;
        if (i.objecttype === ConstantData.ObjectTypes.SD_OBJT_CAUSEEFFECT_BRANCH)
          return;
        if (i.objecttype === ConstantData.ObjectTypes.SD_OBJT_GENOGRAM_BRANCH)
          return;
        if ((l = i.arraylist.styleflags & ConstantData.SEDA_Styles.SEDA_CoManager) && i.arraylist.hook.length - SDJS.ConnectorDefines.SEDA_NSkip >= 1)
          return;
        if (i.IsAsstConnector())
          return;
        if (S = i.objecttype,
          c = i.subtype,
          e.subtype !== ConstantData.ObjectSubTypes.SD_SUBT_TASKMAP && e.subtype !== ConstantData.ObjectSubTypes.SD_SUBT_HUBMAP || (e.subtype = c),
          (n = GlobalData.optManager.FindChildArray(e.BlockID, -1)) < 0) {
          if (i.objecttype === ConstantData.ObjectTypes.SD_OBJT_DECISIONTREE_CONNECTOR)
            s = gDecisionTreeManager.GetChildConnectorStyle(e);
          else
            s = Business.GetChildConnectorStyle(e);
          if ((n = Business.AddConnector(100, 100, s, e.BlockID)) >= 0 && (u = GlobalData.optManager.GetObjectPtr(n, !0)),
            null == u)
            return;
          if (u.objecttype = S,
            u.subtype = c,
            S === ConstantData.ObjectTypes.SD_OBJT_DECISIONTREE_CONNECTOR)
            u.TextFlags = ConstantData.TextFlags.SED_TF_AttachC;
          l ? (p.x = 0,
            p.y = -ConstantData.SEDA_Styles.SEDA_CoManager) : p = s.connect,
            GlobalData.optManager.UpdateHook(n, -1, e.BlockID, s.hookpt, p, null),
            GlobalData.optManager.SetLinkFlag(e.BlockID, ConstantData.LinkFlags.SED_L_MOVE),
            u.Pr_Format(n),
            GlobalData.optManager.AddToDirtyList(n)
        }
        if (S === ConstantData.ObjectTypes.SD_OBJT_MINDMAP_CONNECTOR)
          gMindMapManager.ChangeHook(e, t, a, r)
      }
    } else if (e instanceof ListManager.SegmentedLine && e.objecttype === ConstantData.ObjectTypes.SD_OBJT_GANTT_CONNECTOR && e.hooks.length >= 2) {
      var D = new Point(0, 0);
      D.x = GlobalData.optManager.GetDependencyLineEndX(e),
        D.y = e.EndPoint.y;
      var g = this.svgObjectLayer.GetElementByID(e.BlockID);
      g && (e.EndPoint.x = D.x,
        e.EndPoint.y = D.y,
        e.ModifyShape(g, D.x, D.y, ConstantData.ActionTriggerType.SEGL_PRESERVE))
    }
  } else if (e.DrawingObjectBaseClass === ConstantData.DrawingObjectBaseClass.SHAPE)
    for (var h = {
      lindex: -1,
      id: -1,
      hookpt: 0
    }; GlobalData.optManager.FindChildArrayByIndex(e.BlockID, h) >= 0;)
      (n = h.id) >= 0 && 0 === GlobalData.optManager.CN_GetNShapes(n) && (d.push(n),
        GlobalData.optManager.DeleteObjects(d, !1))
}

ListManager.LM.prototype.CN_GetNShapes = function (e) {
  var t, a = 0;
  return (t = this.GetObjectPtr(e, !1)) && t.arraylist && (a = t.arraylist.hook.length - SDJS.ConnectorDefines.SEDA_NSkip) < 0 && (a = 0),
    a
}

ListManager.LM.prototype.CN_GetConnectorShape = function (e, t) {
  var a, r, i, n = SDJS.ConnectorDefines, o = SDJS.ConnectorDefines.SEDA_NSkip;
  if ((a = this.GetObjectPtr(e, !1)) && a.arraylist)
    if (r = a.arraylist.hook.length - o,
      t < 0 && (t = r - 1),
      t >= 0 && t < r)
      i = a.arraylist.hook[SDJS.ConnectorDefines.SEDA_NSkip + t].id;
    else if (r >= 0) {
      if (a.arraylist.hook[n.A_Cl].id >= 0)
        return a.arraylist.hook[n.A_Cl].id;
      if (a.arraylist.hook[n.A_Cr].id >= 0)
        return a.arraylist.hook[n.A_Cr].id
    }
  return i
}

ListManager.LM.prototype.CN_GetConnectorShapeList = function (e, t, a) {
  var r, i, n, o = [];
  if ((r = this.GetObjectPtr(e, !1)) && r.arraylist && (i = r.arraylist.hook.length - SDJS.ConnectorDefines.SEDA_NSkip) > 0)
    if (a < 0 && (a = i),
      t < a)
      for (t < 0 && (t = 0),
        a > i && (a = i),
        n = t; n < a; n++)
        o.push(r.arraylist.hook[n + SDJS.ConnectorDefines.SEDA_NSkip].id);
    else if (t >= a)
      for (a < 0 && (a = 0),
        t > i - 1 && (t = i - 1),
        n = t; n >= a; n--)
        o.push(r.arraylist.hook[n + SDJS.ConnectorDefines.SEDA_NSkip].id);
  return o
}

ListManager.LM.prototype.CN_SetStyle = function (e, t) {
  var a, r, i, n, o, s, l = ConstantData.SEDA_Styles;
  (a = this.GetObjectPtr(e, !0)) && a.arraylist && (t == ConstantData.SEDA_Styles.SEDA_Linear && (t = a.arraylist.styleflags,
    t = Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Stagger, !1),
    t = Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_PerpConn, !1),
    t = Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Linear, !0)),
    t == ConstantData.SEDA_Styles.SEDA_Stagger && (t = a.arraylist.styleflags,
      t = a.arraylist.styleflags & ConstantData.SEDA_Styles.SEDA_Stagger ? Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Stagger, !1) : Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Stagger, !0)),
    t == ConstantData.SEDA_Styles.SEDA_Radial && (t = a.arraylist.styleflags,
      t = a.arraylist.styleflags & ConstantData.SEDA_Styles.SEDA_Radial ? Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Radial, !1) : Utils2.SetFlag(t, ConstantData.SEDA_Styles.SEDA_Radial, !0)),
    a.arraylist.styleflags !== t && (o = a.arraylist.styleflags & l.SEDA_StartLeft,
      s = a.arraylist.styleflags & l.SEDA_ReverseCol,
      i = a.arraylist.styleflags & l.SEDA_BothSides || 0 == (a.arraylist.styleflags & l.SEDA_PerpConn),
      n = t & l.SEDA_BothSides || 0 == (t & l.SEDA_PerpConn),
      a.arraylist.styleflags = t,
      i != n ? (a.vertical = !a.vertical,
        !i && o && (a.arraylist.styleflags = Utils2.SetFlag(a.arraylist.styleflags, ConstantData.SEDA_Styles.SEDA_ReverseCol, !0))) : n && s && (a.arraylist.styleflags = Utils2.SetFlag(a.arraylist.styleflags, ConstantData.SEDA_Styles.SEDA_ReverseCol, !0)),
      GlobalData.optManager.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_CHANGE),
      GlobalData.optManager.SetLinkFlag(e, ConstantData.LinkFlags.SED_L_MOVE),
      a._FixHook(!1, !1),
      r = a.arraylist.hook.length,
      t & ConstantData.SEDA_Styles.SEDA_Radial ? r > 1 && (a.arraylist.hook[1].gap = 0) : r > 1 && 0 === a.arraylist.hook[1].gap && (a.arraylist.hook[1].gap = a.arraylist.ht),
      a.Pr_Format(e),
      Business.FindTreeTop(a, ConstantData.LinkFlags.SED_L_MOVE, {
        topconnector: -1,
        topshape: -1,
        foundtree: !1
      }),
      GlobalData.optManager.CompleteOperation(null)))
}
export default ListManager.LM;
